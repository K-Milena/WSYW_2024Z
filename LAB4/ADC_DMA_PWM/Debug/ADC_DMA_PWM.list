
ADC_DMA_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000740c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080075b0  080075b0  000085b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007978  08007978  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007980  08007980  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007988  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001dc  08007b64  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08007b64  00009614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7b5  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b91  00000000  00000000  000139c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00015558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a2  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175d7  00000000  00000000  0001692a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd32  00000000  00000000  0002df01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980ff  00000000  00000000  0003ac33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  000d2d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d6fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007594 	.word	0x08007594

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007594 	.word	0x08007594

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000eae:	f003 fe0d 	bl	8004acc <initialise_monitor_handles>
	printf("Semihosting\n");
 8000eb2:	4821      	ldr	r0, [pc, #132]	@ (8000f38 <main+0x90>)
 8000eb4:	f004 fbf6 	bl	80056a4 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 fcea 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f848 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 f9ae 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec4:	f000 f976 	bl	80011b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ec8:	f000 f8ac 	bl	8001024 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ecc:	f000 f8fc 	bl	80010c8 <MX_TIM4_Init>
  /* USER CODE BEGIN WHILE */
  uint16_t probka;
  float probka_float;
  uint16_t rozdzielczosc_probek;

  switch(hadc1.Init.Resolution)
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <main+0x94>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8000ed8:	d017      	beq.n	8000f0a <main+0x62>
 8000eda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8000ede:	d817      	bhi.n	8000f10 <main+0x68>
 8000ee0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000ee4:	d00e      	beq.n	8000f04 <main+0x5c>
 8000ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000eea:	d811      	bhi.n	8000f10 <main+0x68>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <main+0x50>
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d003      	beq.n	8000efe <main+0x56>
 8000ef6:	e00b      	b.n	8000f10 <main+0x68>
  {
  case ADC_RESOLUTION_12B:
	  rozdzielczosc_probek = 12;
 8000ef8:	230c      	movs	r3, #12
 8000efa:	80fb      	strh	r3, [r7, #6]
	  break;
 8000efc:	e008      	b.n	8000f10 <main+0x68>

  case ADC_RESOLUTION_10B:
  	  rozdzielczosc_probek = 10;
 8000efe:	230a      	movs	r3, #10
 8000f00:	80fb      	strh	r3, [r7, #6]
  	  break;
 8000f02:	e005      	b.n	8000f10 <main+0x68>

  case ADC_RESOLUTION_8B:
  	  rozdzielczosc_probek = 8;
 8000f04:	2308      	movs	r3, #8
 8000f06:	80fb      	strh	r3, [r7, #6]
  	  break;
 8000f08:	e002      	b.n	8000f10 <main+0x68>

  case ADC_RESOLUTION_6B:
  	  rozdzielczosc_probek = 6;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	80fb      	strh	r3, [r7, #6]
  	  break;
 8000f0e:	bf00      	nop

  }

  float napiecie_odniesienia = 3.3;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <main+0x98>)
 8000f12:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(&hadc1, adc_buf, ADC_BUF_LEN);
 8000f14:	2264      	movs	r2, #100	@ 0x64
 8000f16:	490b      	ldr	r1, [pc, #44]	@ (8000f44 <main+0x9c>)
 8000f18:	4808      	ldr	r0, [pc, #32]	@ (8000f3c <main+0x94>)
 8000f1a:	f000 fd6f 	bl	80019fc <HAL_ADC_Start_DMA>

  while (1)
  {
	  while(!conv_complete) {};
 8000f1e:	bf00      	nop
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <main+0xa0>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0fb      	beq.n	8000f20 <main+0x78>


	  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_3, adc_buf, ADC_BUF_LEN);
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <main+0x9c>)
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <main+0xa4>)
 8000f30:	f002 fc44 	bl	80037bc <HAL_TIM_PWM_Start_DMA>

	  while (1) {};
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <main+0x8c>
 8000f38:	080075b0 	.word	0x080075b0
 8000f3c:	200001f8 	.word	0x200001f8
 8000f40:	40533333 	.word	0x40533333
 8000f44:	20000348 	.word	0x20000348
 8000f48:	20000410 	.word	0x20000410
 8000f4c:	200002a0 	.word	0x200002a0

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	@ 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fc80 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b28      	ldr	r3, [pc, #160]	@ (800101c <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <SystemClock_Config+0xcc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <SystemClock_Config+0xd0>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fc4:	23c0      	movs	r3, #192	@ 0xc0
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fee5 	bl	8002da4 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe0:	f000 fa6e 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2103      	movs	r1, #3
 8001002:	4618      	mov	r0, r3
 8001004:	f002 f946 	bl	8003294 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100e:	f000 fa57 	bl	80014c0 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	@ 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001050:	2201      	movs	r2, #1
 8001052:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001064:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_ADC1_Init+0xa0>)
 8001066:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_ADC1_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001070:	2201      	movs	r2, #1
 8001072:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001082:	480e      	ldr	r0, [pc, #56]	@ (80010bc <MX_ADC1_Init+0x98>)
 8001084:	f000 fc76 	bl	8001974 <HAL_ADC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 fa17 	bl	80014c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001092:	2301      	movs	r3, #1
 8001094:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	@ (80010bc <MX_ADC1_Init+0x98>)
 80010a4:	f000 fdae 	bl	8001c04 <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ae:	f000 fa07 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001f8 	.word	0x200001f8
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	@ 0x38
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010f8:	4b2c      	ldr	r3, [pc, #176]	@ (80011ac <MX_TIM4_Init+0xe4>)
 80010fa:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <MX_TIM4_Init+0xe8>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48-1;
 80010fe:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <MX_TIM4_Init+0xe4>)
 8001100:	222f      	movs	r2, #47	@ 0x2f
 8001102:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <MX_TIM4_Init+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096-1;
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <MX_TIM4_Init+0xe4>)
 800110c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001110:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <MX_TIM4_Init+0xe4>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <MX_TIM4_Init+0xe4>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800111e:	4823      	ldr	r0, [pc, #140]	@ (80011ac <MX_TIM4_Init+0xe4>)
 8001120:	f002 faa4 	bl	800366c <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800112a:	f000 f9c9 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001138:	4619      	mov	r1, r3
 800113a:	481c      	ldr	r0, [pc, #112]	@ (80011ac <MX_TIM4_Init+0xe4>)
 800113c:	f002 fdb0 	bl	8003ca0 <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001146:	f000 f9bb 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800114a:	4818      	ldr	r0, [pc, #96]	@ (80011ac <MX_TIM4_Init+0xe4>)
 800114c:	f002 fadd 	bl	800370a <HAL_TIM_PWM_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001156:	f000 f9b3 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	4619      	mov	r1, r3
 8001168:	4810      	ldr	r0, [pc, #64]	@ (80011ac <MX_TIM4_Init+0xe4>)
 800116a:	f003 fa27 	bl	80045bc <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001174:	f000 f9a4 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001178:	2360      	movs	r3, #96	@ 0x60
 800117a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2208      	movs	r2, #8
 800118c:	4619      	mov	r1, r3
 800118e:	4807      	ldr	r0, [pc, #28]	@ (80011ac <MX_TIM4_Init+0xe4>)
 8001190:	f002 fcc4 	bl	8003b1c <HAL_TIM_PWM_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800119a:	f000 f991 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800119e:	4803      	ldr	r0, [pc, #12]	@ (80011ac <MX_TIM4_Init+0xe4>)
 80011a0:	f000 fa86 	bl	80016b0 <HAL_TIM_MspPostInit>

}
 80011a4:	bf00      	nop
 80011a6:	3738      	adds	r7, #56	@ 0x38
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002a0 	.word	0x200002a0
 80011b0:	40000800 	.word	0x40000800

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_DMA_Init+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <MX_DMA_Init+0x68>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_DMA_Init+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_DMA_Init+0x68>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <MX_DMA_Init+0x68>)
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_DMA_Init+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	202f      	movs	r0, #47	@ 0x2f
 80011f8:	f001 f88f 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80011fc:	202f      	movs	r0, #47	@ 0x2f
 80011fe:	f001 f8a8 	bl	8002352 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2038      	movs	r0, #56	@ 0x38
 8001208:	f001 f887 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800120c:	2038      	movs	r0, #56	@ 0x38
 800120e:	f001 f8a0 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <MX_GPIO_Init+0x264>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a91      	ldr	r2, [pc, #580]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	4b8b      	ldr	r3, [pc, #556]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a8a      	ldr	r2, [pc, #552]	@ (8001484 <MX_GPIO_Init+0x264>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b88      	ldr	r3, [pc, #544]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	4b84      	ldr	r3, [pc, #528]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a83      	ldr	r2, [pc, #524]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b81      	ldr	r3, [pc, #516]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b7d      	ldr	r3, [pc, #500]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a7c      	ldr	r2, [pc, #496]	@ (8001484 <MX_GPIO_Init+0x264>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b7a      	ldr	r3, [pc, #488]	@ (8001484 <MX_GPIO_Init+0x264>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b76      	ldr	r3, [pc, #472]	@ (8001484 <MX_GPIO_Init+0x264>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <MX_GPIO_Init+0x264>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b73      	ldr	r3, [pc, #460]	@ (8001484 <MX_GPIO_Init+0x264>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <MX_GPIO_Init+0x264>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001484 <MX_GPIO_Init+0x264>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001484 <MX_GPIO_Init+0x264>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	4869      	ldr	r0, [pc, #420]	@ (8001488 <MX_GPIO_Init+0x268>)
 80012e4:	f001 fd44 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2101      	movs	r1, #1
 80012ec:	4867      	ldr	r0, [pc, #412]	@ (800148c <MX_GPIO_Init+0x26c>)
 80012ee:	f001 fd3f 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2110      	movs	r1, #16
 80012f6:	4866      	ldr	r0, [pc, #408]	@ (8001490 <MX_GPIO_Init+0x270>)
 80012f8:	f001 fd3a 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012fc:	2304      	movs	r3, #4
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	485e      	ldr	r0, [pc, #376]	@ (8001488 <MX_GPIO_Init+0x268>)
 8001310:	f001 fbaa 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001314:	2308      	movs	r3, #8
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4857      	ldr	r0, [pc, #348]	@ (8001488 <MX_GPIO_Init+0x268>)
 800132c:	f001 fb9c 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001330:	2332      	movs	r3, #50	@ 0x32
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001334:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4850      	ldr	r0, [pc, #320]	@ (8001488 <MX_GPIO_Init+0x268>)
 8001346:	f001 fb8f 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800134a:	2301      	movs	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	484a      	ldr	r0, [pc, #296]	@ (800148c <MX_GPIO_Init+0x26c>)
 8001362:	f001 fb81 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001366:	2308      	movs	r3, #8
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001376:	2305      	movs	r3, #5
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4842      	ldr	r0, [pc, #264]	@ (800148c <MX_GPIO_Init+0x26c>)
 8001382:	f001 fb71 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001386:	23e0      	movs	r3, #224	@ 0xe0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001396:	2305      	movs	r3, #5
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	483c      	ldr	r0, [pc, #240]	@ (8001494 <MX_GPIO_Init+0x274>)
 80013a2:	f001 fb61 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80013a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b8:	2305      	movs	r3, #5
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4835      	ldr	r0, [pc, #212]	@ (8001498 <MX_GPIO_Init+0x278>)
 80013c4:	f001 fb50 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013c8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013da:	2306      	movs	r3, #6
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4829      	ldr	r0, [pc, #164]	@ (800148c <MX_GPIO_Init+0x26c>)
 80013e6:	f001 fb3f 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80013ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4825      	ldr	r0, [pc, #148]	@ (8001494 <MX_GPIO_Init+0x274>)
 8001400:	f001 fb32 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001404:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001416:	230a      	movs	r3, #10
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	481c      	ldr	r0, [pc, #112]	@ (8001494 <MX_GPIO_Init+0x274>)
 8001422:	f001 fb21 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001426:	2310      	movs	r3, #16
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	4814      	ldr	r0, [pc, #80]	@ (8001490 <MX_GPIO_Init+0x270>)
 800143e:	f001 fb13 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001442:	2320      	movs	r3, #32
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_GPIO_Init+0x270>)
 8001456:	f001 fb07 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800145a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001460:	2312      	movs	r3, #18
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146c:	2304      	movs	r3, #4
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4808      	ldr	r0, [pc, #32]	@ (8001498 <MX_GPIO_Init+0x278>)
 8001478:	f001 faf6 	bl	8002a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147c:	bf00      	nop
 800147e:	3730      	adds	r7, #48	@ 0x30
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40021000 	.word	0x40021000
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400

0800149c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	printf("Konwersja zakonczona\n");
 80014a4:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80014a6:	f004 f8fd 	bl	80056a4 <puts>
	conv_complete = 1;
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <HAL_ADC_ConvCpltCallback+0x20>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	080075bc 	.word	0x080075bc
 80014bc:	20000410 	.word	0x20000410

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150a:	2007      	movs	r0, #7
 800150c:	f000 fefa 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2e      	ldr	r2, [pc, #184]	@ (80015f4 <HAL_ADC_MspInit+0xd8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d156      	bne.n	80015ec <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_ADC_MspInit+0xdc>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <HAL_ADC_MspInit+0xdc>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_ADC_MspInit+0xdc>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <HAL_ADC_MspInit+0xdc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <HAL_ADC_MspInit+0xdc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_ADC_MspInit+0xdc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001576:	2303      	movs	r3, #3
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	481c      	ldr	r0, [pc, #112]	@ (80015fc <HAL_ADC_MspInit+0xe0>)
 800158a:	f001 fa6d 	bl	8002a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 8001590:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <HAL_ADC_MspInit+0xe8>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015d0:	480b      	ldr	r0, [pc, #44]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015d2:	f000 fed9 	bl	8002388 <HAL_DMA_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80015dc:	f7ff ff70 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80015e6:	4a06      	ldr	r2, [pc, #24]	@ (8001600 <HAL_ADC_MspInit+0xe4>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40012000 	.word	0x40012000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	20000240 	.word	0x20000240
 8001604:	40026410 	.word	0x40026410

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <HAL_TIM_Base_MspInit+0x98>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d13e      	bne.n	8001698 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a20      	ldr	r2, [pc, #128]	@ (80016a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <HAL_TIM_Base_MspInit+0x9c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001638:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <HAL_TIM_Base_MspInit+0xa4>)
 800163a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 800163c:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 800163e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001642:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001646:	2240      	movs	r2, #64	@ 0x40
 8001648:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001656:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 800165a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800165e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001660:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001662:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001666:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_CIRCULAR;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 800166a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800166e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001670:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800167c:	480a      	ldr	r0, [pc, #40]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 800167e:	f000 fe83 	bl	8002388 <HAL_DMA_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001688:	f7ff ff1a 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a06      	ldr	r2, [pc, #24]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001692:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40000800 	.word	0x40000800
 80016a4:	40023800 	.word	0x40023800
 80016a8:	200002e8 	.word	0x200002e8
 80016ac:	400260b8 	.word	0x400260b8

080016b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <HAL_TIM_MspPostInit+0x68>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d11e      	bne.n	8001710 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_TIM_MspPostInit+0x6c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001700:	2302      	movs	r3, #2
 8001702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_TIM_MspPostInit+0x70>)
 800170c:	f001 f9ac 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40000800 	.word	0x40000800
 800171c:	40023800 	.word	0x40023800
 8001720:	40020c00 	.word	0x40020c00

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177a:	f000 f8db 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA1_Stream7_IRQHandler+0x10>)
 800178a:	f000 ff03 	bl	8002594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002e8 	.word	0x200002e8

08001798 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA2_Stream0_IRQHandler+0x10>)
 800179e:	f000 fef9 	bl	8002594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000240 	.word	0x20000240

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f004 f894 	bl	8005908 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20020000 	.word	0x20020000
 800180c:	00000400 	.word	0x00000400
 8001810:	20000414 	.word	0x20000414
 8001814:	20000618 	.word	0x20000618

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001874 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	@ (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	@ (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f004 f853 	bl	8005914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff fb1b 	bl	8000ea8 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001880:	08007988 	.word	0x08007988
  ldr r2, =_sbss
 8001884:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001888:	20000614 	.word	0x20000614

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	@ (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 fd23 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fe02 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fd3b 	bl	800236e <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 fd03 	bl	800231a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	@ (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000000 	.word	0x20000000
 800192c:	20000008 	.word	0x20000008
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008
 8001958:	20000418 	.word	0x20000418

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000418 	.word	0x20000418

08001974 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e033      	b.n	80019f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fdc2 	bl	800151c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fa4e 	bl	8001e68 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e2:	e001      	b.n	80019e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Start_DMA+0x1e>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e0ce      	b.n	8001bb8 <HAL_ADC_Start_DMA+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d018      	beq.n	8001a62 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a40:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc0 <HAL_ADC_Start_DMA+0x1c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5f      	ldr	r2, [pc, #380]	@ (8001bc4 <HAL_ADC_Start_DMA+0x1c8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9a      	lsrs	r2, r3, #18
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a70:	d107      	bne.n	8001a82 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a80:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	f040 8086 	bne.w	8001b9e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001abc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f023 0206 	bic.w	r2, r3, #6
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ade:	e002      	b.n	8001ae6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aee:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <HAL_ADC_Start_DMA+0x1cc>)
 8001af0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001af6:	4a35      	ldr	r2, [pc, #212]	@ (8001bcc <HAL_ADC_Start_DMA+0x1d0>)
 8001af8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	4a34      	ldr	r2, [pc, #208]	@ (8001bd0 <HAL_ADC_Start_DMA+0x1d4>)
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	4a33      	ldr	r2, [pc, #204]	@ (8001bd4 <HAL_ADC_Start_DMA+0x1d8>)
 8001b08:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b22:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b32:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	334c      	adds	r3, #76	@ 0x4c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f000 fcce 	bl	80024e4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10f      	bne.n	8001b74 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d129      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	e020      	b.n	8001bb6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_ADC_Start_DMA+0x1dc>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x1ba>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d114      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f043 0210 	orr.w	r2, r3, #16
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	08002061 	.word	0x08002061
 8001bd0:	0800211b 	.word	0x0800211b
 8001bd4:	08002137 	.word	0x08002137
 8001bd8:	40012000 	.word	0x40012000

08001bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1c>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e113      	b.n	8001e48 <HAL_ADC_ConfigChannel+0x244>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b09      	cmp	r3, #9
 8001c2e:	d925      	bls.n	8001c7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68d9      	ldr	r1, [r3, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	3b1e      	subs	r3, #30
 8001c46:	2207      	movs	r2, #7
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	400a      	ands	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68d9      	ldr	r1, [r3, #12]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	4603      	mov	r3, r0
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4403      	add	r3, r0
 8001c6e:	3b1e      	subs	r3, #30
 8001c70:	409a      	lsls	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	e022      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6919      	ldr	r1, [r3, #16]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	2207      	movs	r2, #7
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43da      	mvns	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6919      	ldr	r1, [r3, #16]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4403      	add	r3, r0
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d824      	bhi.n	8001d14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b05      	subs	r3, #5
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	400a      	ands	r2, r1
 8001cea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b05      	subs	r3, #5
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d12:	e04c      	b.n	8001dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d824      	bhi.n	8001d66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b23      	subs	r3, #35	@ 0x23
 8001d2e:	221f      	movs	r2, #31
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43da      	mvns	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	3b23      	subs	r3, #35	@ 0x23
 8001d58:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d64:	e023      	b.n	8001dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	3b41      	subs	r3, #65	@ 0x41
 8001d78:	221f      	movs	r2, #31
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	400a      	ands	r2, r1
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b41      	subs	r3, #65	@ 0x41
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dae:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <HAL_ADC_ConfigChannel+0x250>)
 8001db0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <HAL_ADC_ConfigChannel+0x254>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10f      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1d8>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b12      	cmp	r3, #18
 8001dc2:	d10b      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_ADC_ConfigChannel+0x254>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12b      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x23a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_ADC_ConfigChannel+0x258>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d003      	beq.n	8001df8 <HAL_ADC_ConfigChannel+0x1f4>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b11      	cmp	r3, #17
 8001df6:	d122      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a11      	ldr	r2, [pc, #68]	@ (8001e5c <HAL_ADC_ConfigChannel+0x258>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d111      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_ADC_ConfigChannel+0x25c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a11      	ldr	r2, [pc, #68]	@ (8001e64 <HAL_ADC_ConfigChannel+0x260>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	0c9a      	lsrs	r2, r3, #18
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f9      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40012300 	.word	0x40012300
 8001e58:	40012000 	.word	0x40012000
 8001e5c:	10000012 	.word	0x10000012
 8001e60:	20000000 	.word	0x20000000
 8001e64:	431bde83 	.word	0x431bde83

08001e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e70:	4b79      	ldr	r3, [pc, #484]	@ (8002058 <ADC_Init+0x1f0>)
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	021a      	lsls	r2, r3, #8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6899      	ldr	r1, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	4a58      	ldr	r2, [pc, #352]	@ (800205c <ADC_Init+0x1f4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d022      	beq.n	8001f46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6899      	ldr	r1, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e00f      	b.n	8001f66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f64:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0202 	bic.w	r2, r2, #2
 8001f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6899      	ldr	r1, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
 8001f80:	005a      	lsls	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fa2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6859      	ldr	r1, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	035a      	lsls	r2, r3, #13
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	e007      	b.n	8001fdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fda:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	051a      	lsls	r2, r3, #20
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800201e:	025a      	lsls	r2, r3, #9
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6899      	ldr	r1, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	029a      	lsls	r2, r3, #10
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40012300 	.word	0x40012300
 800205c:	0f000001 	.word	0x0f000001

08002060 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800206c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002076:	2b00      	cmp	r3, #0
 8002078:	d13c      	bne.n	80020f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d12b      	bne.n	80020ec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002098:	2b00      	cmp	r3, #0
 800209a:	d127      	bne.n	80020ec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d119      	bne.n	80020ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0220 	bic.w	r2, r2, #32
 80020c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff f9d5 	bl	800149c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020f2:	e00e      	b.n	8002112 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f7ff fd75 	bl	8001bf0 <HAL_ADC_ErrorCallback>
}
 8002106:	e004      	b.n	8002112 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002126:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff fd57 	bl	8001bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2240      	movs	r2, #64	@ 0x40
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f043 0204 	orr.w	r2, r3, #4
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff fd4a 	bl	8001bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4907      	ldr	r1, [pc, #28]	@ (8002200 <__NVIC_EnableIRQ+0x38>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	@ (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	@ (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	@ 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	@ 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f7ff ff8e 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff29 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff3e 	bl	80021ac <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff8e 	bl	8002258 <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5d 	bl	8002204 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff31 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffa2 	bl	80022c0 <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff fae2 	bl	800195c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e099      	b.n	80024d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c4:	e00f      	b.n	80023e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c6:	f7ff fac9 	bl	800195c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d908      	bls.n	80023e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2203      	movs	r2, #3
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e078      	b.n	80024d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e8      	bne.n	80023c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <HAL_DMA_Init+0x158>)
 8002400:	4013      	ands	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	2b04      	cmp	r3, #4
 800243e:	d107      	bne.n	8002450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	4313      	orrs	r3, r2
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0307 	bic.w	r3, r3, #7
 8002466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	2b04      	cmp	r3, #4
 8002478:	d117      	bne.n	80024aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fa6f 	bl	8002970 <DMA_CheckFifoParam>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2240      	movs	r2, #64	@ 0x40
 800249c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024a6:	2301      	movs	r3, #1
 80024a8:	e016      	b.n	80024d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa26 	bl	8002904 <DMA_CalcBaseAndBitshift>
 80024b8:	4603      	mov	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	223f      	movs	r2, #63	@ 0x3f
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	f010803f 	.word	0xf010803f

080024e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_DMA_Start_IT+0x26>
 8002506:	2302      	movs	r3, #2
 8002508:	e040      	b.n	800258c <HAL_DMA_Start_IT+0xa8>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d12f      	bne.n	800257e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9b8 	bl	80028a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	223f      	movs	r2, #63	@ 0x3f
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0216 	orr.w	r2, r2, #22
 8002552:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0208 	orr.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e005      	b.n	800258a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a0:	4b8e      	ldr	r3, [pc, #568]	@ (80027dc <HAL_DMA_IRQHandler+0x248>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a8e      	ldr	r2, [pc, #568]	@ (80027e0 <HAL_DMA_IRQHandler+0x24c>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a9b      	lsrs	r3, r3, #10
 80025ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	2208      	movs	r2, #8
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01a      	beq.n	8002600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0204 	bic.w	r2, r2, #4
 80025e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ec:	2208      	movs	r2, #8
 80025ee:	409a      	lsls	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	2201      	movs	r2, #1
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d012      	beq.n	8002636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	2201      	movs	r2, #1
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262e:	f043 0202 	orr.w	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	2204      	movs	r2, #4
 800263c:	409a      	lsls	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	2204      	movs	r2, #4
 800265a:	409a      	lsls	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002664:	f043 0204 	orr.w	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	2210      	movs	r2, #16
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d043      	beq.n	8002704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03c      	beq.n	8002704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268e:	2210      	movs	r2, #16
 8002690:	409a      	lsls	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d018      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d024      	beq.n	8002704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	4798      	blx	r3
 80026c2:	e01f      	b.n	8002704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01b      	beq.n	8002704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
 80026d4:	e016      	b.n	8002704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0208 	bic.w	r2, r2, #8
 80026f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002708:	2220      	movs	r2, #32
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 808f 	beq.w	8002834 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8087 	beq.w	8002834 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272a:	2220      	movs	r2, #32
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b05      	cmp	r3, #5
 800273c:	d136      	bne.n	80027ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0216 	bic.w	r2, r2, #22
 800274c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800275c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d103      	bne.n	800276e <HAL_DMA_IRQHandler+0x1da>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0208 	bic.w	r2, r2, #8
 800277c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002782:	223f      	movs	r2, #63	@ 0x3f
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d07e      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
        }
        return;
 80027aa:	e079      	b.n	80028a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01d      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10d      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d031      	beq.n	8002834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	4798      	blx	r3
 80027d8:	e02c      	b.n	8002834 <HAL_DMA_IRQHandler+0x2a0>
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000
 80027e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
 80027f4:	e01e      	b.n	8002834 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10f      	bne.n	8002824 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0210 	bic.w	r2, r2, #16
 8002812:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	2b00      	cmp	r3, #0
 800283a:	d032      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d022      	beq.n	800288e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2205      	movs	r2, #5
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	3301      	adds	r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	d307      	bcc.n	800287c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f2      	bne.n	8002860 <HAL_DMA_IRQHandler+0x2cc>
 800287a:	e000      	b.n	800287e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800287c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
 800289e:	e000      	b.n	80028a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028a0:	bf00      	nop
    }
  }
}
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b40      	cmp	r3, #64	@ 0x40
 80028d4:	d108      	bne.n	80028e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028e6:	e007      	b.n	80028f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	3b10      	subs	r3, #16
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <DMA_CalcBaseAndBitshift+0x64>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800291e:	4a13      	ldr	r2, [pc, #76]	@ (800296c <DMA_CalcBaseAndBitshift+0x68>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d909      	bls.n	8002946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	1d1a      	adds	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	659a      	str	r2, [r3, #88]	@ 0x58
 8002944:	e007      	b.n	8002956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	aaaaaaab 	.word	0xaaaaaaab
 800296c:	080075e4 	.word	0x080075e4

08002970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11f      	bne.n	80029ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d856      	bhi.n	8002a3e <DMA_CheckFifoParam+0xce>
 8002990:	a201      	add	r2, pc, #4	@ (adr r2, 8002998 <DMA_CheckFifoParam+0x28>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029a9 	.word	0x080029a9
 800299c:	080029bb 	.word	0x080029bb
 80029a0:	080029a9 	.word	0x080029a9
 80029a4:	08002a3f 	.word	0x08002a3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d046      	beq.n	8002a42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e043      	b.n	8002a42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029c2:	d140      	bne.n	8002a46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e03d      	b.n	8002a46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029d2:	d121      	bne.n	8002a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d837      	bhi.n	8002a4a <DMA_CheckFifoParam+0xda>
 80029da:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <DMA_CheckFifoParam+0x70>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	080029f7 	.word	0x080029f7
 80029e8:	080029f1 	.word	0x080029f1
 80029ec:	08002a09 	.word	0x08002a09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e030      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d025      	beq.n	8002a4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a06:	e022      	b.n	8002a4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a10:	d11f      	bne.n	8002a52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a16:	e01c      	b.n	8002a52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d903      	bls.n	8002a26 <DMA_CheckFifoParam+0xb6>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d003      	beq.n	8002a2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a24:	e018      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2a:	e015      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e00b      	b.n	8002a56 <DMA_CheckFifoParam+0xe6>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e00a      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      break;
 8002a42:	bf00      	nop
 8002a44:	e008      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
 8002a48:	e006      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e004      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e002      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a52:	bf00      	nop
 8002a54:	e000      	b.n	8002a58 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
    }
  } 
  
  return status; 
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	@ 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e159      	b.n	8002d38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f040 8148 	bne.w	8002d32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d005      	beq.n	8002aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d130      	bne.n	8002b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af0:	2201      	movs	r2, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 0201 	and.w	r2, r3, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d017      	beq.n	8002b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d123      	bne.n	8002bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	69b9      	ldr	r1, [r7, #24]
 8002ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a2 	beq.w	8002d32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b57      	ldr	r3, [pc, #348]	@ (8002d50 <HAL_GPIO_Init+0x2e8>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	4a56      	ldr	r2, [pc, #344]	@ (8002d50 <HAL_GPIO_Init+0x2e8>)
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfe:	4b54      	ldr	r3, [pc, #336]	@ (8002d50 <HAL_GPIO_Init+0x2e8>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0a:	4a52      	ldr	r2, [pc, #328]	@ (8002d54 <HAL_GPIO_Init+0x2ec>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a49      	ldr	r2, [pc, #292]	@ (8002d58 <HAL_GPIO_Init+0x2f0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x202>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a48      	ldr	r2, [pc, #288]	@ (8002d5c <HAL_GPIO_Init+0x2f4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x1fe>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a47      	ldr	r2, [pc, #284]	@ (8002d60 <HAL_GPIO_Init+0x2f8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x1fa>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a46      	ldr	r2, [pc, #280]	@ (8002d64 <HAL_GPIO_Init+0x2fc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x1f6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a45      	ldr	r2, [pc, #276]	@ (8002d68 <HAL_GPIO_Init+0x300>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x1f2>
 8002c56:	2304      	movs	r3, #4
 8002c58:	e008      	b.n	8002c6c <HAL_GPIO_Init+0x204>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x204>
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e004      	b.n	8002c6c <HAL_GPIO_Init+0x204>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_Init+0x204>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x204>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f002 0203 	and.w	r2, r2, #3
 8002c72:	0092      	lsls	r2, r2, #2
 8002c74:	4093      	lsls	r3, r2
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c7c:	4935      	ldr	r1, [pc, #212]	@ (8002d54 <HAL_GPIO_Init+0x2ec>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	3302      	adds	r3, #2
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c8a:	4b38      	ldr	r3, [pc, #224]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cae:	4a2f      	ldr	r2, [pc, #188]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd8:	4a24      	ldr	r2, [pc, #144]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cde:	4b23      	ldr	r3, [pc, #140]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d02:	4a1a      	ldr	r2, [pc, #104]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d08:	4b18      	ldr	r3, [pc, #96]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002d6c <HAL_GPIO_Init+0x304>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	f67f aea2 	bls.w	8002a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40013800 	.word	0x40013800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40020400 	.word	0x40020400
 8002d60:	40020800 	.word	0x40020800
 8002d64:	40020c00 	.word	0x40020c00
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40013c00 	.word	0x40013c00

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e267      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d075      	beq.n	8002eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dc2:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b85      	ldr	r3, [pc, #532]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b82      	ldr	r3, [pc, #520]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x108>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e242      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x74>
 8002e0a:	4b76      	ldr	r3, [pc, #472]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x98>
 8002e22:	4b70      	ldr	r3, [pc, #448]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6f      	ldr	r2, [pc, #444]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6c      	ldr	r2, [pc, #432]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fd7e 	bl	800195c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fd7a 	bl	800195c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e207      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xc0>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fd6a 	bl	800195c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fd66 	bl	800195c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1f3      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b51      	ldr	r3, [pc, #324]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0xe8>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eba:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d11c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b44      	ldr	r3, [pc, #272]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d116      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1c7      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4937      	ldr	r1, [pc, #220]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	e03a      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	4b34      	ldr	r3, [pc, #208]	@ (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fd1f 	bl	800195c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f22:	f7fe fd1b 	bl	800195c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1a8      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4925      	ldr	r1, [pc, #148]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f56:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fcfe 	bl	800195c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe fcfa 	bl	800195c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e187      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d036      	beq.n	8002ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_RCC_OscConfig+0x248>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fcde 	bl	800195c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7fe fcda 	bl	800195c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e167      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x200>
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_OscConfig+0x248>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fcc7 	bl	800195c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	e00e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fcc3 	bl	800195c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d907      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e150      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470000 	.word	0x42470000
 8002fec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ea      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8097 	beq.w	8003138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b81      	ldr	r3, [pc, #516]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	4a7c      	ldr	r2, [pc, #496]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	@ 0x40
 800302a:	4b7a      	ldr	r3, [pc, #488]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b77      	ldr	r3, [pc, #476]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b74      	ldr	r3, [pc, #464]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a73      	ldr	r2, [pc, #460]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fe fc83 	bl	800195c <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fe fc7f 	bl	800195c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e10c      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b6a      	ldr	r3, [pc, #424]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x2ea>
 8003080:	4b64      	ldr	r3, [pc, #400]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a63      	ldr	r2, [pc, #396]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	e01c      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x30c>
 8003096:	4b5f      	ldr	r3, [pc, #380]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 80030b0:	4b58      	ldr	r3, [pc, #352]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80030bc:	4b55      	ldr	r3, [pc, #340]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	4a54      	ldr	r2, [pc, #336]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe fc44 	bl	800195c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe fc40 	bl	800195c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0cb      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	4b49      	ldr	r3, [pc, #292]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ee      	beq.n	80030d8 <HAL_RCC_OscConfig+0x334>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fc2e 	bl	800195c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fc2a 	bl	800195c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0b5      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	4b3e      	ldr	r3, [pc, #248]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ee      	bne.n	8003104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a38      	ldr	r2, [pc, #224]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a1 	beq.w	8003284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003142:	4b34      	ldr	r3, [pc, #208]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d05c      	beq.n	8003208 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d141      	bne.n	80031da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fbfe 	bl	800195c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fbfa 	bl	800195c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e087      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	491b      	ldr	r1, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fbd3 	bl	800195c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fe fbcf 	bl	800195c <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e05c      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x416>
 80031d8:	e054      	b.n	8003284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fbbc 	bl	800195c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fbb8 	bl	800195c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e045      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x444>
 8003206:	e03d      	b.n	8003284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e038      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000
 800321c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4ec>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d028      	beq.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d121      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d11a      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003250:	4013      	ands	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0cc      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b68      	ldr	r3, [pc, #416]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d90c      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b65      	ldr	r3, [pc, #404]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a52      	ldr	r2, [pc, #328]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800330a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d044      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d119      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	2b03      	cmp	r3, #3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e067      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 0203 	bic.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4934      	ldr	r1, [pc, #208]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003384:	f7fe faea 	bl	800195c <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe fae6 	bl	800195c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e04f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 020c 	and.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1eb      	bne.n	800338c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b25      	ldr	r3, [pc, #148]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d20c      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	@ (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fa4a 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00
 8003450:	40023800 	.word	0x40023800
 8003454:	080075d4 	.word	0x080075d4
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b094      	sub	sp, #80	@ 0x50
 8003466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003478:	4b79      	ldr	r3, [pc, #484]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x200>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d00d      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003484:	2b08      	cmp	r3, #8
 8003486:	f200 80e1 	bhi.w	800364c <HAL_RCC_GetSysClockFreq+0x1ec>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 800348e:	2b04      	cmp	r3, #4
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x3a>
 8003492:	e0db      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b73      	ldr	r3, [pc, #460]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x204>)
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003498:	e0db      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349a:	4b73      	ldr	r3, [pc, #460]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x208>)
 800349c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800349e:	e0d8      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d063      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	2200      	movs	r2, #0
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ca:	2300      	movs	r3, #0
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034d2:	4622      	mov	r2, r4
 80034d4:	462b      	mov	r3, r5
 80034d6:	f04f 0000 	mov.w	r0, #0
 80034da:	f04f 0100 	mov.w	r1, #0
 80034de:	0159      	lsls	r1, r3, #5
 80034e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e4:	0150      	lsls	r0, r2, #5
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4621      	mov	r1, r4
 80034ec:	1a51      	subs	r1, r2, r1
 80034ee:	6139      	str	r1, [r7, #16]
 80034f0:	4629      	mov	r1, r5
 80034f2:	eb63 0301 	sbc.w	r3, r3, r1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003504:	4659      	mov	r1, fp
 8003506:	018b      	lsls	r3, r1, #6
 8003508:	4651      	mov	r1, sl
 800350a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800350e:	4651      	mov	r1, sl
 8003510:	018a      	lsls	r2, r1, #6
 8003512:	4651      	mov	r1, sl
 8003514:	ebb2 0801 	subs.w	r8, r2, r1
 8003518:	4659      	mov	r1, fp
 800351a:	eb63 0901 	sbc.w	r9, r3, r1
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800352e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003532:	4690      	mov	r8, r2
 8003534:	4699      	mov	r9, r3
 8003536:	4623      	mov	r3, r4
 8003538:	eb18 0303 	adds.w	r3, r8, r3
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	462b      	mov	r3, r5
 8003540:	eb49 0303 	adc.w	r3, r9, r3
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003552:	4629      	mov	r1, r5
 8003554:	024b      	lsls	r3, r1, #9
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800355c:	4621      	mov	r1, r4
 800355e:	024a      	lsls	r2, r1, #9
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003566:	2200      	movs	r2, #0
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800356c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003570:	f7fd fb22 	bl	8000bb8 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800357c:	e058      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357e:	4b38      	ldr	r3, [pc, #224]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x200>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	2200      	movs	r2, #0
 8003586:	4618      	mov	r0, r3
 8003588:	4611      	mov	r1, r2
 800358a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	2300      	movs	r3, #0
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
 8003594:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	f04f 0000 	mov.w	r0, #0
 80035a0:	f04f 0100 	mov.w	r1, #0
 80035a4:	0159      	lsls	r1, r3, #5
 80035a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035aa:	0150      	lsls	r0, r2, #5
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4641      	mov	r1, r8
 80035b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035b6:	4649      	mov	r1, r9
 80035b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d0:	ebb2 040a 	subs.w	r4, r2, sl
 80035d4:	eb63 050b 	sbc.w	r5, r3, fp
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	00eb      	lsls	r3, r5, #3
 80035e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e6:	00e2      	lsls	r2, r4, #3
 80035e8:	4614      	mov	r4, r2
 80035ea:	461d      	mov	r5, r3
 80035ec:	4643      	mov	r3, r8
 80035ee:	18e3      	adds	r3, r4, r3
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	464b      	mov	r3, r9
 80035f4:	eb45 0303 	adc.w	r3, r5, r3
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003606:	4629      	mov	r1, r5
 8003608:	028b      	lsls	r3, r1, #10
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003610:	4621      	mov	r1, r4
 8003612:	028a      	lsls	r2, r1, #10
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800361a:	2200      	movs	r2, #0
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	61fa      	str	r2, [r7, #28]
 8003620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003624:	f7fd fac8 	bl	8000bb8 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x200>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x204>)
 800364e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003654:	4618      	mov	r0, r3
 8003656:	3750      	adds	r7, #80	@ 0x50
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	00f42400 	.word	0x00f42400
 8003668:	007a1200 	.word	0x007a1200

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e041      	b.n	8003702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd ffb8 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fcae 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e041      	b.n	80037a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f839 	bl	80037a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	4610      	mov	r0, r2
 800374a:	f000 fc5f 	bl	800400c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d109      	bne.n	80037e8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e022      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x72>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d109      	bne.n	8003802 <HAL_TIM_PWM_Start_DMA+0x46>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	e015      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x72>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d109      	bne.n	800381c <HAL_TIM_PWM_Start_DMA+0x60>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e008      	b.n	800382e <HAL_TIM_PWM_Start_DMA+0x72>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	e15d      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <HAL_TIM_PWM_Start_DMA+0x94>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e022      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xda>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d109      	bne.n	800386a <HAL_TIM_PWM_Start_DMA+0xae>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b01      	cmp	r3, #1
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e015      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xda>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d109      	bne.n	8003884 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	e008      	b.n	8003896 <HAL_TIM_PWM_Start_DMA+0xda>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d024      	beq.n	80038e4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_TIM_PWM_Start_DMA+0xea>
 80038a0:	887b      	ldrh	r3, [r7, #2]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e123      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_PWM_Start_DMA+0xfe>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b8:	e016      	b.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start_DMA+0x10e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c8:	e00e      	b.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start_DMA+0x11e>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d8:	e006      	b.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038e2:	e001      	b.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e104      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	f200 80ae 	bhi.w	8003a4c <HAL_TIM_PWM_Start_DMA+0x290>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	08003a4d 	.word	0x08003a4d
 8003900:	08003a4d 	.word	0x08003a4d
 8003904:	08003a4d 	.word	0x08003a4d
 8003908:	08003975 	.word	0x08003975
 800390c:	08003a4d 	.word	0x08003a4d
 8003910:	08003a4d 	.word	0x08003a4d
 8003914:	08003a4d 	.word	0x08003a4d
 8003918:	080039bd 	.word	0x080039bd
 800391c:	08003a4d 	.word	0x08003a4d
 8003920:	08003a4d 	.word	0x08003a4d
 8003924:	08003a4d 	.word	0x08003a4d
 8003928:	08003a05 	.word	0x08003a05
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	4a72      	ldr	r2, [pc, #456]	@ (8003afc <HAL_TIM_PWM_Start_DMA+0x340>)
 8003932:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	4a71      	ldr	r2, [pc, #452]	@ (8003b00 <HAL_TIM_PWM_Start_DMA+0x344>)
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	4a70      	ldr	r2, [pc, #448]	@ (8003b04 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003942:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3334      	adds	r3, #52	@ 0x34
 8003950:	461a      	mov	r2, r3
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	f7fe fdc6 	bl	80024e4 <HAL_DMA_Start_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0c7      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003970:	60da      	str	r2, [r3, #12]
      break;
 8003972:	e06e      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	4a60      	ldr	r2, [pc, #384]	@ (8003afc <HAL_TIM_PWM_Start_DMA+0x340>)
 800397a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	4a5f      	ldr	r2, [pc, #380]	@ (8003b00 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	4a5e      	ldr	r2, [pc, #376]	@ (8003b04 <HAL_TIM_PWM_Start_DMA+0x348>)
 800398a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3338      	adds	r3, #56	@ 0x38
 8003998:	461a      	mov	r2, r3
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	f7fe fda2 	bl	80024e4 <HAL_DMA_Start_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0a3      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039b8:	60da      	str	r2, [r3, #12]
      break;
 80039ba:	e04a      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	4a4e      	ldr	r2, [pc, #312]	@ (8003afc <HAL_TIM_PWM_Start_DMA+0x340>)
 80039c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <HAL_TIM_PWM_Start_DMA+0x344>)
 80039ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003b04 <HAL_TIM_PWM_Start_DMA+0x348>)
 80039d2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	333c      	adds	r3, #60	@ 0x3c
 80039e0:	461a      	mov	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	f7fe fd7e 	bl	80024e4 <HAL_DMA_Start_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a00:	60da      	str	r2, [r3, #12]
      break;
 8003a02:	e026      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	4a3c      	ldr	r2, [pc, #240]	@ (8003afc <HAL_TIM_PWM_Start_DMA+0x340>)
 8003a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	4a3b      	ldr	r2, [pc, #236]	@ (8003b00 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	4a3a      	ldr	r2, [pc, #232]	@ (8003b04 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a1a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3340      	adds	r3, #64	@ 0x40
 8003a28:	461a      	mov	r2, r3
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	f7fe fd5a 	bl	80024e4 <HAL_DMA_Start_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e05b      	b.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a48:	60da      	str	r2, [r3, #12]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a50:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d14b      	bne.n	8003af0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fd85 	bl	8004570 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d107      	bne.n	8003a80 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a20      	ldr	r2, [pc, #128]	@ (8003b08 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_TIM_PWM_Start_DMA+0x300>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a92:	d013      	beq.n	8003abc <HAL_TIM_PWM_Start_DMA+0x300>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1c      	ldr	r2, [pc, #112]	@ (8003b0c <HAL_TIM_PWM_Start_DMA+0x350>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_TIM_PWM_Start_DMA+0x300>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b10 <HAL_TIM_PWM_Start_DMA+0x354>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_TIM_PWM_Start_DMA+0x300>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a19      	ldr	r2, [pc, #100]	@ (8003b14 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_TIM_PWM_Start_DMA+0x300>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	@ (8003b18 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d010      	beq.n	8003af0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ade:	e007      	b.n	8003af0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08003efd 	.word	0x08003efd
 8003b00:	08003fa5 	.word	0x08003fa5
 8003b04:	08003e6b 	.word	0x08003e6b
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40014000 	.word	0x40014000

08003b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e0ae      	b.n	8003c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	f200 809f 	bhi.w	8003c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003c89 	.word	0x08003c89
 8003b58:	08003c89 	.word	0x08003c89
 8003b5c:	08003c89 	.word	0x08003c89
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003c89 	.word	0x08003c89
 8003b68:	08003c89 	.word	0x08003c89
 8003b6c:	08003c89 	.word	0x08003c89
 8003b70:	08003c07 	.word	0x08003c07
 8003b74:	08003c89 	.word	0x08003c89
 8003b78:	08003c89 	.word	0x08003c89
 8003b7c:	08003c89 	.word	0x08003c89
 8003b80:	08003c47 	.word	0x08003c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 faca 	bl	8004124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6999      	ldr	r1, [r3, #24]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	619a      	str	r2, [r3, #24]
      break;
 8003bc2:	e064      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fb10 	bl	80041f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6999      	ldr	r1, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	619a      	str	r2, [r3, #24]
      break;
 8003c04:	e043      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fb5b 	bl	80042c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0208 	orr.w	r2, r2, #8
 8003c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0204 	bic.w	r2, r2, #4
 8003c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
      break;
 8003c44:	e023      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fba5 	bl	800439c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69d9      	ldr	r1, [r3, #28]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	021a      	lsls	r2, r3, #8
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	61da      	str	r2, [r3, #28]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x1c>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0b4      	b.n	8003e26 <HAL_TIM_ConfigClockSource+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf4:	d03e      	beq.n	8003d74 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfa:	f200 8087 	bhi.w	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d02:	f000 8086 	beq.w	8003e12 <HAL_TIM_ConfigClockSource+0x172>
 8003d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0a:	d87f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b70      	cmp	r3, #112	@ 0x70
 8003d0e:	d01a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xa6>
 8003d10:	2b70      	cmp	r3, #112	@ 0x70
 8003d12:	d87b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b60      	cmp	r3, #96	@ 0x60
 8003d16:	d050      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0x11a>
 8003d18:	2b60      	cmp	r3, #96	@ 0x60
 8003d1a:	d877      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b50      	cmp	r3, #80	@ 0x50
 8003d1e:	d03c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xfa>
 8003d20:	2b50      	cmp	r3, #80	@ 0x50
 8003d22:	d873      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b40      	cmp	r3, #64	@ 0x40
 8003d26:	d058      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x13a>
 8003d28:	2b40      	cmp	r3, #64	@ 0x40
 8003d2a:	d86f      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b30      	cmp	r3, #48	@ 0x30
 8003d2e:	d064      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b30      	cmp	r3, #48	@ 0x30
 8003d32:	d86b      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d060      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d867      	bhi.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d05c      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d05a      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x15a>
 8003d44:	e062      	b.n	8003e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d56:	f000 fbeb 	bl	8004530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	609a      	str	r2, [r3, #8]
      break;
 8003d72:	e04f      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d84:	f000 fbd4 	bl	8004530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d96:	609a      	str	r2, [r3, #8]
      break;
 8003d98:	e03c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da6:	461a      	mov	r2, r3
 8003da8:	f000 fb48 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2150      	movs	r1, #80	@ 0x50
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fba1 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003db8:	e02c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fb67 	bl	800449a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2160      	movs	r1, #96	@ 0x60
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb91 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e01c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 fb28 	bl	800443c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2140      	movs	r1, #64	@ 0x40
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fb81 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003df8:	e00c      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fb78 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003e0a:	e003      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e000      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d107      	bne.n	8003e92 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e90:	e02a      	b.n	8003ee8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d107      	bne.n	8003eac <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eaa:	e01d      	b.n	8003ee8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d107      	bne.n	8003ec6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec4:	e010      	b.n	8003ee8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d107      	bne.n	8003ee0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ede:	e003      	b.n	8003ee8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff ffb4 	bl	8003e56 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	771a      	strb	r2, [r3, #28]
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d10b      	bne.n	8003f2c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d136      	bne.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f2a:	e031      	b.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10b      	bne.n	8003f4e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d125      	bne.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f4c:	e020      	b.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d10b      	bne.n	8003f70 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d114      	bne.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f6e:	e00f      	b.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d10a      	bne.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ff4c 	bl	8003e2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d103      	bne.n	8003fc4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	771a      	strb	r2, [r3, #28]
 8003fc2:	e019      	b.n	8003ff8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d103      	bne.n	8003fd6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]
 8003fd4:	e010      	b.n	8003ff8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d103      	bne.n	8003fe8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	771a      	strb	r2, [r3, #28]
 8003fe6:	e007      	b.n	8003ff8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d102      	bne.n	8003ff8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ff22 	bl	8003e42 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3a      	ldr	r2, [pc, #232]	@ (8004108 <TIM_Base_SetConfig+0xfc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00f      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402a:	d00b      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a37      	ldr	r2, [pc, #220]	@ (800410c <TIM_Base_SetConfig+0x100>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d007      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a36      	ldr	r2, [pc, #216]	@ (8004110 <TIM_Base_SetConfig+0x104>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a35      	ldr	r2, [pc, #212]	@ (8004114 <TIM_Base_SetConfig+0x108>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d108      	bne.n	8004056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800404a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a2b      	ldr	r2, [pc, #172]	@ (8004108 <TIM_Base_SetConfig+0xfc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a28      	ldr	r2, [pc, #160]	@ (800410c <TIM_Base_SetConfig+0x100>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a27      	ldr	r2, [pc, #156]	@ (8004110 <TIM_Base_SetConfig+0x104>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <TIM_Base_SetConfig+0x108>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a25      	ldr	r2, [pc, #148]	@ (8004118 <TIM_Base_SetConfig+0x10c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a24      	ldr	r2, [pc, #144]	@ (800411c <TIM_Base_SetConfig+0x110>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <TIM_Base_SetConfig+0x114>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004108 <TIM_Base_SetConfig+0xfc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	611a      	str	r2, [r3, #16]
  }
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800

08004124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f023 0201 	bic.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 0302 	bic.w	r3, r3, #2
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1c      	ldr	r2, [pc, #112]	@ (80041ec <TIM_OC1_SetConfig+0xc8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10c      	bne.n	800419a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0308 	bic.w	r3, r3, #8
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a13      	ldr	r2, [pc, #76]	@ (80041ec <TIM_OC1_SetConfig+0xc8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40010000 	.word	0x40010000

080041f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f023 0210 	bic.w	r2, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <TIM_OC2_SetConfig+0xd4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10d      	bne.n	800426c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800426a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <TIM_OC2_SetConfig+0xd4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d113      	bne.n	800429c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800427a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000

080042c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <TIM_OC3_SetConfig+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <TIM_OC3_SetConfig+0xd0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d113      	bne.n	8004372 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40010000 	.word	0x40010000

0800439c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	031b      	lsls	r3, r3, #12
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <TIM_OC4_SetConfig+0x9c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000

0800443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 030a 	bic.w	r3, r3, #10
 8004478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f023 0210 	bic.w	r2, r3, #16
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	f043 0307 	orr.w	r3, r3, #7
 800451c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800454a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	431a      	orrs	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	609a      	str	r2, [r3, #8]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2201      	movs	r2, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 031f 	and.w	r3, r3, #31
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	431a      	orrs	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
}
 80045ae:	bf00      	nop
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e050      	b.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1c      	ldr	r2, [pc, #112]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d018      	beq.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004620:	d013      	beq.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00e      	beq.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a16      	ldr	r2, [pc, #88]	@ (800468c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a15      	ldr	r2, [pc, #84]	@ (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d004      	beq.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10c      	bne.n	8004664 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	4313      	orrs	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000

08004698 <findslot>:
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <findslot+0x2c>)
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	b118      	cbz	r0, 80046aa <findslot+0x12>
 80046a2:	6a03      	ldr	r3, [r0, #32]
 80046a4:	b90b      	cbnz	r3, 80046aa <findslot+0x12>
 80046a6:	f000 ff71 	bl	800558c <__sinit>
 80046aa:	2c13      	cmp	r4, #19
 80046ac:	d807      	bhi.n	80046be <findslot+0x26>
 80046ae:	4806      	ldr	r0, [pc, #24]	@ (80046c8 <findslot+0x30>)
 80046b0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80046b4:	3201      	adds	r2, #1
 80046b6:	d002      	beq.n	80046be <findslot+0x26>
 80046b8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	2000      	movs	r0, #0
 80046c0:	e7fc      	b.n	80046bc <findslot+0x24>
 80046c2:	bf00      	nop
 80046c4:	20000020 	.word	0x20000020
 80046c8:	20000428 	.word	0x20000428

080046cc <error>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	4604      	mov	r4, r0
 80046d0:	f001 f91a 	bl	8005908 <__errno>
 80046d4:	2613      	movs	r6, #19
 80046d6:	4605      	mov	r5, r0
 80046d8:	2700      	movs	r7, #0
 80046da:	4630      	mov	r0, r6
 80046dc:	4639      	mov	r1, r7
 80046de:	beab      	bkpt	0x00ab
 80046e0:	4606      	mov	r6, r0
 80046e2:	602e      	str	r6, [r5, #0]
 80046e4:	4620      	mov	r0, r4
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080046e8 <checkerror>:
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d101      	bne.n	80046f0 <checkerror+0x8>
 80046ec:	f7ff bfee 	b.w	80046cc <error>
 80046f0:	4770      	bx	lr

080046f2 <_swiread>:
 80046f2:	b530      	push	{r4, r5, lr}
 80046f4:	b085      	sub	sp, #20
 80046f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80046fa:	9203      	str	r2, [sp, #12]
 80046fc:	2406      	movs	r4, #6
 80046fe:	ad01      	add	r5, sp, #4
 8004700:	4620      	mov	r0, r4
 8004702:	4629      	mov	r1, r5
 8004704:	beab      	bkpt	0x00ab
 8004706:	4604      	mov	r4, r0
 8004708:	4620      	mov	r0, r4
 800470a:	f7ff ffed 	bl	80046e8 <checkerror>
 800470e:	b005      	add	sp, #20
 8004710:	bd30      	pop	{r4, r5, pc}

08004712 <_read>:
 8004712:	b570      	push	{r4, r5, r6, lr}
 8004714:	460e      	mov	r6, r1
 8004716:	4614      	mov	r4, r2
 8004718:	f7ff ffbe 	bl	8004698 <findslot>
 800471c:	4605      	mov	r5, r0
 800471e:	b930      	cbnz	r0, 800472e <_read+0x1c>
 8004720:	f001 f8f2 	bl	8005908 <__errno>
 8004724:	2309      	movs	r3, #9
 8004726:	6003      	str	r3, [r0, #0]
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	bd70      	pop	{r4, r5, r6, pc}
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	4622      	mov	r2, r4
 8004732:	4631      	mov	r1, r6
 8004734:	f7ff ffdd 	bl	80046f2 <_swiread>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d0f5      	beq.n	8004728 <_read+0x16>
 800473c:	686b      	ldr	r3, [r5, #4]
 800473e:	1a20      	subs	r0, r4, r0
 8004740:	4403      	add	r3, r0
 8004742:	606b      	str	r3, [r5, #4]
 8004744:	e7f2      	b.n	800472c <_read+0x1a>

08004746 <_swilseek>:
 8004746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004748:	460c      	mov	r4, r1
 800474a:	4616      	mov	r6, r2
 800474c:	f7ff ffa4 	bl	8004698 <findslot>
 8004750:	4605      	mov	r5, r0
 8004752:	b940      	cbnz	r0, 8004766 <_swilseek+0x20>
 8004754:	f001 f8d8 	bl	8005908 <__errno>
 8004758:	2309      	movs	r3, #9
 800475a:	6003      	str	r3, [r0, #0]
 800475c:	f04f 34ff 	mov.w	r4, #4294967295
 8004760:	4620      	mov	r0, r4
 8004762:	b003      	add	sp, #12
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004766:	2e02      	cmp	r6, #2
 8004768:	d903      	bls.n	8004772 <_swilseek+0x2c>
 800476a:	f001 f8cd 	bl	8005908 <__errno>
 800476e:	2316      	movs	r3, #22
 8004770:	e7f3      	b.n	800475a <_swilseek+0x14>
 8004772:	2e01      	cmp	r6, #1
 8004774:	d112      	bne.n	800479c <_swilseek+0x56>
 8004776:	6843      	ldr	r3, [r0, #4]
 8004778:	18e4      	adds	r4, r4, r3
 800477a:	d4f6      	bmi.n	800476a <_swilseek+0x24>
 800477c:	682b      	ldr	r3, [r5, #0]
 800477e:	260a      	movs	r6, #10
 8004780:	e9cd 3400 	strd	r3, r4, [sp]
 8004784:	466f      	mov	r7, sp
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	beab      	bkpt	0x00ab
 800478c:	4606      	mov	r6, r0
 800478e:	4630      	mov	r0, r6
 8004790:	f7ff ffaa 	bl	80046e8 <checkerror>
 8004794:	2800      	cmp	r0, #0
 8004796:	dbe1      	blt.n	800475c <_swilseek+0x16>
 8004798:	606c      	str	r4, [r5, #4]
 800479a:	e7e1      	b.n	8004760 <_swilseek+0x1a>
 800479c:	2e02      	cmp	r6, #2
 800479e:	6803      	ldr	r3, [r0, #0]
 80047a0:	d1ec      	bne.n	800477c <_swilseek+0x36>
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	260c      	movs	r6, #12
 80047a6:	466f      	mov	r7, sp
 80047a8:	4630      	mov	r0, r6
 80047aa:	4639      	mov	r1, r7
 80047ac:	beab      	bkpt	0x00ab
 80047ae:	4606      	mov	r6, r0
 80047b0:	4630      	mov	r0, r6
 80047b2:	f7ff ff99 	bl	80046e8 <checkerror>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d0d0      	beq.n	800475c <_swilseek+0x16>
 80047ba:	4404      	add	r4, r0
 80047bc:	e7de      	b.n	800477c <_swilseek+0x36>

080047be <_lseek>:
 80047be:	f7ff bfc2 	b.w	8004746 <_swilseek>

080047c2 <_swiwrite>:
 80047c2:	b530      	push	{r4, r5, lr}
 80047c4:	b085      	sub	sp, #20
 80047c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80047ca:	9203      	str	r2, [sp, #12]
 80047cc:	2405      	movs	r4, #5
 80047ce:	ad01      	add	r5, sp, #4
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	beab      	bkpt	0x00ab
 80047d6:	4604      	mov	r4, r0
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff ff85 	bl	80046e8 <checkerror>
 80047de:	b005      	add	sp, #20
 80047e0:	bd30      	pop	{r4, r5, pc}

080047e2 <_write>:
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	460e      	mov	r6, r1
 80047e6:	4615      	mov	r5, r2
 80047e8:	f7ff ff56 	bl	8004698 <findslot>
 80047ec:	4604      	mov	r4, r0
 80047ee:	b930      	cbnz	r0, 80047fe <_write+0x1c>
 80047f0:	f001 f88a 	bl	8005908 <__errno>
 80047f4:	2309      	movs	r3, #9
 80047f6:	6003      	str	r3, [r0, #0]
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
 80047fe:	6800      	ldr	r0, [r0, #0]
 8004800:	462a      	mov	r2, r5
 8004802:	4631      	mov	r1, r6
 8004804:	f7ff ffdd 	bl	80047c2 <_swiwrite>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	dbf5      	blt.n	80047f8 <_write+0x16>
 800480c:	6862      	ldr	r2, [r4, #4]
 800480e:	1ae8      	subs	r0, r5, r3
 8004810:	4402      	add	r2, r0
 8004812:	42ab      	cmp	r3, r5
 8004814:	6062      	str	r2, [r4, #4]
 8004816:	d1f1      	bne.n	80047fc <_write+0x1a>
 8004818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800481c:	2000      	movs	r0, #0
 800481e:	f7ff bf55 	b.w	80046cc <error>

08004822 <_swiclose>:
 8004822:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004824:	2402      	movs	r4, #2
 8004826:	9001      	str	r0, [sp, #4]
 8004828:	ad01      	add	r5, sp, #4
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	beab      	bkpt	0x00ab
 8004830:	4604      	mov	r4, r0
 8004832:	4620      	mov	r0, r4
 8004834:	f7ff ff58 	bl	80046e8 <checkerror>
 8004838:	b003      	add	sp, #12
 800483a:	bd30      	pop	{r4, r5, pc}

0800483c <_close>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4605      	mov	r5, r0
 8004840:	f7ff ff2a 	bl	8004698 <findslot>
 8004844:	4604      	mov	r4, r0
 8004846:	b930      	cbnz	r0, 8004856 <_close+0x1a>
 8004848:	f001 f85e 	bl	8005908 <__errno>
 800484c:	2309      	movs	r3, #9
 800484e:	6003      	str	r3, [r0, #0]
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	bd38      	pop	{r3, r4, r5, pc}
 8004856:	3d01      	subs	r5, #1
 8004858:	2d01      	cmp	r5, #1
 800485a:	d809      	bhi.n	8004870 <_close+0x34>
 800485c:	4b07      	ldr	r3, [pc, #28]	@ (800487c <_close+0x40>)
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	429a      	cmp	r2, r3
 8004864:	d104      	bne.n	8004870 <_close+0x34>
 8004866:	f04f 33ff 	mov.w	r3, #4294967295
 800486a:	6023      	str	r3, [r4, #0]
 800486c:	2000      	movs	r0, #0
 800486e:	e7f1      	b.n	8004854 <_close+0x18>
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	f7ff ffd6 	bl	8004822 <_swiclose>
 8004876:	2800      	cmp	r0, #0
 8004878:	d0f5      	beq.n	8004866 <_close+0x2a>
 800487a:	e7eb      	b.n	8004854 <_close+0x18>
 800487c:	20000428 	.word	0x20000428

08004880 <_getpid>:
 8004880:	2001      	movs	r0, #1
 8004882:	4770      	bx	lr

08004884 <_swistat>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	460c      	mov	r4, r1
 8004888:	f7ff ff06 	bl	8004698 <findslot>
 800488c:	4605      	mov	r5, r0
 800488e:	b930      	cbnz	r0, 800489e <_swistat+0x1a>
 8004890:	f001 f83a 	bl	8005908 <__errno>
 8004894:	2309      	movs	r3, #9
 8004896:	6003      	str	r3, [r0, #0]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	bd70      	pop	{r4, r5, r6, pc}
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048aa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80048ac:	260c      	movs	r6, #12
 80048ae:	4630      	mov	r0, r6
 80048b0:	4629      	mov	r1, r5
 80048b2:	beab      	bkpt	0x00ab
 80048b4:	4605      	mov	r5, r0
 80048b6:	4628      	mov	r0, r5
 80048b8:	f7ff ff16 	bl	80046e8 <checkerror>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d0eb      	beq.n	8004898 <_swistat+0x14>
 80048c0:	6120      	str	r0, [r4, #16]
 80048c2:	2000      	movs	r0, #0
 80048c4:	e7ea      	b.n	800489c <_swistat+0x18>

080048c6 <_fstat>:
 80048c6:	460b      	mov	r3, r1
 80048c8:	b510      	push	{r4, lr}
 80048ca:	2100      	movs	r1, #0
 80048cc:	4604      	mov	r4, r0
 80048ce:	2258      	movs	r2, #88	@ 0x58
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 ffc7 	bl	8005864 <memset>
 80048d6:	4601      	mov	r1, r0
 80048d8:	4620      	mov	r0, r4
 80048da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048de:	f7ff bfd1 	b.w	8004884 <_swistat>

080048e2 <_stat>:
 80048e2:	b538      	push	{r3, r4, r5, lr}
 80048e4:	460d      	mov	r5, r1
 80048e6:	4604      	mov	r4, r0
 80048e8:	2258      	movs	r2, #88	@ 0x58
 80048ea:	2100      	movs	r1, #0
 80048ec:	4628      	mov	r0, r5
 80048ee:	f000 ffb9 	bl	8005864 <memset>
 80048f2:	4620      	mov	r0, r4
 80048f4:	2100      	movs	r1, #0
 80048f6:	f000 f811 	bl	800491c <_swiopen>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	4604      	mov	r4, r0
 80048fe:	d00b      	beq.n	8004918 <_stat+0x36>
 8004900:	686b      	ldr	r3, [r5, #4]
 8004902:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004906:	606b      	str	r3, [r5, #4]
 8004908:	4629      	mov	r1, r5
 800490a:	f7ff ffbb 	bl	8004884 <_swistat>
 800490e:	4605      	mov	r5, r0
 8004910:	4620      	mov	r0, r4
 8004912:	f7ff ff93 	bl	800483c <_close>
 8004916:	462c      	mov	r4, r5
 8004918:	4620      	mov	r0, r4
 800491a:	bd38      	pop	{r3, r4, r5, pc}

0800491c <_swiopen>:
 800491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004920:	4f29      	ldr	r7, [pc, #164]	@ (80049c8 <_swiopen+0xac>)
 8004922:	b096      	sub	sp, #88	@ 0x58
 8004924:	4682      	mov	sl, r0
 8004926:	460e      	mov	r6, r1
 8004928:	2400      	movs	r4, #0
 800492a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800492e:	3301      	adds	r3, #1
 8004930:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004934:	d00c      	beq.n	8004950 <_swiopen+0x34>
 8004936:	3401      	adds	r4, #1
 8004938:	2c14      	cmp	r4, #20
 800493a:	d1f6      	bne.n	800492a <_swiopen+0xe>
 800493c:	f000 ffe4 	bl	8005908 <__errno>
 8004940:	2318      	movs	r3, #24
 8004942:	6003      	str	r3, [r0, #0]
 8004944:	f04f 34ff 	mov.w	r4, #4294967295
 8004948:	4620      	mov	r0, r4
 800494a:	b016      	add	sp, #88	@ 0x58
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004954:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004958:	46e9      	mov	r9, sp
 800495a:	d109      	bne.n	8004970 <_swiopen+0x54>
 800495c:	4649      	mov	r1, r9
 800495e:	4650      	mov	r0, sl
 8004960:	f7ff ffbf 	bl	80048e2 <_stat>
 8004964:	3001      	adds	r0, #1
 8004966:	d003      	beq.n	8004970 <_swiopen+0x54>
 8004968:	f000 ffce 	bl	8005908 <__errno>
 800496c:	2311      	movs	r3, #17
 800496e:	e7e8      	b.n	8004942 <_swiopen+0x26>
 8004970:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004974:	f240 6301 	movw	r3, #1537	@ 0x601
 8004978:	07b2      	lsls	r2, r6, #30
 800497a:	bf48      	it	mi
 800497c:	f045 0502 	orrmi.w	r5, r5, #2
 8004980:	421e      	tst	r6, r3
 8004982:	bf18      	it	ne
 8004984:	f045 0504 	orrne.w	r5, r5, #4
 8004988:	0733      	lsls	r3, r6, #28
 800498a:	bf48      	it	mi
 800498c:	f025 0504 	bicmi.w	r5, r5, #4
 8004990:	4650      	mov	r0, sl
 8004992:	bf48      	it	mi
 8004994:	f045 0508 	orrmi.w	r5, r5, #8
 8004998:	f8cd a000 	str.w	sl, [sp]
 800499c:	f7fb fc70 	bl	8000280 <strlen>
 80049a0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80049a4:	2501      	movs	r5, #1
 80049a6:	4628      	mov	r0, r5
 80049a8:	4649      	mov	r1, r9
 80049aa:	beab      	bkpt	0x00ab
 80049ac:	4605      	mov	r5, r0
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	db05      	blt.n	80049be <_swiopen+0xa2>
 80049b2:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80049b6:	4447      	add	r7, r8
 80049b8:	2300      	movs	r3, #0
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	e7c4      	b.n	8004948 <_swiopen+0x2c>
 80049be:	4628      	mov	r0, r5
 80049c0:	f7ff fe84 	bl	80046cc <error>
 80049c4:	4604      	mov	r4, r0
 80049c6:	e7bf      	b.n	8004948 <_swiopen+0x2c>
 80049c8:	20000428 	.word	0x20000428

080049cc <_get_semihosting_exts>:
 80049cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049d0:	4606      	mov	r6, r0
 80049d2:	460f      	mov	r7, r1
 80049d4:	4829      	ldr	r0, [pc, #164]	@ (8004a7c <_get_semihosting_exts+0xb0>)
 80049d6:	2100      	movs	r1, #0
 80049d8:	4615      	mov	r5, r2
 80049da:	f7ff ff9f 	bl	800491c <_swiopen>
 80049de:	462a      	mov	r2, r5
 80049e0:	4604      	mov	r4, r0
 80049e2:	2100      	movs	r1, #0
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 ff3d 	bl	8005864 <memset>
 80049ea:	1c63      	adds	r3, r4, #1
 80049ec:	d014      	beq.n	8004a18 <_get_semihosting_exts+0x4c>
 80049ee:	4620      	mov	r0, r4
 80049f0:	f7ff fe52 	bl	8004698 <findslot>
 80049f4:	f04f 080c 	mov.w	r8, #12
 80049f8:	4681      	mov	r9, r0
 80049fa:	4640      	mov	r0, r8
 80049fc:	4649      	mov	r1, r9
 80049fe:	beab      	bkpt	0x00ab
 8004a00:	4680      	mov	r8, r0
 8004a02:	4640      	mov	r0, r8
 8004a04:	f7ff fe70 	bl	80046e8 <checkerror>
 8004a08:	2803      	cmp	r0, #3
 8004a0a:	dd02      	ble.n	8004a12 <_get_semihosting_exts+0x46>
 8004a0c:	1ec3      	subs	r3, r0, #3
 8004a0e:	42ab      	cmp	r3, r5
 8004a10:	dc07      	bgt.n	8004a22 <_get_semihosting_exts+0x56>
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff ff12 	bl	800483c <_close>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	b003      	add	sp, #12
 8004a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a22:	2204      	movs	r2, #4
 8004a24:	eb0d 0102 	add.w	r1, sp, r2
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fe72 	bl	8004712 <_read>
 8004a2e:	2803      	cmp	r0, #3
 8004a30:	ddef      	ble.n	8004a12 <_get_semihosting_exts+0x46>
 8004a32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a36:	2b53      	cmp	r3, #83	@ 0x53
 8004a38:	d1eb      	bne.n	8004a12 <_get_semihosting_exts+0x46>
 8004a3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004a3e:	2b48      	cmp	r3, #72	@ 0x48
 8004a40:	d1e7      	bne.n	8004a12 <_get_semihosting_exts+0x46>
 8004a42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004a46:	2b46      	cmp	r3, #70	@ 0x46
 8004a48:	d1e3      	bne.n	8004a12 <_get_semihosting_exts+0x46>
 8004a4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a4e:	2b42      	cmp	r3, #66	@ 0x42
 8004a50:	d1df      	bne.n	8004a12 <_get_semihosting_exts+0x46>
 8004a52:	2201      	movs	r2, #1
 8004a54:	4639      	mov	r1, r7
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff fe75 	bl	8004746 <_swilseek>
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	dbd8      	blt.n	8004a12 <_get_semihosting_exts+0x46>
 8004a60:	462a      	mov	r2, r5
 8004a62:	4631      	mov	r1, r6
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff fe54 	bl	8004712 <_read>
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff fee5 	bl	800483c <_close>
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7ff fe38 	bl	80046e8 <checkerror>
 8004a78:	e7d0      	b.n	8004a1c <_get_semihosting_exts+0x50>
 8004a7a:	bf00      	nop
 8004a7c:	080075ec 	.word	0x080075ec

08004a80 <initialise_semihosting_exts>:
 8004a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a82:	4d0a      	ldr	r5, [pc, #40]	@ (8004aac <initialise_semihosting_exts+0x2c>)
 8004a84:	4c0a      	ldr	r4, [pc, #40]	@ (8004ab0 <initialise_semihosting_exts+0x30>)
 8004a86:	2100      	movs	r1, #0
 8004a88:	2201      	movs	r2, #1
 8004a8a:	a801      	add	r0, sp, #4
 8004a8c:	6029      	str	r1, [r5, #0]
 8004a8e:	6022      	str	r2, [r4, #0]
 8004a90:	f7ff ff9c 	bl	80049cc <_get_semihosting_exts>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	dd07      	ble.n	8004aa8 <initialise_semihosting_exts+0x28>
 8004a98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a9c:	f003 0201 	and.w	r2, r3, #1
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	602a      	str	r2, [r5, #0]
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	b003      	add	sp, #12
 8004aaa:	bd30      	pop	{r4, r5, pc}
 8004aac:	20000010 	.word	0x20000010
 8004ab0:	2000000c 	.word	0x2000000c

08004ab4 <_has_ext_stdout_stderr>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4c04      	ldr	r4, [pc, #16]	@ (8004ac8 <_has_ext_stdout_stderr+0x14>)
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	da01      	bge.n	8004ac2 <_has_ext_stdout_stderr+0xe>
 8004abe:	f7ff ffdf 	bl	8004a80 <initialise_semihosting_exts>
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2000000c 	.word	0x2000000c

08004acc <initialise_monitor_handles>:
 8004acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8004b84 <initialise_monitor_handles+0xb8>
 8004ad6:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ada:	2303      	movs	r3, #3
 8004adc:	2400      	movs	r4, #0
 8004ade:	9303      	str	r3, [sp, #12]
 8004ae0:	af01      	add	r7, sp, #4
 8004ae2:	9402      	str	r4, [sp, #8]
 8004ae4:	2501      	movs	r5, #1
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	4639      	mov	r1, r7
 8004aea:	beab      	bkpt	0x00ab
 8004aec:	4605      	mov	r5, r0
 8004aee:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004b88 <initialise_monitor_handles+0xbc>
 8004af2:	4623      	mov	r3, r4
 8004af4:	4c20      	ldr	r4, [pc, #128]	@ (8004b78 <initialise_monitor_handles+0xac>)
 8004af6:	f8c8 5000 	str.w	r5, [r8]
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004b02:	3301      	adds	r3, #1
 8004b04:	2b14      	cmp	r3, #20
 8004b06:	d1fa      	bne.n	8004afe <initialise_monitor_handles+0x32>
 8004b08:	f7ff ffd4 	bl	8004ab4 <_has_ext_stdout_stderr>
 8004b0c:	4d1b      	ldr	r5, [pc, #108]	@ (8004b7c <initialise_monitor_handles+0xb0>)
 8004b0e:	b1d0      	cbz	r0, 8004b46 <initialise_monitor_handles+0x7a>
 8004b10:	f04f 0a03 	mov.w	sl, #3
 8004b14:	2304      	movs	r3, #4
 8004b16:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b1a:	2601      	movs	r6, #1
 8004b1c:	f8cd a00c 	str.w	sl, [sp, #12]
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	4630      	mov	r0, r6
 8004b24:	4639      	mov	r1, r7
 8004b26:	beab      	bkpt	0x00ab
 8004b28:	4683      	mov	fp, r0
 8004b2a:	4b15      	ldr	r3, [pc, #84]	@ (8004b80 <initialise_monitor_handles+0xb4>)
 8004b2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b30:	f8c3 b000 	str.w	fp, [r3]
 8004b34:	2308      	movs	r3, #8
 8004b36:	f8cd a00c 	str.w	sl, [sp, #12]
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	4639      	mov	r1, r7
 8004b40:	beab      	bkpt	0x00ab
 8004b42:	4606      	mov	r6, r0
 8004b44:	602e      	str	r6, [r5, #0]
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	bf02      	ittt	eq
 8004b4c:	4b0c      	ldreq	r3, [pc, #48]	@ (8004b80 <initialise_monitor_handles+0xb4>)
 8004b4e:	681b      	ldreq	r3, [r3, #0]
 8004b50:	602b      	streq	r3, [r5, #0]
 8004b52:	2600      	movs	r6, #0
 8004b54:	f8d8 3000 	ldr.w	r3, [r8]
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	6066      	str	r6, [r4, #4]
 8004b5c:	f7ff ffaa 	bl	8004ab4 <_has_ext_stdout_stderr>
 8004b60:	b130      	cbz	r0, 8004b70 <initialise_monitor_handles+0xa4>
 8004b62:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <initialise_monitor_handles+0xb4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004b70:	b005      	add	sp, #20
 8004b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	20000428 	.word	0x20000428
 8004b7c:	2000041c 	.word	0x2000041c
 8004b80:	20000420 	.word	0x20000420
 8004b84:	08007602 	.word	0x08007602
 8004b88:	20000424 	.word	0x20000424

08004b8c <_isatty>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	f7ff fd83 	bl	8004698 <findslot>
 8004b92:	2409      	movs	r4, #9
 8004b94:	4605      	mov	r5, r0
 8004b96:	b920      	cbnz	r0, 8004ba2 <_isatty+0x16>
 8004b98:	f000 feb6 	bl	8005908 <__errno>
 8004b9c:	6004      	str	r4, [r0, #0]
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	beab      	bkpt	0x00ab
 8004ba8:	4604      	mov	r4, r0
 8004baa:	2c01      	cmp	r4, #1
 8004bac:	4620      	mov	r0, r4
 8004bae:	d0f7      	beq.n	8004ba0 <_isatty+0x14>
 8004bb0:	f000 feaa 	bl	8005908 <__errno>
 8004bb4:	2513      	movs	r5, #19
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	2600      	movs	r6, #0
 8004bba:	4628      	mov	r0, r5
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	beab      	bkpt	0x00ab
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	6025      	str	r5, [r4, #0]
 8004bc4:	e7eb      	b.n	8004b9e <_isatty+0x12>

08004bc6 <__cvt>:
 8004bc6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bca:	ec57 6b10 	vmov	r6, r7, d0
 8004bce:	2f00      	cmp	r7, #0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	bfbb      	ittet	lt
 8004bd8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004bdc:	461f      	movlt	r7, r3
 8004bde:	2300      	movge	r3, #0
 8004be0:	232d      	movlt	r3, #45	@ 0x2d
 8004be2:	700b      	strb	r3, [r1, #0]
 8004be4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004be6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004bea:	4691      	mov	r9, r2
 8004bec:	f023 0820 	bic.w	r8, r3, #32
 8004bf0:	bfbc      	itt	lt
 8004bf2:	4632      	movlt	r2, r6
 8004bf4:	4616      	movlt	r6, r2
 8004bf6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bfa:	d005      	beq.n	8004c08 <__cvt+0x42>
 8004bfc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c00:	d100      	bne.n	8004c04 <__cvt+0x3e>
 8004c02:	3401      	adds	r4, #1
 8004c04:	2102      	movs	r1, #2
 8004c06:	e000      	b.n	8004c0a <__cvt+0x44>
 8004c08:	2103      	movs	r1, #3
 8004c0a:	ab03      	add	r3, sp, #12
 8004c0c:	9301      	str	r3, [sp, #4]
 8004c0e:	ab02      	add	r3, sp, #8
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	ec47 6b10 	vmov	d0, r6, r7
 8004c16:	4653      	mov	r3, sl
 8004c18:	4622      	mov	r2, r4
 8004c1a:	f000 ff2d 	bl	8005a78 <_dtoa_r>
 8004c1e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c22:	4605      	mov	r5, r0
 8004c24:	d119      	bne.n	8004c5a <__cvt+0x94>
 8004c26:	f019 0f01 	tst.w	r9, #1
 8004c2a:	d00e      	beq.n	8004c4a <__cvt+0x84>
 8004c2c:	eb00 0904 	add.w	r9, r0, r4
 8004c30:	2200      	movs	r2, #0
 8004c32:	2300      	movs	r3, #0
 8004c34:	4630      	mov	r0, r6
 8004c36:	4639      	mov	r1, r7
 8004c38:	f7fb ff4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c3c:	b108      	cbz	r0, 8004c42 <__cvt+0x7c>
 8004c3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c42:	2230      	movs	r2, #48	@ 0x30
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	454b      	cmp	r3, r9
 8004c48:	d31e      	bcc.n	8004c88 <__cvt+0xc2>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c4e:	1b5b      	subs	r3, r3, r5
 8004c50:	4628      	mov	r0, r5
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	b004      	add	sp, #16
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c5e:	eb00 0904 	add.w	r9, r0, r4
 8004c62:	d1e5      	bne.n	8004c30 <__cvt+0x6a>
 8004c64:	7803      	ldrb	r3, [r0, #0]
 8004c66:	2b30      	cmp	r3, #48	@ 0x30
 8004c68:	d10a      	bne.n	8004c80 <__cvt+0xba>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4639      	mov	r1, r7
 8004c72:	f7fb ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c76:	b918      	cbnz	r0, 8004c80 <__cvt+0xba>
 8004c78:	f1c4 0401 	rsb	r4, r4, #1
 8004c7c:	f8ca 4000 	str.w	r4, [sl]
 8004c80:	f8da 3000 	ldr.w	r3, [sl]
 8004c84:	4499      	add	r9, r3
 8004c86:	e7d3      	b.n	8004c30 <__cvt+0x6a>
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	9103      	str	r1, [sp, #12]
 8004c8c:	701a      	strb	r2, [r3, #0]
 8004c8e:	e7d9      	b.n	8004c44 <__cvt+0x7e>

08004c90 <__exponent>:
 8004c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c92:	2900      	cmp	r1, #0
 8004c94:	bfba      	itte	lt
 8004c96:	4249      	neglt	r1, r1
 8004c98:	232d      	movlt	r3, #45	@ 0x2d
 8004c9a:	232b      	movge	r3, #43	@ 0x2b
 8004c9c:	2909      	cmp	r1, #9
 8004c9e:	7002      	strb	r2, [r0, #0]
 8004ca0:	7043      	strb	r3, [r0, #1]
 8004ca2:	dd29      	ble.n	8004cf8 <__exponent+0x68>
 8004ca4:	f10d 0307 	add.w	r3, sp, #7
 8004ca8:	461d      	mov	r5, r3
 8004caa:	270a      	movs	r7, #10
 8004cac:	461a      	mov	r2, r3
 8004cae:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cb2:	fb07 1416 	mls	r4, r7, r6, r1
 8004cb6:	3430      	adds	r4, #48	@ 0x30
 8004cb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	2c63      	cmp	r4, #99	@ 0x63
 8004cc0:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	dcf1      	bgt.n	8004cac <__exponent+0x1c>
 8004cc8:	3130      	adds	r1, #48	@ 0x30
 8004cca:	1e94      	subs	r4, r2, #2
 8004ccc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004cd0:	1c41      	adds	r1, r0, #1
 8004cd2:	4623      	mov	r3, r4
 8004cd4:	42ab      	cmp	r3, r5
 8004cd6:	d30a      	bcc.n	8004cee <__exponent+0x5e>
 8004cd8:	f10d 0309 	add.w	r3, sp, #9
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	42ac      	cmp	r4, r5
 8004ce0:	bf88      	it	hi
 8004ce2:	2300      	movhi	r3, #0
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	4403      	add	r3, r0
 8004ce8:	1a18      	subs	r0, r3, r0
 8004cea:	b003      	add	sp, #12
 8004cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004cf2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004cf6:	e7ed      	b.n	8004cd4 <__exponent+0x44>
 8004cf8:	2330      	movs	r3, #48	@ 0x30
 8004cfa:	3130      	adds	r1, #48	@ 0x30
 8004cfc:	7083      	strb	r3, [r0, #2]
 8004cfe:	70c1      	strb	r1, [r0, #3]
 8004d00:	1d03      	adds	r3, r0, #4
 8004d02:	e7f1      	b.n	8004ce8 <__exponent+0x58>

08004d04 <_printf_float>:
 8004d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d08:	b08d      	sub	sp, #52	@ 0x34
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d10:	4616      	mov	r6, r2
 8004d12:	461f      	mov	r7, r3
 8004d14:	4605      	mov	r5, r0
 8004d16:	f000 fdad 	bl	8005874 <_localeconv_r>
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb faae 	bl	8000280 <strlen>
 8004d24:	2300      	movs	r3, #0
 8004d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d28:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2c:	9005      	str	r0, [sp, #20]
 8004d2e:	3307      	adds	r3, #7
 8004d30:	f023 0307 	bic.w	r3, r3, #7
 8004d34:	f103 0208 	add.w	r2, r3, #8
 8004d38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8004d40:	f8c8 2000 	str.w	r2, [r8]
 8004d44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d4c:	9307      	str	r3, [sp, #28]
 8004d4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8004fcc <_printf_float+0x2c8>)
 8004d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d60:	f7fb feec 	bl	8000b3c <__aeabi_dcmpun>
 8004d64:	bb70      	cbnz	r0, 8004dc4 <_printf_float+0xc0>
 8004d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d6a:	4b98      	ldr	r3, [pc, #608]	@ (8004fcc <_printf_float+0x2c8>)
 8004d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d70:	f7fb fec6 	bl	8000b00 <__aeabi_dcmple>
 8004d74:	bb30      	cbnz	r0, 8004dc4 <_printf_float+0xc0>
 8004d76:	2200      	movs	r2, #0
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	f7fb feb5 	bl	8000aec <__aeabi_dcmplt>
 8004d82:	b110      	cbz	r0, 8004d8a <_printf_float+0x86>
 8004d84:	232d      	movs	r3, #45	@ 0x2d
 8004d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d8a:	4a91      	ldr	r2, [pc, #580]	@ (8004fd0 <_printf_float+0x2cc>)
 8004d8c:	4b91      	ldr	r3, [pc, #580]	@ (8004fd4 <_printf_float+0x2d0>)
 8004d8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d92:	bf94      	ite	ls
 8004d94:	4690      	movls	r8, r2
 8004d96:	4698      	movhi	r8, r3
 8004d98:	2303      	movs	r3, #3
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	f02b 0304 	bic.w	r3, fp, #4
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	f04f 0900 	mov.w	r9, #0
 8004da6:	9700      	str	r7, [sp, #0]
 8004da8:	4633      	mov	r3, r6
 8004daa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004dac:	4621      	mov	r1, r4
 8004dae:	4628      	mov	r0, r5
 8004db0:	f000 f9d2 	bl	8005158 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	f040 808d 	bne.w	8004ed4 <_printf_float+0x1d0>
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbe:	b00d      	add	sp, #52	@ 0x34
 8004dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	4640      	mov	r0, r8
 8004dca:	4649      	mov	r1, r9
 8004dcc:	f7fb feb6 	bl	8000b3c <__aeabi_dcmpun>
 8004dd0:	b140      	cbz	r0, 8004de4 <_printf_float+0xe0>
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bfbc      	itt	lt
 8004dd8:	232d      	movlt	r3, #45	@ 0x2d
 8004dda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004dde:	4a7e      	ldr	r2, [pc, #504]	@ (8004fd8 <_printf_float+0x2d4>)
 8004de0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fdc <_printf_float+0x2d8>)
 8004de2:	e7d4      	b.n	8004d8e <_printf_float+0x8a>
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004dea:	9206      	str	r2, [sp, #24]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	d13b      	bne.n	8004e68 <_printf_float+0x164>
 8004df0:	2306      	movs	r3, #6
 8004df2:	6063      	str	r3, [r4, #4]
 8004df4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6022      	str	r2, [r4, #0]
 8004dfc:	9303      	str	r3, [sp, #12]
 8004dfe:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e04:	ab09      	add	r3, sp, #36	@ 0x24
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	6861      	ldr	r1, [r4, #4]
 8004e0a:	ec49 8b10 	vmov	d0, r8, r9
 8004e0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e12:	4628      	mov	r0, r5
 8004e14:	f7ff fed7 	bl	8004bc6 <__cvt>
 8004e18:	9b06      	ldr	r3, [sp, #24]
 8004e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e1c:	2b47      	cmp	r3, #71	@ 0x47
 8004e1e:	4680      	mov	r8, r0
 8004e20:	d129      	bne.n	8004e76 <_printf_float+0x172>
 8004e22:	1cc8      	adds	r0, r1, #3
 8004e24:	db02      	blt.n	8004e2c <_printf_float+0x128>
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	4299      	cmp	r1, r3
 8004e2a:	dd41      	ble.n	8004eb0 <_printf_float+0x1ac>
 8004e2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e30:	fa5f fa8a 	uxtb.w	sl, sl
 8004e34:	3901      	subs	r1, #1
 8004e36:	4652      	mov	r2, sl
 8004e38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e3e:	f7ff ff27 	bl	8004c90 <__exponent>
 8004e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e44:	1813      	adds	r3, r2, r0
 8004e46:	2a01      	cmp	r2, #1
 8004e48:	4681      	mov	r9, r0
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	dc02      	bgt.n	8004e54 <_printf_float+0x150>
 8004e4e:	6822      	ldr	r2, [r4, #0]
 8004e50:	07d2      	lsls	r2, r2, #31
 8004e52:	d501      	bpl.n	8004e58 <_printf_float+0x154>
 8004e54:	3301      	adds	r3, #1
 8004e56:	6123      	str	r3, [r4, #16]
 8004e58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0a2      	beq.n	8004da6 <_printf_float+0xa2>
 8004e60:	232d      	movs	r3, #45	@ 0x2d
 8004e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e66:	e79e      	b.n	8004da6 <_printf_float+0xa2>
 8004e68:	9a06      	ldr	r2, [sp, #24]
 8004e6a:	2a47      	cmp	r2, #71	@ 0x47
 8004e6c:	d1c2      	bne.n	8004df4 <_printf_float+0xf0>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1c0      	bne.n	8004df4 <_printf_float+0xf0>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7bd      	b.n	8004df2 <_printf_float+0xee>
 8004e76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e7a:	d9db      	bls.n	8004e34 <_printf_float+0x130>
 8004e7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e80:	d118      	bne.n	8004eb4 <_printf_float+0x1b0>
 8004e82:	2900      	cmp	r1, #0
 8004e84:	6863      	ldr	r3, [r4, #4]
 8004e86:	dd0b      	ble.n	8004ea0 <_printf_float+0x19c>
 8004e88:	6121      	str	r1, [r4, #16]
 8004e8a:	b913      	cbnz	r3, 8004e92 <_printf_float+0x18e>
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	07d0      	lsls	r0, r2, #31
 8004e90:	d502      	bpl.n	8004e98 <_printf_float+0x194>
 8004e92:	3301      	adds	r3, #1
 8004e94:	440b      	add	r3, r1
 8004e96:	6123      	str	r3, [r4, #16]
 8004e98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e9a:	f04f 0900 	mov.w	r9, #0
 8004e9e:	e7db      	b.n	8004e58 <_printf_float+0x154>
 8004ea0:	b913      	cbnz	r3, 8004ea8 <_printf_float+0x1a4>
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	07d2      	lsls	r2, r2, #31
 8004ea6:	d501      	bpl.n	8004eac <_printf_float+0x1a8>
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	e7f4      	b.n	8004e96 <_printf_float+0x192>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e7f2      	b.n	8004e96 <_printf_float+0x192>
 8004eb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	db05      	blt.n	8004ec6 <_printf_float+0x1c2>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	6121      	str	r1, [r4, #16]
 8004ebe:	07d8      	lsls	r0, r3, #31
 8004ec0:	d5ea      	bpl.n	8004e98 <_printf_float+0x194>
 8004ec2:	1c4b      	adds	r3, r1, #1
 8004ec4:	e7e7      	b.n	8004e96 <_printf_float+0x192>
 8004ec6:	2900      	cmp	r1, #0
 8004ec8:	bfd4      	ite	le
 8004eca:	f1c1 0202 	rsble	r2, r1, #2
 8004ece:	2201      	movgt	r2, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	e7e0      	b.n	8004e96 <_printf_float+0x192>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	055a      	lsls	r2, r3, #21
 8004ed8:	d407      	bmi.n	8004eea <_printf_float+0x1e6>
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	4642      	mov	r2, r8
 8004ede:	4631      	mov	r1, r6
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	47b8      	blx	r7
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d12b      	bne.n	8004f40 <_printf_float+0x23c>
 8004ee8:	e767      	b.n	8004dba <_printf_float+0xb6>
 8004eea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004eee:	f240 80dd 	bls.w	80050ac <_printf_float+0x3a8>
 8004ef2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f7fb fded 	bl	8000ad8 <__aeabi_dcmpeq>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d033      	beq.n	8004f6a <_printf_float+0x266>
 8004f02:	4a37      	ldr	r2, [pc, #220]	@ (8004fe0 <_printf_float+0x2dc>)
 8004f04:	2301      	movs	r3, #1
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f af54 	beq.w	8004dba <_printf_float+0xb6>
 8004f12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f16:	4543      	cmp	r3, r8
 8004f18:	db02      	blt.n	8004f20 <_printf_float+0x21c>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	07d8      	lsls	r0, r3, #31
 8004f1e:	d50f      	bpl.n	8004f40 <_printf_float+0x23c>
 8004f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f24:	4631      	mov	r1, r6
 8004f26:	4628      	mov	r0, r5
 8004f28:	47b8      	blx	r7
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	f43f af45 	beq.w	8004dba <_printf_float+0xb6>
 8004f30:	f04f 0900 	mov.w	r9, #0
 8004f34:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f38:	f104 0a1a 	add.w	sl, r4, #26
 8004f3c:	45c8      	cmp	r8, r9
 8004f3e:	dc09      	bgt.n	8004f54 <_printf_float+0x250>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	079b      	lsls	r3, r3, #30
 8004f44:	f100 8103 	bmi.w	800514e <_printf_float+0x44a>
 8004f48:	68e0      	ldr	r0, [r4, #12]
 8004f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f4c:	4298      	cmp	r0, r3
 8004f4e:	bfb8      	it	lt
 8004f50:	4618      	movlt	r0, r3
 8004f52:	e734      	b.n	8004dbe <_printf_float+0xba>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4652      	mov	r2, sl
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b8      	blx	r7
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f43f af2b 	beq.w	8004dba <_printf_float+0xb6>
 8004f64:	f109 0901 	add.w	r9, r9, #1
 8004f68:	e7e8      	b.n	8004f3c <_printf_float+0x238>
 8004f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dc39      	bgt.n	8004fe4 <_printf_float+0x2e0>
 8004f70:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <_printf_float+0x2dc>)
 8004f72:	2301      	movs	r3, #1
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f af1d 	beq.w	8004dba <_printf_float+0xb6>
 8004f80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f84:	ea59 0303 	orrs.w	r3, r9, r3
 8004f88:	d102      	bne.n	8004f90 <_printf_float+0x28c>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	07d9      	lsls	r1, r3, #31
 8004f8e:	d5d7      	bpl.n	8004f40 <_printf_float+0x23c>
 8004f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b8      	blx	r7
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f43f af0d 	beq.w	8004dba <_printf_float+0xb6>
 8004fa0:	f04f 0a00 	mov.w	sl, #0
 8004fa4:	f104 0b1a 	add.w	fp, r4, #26
 8004fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004faa:	425b      	negs	r3, r3
 8004fac:	4553      	cmp	r3, sl
 8004fae:	dc01      	bgt.n	8004fb4 <_printf_float+0x2b0>
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	e793      	b.n	8004edc <_printf_float+0x1d8>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	465a      	mov	r2, fp
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f aefb 	beq.w	8004dba <_printf_float+0xb6>
 8004fc4:	f10a 0a01 	add.w	sl, sl, #1
 8004fc8:	e7ee      	b.n	8004fa8 <_printf_float+0x2a4>
 8004fca:	bf00      	nop
 8004fcc:	7fefffff 	.word	0x7fefffff
 8004fd0:	08007606 	.word	0x08007606
 8004fd4:	0800760a 	.word	0x0800760a
 8004fd8:	0800760e 	.word	0x0800760e
 8004fdc:	08007612 	.word	0x08007612
 8004fe0:	08007616 	.word	0x08007616
 8004fe4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fe6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fea:	4553      	cmp	r3, sl
 8004fec:	bfa8      	it	ge
 8004fee:	4653      	movge	r3, sl
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	4699      	mov	r9, r3
 8004ff4:	dc36      	bgt.n	8005064 <_printf_float+0x360>
 8004ff6:	f04f 0b00 	mov.w	fp, #0
 8004ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ffe:	f104 021a 	add.w	r2, r4, #26
 8005002:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005004:	9306      	str	r3, [sp, #24]
 8005006:	eba3 0309 	sub.w	r3, r3, r9
 800500a:	455b      	cmp	r3, fp
 800500c:	dc31      	bgt.n	8005072 <_printf_float+0x36e>
 800500e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005010:	459a      	cmp	sl, r3
 8005012:	dc3a      	bgt.n	800508a <_printf_float+0x386>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	07da      	lsls	r2, r3, #31
 8005018:	d437      	bmi.n	800508a <_printf_float+0x386>
 800501a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501c:	ebaa 0903 	sub.w	r9, sl, r3
 8005020:	9b06      	ldr	r3, [sp, #24]
 8005022:	ebaa 0303 	sub.w	r3, sl, r3
 8005026:	4599      	cmp	r9, r3
 8005028:	bfa8      	it	ge
 800502a:	4699      	movge	r9, r3
 800502c:	f1b9 0f00 	cmp.w	r9, #0
 8005030:	dc33      	bgt.n	800509a <_printf_float+0x396>
 8005032:	f04f 0800 	mov.w	r8, #0
 8005036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800503a:	f104 0b1a 	add.w	fp, r4, #26
 800503e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005040:	ebaa 0303 	sub.w	r3, sl, r3
 8005044:	eba3 0309 	sub.w	r3, r3, r9
 8005048:	4543      	cmp	r3, r8
 800504a:	f77f af79 	ble.w	8004f40 <_printf_float+0x23c>
 800504e:	2301      	movs	r3, #1
 8005050:	465a      	mov	r2, fp
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	f43f aeae 	beq.w	8004dba <_printf_float+0xb6>
 800505e:	f108 0801 	add.w	r8, r8, #1
 8005062:	e7ec      	b.n	800503e <_printf_float+0x33a>
 8005064:	4642      	mov	r2, r8
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	d1c2      	bne.n	8004ff6 <_printf_float+0x2f2>
 8005070:	e6a3      	b.n	8004dba <_printf_float+0xb6>
 8005072:	2301      	movs	r3, #1
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	9206      	str	r2, [sp, #24]
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	f43f ae9c 	beq.w	8004dba <_printf_float+0xb6>
 8005082:	9a06      	ldr	r2, [sp, #24]
 8005084:	f10b 0b01 	add.w	fp, fp, #1
 8005088:	e7bb      	b.n	8005002 <_printf_float+0x2fe>
 800508a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	d1c0      	bne.n	800501a <_printf_float+0x316>
 8005098:	e68f      	b.n	8004dba <_printf_float+0xb6>
 800509a:	9a06      	ldr	r2, [sp, #24]
 800509c:	464b      	mov	r3, r9
 800509e:	4442      	add	r2, r8
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	d1c3      	bne.n	8005032 <_printf_float+0x32e>
 80050aa:	e686      	b.n	8004dba <_printf_float+0xb6>
 80050ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050b0:	f1ba 0f01 	cmp.w	sl, #1
 80050b4:	dc01      	bgt.n	80050ba <_printf_float+0x3b6>
 80050b6:	07db      	lsls	r3, r3, #31
 80050b8:	d536      	bpl.n	8005128 <_printf_float+0x424>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4642      	mov	r2, r8
 80050be:	4631      	mov	r1, r6
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b8      	blx	r7
 80050c4:	3001      	adds	r0, #1
 80050c6:	f43f ae78 	beq.w	8004dba <_printf_float+0xb6>
 80050ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f ae70 	beq.w	8004dba <_printf_float+0xb6>
 80050da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050de:	2200      	movs	r2, #0
 80050e0:	2300      	movs	r3, #0
 80050e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050e6:	f7fb fcf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80050ea:	b9c0      	cbnz	r0, 800511e <_printf_float+0x41a>
 80050ec:	4653      	mov	r3, sl
 80050ee:	f108 0201 	add.w	r2, r8, #1
 80050f2:	4631      	mov	r1, r6
 80050f4:	4628      	mov	r0, r5
 80050f6:	47b8      	blx	r7
 80050f8:	3001      	adds	r0, #1
 80050fa:	d10c      	bne.n	8005116 <_printf_float+0x412>
 80050fc:	e65d      	b.n	8004dba <_printf_float+0xb6>
 80050fe:	2301      	movs	r3, #1
 8005100:	465a      	mov	r2, fp
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f ae56 	beq.w	8004dba <_printf_float+0xb6>
 800510e:	f108 0801 	add.w	r8, r8, #1
 8005112:	45d0      	cmp	r8, sl
 8005114:	dbf3      	blt.n	80050fe <_printf_float+0x3fa>
 8005116:	464b      	mov	r3, r9
 8005118:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800511c:	e6df      	b.n	8004ede <_printf_float+0x1da>
 800511e:	f04f 0800 	mov.w	r8, #0
 8005122:	f104 0b1a 	add.w	fp, r4, #26
 8005126:	e7f4      	b.n	8005112 <_printf_float+0x40e>
 8005128:	2301      	movs	r3, #1
 800512a:	4642      	mov	r2, r8
 800512c:	e7e1      	b.n	80050f2 <_printf_float+0x3ee>
 800512e:	2301      	movs	r3, #1
 8005130:	464a      	mov	r2, r9
 8005132:	4631      	mov	r1, r6
 8005134:	4628      	mov	r0, r5
 8005136:	47b8      	blx	r7
 8005138:	3001      	adds	r0, #1
 800513a:	f43f ae3e 	beq.w	8004dba <_printf_float+0xb6>
 800513e:	f108 0801 	add.w	r8, r8, #1
 8005142:	68e3      	ldr	r3, [r4, #12]
 8005144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005146:	1a5b      	subs	r3, r3, r1
 8005148:	4543      	cmp	r3, r8
 800514a:	dcf0      	bgt.n	800512e <_printf_float+0x42a>
 800514c:	e6fc      	b.n	8004f48 <_printf_float+0x244>
 800514e:	f04f 0800 	mov.w	r8, #0
 8005152:	f104 0919 	add.w	r9, r4, #25
 8005156:	e7f4      	b.n	8005142 <_printf_float+0x43e>

08005158 <_printf_common>:
 8005158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	4616      	mov	r6, r2
 800515e:	4698      	mov	r8, r3
 8005160:	688a      	ldr	r2, [r1, #8]
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005168:	4293      	cmp	r3, r2
 800516a:	bfb8      	it	lt
 800516c:	4613      	movlt	r3, r2
 800516e:	6033      	str	r3, [r6, #0]
 8005170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005174:	4607      	mov	r7, r0
 8005176:	460c      	mov	r4, r1
 8005178:	b10a      	cbz	r2, 800517e <_printf_common+0x26>
 800517a:	3301      	adds	r3, #1
 800517c:	6033      	str	r3, [r6, #0]
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	0699      	lsls	r1, r3, #26
 8005182:	bf42      	ittt	mi
 8005184:	6833      	ldrmi	r3, [r6, #0]
 8005186:	3302      	addmi	r3, #2
 8005188:	6033      	strmi	r3, [r6, #0]
 800518a:	6825      	ldr	r5, [r4, #0]
 800518c:	f015 0506 	ands.w	r5, r5, #6
 8005190:	d106      	bne.n	80051a0 <_printf_common+0x48>
 8005192:	f104 0a19 	add.w	sl, r4, #25
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	6832      	ldr	r2, [r6, #0]
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	42ab      	cmp	r3, r5
 800519e:	dc26      	bgt.n	80051ee <_printf_common+0x96>
 80051a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	3b00      	subs	r3, #0
 80051a8:	bf18      	it	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	0692      	lsls	r2, r2, #26
 80051ae:	d42b      	bmi.n	8005208 <_printf_common+0xb0>
 80051b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051b4:	4641      	mov	r1, r8
 80051b6:	4638      	mov	r0, r7
 80051b8:	47c8      	blx	r9
 80051ba:	3001      	adds	r0, #1
 80051bc:	d01e      	beq.n	80051fc <_printf_common+0xa4>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	6922      	ldr	r2, [r4, #16]
 80051c2:	f003 0306 	and.w	r3, r3, #6
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	bf02      	ittt	eq
 80051ca:	68e5      	ldreq	r5, [r4, #12]
 80051cc:	6833      	ldreq	r3, [r6, #0]
 80051ce:	1aed      	subeq	r5, r5, r3
 80051d0:	68a3      	ldr	r3, [r4, #8]
 80051d2:	bf0c      	ite	eq
 80051d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d8:	2500      	movne	r5, #0
 80051da:	4293      	cmp	r3, r2
 80051dc:	bfc4      	itt	gt
 80051de:	1a9b      	subgt	r3, r3, r2
 80051e0:	18ed      	addgt	r5, r5, r3
 80051e2:	2600      	movs	r6, #0
 80051e4:	341a      	adds	r4, #26
 80051e6:	42b5      	cmp	r5, r6
 80051e8:	d11a      	bne.n	8005220 <_printf_common+0xc8>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e008      	b.n	8005200 <_printf_common+0xa8>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4652      	mov	r2, sl
 80051f2:	4641      	mov	r1, r8
 80051f4:	4638      	mov	r0, r7
 80051f6:	47c8      	blx	r9
 80051f8:	3001      	adds	r0, #1
 80051fa:	d103      	bne.n	8005204 <_printf_common+0xac>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005204:	3501      	adds	r5, #1
 8005206:	e7c6      	b.n	8005196 <_printf_common+0x3e>
 8005208:	18e1      	adds	r1, r4, r3
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	2030      	movs	r0, #48	@ 0x30
 800520e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005212:	4422      	add	r2, r4
 8005214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800521c:	3302      	adds	r3, #2
 800521e:	e7c7      	b.n	80051b0 <_printf_common+0x58>
 8005220:	2301      	movs	r3, #1
 8005222:	4622      	mov	r2, r4
 8005224:	4641      	mov	r1, r8
 8005226:	4638      	mov	r0, r7
 8005228:	47c8      	blx	r9
 800522a:	3001      	adds	r0, #1
 800522c:	d0e6      	beq.n	80051fc <_printf_common+0xa4>
 800522e:	3601      	adds	r6, #1
 8005230:	e7d9      	b.n	80051e6 <_printf_common+0x8e>
	...

08005234 <_printf_i>:
 8005234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	7e0f      	ldrb	r7, [r1, #24]
 800523a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800523c:	2f78      	cmp	r7, #120	@ 0x78
 800523e:	4691      	mov	r9, r2
 8005240:	4680      	mov	r8, r0
 8005242:	460c      	mov	r4, r1
 8005244:	469a      	mov	sl, r3
 8005246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800524a:	d807      	bhi.n	800525c <_printf_i+0x28>
 800524c:	2f62      	cmp	r7, #98	@ 0x62
 800524e:	d80a      	bhi.n	8005266 <_printf_i+0x32>
 8005250:	2f00      	cmp	r7, #0
 8005252:	f000 80d2 	beq.w	80053fa <_printf_i+0x1c6>
 8005256:	2f58      	cmp	r7, #88	@ 0x58
 8005258:	f000 80b9 	beq.w	80053ce <_printf_i+0x19a>
 800525c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005264:	e03a      	b.n	80052dc <_printf_i+0xa8>
 8005266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800526a:	2b15      	cmp	r3, #21
 800526c:	d8f6      	bhi.n	800525c <_printf_i+0x28>
 800526e:	a101      	add	r1, pc, #4	@ (adr r1, 8005274 <_printf_i+0x40>)
 8005270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005274:	080052cd 	.word	0x080052cd
 8005278:	080052e1 	.word	0x080052e1
 800527c:	0800525d 	.word	0x0800525d
 8005280:	0800525d 	.word	0x0800525d
 8005284:	0800525d 	.word	0x0800525d
 8005288:	0800525d 	.word	0x0800525d
 800528c:	080052e1 	.word	0x080052e1
 8005290:	0800525d 	.word	0x0800525d
 8005294:	0800525d 	.word	0x0800525d
 8005298:	0800525d 	.word	0x0800525d
 800529c:	0800525d 	.word	0x0800525d
 80052a0:	080053e1 	.word	0x080053e1
 80052a4:	0800530b 	.word	0x0800530b
 80052a8:	0800539b 	.word	0x0800539b
 80052ac:	0800525d 	.word	0x0800525d
 80052b0:	0800525d 	.word	0x0800525d
 80052b4:	08005403 	.word	0x08005403
 80052b8:	0800525d 	.word	0x0800525d
 80052bc:	0800530b 	.word	0x0800530b
 80052c0:	0800525d 	.word	0x0800525d
 80052c4:	0800525d 	.word	0x0800525d
 80052c8:	080053a3 	.word	0x080053a3
 80052cc:	6833      	ldr	r3, [r6, #0]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6032      	str	r2, [r6, #0]
 80052d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052dc:	2301      	movs	r3, #1
 80052de:	e09d      	b.n	800541c <_printf_i+0x1e8>
 80052e0:	6833      	ldr	r3, [r6, #0]
 80052e2:	6820      	ldr	r0, [r4, #0]
 80052e4:	1d19      	adds	r1, r3, #4
 80052e6:	6031      	str	r1, [r6, #0]
 80052e8:	0606      	lsls	r6, r0, #24
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0xbc>
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	e003      	b.n	80052f8 <_printf_i+0xc4>
 80052f0:	0645      	lsls	r5, r0, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0xb8>
 80052f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	da03      	bge.n	8005304 <_printf_i+0xd0>
 80052fc:	232d      	movs	r3, #45	@ 0x2d
 80052fe:	426d      	negs	r5, r5
 8005300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005304:	4859      	ldr	r0, [pc, #356]	@ (800546c <_printf_i+0x238>)
 8005306:	230a      	movs	r3, #10
 8005308:	e011      	b.n	800532e <_printf_i+0xfa>
 800530a:	6821      	ldr	r1, [r4, #0]
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	0608      	lsls	r0, r1, #24
 8005310:	f853 5b04 	ldr.w	r5, [r3], #4
 8005314:	d402      	bmi.n	800531c <_printf_i+0xe8>
 8005316:	0649      	lsls	r1, r1, #25
 8005318:	bf48      	it	mi
 800531a:	b2ad      	uxthmi	r5, r5
 800531c:	2f6f      	cmp	r7, #111	@ 0x6f
 800531e:	4853      	ldr	r0, [pc, #332]	@ (800546c <_printf_i+0x238>)
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	bf14      	ite	ne
 8005324:	230a      	movne	r3, #10
 8005326:	2308      	moveq	r3, #8
 8005328:	2100      	movs	r1, #0
 800532a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800532e:	6866      	ldr	r6, [r4, #4]
 8005330:	60a6      	str	r6, [r4, #8]
 8005332:	2e00      	cmp	r6, #0
 8005334:	bfa2      	ittt	ge
 8005336:	6821      	ldrge	r1, [r4, #0]
 8005338:	f021 0104 	bicge.w	r1, r1, #4
 800533c:	6021      	strge	r1, [r4, #0]
 800533e:	b90d      	cbnz	r5, 8005344 <_printf_i+0x110>
 8005340:	2e00      	cmp	r6, #0
 8005342:	d04b      	beq.n	80053dc <_printf_i+0x1a8>
 8005344:	4616      	mov	r6, r2
 8005346:	fbb5 f1f3 	udiv	r1, r5, r3
 800534a:	fb03 5711 	mls	r7, r3, r1, r5
 800534e:	5dc7      	ldrb	r7, [r0, r7]
 8005350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005354:	462f      	mov	r7, r5
 8005356:	42bb      	cmp	r3, r7
 8005358:	460d      	mov	r5, r1
 800535a:	d9f4      	bls.n	8005346 <_printf_i+0x112>
 800535c:	2b08      	cmp	r3, #8
 800535e:	d10b      	bne.n	8005378 <_printf_i+0x144>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07df      	lsls	r7, r3, #31
 8005364:	d508      	bpl.n	8005378 <_printf_i+0x144>
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6861      	ldr	r1, [r4, #4]
 800536a:	4299      	cmp	r1, r3
 800536c:	bfde      	ittt	le
 800536e:	2330      	movle	r3, #48	@ 0x30
 8005370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005378:	1b92      	subs	r2, r2, r6
 800537a:	6122      	str	r2, [r4, #16]
 800537c:	f8cd a000 	str.w	sl, [sp]
 8005380:	464b      	mov	r3, r9
 8005382:	aa03      	add	r2, sp, #12
 8005384:	4621      	mov	r1, r4
 8005386:	4640      	mov	r0, r8
 8005388:	f7ff fee6 	bl	8005158 <_printf_common>
 800538c:	3001      	adds	r0, #1
 800538e:	d14a      	bne.n	8005426 <_printf_i+0x1f2>
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	b004      	add	sp, #16
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f043 0320 	orr.w	r3, r3, #32
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	4833      	ldr	r0, [pc, #204]	@ (8005470 <_printf_i+0x23c>)
 80053a4:	2778      	movs	r7, #120	@ 0x78
 80053a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	6831      	ldr	r1, [r6, #0]
 80053ae:	061f      	lsls	r7, r3, #24
 80053b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80053b4:	d402      	bmi.n	80053bc <_printf_i+0x188>
 80053b6:	065f      	lsls	r7, r3, #25
 80053b8:	bf48      	it	mi
 80053ba:	b2ad      	uxthmi	r5, r5
 80053bc:	6031      	str	r1, [r6, #0]
 80053be:	07d9      	lsls	r1, r3, #31
 80053c0:	bf44      	itt	mi
 80053c2:	f043 0320 	orrmi.w	r3, r3, #32
 80053c6:	6023      	strmi	r3, [r4, #0]
 80053c8:	b11d      	cbz	r5, 80053d2 <_printf_i+0x19e>
 80053ca:	2310      	movs	r3, #16
 80053cc:	e7ac      	b.n	8005328 <_printf_i+0xf4>
 80053ce:	4827      	ldr	r0, [pc, #156]	@ (800546c <_printf_i+0x238>)
 80053d0:	e7e9      	b.n	80053a6 <_printf_i+0x172>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f023 0320 	bic.w	r3, r3, #32
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	e7f6      	b.n	80053ca <_printf_i+0x196>
 80053dc:	4616      	mov	r6, r2
 80053de:	e7bd      	b.n	800535c <_printf_i+0x128>
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	6825      	ldr	r5, [r4, #0]
 80053e4:	6961      	ldr	r1, [r4, #20]
 80053e6:	1d18      	adds	r0, r3, #4
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	062e      	lsls	r6, r5, #24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	d501      	bpl.n	80053f4 <_printf_i+0x1c0>
 80053f0:	6019      	str	r1, [r3, #0]
 80053f2:	e002      	b.n	80053fa <_printf_i+0x1c6>
 80053f4:	0668      	lsls	r0, r5, #25
 80053f6:	d5fb      	bpl.n	80053f0 <_printf_i+0x1bc>
 80053f8:	8019      	strh	r1, [r3, #0]
 80053fa:	2300      	movs	r3, #0
 80053fc:	6123      	str	r3, [r4, #16]
 80053fe:	4616      	mov	r6, r2
 8005400:	e7bc      	b.n	800537c <_printf_i+0x148>
 8005402:	6833      	ldr	r3, [r6, #0]
 8005404:	1d1a      	adds	r2, r3, #4
 8005406:	6032      	str	r2, [r6, #0]
 8005408:	681e      	ldr	r6, [r3, #0]
 800540a:	6862      	ldr	r2, [r4, #4]
 800540c:	2100      	movs	r1, #0
 800540e:	4630      	mov	r0, r6
 8005410:	f7fa fee6 	bl	80001e0 <memchr>
 8005414:	b108      	cbz	r0, 800541a <_printf_i+0x1e6>
 8005416:	1b80      	subs	r0, r0, r6
 8005418:	6060      	str	r0, [r4, #4]
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	2300      	movs	r3, #0
 8005420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005424:	e7aa      	b.n	800537c <_printf_i+0x148>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	4632      	mov	r2, r6
 800542a:	4649      	mov	r1, r9
 800542c:	4640      	mov	r0, r8
 800542e:	47d0      	blx	sl
 8005430:	3001      	adds	r0, #1
 8005432:	d0ad      	beq.n	8005390 <_printf_i+0x15c>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	d413      	bmi.n	8005462 <_printf_i+0x22e>
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	4298      	cmp	r0, r3
 8005440:	bfb8      	it	lt
 8005442:	4618      	movlt	r0, r3
 8005444:	e7a6      	b.n	8005394 <_printf_i+0x160>
 8005446:	2301      	movs	r3, #1
 8005448:	4632      	mov	r2, r6
 800544a:	4649      	mov	r1, r9
 800544c:	4640      	mov	r0, r8
 800544e:	47d0      	blx	sl
 8005450:	3001      	adds	r0, #1
 8005452:	d09d      	beq.n	8005390 <_printf_i+0x15c>
 8005454:	3501      	adds	r5, #1
 8005456:	68e3      	ldr	r3, [r4, #12]
 8005458:	9903      	ldr	r1, [sp, #12]
 800545a:	1a5b      	subs	r3, r3, r1
 800545c:	42ab      	cmp	r3, r5
 800545e:	dcf2      	bgt.n	8005446 <_printf_i+0x212>
 8005460:	e7eb      	b.n	800543a <_printf_i+0x206>
 8005462:	2500      	movs	r5, #0
 8005464:	f104 0619 	add.w	r6, r4, #25
 8005468:	e7f5      	b.n	8005456 <_printf_i+0x222>
 800546a:	bf00      	nop
 800546c:	08007618 	.word	0x08007618
 8005470:	08007629 	.word	0x08007629

08005474 <std>:
 8005474:	2300      	movs	r3, #0
 8005476:	b510      	push	{r4, lr}
 8005478:	4604      	mov	r4, r0
 800547a:	e9c0 3300 	strd	r3, r3, [r0]
 800547e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005482:	6083      	str	r3, [r0, #8]
 8005484:	8181      	strh	r1, [r0, #12]
 8005486:	6643      	str	r3, [r0, #100]	@ 0x64
 8005488:	81c2      	strh	r2, [r0, #14]
 800548a:	6183      	str	r3, [r0, #24]
 800548c:	4619      	mov	r1, r3
 800548e:	2208      	movs	r2, #8
 8005490:	305c      	adds	r0, #92	@ 0x5c
 8005492:	f000 f9e7 	bl	8005864 <memset>
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <std+0x58>)
 8005498:	6263      	str	r3, [r4, #36]	@ 0x24
 800549a:	4b0d      	ldr	r3, [pc, #52]	@ (80054d0 <std+0x5c>)
 800549c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <std+0x60>)
 80054a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <std+0x64>)
 80054a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <std+0x68>)
 80054a8:	6224      	str	r4, [r4, #32]
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d006      	beq.n	80054bc <std+0x48>
 80054ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054b2:	4294      	cmp	r4, r2
 80054b4:	d002      	beq.n	80054bc <std+0x48>
 80054b6:	33d0      	adds	r3, #208	@ 0xd0
 80054b8:	429c      	cmp	r4, r3
 80054ba:	d105      	bne.n	80054c8 <std+0x54>
 80054bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c4:	f000 ba4a 	b.w	800595c <__retarget_lock_init_recursive>
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	080056b5 	.word	0x080056b5
 80054d0:	080056d7 	.word	0x080056d7
 80054d4:	0800570f 	.word	0x0800570f
 80054d8:	08005733 	.word	0x08005733
 80054dc:	200004c8 	.word	0x200004c8

080054e0 <stdio_exit_handler>:
 80054e0:	4a02      	ldr	r2, [pc, #8]	@ (80054ec <stdio_exit_handler+0xc>)
 80054e2:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <stdio_exit_handler+0x10>)
 80054e4:	4803      	ldr	r0, [pc, #12]	@ (80054f4 <stdio_exit_handler+0x14>)
 80054e6:	f000 b869 	b.w	80055bc <_fwalk_sglue>
 80054ea:	bf00      	nop
 80054ec:	20000014 	.word	0x20000014
 80054f0:	0800700d 	.word	0x0800700d
 80054f4:	20000024 	.word	0x20000024

080054f8 <cleanup_stdio>:
 80054f8:	6841      	ldr	r1, [r0, #4]
 80054fa:	4b0c      	ldr	r3, [pc, #48]	@ (800552c <cleanup_stdio+0x34>)
 80054fc:	4299      	cmp	r1, r3
 80054fe:	b510      	push	{r4, lr}
 8005500:	4604      	mov	r4, r0
 8005502:	d001      	beq.n	8005508 <cleanup_stdio+0x10>
 8005504:	f001 fd82 	bl	800700c <_fflush_r>
 8005508:	68a1      	ldr	r1, [r4, #8]
 800550a:	4b09      	ldr	r3, [pc, #36]	@ (8005530 <cleanup_stdio+0x38>)
 800550c:	4299      	cmp	r1, r3
 800550e:	d002      	beq.n	8005516 <cleanup_stdio+0x1e>
 8005510:	4620      	mov	r0, r4
 8005512:	f001 fd7b 	bl	800700c <_fflush_r>
 8005516:	68e1      	ldr	r1, [r4, #12]
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <cleanup_stdio+0x3c>)
 800551a:	4299      	cmp	r1, r3
 800551c:	d004      	beq.n	8005528 <cleanup_stdio+0x30>
 800551e:	4620      	mov	r0, r4
 8005520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005524:	f001 bd72 	b.w	800700c <_fflush_r>
 8005528:	bd10      	pop	{r4, pc}
 800552a:	bf00      	nop
 800552c:	200004c8 	.word	0x200004c8
 8005530:	20000530 	.word	0x20000530
 8005534:	20000598 	.word	0x20000598

08005538 <global_stdio_init.part.0>:
 8005538:	b510      	push	{r4, lr}
 800553a:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <global_stdio_init.part.0+0x30>)
 800553c:	4c0b      	ldr	r4, [pc, #44]	@ (800556c <global_stdio_init.part.0+0x34>)
 800553e:	4a0c      	ldr	r2, [pc, #48]	@ (8005570 <global_stdio_init.part.0+0x38>)
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	4620      	mov	r0, r4
 8005544:	2200      	movs	r2, #0
 8005546:	2104      	movs	r1, #4
 8005548:	f7ff ff94 	bl	8005474 <std>
 800554c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005550:	2201      	movs	r2, #1
 8005552:	2109      	movs	r1, #9
 8005554:	f7ff ff8e 	bl	8005474 <std>
 8005558:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800555c:	2202      	movs	r2, #2
 800555e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005562:	2112      	movs	r1, #18
 8005564:	f7ff bf86 	b.w	8005474 <std>
 8005568:	20000600 	.word	0x20000600
 800556c:	200004c8 	.word	0x200004c8
 8005570:	080054e1 	.word	0x080054e1

08005574 <__sfp_lock_acquire>:
 8005574:	4801      	ldr	r0, [pc, #4]	@ (800557c <__sfp_lock_acquire+0x8>)
 8005576:	f000 b9f2 	b.w	800595e <__retarget_lock_acquire_recursive>
 800557a:	bf00      	nop
 800557c:	20000609 	.word	0x20000609

08005580 <__sfp_lock_release>:
 8005580:	4801      	ldr	r0, [pc, #4]	@ (8005588 <__sfp_lock_release+0x8>)
 8005582:	f000 b9ed 	b.w	8005960 <__retarget_lock_release_recursive>
 8005586:	bf00      	nop
 8005588:	20000609 	.word	0x20000609

0800558c <__sinit>:
 800558c:	b510      	push	{r4, lr}
 800558e:	4604      	mov	r4, r0
 8005590:	f7ff fff0 	bl	8005574 <__sfp_lock_acquire>
 8005594:	6a23      	ldr	r3, [r4, #32]
 8005596:	b11b      	cbz	r3, 80055a0 <__sinit+0x14>
 8005598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800559c:	f7ff bff0 	b.w	8005580 <__sfp_lock_release>
 80055a0:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <__sinit+0x28>)
 80055a2:	6223      	str	r3, [r4, #32]
 80055a4:	4b04      	ldr	r3, [pc, #16]	@ (80055b8 <__sinit+0x2c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f5      	bne.n	8005598 <__sinit+0xc>
 80055ac:	f7ff ffc4 	bl	8005538 <global_stdio_init.part.0>
 80055b0:	e7f2      	b.n	8005598 <__sinit+0xc>
 80055b2:	bf00      	nop
 80055b4:	080054f9 	.word	0x080054f9
 80055b8:	20000600 	.word	0x20000600

080055bc <_fwalk_sglue>:
 80055bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c0:	4607      	mov	r7, r0
 80055c2:	4688      	mov	r8, r1
 80055c4:	4614      	mov	r4, r2
 80055c6:	2600      	movs	r6, #0
 80055c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055cc:	f1b9 0901 	subs.w	r9, r9, #1
 80055d0:	d505      	bpl.n	80055de <_fwalk_sglue+0x22>
 80055d2:	6824      	ldr	r4, [r4, #0]
 80055d4:	2c00      	cmp	r4, #0
 80055d6:	d1f7      	bne.n	80055c8 <_fwalk_sglue+0xc>
 80055d8:	4630      	mov	r0, r6
 80055da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055de:	89ab      	ldrh	r3, [r5, #12]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d907      	bls.n	80055f4 <_fwalk_sglue+0x38>
 80055e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055e8:	3301      	adds	r3, #1
 80055ea:	d003      	beq.n	80055f4 <_fwalk_sglue+0x38>
 80055ec:	4629      	mov	r1, r5
 80055ee:	4638      	mov	r0, r7
 80055f0:	47c0      	blx	r8
 80055f2:	4306      	orrs	r6, r0
 80055f4:	3568      	adds	r5, #104	@ 0x68
 80055f6:	e7e9      	b.n	80055cc <_fwalk_sglue+0x10>

080055f8 <_puts_r>:
 80055f8:	6a03      	ldr	r3, [r0, #32]
 80055fa:	b570      	push	{r4, r5, r6, lr}
 80055fc:	6884      	ldr	r4, [r0, #8]
 80055fe:	4605      	mov	r5, r0
 8005600:	460e      	mov	r6, r1
 8005602:	b90b      	cbnz	r3, 8005608 <_puts_r+0x10>
 8005604:	f7ff ffc2 	bl	800558c <__sinit>
 8005608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800560a:	07db      	lsls	r3, r3, #31
 800560c:	d405      	bmi.n	800561a <_puts_r+0x22>
 800560e:	89a3      	ldrh	r3, [r4, #12]
 8005610:	0598      	lsls	r0, r3, #22
 8005612:	d402      	bmi.n	800561a <_puts_r+0x22>
 8005614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005616:	f000 f9a2 	bl	800595e <__retarget_lock_acquire_recursive>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	0719      	lsls	r1, r3, #28
 800561e:	d502      	bpl.n	8005626 <_puts_r+0x2e>
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d135      	bne.n	8005692 <_puts_r+0x9a>
 8005626:	4621      	mov	r1, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f8c5 	bl	80057b8 <__swsetup_r>
 800562e:	b380      	cbz	r0, 8005692 <_puts_r+0x9a>
 8005630:	f04f 35ff 	mov.w	r5, #4294967295
 8005634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005636:	07da      	lsls	r2, r3, #31
 8005638:	d405      	bmi.n	8005646 <_puts_r+0x4e>
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	059b      	lsls	r3, r3, #22
 800563e:	d402      	bmi.n	8005646 <_puts_r+0x4e>
 8005640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005642:	f000 f98d 	bl	8005960 <__retarget_lock_release_recursive>
 8005646:	4628      	mov	r0, r5
 8005648:	bd70      	pop	{r4, r5, r6, pc}
 800564a:	2b00      	cmp	r3, #0
 800564c:	da04      	bge.n	8005658 <_puts_r+0x60>
 800564e:	69a2      	ldr	r2, [r4, #24]
 8005650:	429a      	cmp	r2, r3
 8005652:	dc17      	bgt.n	8005684 <_puts_r+0x8c>
 8005654:	290a      	cmp	r1, #10
 8005656:	d015      	beq.n	8005684 <_puts_r+0x8c>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	6022      	str	r2, [r4, #0]
 800565e:	7019      	strb	r1, [r3, #0]
 8005660:	68a3      	ldr	r3, [r4, #8]
 8005662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005666:	3b01      	subs	r3, #1
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	2900      	cmp	r1, #0
 800566c:	d1ed      	bne.n	800564a <_puts_r+0x52>
 800566e:	2b00      	cmp	r3, #0
 8005670:	da11      	bge.n	8005696 <_puts_r+0x9e>
 8005672:	4622      	mov	r2, r4
 8005674:	210a      	movs	r1, #10
 8005676:	4628      	mov	r0, r5
 8005678:	f000 f85f 	bl	800573a <__swbuf_r>
 800567c:	3001      	adds	r0, #1
 800567e:	d0d7      	beq.n	8005630 <_puts_r+0x38>
 8005680:	250a      	movs	r5, #10
 8005682:	e7d7      	b.n	8005634 <_puts_r+0x3c>
 8005684:	4622      	mov	r2, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f857 	bl	800573a <__swbuf_r>
 800568c:	3001      	adds	r0, #1
 800568e:	d1e7      	bne.n	8005660 <_puts_r+0x68>
 8005690:	e7ce      	b.n	8005630 <_puts_r+0x38>
 8005692:	3e01      	subs	r6, #1
 8005694:	e7e4      	b.n	8005660 <_puts_r+0x68>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	6022      	str	r2, [r4, #0]
 800569c:	220a      	movs	r2, #10
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e7ee      	b.n	8005680 <_puts_r+0x88>
	...

080056a4 <puts>:
 80056a4:	4b02      	ldr	r3, [pc, #8]	@ (80056b0 <puts+0xc>)
 80056a6:	4601      	mov	r1, r0
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	f7ff bfa5 	b.w	80055f8 <_puts_r>
 80056ae:	bf00      	nop
 80056b0:	20000020 	.word	0x20000020

080056b4 <__sread>:
 80056b4:	b510      	push	{r4, lr}
 80056b6:	460c      	mov	r4, r1
 80056b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056bc:	f000 f900 	bl	80058c0 <_read_r>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	bfab      	itete	ge
 80056c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056c6:	89a3      	ldrhlt	r3, [r4, #12]
 80056c8:	181b      	addge	r3, r3, r0
 80056ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056ce:	bfac      	ite	ge
 80056d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056d2:	81a3      	strhlt	r3, [r4, #12]
 80056d4:	bd10      	pop	{r4, pc}

080056d6 <__swrite>:
 80056d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	461f      	mov	r7, r3
 80056dc:	898b      	ldrh	r3, [r1, #12]
 80056de:	05db      	lsls	r3, r3, #23
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	4616      	mov	r6, r2
 80056e6:	d505      	bpl.n	80056f4 <__swrite+0x1e>
 80056e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ec:	2302      	movs	r3, #2
 80056ee:	2200      	movs	r2, #0
 80056f0:	f000 f8d4 	bl	800589c <_lseek_r>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	4632      	mov	r2, r6
 8005702:	463b      	mov	r3, r7
 8005704:	4628      	mov	r0, r5
 8005706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800570a:	f000 b8eb 	b.w	80058e4 <_write_r>

0800570e <__sseek>:
 800570e:	b510      	push	{r4, lr}
 8005710:	460c      	mov	r4, r1
 8005712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005716:	f000 f8c1 	bl	800589c <_lseek_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	bf15      	itete	ne
 8005720:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005722:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005726:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800572a:	81a3      	strheq	r3, [r4, #12]
 800572c:	bf18      	it	ne
 800572e:	81a3      	strhne	r3, [r4, #12]
 8005730:	bd10      	pop	{r4, pc}

08005732 <__sclose>:
 8005732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005736:	f000 b8a1 	b.w	800587c <_close_r>

0800573a <__swbuf_r>:
 800573a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573c:	460e      	mov	r6, r1
 800573e:	4614      	mov	r4, r2
 8005740:	4605      	mov	r5, r0
 8005742:	b118      	cbz	r0, 800574c <__swbuf_r+0x12>
 8005744:	6a03      	ldr	r3, [r0, #32]
 8005746:	b90b      	cbnz	r3, 800574c <__swbuf_r+0x12>
 8005748:	f7ff ff20 	bl	800558c <__sinit>
 800574c:	69a3      	ldr	r3, [r4, #24]
 800574e:	60a3      	str	r3, [r4, #8]
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	071a      	lsls	r2, r3, #28
 8005754:	d501      	bpl.n	800575a <__swbuf_r+0x20>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	b943      	cbnz	r3, 800576c <__swbuf_r+0x32>
 800575a:	4621      	mov	r1, r4
 800575c:	4628      	mov	r0, r5
 800575e:	f000 f82b 	bl	80057b8 <__swsetup_r>
 8005762:	b118      	cbz	r0, 800576c <__swbuf_r+0x32>
 8005764:	f04f 37ff 	mov.w	r7, #4294967295
 8005768:	4638      	mov	r0, r7
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	6922      	ldr	r2, [r4, #16]
 8005770:	1a98      	subs	r0, r3, r2
 8005772:	6963      	ldr	r3, [r4, #20]
 8005774:	b2f6      	uxtb	r6, r6
 8005776:	4283      	cmp	r3, r0
 8005778:	4637      	mov	r7, r6
 800577a:	dc05      	bgt.n	8005788 <__swbuf_r+0x4e>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f001 fc44 	bl	800700c <_fflush_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	d1ed      	bne.n	8005764 <__swbuf_r+0x2a>
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	3b01      	subs	r3, #1
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	701e      	strb	r6, [r3, #0]
 8005796:	6962      	ldr	r2, [r4, #20]
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	429a      	cmp	r2, r3
 800579c:	d004      	beq.n	80057a8 <__swbuf_r+0x6e>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	07db      	lsls	r3, r3, #31
 80057a2:	d5e1      	bpl.n	8005768 <__swbuf_r+0x2e>
 80057a4:	2e0a      	cmp	r6, #10
 80057a6:	d1df      	bne.n	8005768 <__swbuf_r+0x2e>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f001 fc2e 	bl	800700c <_fflush_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d0d9      	beq.n	8005768 <__swbuf_r+0x2e>
 80057b4:	e7d6      	b.n	8005764 <__swbuf_r+0x2a>
	...

080057b8 <__swsetup_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4b29      	ldr	r3, [pc, #164]	@ (8005860 <__swsetup_r+0xa8>)
 80057bc:	4605      	mov	r5, r0
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	460c      	mov	r4, r1
 80057c2:	b118      	cbz	r0, 80057cc <__swsetup_r+0x14>
 80057c4:	6a03      	ldr	r3, [r0, #32]
 80057c6:	b90b      	cbnz	r3, 80057cc <__swsetup_r+0x14>
 80057c8:	f7ff fee0 	bl	800558c <__sinit>
 80057cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057d0:	0719      	lsls	r1, r3, #28
 80057d2:	d422      	bmi.n	800581a <__swsetup_r+0x62>
 80057d4:	06da      	lsls	r2, r3, #27
 80057d6:	d407      	bmi.n	80057e8 <__swsetup_r+0x30>
 80057d8:	2209      	movs	r2, #9
 80057da:	602a      	str	r2, [r5, #0]
 80057dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	e033      	b.n	8005850 <__swsetup_r+0x98>
 80057e8:	0758      	lsls	r0, r3, #29
 80057ea:	d512      	bpl.n	8005812 <__swsetup_r+0x5a>
 80057ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057ee:	b141      	cbz	r1, 8005802 <__swsetup_r+0x4a>
 80057f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057f4:	4299      	cmp	r1, r3
 80057f6:	d002      	beq.n	80057fe <__swsetup_r+0x46>
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 ff01 	bl	8006600 <_free_r>
 80057fe:	2300      	movs	r3, #0
 8005800:	6363      	str	r3, [r4, #52]	@ 0x34
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	2300      	movs	r3, #0
 800580c:	6063      	str	r3, [r4, #4]
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	f043 0308 	orr.w	r3, r3, #8
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	b94b      	cbnz	r3, 8005832 <__swsetup_r+0x7a>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005828:	d003      	beq.n	8005832 <__swsetup_r+0x7a>
 800582a:	4621      	mov	r1, r4
 800582c:	4628      	mov	r0, r5
 800582e:	f001 fc3b 	bl	80070a8 <__smakebuf_r>
 8005832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005836:	f013 0201 	ands.w	r2, r3, #1
 800583a:	d00a      	beq.n	8005852 <__swsetup_r+0x9a>
 800583c:	2200      	movs	r2, #0
 800583e:	60a2      	str	r2, [r4, #8]
 8005840:	6962      	ldr	r2, [r4, #20]
 8005842:	4252      	negs	r2, r2
 8005844:	61a2      	str	r2, [r4, #24]
 8005846:	6922      	ldr	r2, [r4, #16]
 8005848:	b942      	cbnz	r2, 800585c <__swsetup_r+0xa4>
 800584a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800584e:	d1c5      	bne.n	80057dc <__swsetup_r+0x24>
 8005850:	bd38      	pop	{r3, r4, r5, pc}
 8005852:	0799      	lsls	r1, r3, #30
 8005854:	bf58      	it	pl
 8005856:	6962      	ldrpl	r2, [r4, #20]
 8005858:	60a2      	str	r2, [r4, #8]
 800585a:	e7f4      	b.n	8005846 <__swsetup_r+0x8e>
 800585c:	2000      	movs	r0, #0
 800585e:	e7f7      	b.n	8005850 <__swsetup_r+0x98>
 8005860:	20000020 	.word	0x20000020

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <_localeconv_r>:
 8005874:	4800      	ldr	r0, [pc, #0]	@ (8005878 <_localeconv_r+0x4>)
 8005876:	4770      	bx	lr
 8005878:	20000160 	.word	0x20000160

0800587c <_close_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d06      	ldr	r5, [pc, #24]	@ (8005898 <_close_r+0x1c>)
 8005880:	2300      	movs	r3, #0
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	f7fe ffd8 	bl	800483c <_close>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_close_r+0x1a>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_close_r+0x1a>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000604 	.word	0x20000604

0800589c <_lseek_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d07      	ldr	r5, [pc, #28]	@ (80058bc <_lseek_r+0x20>)
 80058a0:	4604      	mov	r4, r0
 80058a2:	4608      	mov	r0, r1
 80058a4:	4611      	mov	r1, r2
 80058a6:	2200      	movs	r2, #0
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fe ff87 	bl	80047be <_lseek>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_lseek_r+0x1e>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_lseek_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	20000604 	.word	0x20000604

080058c0 <_read_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	@ (80058e0 <_read_r+0x20>)
 80058c4:	4604      	mov	r4, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	4611      	mov	r1, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fe ff1f 	bl	8004712 <_read>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_read_r+0x1e>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_read_r+0x1e>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000604 	.word	0x20000604

080058e4 <_write_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	@ (8005904 <_write_r+0x20>)
 80058e8:	4604      	mov	r4, r0
 80058ea:	4608      	mov	r0, r1
 80058ec:	4611      	mov	r1, r2
 80058ee:	2200      	movs	r2, #0
 80058f0:	602a      	str	r2, [r5, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f7fe ff75 	bl	80047e2 <_write>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_write_r+0x1e>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_write_r+0x1e>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000604 	.word	0x20000604

08005908 <__errno>:
 8005908:	4b01      	ldr	r3, [pc, #4]	@ (8005910 <__errno+0x8>)
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000020 	.word	0x20000020

08005914 <__libc_init_array>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	4d0d      	ldr	r5, [pc, #52]	@ (800594c <__libc_init_array+0x38>)
 8005918:	4c0d      	ldr	r4, [pc, #52]	@ (8005950 <__libc_init_array+0x3c>)
 800591a:	1b64      	subs	r4, r4, r5
 800591c:	10a4      	asrs	r4, r4, #2
 800591e:	2600      	movs	r6, #0
 8005920:	42a6      	cmp	r6, r4
 8005922:	d109      	bne.n	8005938 <__libc_init_array+0x24>
 8005924:	4d0b      	ldr	r5, [pc, #44]	@ (8005954 <__libc_init_array+0x40>)
 8005926:	4c0c      	ldr	r4, [pc, #48]	@ (8005958 <__libc_init_array+0x44>)
 8005928:	f001 fe34 	bl	8007594 <_init>
 800592c:	1b64      	subs	r4, r4, r5
 800592e:	10a4      	asrs	r4, r4, #2
 8005930:	2600      	movs	r6, #0
 8005932:	42a6      	cmp	r6, r4
 8005934:	d105      	bne.n	8005942 <__libc_init_array+0x2e>
 8005936:	bd70      	pop	{r4, r5, r6, pc}
 8005938:	f855 3b04 	ldr.w	r3, [r5], #4
 800593c:	4798      	blx	r3
 800593e:	3601      	adds	r6, #1
 8005940:	e7ee      	b.n	8005920 <__libc_init_array+0xc>
 8005942:	f855 3b04 	ldr.w	r3, [r5], #4
 8005946:	4798      	blx	r3
 8005948:	3601      	adds	r6, #1
 800594a:	e7f2      	b.n	8005932 <__libc_init_array+0x1e>
 800594c:	08007980 	.word	0x08007980
 8005950:	08007980 	.word	0x08007980
 8005954:	08007980 	.word	0x08007980
 8005958:	08007984 	.word	0x08007984

0800595c <__retarget_lock_init_recursive>:
 800595c:	4770      	bx	lr

0800595e <__retarget_lock_acquire_recursive>:
 800595e:	4770      	bx	lr

08005960 <__retarget_lock_release_recursive>:
 8005960:	4770      	bx	lr

08005962 <quorem>:
 8005962:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	6903      	ldr	r3, [r0, #16]
 8005968:	690c      	ldr	r4, [r1, #16]
 800596a:	42a3      	cmp	r3, r4
 800596c:	4607      	mov	r7, r0
 800596e:	db7e      	blt.n	8005a6e <quorem+0x10c>
 8005970:	3c01      	subs	r4, #1
 8005972:	f101 0814 	add.w	r8, r1, #20
 8005976:	00a3      	lsls	r3, r4, #2
 8005978:	f100 0514 	add.w	r5, r0, #20
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800598c:	3301      	adds	r3, #1
 800598e:	429a      	cmp	r2, r3
 8005990:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005994:	fbb2 f6f3 	udiv	r6, r2, r3
 8005998:	d32e      	bcc.n	80059f8 <quorem+0x96>
 800599a:	f04f 0a00 	mov.w	sl, #0
 800599e:	46c4      	mov	ip, r8
 80059a0:	46ae      	mov	lr, r5
 80059a2:	46d3      	mov	fp, sl
 80059a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059a8:	b298      	uxth	r0, r3
 80059aa:	fb06 a000 	mla	r0, r6, r0, sl
 80059ae:	0c02      	lsrs	r2, r0, #16
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	fb06 2303 	mla	r3, r6, r3, r2
 80059b6:	f8de 2000 	ldr.w	r2, [lr]
 80059ba:	b280      	uxth	r0, r0
 80059bc:	b292      	uxth	r2, r2
 80059be:	1a12      	subs	r2, r2, r0
 80059c0:	445a      	add	r2, fp
 80059c2:	f8de 0000 	ldr.w	r0, [lr]
 80059c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80059d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80059d4:	b292      	uxth	r2, r2
 80059d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059da:	45e1      	cmp	r9, ip
 80059dc:	f84e 2b04 	str.w	r2, [lr], #4
 80059e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059e4:	d2de      	bcs.n	80059a4 <quorem+0x42>
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	58eb      	ldr	r3, [r5, r3]
 80059ea:	b92b      	cbnz	r3, 80059f8 <quorem+0x96>
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	3b04      	subs	r3, #4
 80059f0:	429d      	cmp	r5, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	d32f      	bcc.n	8005a56 <quorem+0xf4>
 80059f6:	613c      	str	r4, [r7, #16]
 80059f8:	4638      	mov	r0, r7
 80059fa:	f001 f97b 	bl	8006cf4 <__mcmp>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	db25      	blt.n	8005a4e <quorem+0xec>
 8005a02:	4629      	mov	r1, r5
 8005a04:	2000      	movs	r0, #0
 8005a06:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a0a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a0e:	fa1f fe82 	uxth.w	lr, r2
 8005a12:	fa1f f38c 	uxth.w	r3, ip
 8005a16:	eba3 030e 	sub.w	r3, r3, lr
 8005a1a:	4403      	add	r3, r0
 8005a1c:	0c12      	lsrs	r2, r2, #16
 8005a1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a2c:	45c1      	cmp	r9, r8
 8005a2e:	f841 3b04 	str.w	r3, [r1], #4
 8005a32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a36:	d2e6      	bcs.n	8005a06 <quorem+0xa4>
 8005a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a40:	b922      	cbnz	r2, 8005a4c <quorem+0xea>
 8005a42:	3b04      	subs	r3, #4
 8005a44:	429d      	cmp	r5, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	d30b      	bcc.n	8005a62 <quorem+0x100>
 8005a4a:	613c      	str	r4, [r7, #16]
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	4630      	mov	r0, r6
 8005a50:	b003      	add	sp, #12
 8005a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d1cb      	bne.n	80059f6 <quorem+0x94>
 8005a5e:	3c01      	subs	r4, #1
 8005a60:	e7c6      	b.n	80059f0 <quorem+0x8e>
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d1ef      	bne.n	8005a4a <quorem+0xe8>
 8005a6a:	3c01      	subs	r4, #1
 8005a6c:	e7ea      	b.n	8005a44 <quorem+0xe2>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7ee      	b.n	8005a50 <quorem+0xee>
 8005a72:	0000      	movs	r0, r0
 8005a74:	0000      	movs	r0, r0
	...

08005a78 <_dtoa_r>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	69c7      	ldr	r7, [r0, #28]
 8005a7e:	b099      	sub	sp, #100	@ 0x64
 8005a80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a84:	ec55 4b10 	vmov	r4, r5, d0
 8005a88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005a8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a8c:	4683      	mov	fp, r0
 8005a8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a92:	b97f      	cbnz	r7, 8005ab4 <_dtoa_r+0x3c>
 8005a94:	2010      	movs	r0, #16
 8005a96:	f000 fdfd 	bl	8006694 <malloc>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005aa0:	b920      	cbnz	r0, 8005aac <_dtoa_r+0x34>
 8005aa2:	4ba7      	ldr	r3, [pc, #668]	@ (8005d40 <_dtoa_r+0x2c8>)
 8005aa4:	21ef      	movs	r1, #239	@ 0xef
 8005aa6:	48a7      	ldr	r0, [pc, #668]	@ (8005d44 <_dtoa_r+0x2cc>)
 8005aa8:	f001 fb7a 	bl	80071a0 <__assert_func>
 8005aac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ab0:	6007      	str	r7, [r0, #0]
 8005ab2:	60c7      	str	r7, [r0, #12]
 8005ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	b159      	cbz	r1, 8005ad4 <_dtoa_r+0x5c>
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	604a      	str	r2, [r1, #4]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4093      	lsls	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
 8005ac6:	4658      	mov	r0, fp
 8005ac8:	f000 feda 	bl	8006880 <_Bfree>
 8005acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	1e2b      	subs	r3, r5, #0
 8005ad6:	bfb9      	ittee	lt
 8005ad8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005adc:	9303      	strlt	r3, [sp, #12]
 8005ade:	2300      	movge	r3, #0
 8005ae0:	6033      	strge	r3, [r6, #0]
 8005ae2:	9f03      	ldr	r7, [sp, #12]
 8005ae4:	4b98      	ldr	r3, [pc, #608]	@ (8005d48 <_dtoa_r+0x2d0>)
 8005ae6:	bfbc      	itt	lt
 8005ae8:	2201      	movlt	r2, #1
 8005aea:	6032      	strlt	r2, [r6, #0]
 8005aec:	43bb      	bics	r3, r7
 8005aee:	d112      	bne.n	8005b16 <_dtoa_r+0x9e>
 8005af0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005af2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005afc:	4323      	orrs	r3, r4
 8005afe:	f000 854d 	beq.w	800659c <_dtoa_r+0xb24>
 8005b02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005d5c <_dtoa_r+0x2e4>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 854f 	beq.w	80065ac <_dtoa_r+0xb34>
 8005b0e:	f10a 0303 	add.w	r3, sl, #3
 8005b12:	f000 bd49 	b.w	80065a8 <_dtoa_r+0xb30>
 8005b16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	ec51 0b17 	vmov	r0, r1, d7
 8005b20:	2300      	movs	r3, #0
 8005b22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005b26:	f7fa ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	b158      	cbz	r0, 8005b46 <_dtoa_r+0xce>
 8005b2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005b30:	2301      	movs	r3, #1
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b36:	b113      	cbz	r3, 8005b3e <_dtoa_r+0xc6>
 8005b38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005b3a:	4b84      	ldr	r3, [pc, #528]	@ (8005d4c <_dtoa_r+0x2d4>)
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005d60 <_dtoa_r+0x2e8>
 8005b42:	f000 bd33 	b.w	80065ac <_dtoa_r+0xb34>
 8005b46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005b4a:	aa16      	add	r2, sp, #88	@ 0x58
 8005b4c:	a917      	add	r1, sp, #92	@ 0x5c
 8005b4e:	4658      	mov	r0, fp
 8005b50:	f001 f980 	bl	8006e54 <__d2b>
 8005b54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005b58:	4681      	mov	r9, r0
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d077      	beq.n	8005c4e <_dtoa_r+0x1d6>
 8005b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b78:	4619      	mov	r1, r3
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	4b74      	ldr	r3, [pc, #464]	@ (8005d50 <_dtoa_r+0x2d8>)
 8005b7e:	f7fa fb8b 	bl	8000298 <__aeabi_dsub>
 8005b82:	a369      	add	r3, pc, #420	@ (adr r3, 8005d28 <_dtoa_r+0x2b0>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f7fa fd3e 	bl	8000608 <__aeabi_dmul>
 8005b8c:	a368      	add	r3, pc, #416	@ (adr r3, 8005d30 <_dtoa_r+0x2b8>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fb83 	bl	800029c <__adddf3>
 8005b96:	4604      	mov	r4, r0
 8005b98:	4630      	mov	r0, r6
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	f7fa fcca 	bl	8000534 <__aeabi_i2d>
 8005ba0:	a365      	add	r3, pc, #404	@ (adr r3, 8005d38 <_dtoa_r+0x2c0>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fd2f 	bl	8000608 <__aeabi_dmul>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4620      	mov	r0, r4
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7fa fb73 	bl	800029c <__adddf3>
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	460d      	mov	r5, r1
 8005bba:	f7fa ffd5 	bl	8000b68 <__aeabi_d2iz>
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	f7fa ff90 	bl	8000aec <__aeabi_dcmplt>
 8005bcc:	b140      	cbz	r0, 8005be0 <_dtoa_r+0x168>
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f7fa fcb0 	bl	8000534 <__aeabi_i2d>
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	f7fa ff7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bdc:	b900      	cbnz	r0, 8005be0 <_dtoa_r+0x168>
 8005bde:	3f01      	subs	r7, #1
 8005be0:	2f16      	cmp	r7, #22
 8005be2:	d851      	bhi.n	8005c88 <_dtoa_r+0x210>
 8005be4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d54 <_dtoa_r+0x2dc>)
 8005be6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bf2:	f7fa ff7b 	bl	8000aec <__aeabi_dcmplt>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d048      	beq.n	8005c8c <_dtoa_r+0x214>
 8005bfa:	3f01      	subs	r7, #1
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9312      	str	r3, [sp, #72]	@ 0x48
 8005c00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c02:	1b9b      	subs	r3, r3, r6
 8005c04:	1e5a      	subs	r2, r3, #1
 8005c06:	bf44      	itt	mi
 8005c08:	f1c3 0801 	rsbmi	r8, r3, #1
 8005c0c:	2300      	movmi	r3, #0
 8005c0e:	9208      	str	r2, [sp, #32]
 8005c10:	bf54      	ite	pl
 8005c12:	f04f 0800 	movpl.w	r8, #0
 8005c16:	9308      	strmi	r3, [sp, #32]
 8005c18:	2f00      	cmp	r7, #0
 8005c1a:	db39      	blt.n	8005c90 <_dtoa_r+0x218>
 8005c1c:	9b08      	ldr	r3, [sp, #32]
 8005c1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005c20:	443b      	add	r3, r7
 8005c22:	9308      	str	r3, [sp, #32]
 8005c24:	2300      	movs	r3, #0
 8005c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d864      	bhi.n	8005cf8 <_dtoa_r+0x280>
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	bfc4      	itt	gt
 8005c32:	3b04      	subgt	r3, #4
 8005c34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c38:	f1a3 0302 	sub.w	r3, r3, #2
 8005c3c:	bfcc      	ite	gt
 8005c3e:	2400      	movgt	r4, #0
 8005c40:	2401      	movle	r4, #1
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d863      	bhi.n	8005d0e <_dtoa_r+0x296>
 8005c46:	e8df f003 	tbb	[pc, r3]
 8005c4a:	372a      	.short	0x372a
 8005c4c:	5535      	.short	0x5535
 8005c4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005c52:	441e      	add	r6, r3
 8005c54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	bfc1      	itttt	gt
 8005c5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c60:	409f      	lslgt	r7, r3
 8005c62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c6a:	bfd6      	itet	le
 8005c6c:	f1c3 0320 	rsble	r3, r3, #32
 8005c70:	ea47 0003 	orrgt.w	r0, r7, r3
 8005c74:	fa04 f003 	lslle.w	r0, r4, r3
 8005c78:	f7fa fc4c 	bl	8000514 <__aeabi_ui2d>
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c82:	3e01      	subs	r6, #1
 8005c84:	9214      	str	r2, [sp, #80]	@ 0x50
 8005c86:	e777      	b.n	8005b78 <_dtoa_r+0x100>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e7b8      	b.n	8005bfe <_dtoa_r+0x186>
 8005c8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005c8e:	e7b7      	b.n	8005c00 <_dtoa_r+0x188>
 8005c90:	427b      	negs	r3, r7
 8005c92:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c94:	2300      	movs	r3, #0
 8005c96:	eba8 0807 	sub.w	r8, r8, r7
 8005c9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c9c:	e7c4      	b.n	8005c28 <_dtoa_r+0x1b0>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dc35      	bgt.n	8005d14 <_dtoa_r+0x29c>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	9307      	str	r3, [sp, #28]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cb2:	e00b      	b.n	8005ccc <_dtoa_r+0x254>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e7f3      	b.n	8005ca0 <_dtoa_r+0x228>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	bfb8      	it	lt
 8005cca:	2301      	movlt	r3, #1
 8005ccc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f102 0514 	add.w	r5, r2, #20
 8005cd8:	429d      	cmp	r5, r3
 8005cda:	d91f      	bls.n	8005d1c <_dtoa_r+0x2a4>
 8005cdc:	6041      	str	r1, [r0, #4]
 8005cde:	4658      	mov	r0, fp
 8005ce0:	f000 fd8e 	bl	8006800 <_Balloc>
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d13c      	bne.n	8005d64 <_dtoa_r+0x2ec>
 8005cea:	4b1b      	ldr	r3, [pc, #108]	@ (8005d58 <_dtoa_r+0x2e0>)
 8005cec:	4602      	mov	r2, r0
 8005cee:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cf2:	e6d8      	b.n	8005aa6 <_dtoa_r+0x2e>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e7e0      	b.n	8005cba <_dtoa_r+0x242>
 8005cf8:	2401      	movs	r4, #1
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	9307      	str	r3, [sp, #28]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2312      	movs	r3, #18
 8005d0c:	e7d0      	b.n	8005cb0 <_dtoa_r+0x238>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d12:	e7f5      	b.n	8005d00 <_dtoa_r+0x288>
 8005d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	9307      	str	r3, [sp, #28]
 8005d1a:	e7d7      	b.n	8005ccc <_dtoa_r+0x254>
 8005d1c:	3101      	adds	r1, #1
 8005d1e:	0052      	lsls	r2, r2, #1
 8005d20:	e7d8      	b.n	8005cd4 <_dtoa_r+0x25c>
 8005d22:	bf00      	nop
 8005d24:	f3af 8000 	nop.w
 8005d28:	636f4361 	.word	0x636f4361
 8005d2c:	3fd287a7 	.word	0x3fd287a7
 8005d30:	8b60c8b3 	.word	0x8b60c8b3
 8005d34:	3fc68a28 	.word	0x3fc68a28
 8005d38:	509f79fb 	.word	0x509f79fb
 8005d3c:	3fd34413 	.word	0x3fd34413
 8005d40:	08007647 	.word	0x08007647
 8005d44:	0800765e 	.word	0x0800765e
 8005d48:	7ff00000 	.word	0x7ff00000
 8005d4c:	08007617 	.word	0x08007617
 8005d50:	3ff80000 	.word	0x3ff80000
 8005d54:	08007758 	.word	0x08007758
 8005d58:	080076b6 	.word	0x080076b6
 8005d5c:	08007643 	.word	0x08007643
 8005d60:	08007616 	.word	0x08007616
 8005d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d68:	6018      	str	r0, [r3, #0]
 8005d6a:	9b07      	ldr	r3, [sp, #28]
 8005d6c:	2b0e      	cmp	r3, #14
 8005d6e:	f200 80a4 	bhi.w	8005eba <_dtoa_r+0x442>
 8005d72:	2c00      	cmp	r4, #0
 8005d74:	f000 80a1 	beq.w	8005eba <_dtoa_r+0x442>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	dd33      	ble.n	8005de4 <_dtoa_r+0x36c>
 8005d7c:	4bad      	ldr	r3, [pc, #692]	@ (8006034 <_dtoa_r+0x5bc>)
 8005d7e:	f007 020f 	and.w	r2, r7, #15
 8005d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d86:	ed93 7b00 	vldr	d7, [r3]
 8005d8a:	05f8      	lsls	r0, r7, #23
 8005d8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d94:	d516      	bpl.n	8005dc4 <_dtoa_r+0x34c>
 8005d96:	4ba8      	ldr	r3, [pc, #672]	@ (8006038 <_dtoa_r+0x5c0>)
 8005d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005da0:	f7fa fd5c 	bl	800085c <__aeabi_ddiv>
 8005da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005da8:	f004 040f 	and.w	r4, r4, #15
 8005dac:	2603      	movs	r6, #3
 8005dae:	4da2      	ldr	r5, [pc, #648]	@ (8006038 <_dtoa_r+0x5c0>)
 8005db0:	b954      	cbnz	r4, 8005dc8 <_dtoa_r+0x350>
 8005db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dba:	f7fa fd4f 	bl	800085c <__aeabi_ddiv>
 8005dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc2:	e028      	b.n	8005e16 <_dtoa_r+0x39e>
 8005dc4:	2602      	movs	r6, #2
 8005dc6:	e7f2      	b.n	8005dae <_dtoa_r+0x336>
 8005dc8:	07e1      	lsls	r1, r4, #31
 8005dca:	d508      	bpl.n	8005dde <_dtoa_r+0x366>
 8005dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dd4:	f7fa fc18 	bl	8000608 <__aeabi_dmul>
 8005dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ddc:	3601      	adds	r6, #1
 8005dde:	1064      	asrs	r4, r4, #1
 8005de0:	3508      	adds	r5, #8
 8005de2:	e7e5      	b.n	8005db0 <_dtoa_r+0x338>
 8005de4:	f000 80d2 	beq.w	8005f8c <_dtoa_r+0x514>
 8005de8:	427c      	negs	r4, r7
 8005dea:	4b92      	ldr	r3, [pc, #584]	@ (8006034 <_dtoa_r+0x5bc>)
 8005dec:	4d92      	ldr	r5, [pc, #584]	@ (8006038 <_dtoa_r+0x5c0>)
 8005dee:	f004 020f 	and.w	r2, r4, #15
 8005df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dfe:	f7fa fc03 	bl	8000608 <__aeabi_dmul>
 8005e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e06:	1124      	asrs	r4, r4, #4
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2602      	movs	r6, #2
 8005e0c:	2c00      	cmp	r4, #0
 8005e0e:	f040 80b2 	bne.w	8005f76 <_dtoa_r+0x4fe>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1d3      	bne.n	8005dbe <_dtoa_r+0x346>
 8005e16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80b7 	beq.w	8005f90 <_dtoa_r+0x518>
 8005e22:	4b86      	ldr	r3, [pc, #536]	@ (800603c <_dtoa_r+0x5c4>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fe5f 	bl	8000aec <__aeabi_dcmplt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f000 80ae 	beq.w	8005f90 <_dtoa_r+0x518>
 8005e34:	9b07      	ldr	r3, [sp, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80aa 	beq.w	8005f90 <_dtoa_r+0x518>
 8005e3c:	9b00      	ldr	r3, [sp, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dd37      	ble.n	8005eb2 <_dtoa_r+0x43a>
 8005e42:	1e7b      	subs	r3, r7, #1
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	4620      	mov	r0, r4
 8005e48:	4b7d      	ldr	r3, [pc, #500]	@ (8006040 <_dtoa_r+0x5c8>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	f7fa fbdb 	bl	8000608 <__aeabi_dmul>
 8005e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e56:	9c00      	ldr	r4, [sp, #0]
 8005e58:	3601      	adds	r6, #1
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7fa fb6a 	bl	8000534 <__aeabi_i2d>
 8005e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e64:	f7fa fbd0 	bl	8000608 <__aeabi_dmul>
 8005e68:	4b76      	ldr	r3, [pc, #472]	@ (8006044 <_dtoa_r+0x5cc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f7fa fa16 	bl	800029c <__adddf3>
 8005e70:	4605      	mov	r5, r0
 8005e72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	f040 808d 	bne.w	8005f96 <_dtoa_r+0x51e>
 8005e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e80:	4b71      	ldr	r3, [pc, #452]	@ (8006048 <_dtoa_r+0x5d0>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	f7fa fa08 	bl	8000298 <__aeabi_dsub>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e90:	462a      	mov	r2, r5
 8005e92:	4633      	mov	r3, r6
 8005e94:	f7fa fe48 	bl	8000b28 <__aeabi_dcmpgt>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f040 828b 	bne.w	80063b4 <_dtoa_r+0x93c>
 8005e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ea8:	f7fa fe20 	bl	8000aec <__aeabi_dcmplt>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	f040 8128 	bne.w	8006102 <_dtoa_r+0x68a>
 8005eb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005eb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005eba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f2c0 815a 	blt.w	8006176 <_dtoa_r+0x6fe>
 8005ec2:	2f0e      	cmp	r7, #14
 8005ec4:	f300 8157 	bgt.w	8006176 <_dtoa_r+0x6fe>
 8005ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8006034 <_dtoa_r+0x5bc>)
 8005eca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ece:	ed93 7b00 	vldr	d7, [r3]
 8005ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	ed8d 7b00 	vstr	d7, [sp]
 8005eda:	da03      	bge.n	8005ee4 <_dtoa_r+0x46c>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f340 8101 	ble.w	80060e6 <_dtoa_r+0x66e>
 8005ee4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ee8:	4656      	mov	r6, sl
 8005eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa fcb3 	bl	800085c <__aeabi_ddiv>
 8005ef6:	f7fa fe37 	bl	8000b68 <__aeabi_d2iz>
 8005efa:	4680      	mov	r8, r0
 8005efc:	f7fa fb1a 	bl	8000534 <__aeabi_i2d>
 8005f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f04:	f7fa fb80 	bl	8000608 <__aeabi_dmul>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f14:	f7fa f9c0 	bl	8000298 <__aeabi_dsub>
 8005f18:	f806 4b01 	strb.w	r4, [r6], #1
 8005f1c:	9d07      	ldr	r5, [sp, #28]
 8005f1e:	eba6 040a 	sub.w	r4, r6, sl
 8005f22:	42a5      	cmp	r5, r4
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	f040 8117 	bne.w	800615a <_dtoa_r+0x6e2>
 8005f2c:	f7fa f9b6 	bl	800029c <__adddf3>
 8005f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f34:	4604      	mov	r4, r0
 8005f36:	460d      	mov	r5, r1
 8005f38:	f7fa fdf6 	bl	8000b28 <__aeabi_dcmpgt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f040 80f9 	bne.w	8006134 <_dtoa_r+0x6bc>
 8005f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f46:	4620      	mov	r0, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f7fa fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f4e:	b118      	cbz	r0, 8005f58 <_dtoa_r+0x4e0>
 8005f50:	f018 0f01 	tst.w	r8, #1
 8005f54:	f040 80ee 	bne.w	8006134 <_dtoa_r+0x6bc>
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4658      	mov	r0, fp
 8005f5c:	f000 fc90 	bl	8006880 <_Bfree>
 8005f60:	2300      	movs	r3, #0
 8005f62:	7033      	strb	r3, [r6, #0]
 8005f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005f66:	3701      	adds	r7, #1
 8005f68:	601f      	str	r7, [r3, #0]
 8005f6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 831d 	beq.w	80065ac <_dtoa_r+0xb34>
 8005f72:	601e      	str	r6, [r3, #0]
 8005f74:	e31a      	b.n	80065ac <_dtoa_r+0xb34>
 8005f76:	07e2      	lsls	r2, r4, #31
 8005f78:	d505      	bpl.n	8005f86 <_dtoa_r+0x50e>
 8005f7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f7e:	f7fa fb43 	bl	8000608 <__aeabi_dmul>
 8005f82:	3601      	adds	r6, #1
 8005f84:	2301      	movs	r3, #1
 8005f86:	1064      	asrs	r4, r4, #1
 8005f88:	3508      	adds	r5, #8
 8005f8a:	e73f      	b.n	8005e0c <_dtoa_r+0x394>
 8005f8c:	2602      	movs	r6, #2
 8005f8e:	e742      	b.n	8005e16 <_dtoa_r+0x39e>
 8005f90:	9c07      	ldr	r4, [sp, #28]
 8005f92:	9704      	str	r7, [sp, #16]
 8005f94:	e761      	b.n	8005e5a <_dtoa_r+0x3e2>
 8005f96:	4b27      	ldr	r3, [pc, #156]	@ (8006034 <_dtoa_r+0x5bc>)
 8005f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fa2:	4454      	add	r4, sl
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d053      	beq.n	8006050 <_dtoa_r+0x5d8>
 8005fa8:	4928      	ldr	r1, [pc, #160]	@ (800604c <_dtoa_r+0x5d4>)
 8005faa:	2000      	movs	r0, #0
 8005fac:	f7fa fc56 	bl	800085c <__aeabi_ddiv>
 8005fb0:	4633      	mov	r3, r6
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	f7fa f970 	bl	8000298 <__aeabi_dsub>
 8005fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fbc:	4656      	mov	r6, sl
 8005fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc2:	f7fa fdd1 	bl	8000b68 <__aeabi_d2iz>
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	f7fa fab4 	bl	8000534 <__aeabi_i2d>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd4:	f7fa f960 	bl	8000298 <__aeabi_dsub>
 8005fd8:	3530      	adds	r5, #48	@ 0x30
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fe2:	f806 5b01 	strb.w	r5, [r6], #1
 8005fe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fea:	f7fa fd7f 	bl	8000aec <__aeabi_dcmplt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d171      	bne.n	80060d6 <_dtoa_r+0x65e>
 8005ff2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ff6:	4911      	ldr	r1, [pc, #68]	@ (800603c <_dtoa_r+0x5c4>)
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f7fa f94d 	bl	8000298 <__aeabi_dsub>
 8005ffe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006002:	f7fa fd73 	bl	8000aec <__aeabi_dcmplt>
 8006006:	2800      	cmp	r0, #0
 8006008:	f040 8095 	bne.w	8006136 <_dtoa_r+0x6be>
 800600c:	42a6      	cmp	r6, r4
 800600e:	f43f af50 	beq.w	8005eb2 <_dtoa_r+0x43a>
 8006012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <_dtoa_r+0x5c8>)
 8006018:	2200      	movs	r2, #0
 800601a:	f7fa faf5 	bl	8000608 <__aeabi_dmul>
 800601e:	4b08      	ldr	r3, [pc, #32]	@ (8006040 <_dtoa_r+0x5c8>)
 8006020:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006024:	2200      	movs	r2, #0
 8006026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602a:	f7fa faed 	bl	8000608 <__aeabi_dmul>
 800602e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006032:	e7c4      	b.n	8005fbe <_dtoa_r+0x546>
 8006034:	08007758 	.word	0x08007758
 8006038:	08007730 	.word	0x08007730
 800603c:	3ff00000 	.word	0x3ff00000
 8006040:	40240000 	.word	0x40240000
 8006044:	401c0000 	.word	0x401c0000
 8006048:	40140000 	.word	0x40140000
 800604c:	3fe00000 	.word	0x3fe00000
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	f7fa fad8 	bl	8000608 <__aeabi_dmul>
 8006058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800605c:	9415      	str	r4, [sp, #84]	@ 0x54
 800605e:	4656      	mov	r6, sl
 8006060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006064:	f7fa fd80 	bl	8000b68 <__aeabi_d2iz>
 8006068:	4605      	mov	r5, r0
 800606a:	f7fa fa63 	bl	8000534 <__aeabi_i2d>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006076:	f7fa f90f 	bl	8000298 <__aeabi_dsub>
 800607a:	3530      	adds	r5, #48	@ 0x30
 800607c:	f806 5b01 	strb.w	r5, [r6], #1
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	42a6      	cmp	r6, r4
 8006086:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	d124      	bne.n	80060da <_dtoa_r+0x662>
 8006090:	4bac      	ldr	r3, [pc, #688]	@ (8006344 <_dtoa_r+0x8cc>)
 8006092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006096:	f7fa f901 	bl	800029c <__adddf3>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a2:	f7fa fd41 	bl	8000b28 <__aeabi_dcmpgt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d145      	bne.n	8006136 <_dtoa_r+0x6be>
 80060aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060ae:	49a5      	ldr	r1, [pc, #660]	@ (8006344 <_dtoa_r+0x8cc>)
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7fa f8f1 	bl	8000298 <__aeabi_dsub>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060be:	f7fa fd15 	bl	8000aec <__aeabi_dcmplt>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f43f aef5 	beq.w	8005eb2 <_dtoa_r+0x43a>
 80060c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80060ca:	1e73      	subs	r3, r6, #1
 80060cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80060ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060d2:	2b30      	cmp	r3, #48	@ 0x30
 80060d4:	d0f8      	beq.n	80060c8 <_dtoa_r+0x650>
 80060d6:	9f04      	ldr	r7, [sp, #16]
 80060d8:	e73e      	b.n	8005f58 <_dtoa_r+0x4e0>
 80060da:	4b9b      	ldr	r3, [pc, #620]	@ (8006348 <_dtoa_r+0x8d0>)
 80060dc:	f7fa fa94 	bl	8000608 <__aeabi_dmul>
 80060e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e4:	e7bc      	b.n	8006060 <_dtoa_r+0x5e8>
 80060e6:	d10c      	bne.n	8006102 <_dtoa_r+0x68a>
 80060e8:	4b98      	ldr	r3, [pc, #608]	@ (800634c <_dtoa_r+0x8d4>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060f0:	f7fa fa8a 	bl	8000608 <__aeabi_dmul>
 80060f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060f8:	f7fa fd0c 	bl	8000b14 <__aeabi_dcmpge>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f000 8157 	beq.w	80063b0 <_dtoa_r+0x938>
 8006102:	2400      	movs	r4, #0
 8006104:	4625      	mov	r5, r4
 8006106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006108:	43db      	mvns	r3, r3
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	4656      	mov	r6, sl
 800610e:	2700      	movs	r7, #0
 8006110:	4621      	mov	r1, r4
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fbb4 	bl	8006880 <_Bfree>
 8006118:	2d00      	cmp	r5, #0
 800611a:	d0dc      	beq.n	80060d6 <_dtoa_r+0x65e>
 800611c:	b12f      	cbz	r7, 800612a <_dtoa_r+0x6b2>
 800611e:	42af      	cmp	r7, r5
 8006120:	d003      	beq.n	800612a <_dtoa_r+0x6b2>
 8006122:	4639      	mov	r1, r7
 8006124:	4658      	mov	r0, fp
 8006126:	f000 fbab 	bl	8006880 <_Bfree>
 800612a:	4629      	mov	r1, r5
 800612c:	4658      	mov	r0, fp
 800612e:	f000 fba7 	bl	8006880 <_Bfree>
 8006132:	e7d0      	b.n	80060d6 <_dtoa_r+0x65e>
 8006134:	9704      	str	r7, [sp, #16]
 8006136:	4633      	mov	r3, r6
 8006138:	461e      	mov	r6, r3
 800613a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800613e:	2a39      	cmp	r2, #57	@ 0x39
 8006140:	d107      	bne.n	8006152 <_dtoa_r+0x6da>
 8006142:	459a      	cmp	sl, r3
 8006144:	d1f8      	bne.n	8006138 <_dtoa_r+0x6c0>
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	3201      	adds	r2, #1
 800614a:	9204      	str	r2, [sp, #16]
 800614c:	2230      	movs	r2, #48	@ 0x30
 800614e:	f88a 2000 	strb.w	r2, [sl]
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	3201      	adds	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e7bd      	b.n	80060d6 <_dtoa_r+0x65e>
 800615a:	4b7b      	ldr	r3, [pc, #492]	@ (8006348 <_dtoa_r+0x8d0>)
 800615c:	2200      	movs	r2, #0
 800615e:	f7fa fa53 	bl	8000608 <__aeabi_dmul>
 8006162:	2200      	movs	r2, #0
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	460d      	mov	r5, r1
 800616a:	f7fa fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f aebb 	beq.w	8005eea <_dtoa_r+0x472>
 8006174:	e6f0      	b.n	8005f58 <_dtoa_r+0x4e0>
 8006176:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006178:	2a00      	cmp	r2, #0
 800617a:	f000 80db 	beq.w	8006334 <_dtoa_r+0x8bc>
 800617e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006180:	2a01      	cmp	r2, #1
 8006182:	f300 80bf 	bgt.w	8006304 <_dtoa_r+0x88c>
 8006186:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006188:	2a00      	cmp	r2, #0
 800618a:	f000 80b7 	beq.w	80062fc <_dtoa_r+0x884>
 800618e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006192:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006194:	4646      	mov	r6, r8
 8006196:	9a08      	ldr	r2, [sp, #32]
 8006198:	2101      	movs	r1, #1
 800619a:	441a      	add	r2, r3
 800619c:	4658      	mov	r0, fp
 800619e:	4498      	add	r8, r3
 80061a0:	9208      	str	r2, [sp, #32]
 80061a2:	f000 fc21 	bl	80069e8 <__i2b>
 80061a6:	4605      	mov	r5, r0
 80061a8:	b15e      	cbz	r6, 80061c2 <_dtoa_r+0x74a>
 80061aa:	9b08      	ldr	r3, [sp, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dd08      	ble.n	80061c2 <_dtoa_r+0x74a>
 80061b0:	42b3      	cmp	r3, r6
 80061b2:	9a08      	ldr	r2, [sp, #32]
 80061b4:	bfa8      	it	ge
 80061b6:	4633      	movge	r3, r6
 80061b8:	eba8 0803 	sub.w	r8, r8, r3
 80061bc:	1af6      	subs	r6, r6, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	9308      	str	r3, [sp, #32]
 80061c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c4:	b1f3      	cbz	r3, 8006204 <_dtoa_r+0x78c>
 80061c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80b7 	beq.w	800633c <_dtoa_r+0x8c4>
 80061ce:	b18c      	cbz	r4, 80061f4 <_dtoa_r+0x77c>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4622      	mov	r2, r4
 80061d4:	4658      	mov	r0, fp
 80061d6:	f000 fcc7 	bl	8006b68 <__pow5mult>
 80061da:	464a      	mov	r2, r9
 80061dc:	4601      	mov	r1, r0
 80061de:	4605      	mov	r5, r0
 80061e0:	4658      	mov	r0, fp
 80061e2:	f000 fc17 	bl	8006a14 <__multiply>
 80061e6:	4649      	mov	r1, r9
 80061e8:	9004      	str	r0, [sp, #16]
 80061ea:	4658      	mov	r0, fp
 80061ec:	f000 fb48 	bl	8006880 <_Bfree>
 80061f0:	9b04      	ldr	r3, [sp, #16]
 80061f2:	4699      	mov	r9, r3
 80061f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061f6:	1b1a      	subs	r2, r3, r4
 80061f8:	d004      	beq.n	8006204 <_dtoa_r+0x78c>
 80061fa:	4649      	mov	r1, r9
 80061fc:	4658      	mov	r0, fp
 80061fe:	f000 fcb3 	bl	8006b68 <__pow5mult>
 8006202:	4681      	mov	r9, r0
 8006204:	2101      	movs	r1, #1
 8006206:	4658      	mov	r0, fp
 8006208:	f000 fbee 	bl	80069e8 <__i2b>
 800620c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800620e:	4604      	mov	r4, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 81cf 	beq.w	80065b4 <_dtoa_r+0xb3c>
 8006216:	461a      	mov	r2, r3
 8006218:	4601      	mov	r1, r0
 800621a:	4658      	mov	r0, fp
 800621c:	f000 fca4 	bl	8006b68 <__pow5mult>
 8006220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006222:	2b01      	cmp	r3, #1
 8006224:	4604      	mov	r4, r0
 8006226:	f300 8095 	bgt.w	8006354 <_dtoa_r+0x8dc>
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 8087 	bne.w	8006340 <_dtoa_r+0x8c8>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 8089 	bne.w	8006350 <_dtoa_r+0x8d8>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006244:	0d1b      	lsrs	r3, r3, #20
 8006246:	051b      	lsls	r3, r3, #20
 8006248:	b12b      	cbz	r3, 8006256 <_dtoa_r+0x7de>
 800624a:	9b08      	ldr	r3, [sp, #32]
 800624c:	3301      	adds	r3, #1
 800624e:	9308      	str	r3, [sp, #32]
 8006250:	f108 0801 	add.w	r8, r8, #1
 8006254:	2301      	movs	r3, #1
 8006256:	930a      	str	r3, [sp, #40]	@ 0x28
 8006258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 81b0 	beq.w	80065c0 <_dtoa_r+0xb48>
 8006260:	6923      	ldr	r3, [r4, #16]
 8006262:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006266:	6918      	ldr	r0, [r3, #16]
 8006268:	f000 fb72 	bl	8006950 <__hi0bits>
 800626c:	f1c0 0020 	rsb	r0, r0, #32
 8006270:	9b08      	ldr	r3, [sp, #32]
 8006272:	4418      	add	r0, r3
 8006274:	f010 001f 	ands.w	r0, r0, #31
 8006278:	d077      	beq.n	800636a <_dtoa_r+0x8f2>
 800627a:	f1c0 0320 	rsb	r3, r0, #32
 800627e:	2b04      	cmp	r3, #4
 8006280:	dd6b      	ble.n	800635a <_dtoa_r+0x8e2>
 8006282:	9b08      	ldr	r3, [sp, #32]
 8006284:	f1c0 001c 	rsb	r0, r0, #28
 8006288:	4403      	add	r3, r0
 800628a:	4480      	add	r8, r0
 800628c:	4406      	add	r6, r0
 800628e:	9308      	str	r3, [sp, #32]
 8006290:	f1b8 0f00 	cmp.w	r8, #0
 8006294:	dd05      	ble.n	80062a2 <_dtoa_r+0x82a>
 8006296:	4649      	mov	r1, r9
 8006298:	4642      	mov	r2, r8
 800629a:	4658      	mov	r0, fp
 800629c:	f000 fcbe 	bl	8006c1c <__lshift>
 80062a0:	4681      	mov	r9, r0
 80062a2:	9b08      	ldr	r3, [sp, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dd05      	ble.n	80062b4 <_dtoa_r+0x83c>
 80062a8:	4621      	mov	r1, r4
 80062aa:	461a      	mov	r2, r3
 80062ac:	4658      	mov	r0, fp
 80062ae:	f000 fcb5 	bl	8006c1c <__lshift>
 80062b2:	4604      	mov	r4, r0
 80062b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d059      	beq.n	800636e <_dtoa_r+0x8f6>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4648      	mov	r0, r9
 80062be:	f000 fd19 	bl	8006cf4 <__mcmp>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	da53      	bge.n	800636e <_dtoa_r+0x8f6>
 80062c6:	1e7b      	subs	r3, r7, #1
 80062c8:	9304      	str	r3, [sp, #16]
 80062ca:	4649      	mov	r1, r9
 80062cc:	2300      	movs	r3, #0
 80062ce:	220a      	movs	r2, #10
 80062d0:	4658      	mov	r0, fp
 80062d2:	f000 faf7 	bl	80068c4 <__multadd>
 80062d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062d8:	4681      	mov	r9, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8172 	beq.w	80065c4 <_dtoa_r+0xb4c>
 80062e0:	2300      	movs	r3, #0
 80062e2:	4629      	mov	r1, r5
 80062e4:	220a      	movs	r2, #10
 80062e6:	4658      	mov	r0, fp
 80062e8:	f000 faec 	bl	80068c4 <__multadd>
 80062ec:	9b00      	ldr	r3, [sp, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	4605      	mov	r5, r0
 80062f2:	dc67      	bgt.n	80063c4 <_dtoa_r+0x94c>
 80062f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	dc41      	bgt.n	800637e <_dtoa_r+0x906>
 80062fa:	e063      	b.n	80063c4 <_dtoa_r+0x94c>
 80062fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80062fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006302:	e746      	b.n	8006192 <_dtoa_r+0x71a>
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	1e5c      	subs	r4, r3, #1
 8006308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800630a:	42a3      	cmp	r3, r4
 800630c:	bfbf      	itttt	lt
 800630e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006310:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006312:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006314:	1ae3      	sublt	r3, r4, r3
 8006316:	bfb4      	ite	lt
 8006318:	18d2      	addlt	r2, r2, r3
 800631a:	1b1c      	subge	r4, r3, r4
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	bfbc      	itt	lt
 8006320:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006322:	2400      	movlt	r4, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	bfb5      	itete	lt
 8006328:	eba8 0603 	sublt.w	r6, r8, r3
 800632c:	9b07      	ldrge	r3, [sp, #28]
 800632e:	2300      	movlt	r3, #0
 8006330:	4646      	movge	r6, r8
 8006332:	e730      	b.n	8006196 <_dtoa_r+0x71e>
 8006334:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006336:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006338:	4646      	mov	r6, r8
 800633a:	e735      	b.n	80061a8 <_dtoa_r+0x730>
 800633c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800633e:	e75c      	b.n	80061fa <_dtoa_r+0x782>
 8006340:	2300      	movs	r3, #0
 8006342:	e788      	b.n	8006256 <_dtoa_r+0x7de>
 8006344:	3fe00000 	.word	0x3fe00000
 8006348:	40240000 	.word	0x40240000
 800634c:	40140000 	.word	0x40140000
 8006350:	9b02      	ldr	r3, [sp, #8]
 8006352:	e780      	b.n	8006256 <_dtoa_r+0x7de>
 8006354:	2300      	movs	r3, #0
 8006356:	930a      	str	r3, [sp, #40]	@ 0x28
 8006358:	e782      	b.n	8006260 <_dtoa_r+0x7e8>
 800635a:	d099      	beq.n	8006290 <_dtoa_r+0x818>
 800635c:	9a08      	ldr	r2, [sp, #32]
 800635e:	331c      	adds	r3, #28
 8006360:	441a      	add	r2, r3
 8006362:	4498      	add	r8, r3
 8006364:	441e      	add	r6, r3
 8006366:	9208      	str	r2, [sp, #32]
 8006368:	e792      	b.n	8006290 <_dtoa_r+0x818>
 800636a:	4603      	mov	r3, r0
 800636c:	e7f6      	b.n	800635c <_dtoa_r+0x8e4>
 800636e:	9b07      	ldr	r3, [sp, #28]
 8006370:	9704      	str	r7, [sp, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	dc20      	bgt.n	80063b8 <_dtoa_r+0x940>
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800637a:	2b02      	cmp	r3, #2
 800637c:	dd1e      	ble.n	80063bc <_dtoa_r+0x944>
 800637e:	9b00      	ldr	r3, [sp, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f47f aec0 	bne.w	8006106 <_dtoa_r+0x68e>
 8006386:	4621      	mov	r1, r4
 8006388:	2205      	movs	r2, #5
 800638a:	4658      	mov	r0, fp
 800638c:	f000 fa9a 	bl	80068c4 <__multadd>
 8006390:	4601      	mov	r1, r0
 8006392:	4604      	mov	r4, r0
 8006394:	4648      	mov	r0, r9
 8006396:	f000 fcad 	bl	8006cf4 <__mcmp>
 800639a:	2800      	cmp	r0, #0
 800639c:	f77f aeb3 	ble.w	8006106 <_dtoa_r+0x68e>
 80063a0:	4656      	mov	r6, sl
 80063a2:	2331      	movs	r3, #49	@ 0x31
 80063a4:	f806 3b01 	strb.w	r3, [r6], #1
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	3301      	adds	r3, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	e6ae      	b.n	800610e <_dtoa_r+0x696>
 80063b0:	9c07      	ldr	r4, [sp, #28]
 80063b2:	9704      	str	r7, [sp, #16]
 80063b4:	4625      	mov	r5, r4
 80063b6:	e7f3      	b.n	80063a0 <_dtoa_r+0x928>
 80063b8:	9b07      	ldr	r3, [sp, #28]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8104 	beq.w	80065cc <_dtoa_r+0xb54>
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	dd05      	ble.n	80063d4 <_dtoa_r+0x95c>
 80063c8:	4629      	mov	r1, r5
 80063ca:	4632      	mov	r2, r6
 80063cc:	4658      	mov	r0, fp
 80063ce:	f000 fc25 	bl	8006c1c <__lshift>
 80063d2:	4605      	mov	r5, r0
 80063d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d05a      	beq.n	8006490 <_dtoa_r+0xa18>
 80063da:	6869      	ldr	r1, [r5, #4]
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fa0f 	bl	8006800 <_Balloc>
 80063e2:	4606      	mov	r6, r0
 80063e4:	b928      	cbnz	r0, 80063f2 <_dtoa_r+0x97a>
 80063e6:	4b84      	ldr	r3, [pc, #528]	@ (80065f8 <_dtoa_r+0xb80>)
 80063e8:	4602      	mov	r2, r0
 80063ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063ee:	f7ff bb5a 	b.w	8005aa6 <_dtoa_r+0x2e>
 80063f2:	692a      	ldr	r2, [r5, #16]
 80063f4:	3202      	adds	r2, #2
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	f105 010c 	add.w	r1, r5, #12
 80063fc:	300c      	adds	r0, #12
 80063fe:	f000 fec1 	bl	8007184 <memcpy>
 8006402:	2201      	movs	r2, #1
 8006404:	4631      	mov	r1, r6
 8006406:	4658      	mov	r0, fp
 8006408:	f000 fc08 	bl	8006c1c <__lshift>
 800640c:	f10a 0301 	add.w	r3, sl, #1
 8006410:	9307      	str	r3, [sp, #28]
 8006412:	9b00      	ldr	r3, [sp, #0]
 8006414:	4453      	add	r3, sl
 8006416:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	462f      	mov	r7, r5
 8006420:	930a      	str	r3, [sp, #40]	@ 0x28
 8006422:	4605      	mov	r5, r0
 8006424:	9b07      	ldr	r3, [sp, #28]
 8006426:	4621      	mov	r1, r4
 8006428:	3b01      	subs	r3, #1
 800642a:	4648      	mov	r0, r9
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	f7ff fa98 	bl	8005962 <quorem>
 8006432:	4639      	mov	r1, r7
 8006434:	9002      	str	r0, [sp, #8]
 8006436:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800643a:	4648      	mov	r0, r9
 800643c:	f000 fc5a 	bl	8006cf4 <__mcmp>
 8006440:	462a      	mov	r2, r5
 8006442:	9008      	str	r0, [sp, #32]
 8006444:	4621      	mov	r1, r4
 8006446:	4658      	mov	r0, fp
 8006448:	f000 fc70 	bl	8006d2c <__mdiff>
 800644c:	68c2      	ldr	r2, [r0, #12]
 800644e:	4606      	mov	r6, r0
 8006450:	bb02      	cbnz	r2, 8006494 <_dtoa_r+0xa1c>
 8006452:	4601      	mov	r1, r0
 8006454:	4648      	mov	r0, r9
 8006456:	f000 fc4d 	bl	8006cf4 <__mcmp>
 800645a:	4602      	mov	r2, r0
 800645c:	4631      	mov	r1, r6
 800645e:	4658      	mov	r0, fp
 8006460:	920e      	str	r2, [sp, #56]	@ 0x38
 8006462:	f000 fa0d 	bl	8006880 <_Bfree>
 8006466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006468:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800646a:	9e07      	ldr	r6, [sp, #28]
 800646c:	ea43 0102 	orr.w	r1, r3, r2
 8006470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006472:	4319      	orrs	r1, r3
 8006474:	d110      	bne.n	8006498 <_dtoa_r+0xa20>
 8006476:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800647a:	d029      	beq.n	80064d0 <_dtoa_r+0xa58>
 800647c:	9b08      	ldr	r3, [sp, #32]
 800647e:	2b00      	cmp	r3, #0
 8006480:	dd02      	ble.n	8006488 <_dtoa_r+0xa10>
 8006482:	9b02      	ldr	r3, [sp, #8]
 8006484:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006488:	9b00      	ldr	r3, [sp, #0]
 800648a:	f883 8000 	strb.w	r8, [r3]
 800648e:	e63f      	b.n	8006110 <_dtoa_r+0x698>
 8006490:	4628      	mov	r0, r5
 8006492:	e7bb      	b.n	800640c <_dtoa_r+0x994>
 8006494:	2201      	movs	r2, #1
 8006496:	e7e1      	b.n	800645c <_dtoa_r+0x9e4>
 8006498:	9b08      	ldr	r3, [sp, #32]
 800649a:	2b00      	cmp	r3, #0
 800649c:	db04      	blt.n	80064a8 <_dtoa_r+0xa30>
 800649e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064a0:	430b      	orrs	r3, r1
 80064a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064a4:	430b      	orrs	r3, r1
 80064a6:	d120      	bne.n	80064ea <_dtoa_r+0xa72>
 80064a8:	2a00      	cmp	r2, #0
 80064aa:	dded      	ble.n	8006488 <_dtoa_r+0xa10>
 80064ac:	4649      	mov	r1, r9
 80064ae:	2201      	movs	r2, #1
 80064b0:	4658      	mov	r0, fp
 80064b2:	f000 fbb3 	bl	8006c1c <__lshift>
 80064b6:	4621      	mov	r1, r4
 80064b8:	4681      	mov	r9, r0
 80064ba:	f000 fc1b 	bl	8006cf4 <__mcmp>
 80064be:	2800      	cmp	r0, #0
 80064c0:	dc03      	bgt.n	80064ca <_dtoa_r+0xa52>
 80064c2:	d1e1      	bne.n	8006488 <_dtoa_r+0xa10>
 80064c4:	f018 0f01 	tst.w	r8, #1
 80064c8:	d0de      	beq.n	8006488 <_dtoa_r+0xa10>
 80064ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064ce:	d1d8      	bne.n	8006482 <_dtoa_r+0xa0a>
 80064d0:	9a00      	ldr	r2, [sp, #0]
 80064d2:	2339      	movs	r3, #57	@ 0x39
 80064d4:	7013      	strb	r3, [r2, #0]
 80064d6:	4633      	mov	r3, r6
 80064d8:	461e      	mov	r6, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064e0:	2a39      	cmp	r2, #57	@ 0x39
 80064e2:	d052      	beq.n	800658a <_dtoa_r+0xb12>
 80064e4:	3201      	adds	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e612      	b.n	8006110 <_dtoa_r+0x698>
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	dd07      	ble.n	80064fe <_dtoa_r+0xa86>
 80064ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064f2:	d0ed      	beq.n	80064d0 <_dtoa_r+0xa58>
 80064f4:	9a00      	ldr	r2, [sp, #0]
 80064f6:	f108 0301 	add.w	r3, r8, #1
 80064fa:	7013      	strb	r3, [r2, #0]
 80064fc:	e608      	b.n	8006110 <_dtoa_r+0x698>
 80064fe:	9b07      	ldr	r3, [sp, #28]
 8006500:	9a07      	ldr	r2, [sp, #28]
 8006502:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006508:	4293      	cmp	r3, r2
 800650a:	d028      	beq.n	800655e <_dtoa_r+0xae6>
 800650c:	4649      	mov	r1, r9
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4658      	mov	r0, fp
 8006514:	f000 f9d6 	bl	80068c4 <__multadd>
 8006518:	42af      	cmp	r7, r5
 800651a:	4681      	mov	r9, r0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	f04f 020a 	mov.w	r2, #10
 8006524:	4639      	mov	r1, r7
 8006526:	4658      	mov	r0, fp
 8006528:	d107      	bne.n	800653a <_dtoa_r+0xac2>
 800652a:	f000 f9cb 	bl	80068c4 <__multadd>
 800652e:	4607      	mov	r7, r0
 8006530:	4605      	mov	r5, r0
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	3301      	adds	r3, #1
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	e774      	b.n	8006424 <_dtoa_r+0x9ac>
 800653a:	f000 f9c3 	bl	80068c4 <__multadd>
 800653e:	4629      	mov	r1, r5
 8006540:	4607      	mov	r7, r0
 8006542:	2300      	movs	r3, #0
 8006544:	220a      	movs	r2, #10
 8006546:	4658      	mov	r0, fp
 8006548:	f000 f9bc 	bl	80068c4 <__multadd>
 800654c:	4605      	mov	r5, r0
 800654e:	e7f0      	b.n	8006532 <_dtoa_r+0xaba>
 8006550:	9b00      	ldr	r3, [sp, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfcc      	ite	gt
 8006556:	461e      	movgt	r6, r3
 8006558:	2601      	movle	r6, #1
 800655a:	4456      	add	r6, sl
 800655c:	2700      	movs	r7, #0
 800655e:	4649      	mov	r1, r9
 8006560:	2201      	movs	r2, #1
 8006562:	4658      	mov	r0, fp
 8006564:	f000 fb5a 	bl	8006c1c <__lshift>
 8006568:	4621      	mov	r1, r4
 800656a:	4681      	mov	r9, r0
 800656c:	f000 fbc2 	bl	8006cf4 <__mcmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	dcb0      	bgt.n	80064d6 <_dtoa_r+0xa5e>
 8006574:	d102      	bne.n	800657c <_dtoa_r+0xb04>
 8006576:	f018 0f01 	tst.w	r8, #1
 800657a:	d1ac      	bne.n	80064d6 <_dtoa_r+0xa5e>
 800657c:	4633      	mov	r3, r6
 800657e:	461e      	mov	r6, r3
 8006580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006584:	2a30      	cmp	r2, #48	@ 0x30
 8006586:	d0fa      	beq.n	800657e <_dtoa_r+0xb06>
 8006588:	e5c2      	b.n	8006110 <_dtoa_r+0x698>
 800658a:	459a      	cmp	sl, r3
 800658c:	d1a4      	bne.n	80064d8 <_dtoa_r+0xa60>
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	3301      	adds	r3, #1
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	2331      	movs	r3, #49	@ 0x31
 8006596:	f88a 3000 	strb.w	r3, [sl]
 800659a:	e5b9      	b.n	8006110 <_dtoa_r+0x698>
 800659c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800659e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80065fc <_dtoa_r+0xb84>
 80065a2:	b11b      	cbz	r3, 80065ac <_dtoa_r+0xb34>
 80065a4:	f10a 0308 	add.w	r3, sl, #8
 80065a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	4650      	mov	r0, sl
 80065ae:	b019      	add	sp, #100	@ 0x64
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	f77f ae37 	ble.w	800622a <_dtoa_r+0x7b2>
 80065bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065be:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c0:	2001      	movs	r0, #1
 80065c2:	e655      	b.n	8006270 <_dtoa_r+0x7f8>
 80065c4:	9b00      	ldr	r3, [sp, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f77f aed6 	ble.w	8006378 <_dtoa_r+0x900>
 80065cc:	4656      	mov	r6, sl
 80065ce:	4621      	mov	r1, r4
 80065d0:	4648      	mov	r0, r9
 80065d2:	f7ff f9c6 	bl	8005962 <quorem>
 80065d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065da:	f806 8b01 	strb.w	r8, [r6], #1
 80065de:	9b00      	ldr	r3, [sp, #0]
 80065e0:	eba6 020a 	sub.w	r2, r6, sl
 80065e4:	4293      	cmp	r3, r2
 80065e6:	ddb3      	ble.n	8006550 <_dtoa_r+0xad8>
 80065e8:	4649      	mov	r1, r9
 80065ea:	2300      	movs	r3, #0
 80065ec:	220a      	movs	r2, #10
 80065ee:	4658      	mov	r0, fp
 80065f0:	f000 f968 	bl	80068c4 <__multadd>
 80065f4:	4681      	mov	r9, r0
 80065f6:	e7ea      	b.n	80065ce <_dtoa_r+0xb56>
 80065f8:	080076b6 	.word	0x080076b6
 80065fc:	0800763a 	.word	0x0800763a

08006600 <_free_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4605      	mov	r5, r0
 8006604:	2900      	cmp	r1, #0
 8006606:	d041      	beq.n	800668c <_free_r+0x8c>
 8006608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660c:	1f0c      	subs	r4, r1, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfb8      	it	lt
 8006612:	18e4      	addlt	r4, r4, r3
 8006614:	f000 f8e8 	bl	80067e8 <__malloc_lock>
 8006618:	4a1d      	ldr	r2, [pc, #116]	@ (8006690 <_free_r+0x90>)
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	b933      	cbnz	r3, 800662c <_free_r+0x2c>
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	6014      	str	r4, [r2, #0]
 8006622:	4628      	mov	r0, r5
 8006624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006628:	f000 b8e4 	b.w	80067f4 <__malloc_unlock>
 800662c:	42a3      	cmp	r3, r4
 800662e:	d908      	bls.n	8006642 <_free_r+0x42>
 8006630:	6820      	ldr	r0, [r4, #0]
 8006632:	1821      	adds	r1, r4, r0
 8006634:	428b      	cmp	r3, r1
 8006636:	bf01      	itttt	eq
 8006638:	6819      	ldreq	r1, [r3, #0]
 800663a:	685b      	ldreq	r3, [r3, #4]
 800663c:	1809      	addeq	r1, r1, r0
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	e7ed      	b.n	800661e <_free_r+0x1e>
 8006642:	461a      	mov	r2, r3
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	b10b      	cbz	r3, 800664c <_free_r+0x4c>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d9fa      	bls.n	8006642 <_free_r+0x42>
 800664c:	6811      	ldr	r1, [r2, #0]
 800664e:	1850      	adds	r0, r2, r1
 8006650:	42a0      	cmp	r0, r4
 8006652:	d10b      	bne.n	800666c <_free_r+0x6c>
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	4401      	add	r1, r0
 8006658:	1850      	adds	r0, r2, r1
 800665a:	4283      	cmp	r3, r0
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	d1e0      	bne.n	8006622 <_free_r+0x22>
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	6053      	str	r3, [r2, #4]
 8006666:	4408      	add	r0, r1
 8006668:	6010      	str	r0, [r2, #0]
 800666a:	e7da      	b.n	8006622 <_free_r+0x22>
 800666c:	d902      	bls.n	8006674 <_free_r+0x74>
 800666e:	230c      	movs	r3, #12
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	e7d6      	b.n	8006622 <_free_r+0x22>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	1821      	adds	r1, r4, r0
 8006678:	428b      	cmp	r3, r1
 800667a:	bf04      	itt	eq
 800667c:	6819      	ldreq	r1, [r3, #0]
 800667e:	685b      	ldreq	r3, [r3, #4]
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	bf04      	itt	eq
 8006684:	1809      	addeq	r1, r1, r0
 8006686:	6021      	streq	r1, [r4, #0]
 8006688:	6054      	str	r4, [r2, #4]
 800668a:	e7ca      	b.n	8006622 <_free_r+0x22>
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	20000610 	.word	0x20000610

08006694 <malloc>:
 8006694:	4b02      	ldr	r3, [pc, #8]	@ (80066a0 <malloc+0xc>)
 8006696:	4601      	mov	r1, r0
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	f000 b825 	b.w	80066e8 <_malloc_r>
 800669e:	bf00      	nop
 80066a0:	20000020 	.word	0x20000020

080066a4 <sbrk_aligned>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4e0f      	ldr	r6, [pc, #60]	@ (80066e4 <sbrk_aligned+0x40>)
 80066a8:	460c      	mov	r4, r1
 80066aa:	6831      	ldr	r1, [r6, #0]
 80066ac:	4605      	mov	r5, r0
 80066ae:	b911      	cbnz	r1, 80066b6 <sbrk_aligned+0x12>
 80066b0:	f000 fd58 	bl	8007164 <_sbrk_r>
 80066b4:	6030      	str	r0, [r6, #0]
 80066b6:	4621      	mov	r1, r4
 80066b8:	4628      	mov	r0, r5
 80066ba:	f000 fd53 	bl	8007164 <_sbrk_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d103      	bne.n	80066ca <sbrk_aligned+0x26>
 80066c2:	f04f 34ff 	mov.w	r4, #4294967295
 80066c6:	4620      	mov	r0, r4
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	1cc4      	adds	r4, r0, #3
 80066cc:	f024 0403 	bic.w	r4, r4, #3
 80066d0:	42a0      	cmp	r0, r4
 80066d2:	d0f8      	beq.n	80066c6 <sbrk_aligned+0x22>
 80066d4:	1a21      	subs	r1, r4, r0
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 fd44 	bl	8007164 <_sbrk_r>
 80066dc:	3001      	adds	r0, #1
 80066de:	d1f2      	bne.n	80066c6 <sbrk_aligned+0x22>
 80066e0:	e7ef      	b.n	80066c2 <sbrk_aligned+0x1e>
 80066e2:	bf00      	nop
 80066e4:	2000060c 	.word	0x2000060c

080066e8 <_malloc_r>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	1ccd      	adds	r5, r1, #3
 80066ee:	f025 0503 	bic.w	r5, r5, #3
 80066f2:	3508      	adds	r5, #8
 80066f4:	2d0c      	cmp	r5, #12
 80066f6:	bf38      	it	cc
 80066f8:	250c      	movcc	r5, #12
 80066fa:	2d00      	cmp	r5, #0
 80066fc:	4606      	mov	r6, r0
 80066fe:	db01      	blt.n	8006704 <_malloc_r+0x1c>
 8006700:	42a9      	cmp	r1, r5
 8006702:	d904      	bls.n	800670e <_malloc_r+0x26>
 8006704:	230c      	movs	r3, #12
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	2000      	movs	r0, #0
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067e4 <_malloc_r+0xfc>
 8006712:	f000 f869 	bl	80067e8 <__malloc_lock>
 8006716:	f8d8 3000 	ldr.w	r3, [r8]
 800671a:	461c      	mov	r4, r3
 800671c:	bb44      	cbnz	r4, 8006770 <_malloc_r+0x88>
 800671e:	4629      	mov	r1, r5
 8006720:	4630      	mov	r0, r6
 8006722:	f7ff ffbf 	bl	80066a4 <sbrk_aligned>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	4604      	mov	r4, r0
 800672a:	d158      	bne.n	80067de <_malloc_r+0xf6>
 800672c:	f8d8 4000 	ldr.w	r4, [r8]
 8006730:	4627      	mov	r7, r4
 8006732:	2f00      	cmp	r7, #0
 8006734:	d143      	bne.n	80067be <_malloc_r+0xd6>
 8006736:	2c00      	cmp	r4, #0
 8006738:	d04b      	beq.n	80067d2 <_malloc_r+0xea>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	4639      	mov	r1, r7
 800673e:	4630      	mov	r0, r6
 8006740:	eb04 0903 	add.w	r9, r4, r3
 8006744:	f000 fd0e 	bl	8007164 <_sbrk_r>
 8006748:	4581      	cmp	r9, r0
 800674a:	d142      	bne.n	80067d2 <_malloc_r+0xea>
 800674c:	6821      	ldr	r1, [r4, #0]
 800674e:	1a6d      	subs	r5, r5, r1
 8006750:	4629      	mov	r1, r5
 8006752:	4630      	mov	r0, r6
 8006754:	f7ff ffa6 	bl	80066a4 <sbrk_aligned>
 8006758:	3001      	adds	r0, #1
 800675a:	d03a      	beq.n	80067d2 <_malloc_r+0xea>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	442b      	add	r3, r5
 8006760:	6023      	str	r3, [r4, #0]
 8006762:	f8d8 3000 	ldr.w	r3, [r8]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	bb62      	cbnz	r2, 80067c4 <_malloc_r+0xdc>
 800676a:	f8c8 7000 	str.w	r7, [r8]
 800676e:	e00f      	b.n	8006790 <_malloc_r+0xa8>
 8006770:	6822      	ldr	r2, [r4, #0]
 8006772:	1b52      	subs	r2, r2, r5
 8006774:	d420      	bmi.n	80067b8 <_malloc_r+0xd0>
 8006776:	2a0b      	cmp	r2, #11
 8006778:	d917      	bls.n	80067aa <_malloc_r+0xc2>
 800677a:	1961      	adds	r1, r4, r5
 800677c:	42a3      	cmp	r3, r4
 800677e:	6025      	str	r5, [r4, #0]
 8006780:	bf18      	it	ne
 8006782:	6059      	strne	r1, [r3, #4]
 8006784:	6863      	ldr	r3, [r4, #4]
 8006786:	bf08      	it	eq
 8006788:	f8c8 1000 	streq.w	r1, [r8]
 800678c:	5162      	str	r2, [r4, r5]
 800678e:	604b      	str	r3, [r1, #4]
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f82f 	bl	80067f4 <__malloc_unlock>
 8006796:	f104 000b 	add.w	r0, r4, #11
 800679a:	1d23      	adds	r3, r4, #4
 800679c:	f020 0007 	bic.w	r0, r0, #7
 80067a0:	1ac2      	subs	r2, r0, r3
 80067a2:	bf1c      	itt	ne
 80067a4:	1a1b      	subne	r3, r3, r0
 80067a6:	50a3      	strne	r3, [r4, r2]
 80067a8:	e7af      	b.n	800670a <_malloc_r+0x22>
 80067aa:	6862      	ldr	r2, [r4, #4]
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	bf0c      	ite	eq
 80067b0:	f8c8 2000 	streq.w	r2, [r8]
 80067b4:	605a      	strne	r2, [r3, #4]
 80067b6:	e7eb      	b.n	8006790 <_malloc_r+0xa8>
 80067b8:	4623      	mov	r3, r4
 80067ba:	6864      	ldr	r4, [r4, #4]
 80067bc:	e7ae      	b.n	800671c <_malloc_r+0x34>
 80067be:	463c      	mov	r4, r7
 80067c0:	687f      	ldr	r7, [r7, #4]
 80067c2:	e7b6      	b.n	8006732 <_malloc_r+0x4a>
 80067c4:	461a      	mov	r2, r3
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d1fb      	bne.n	80067c4 <_malloc_r+0xdc>
 80067cc:	2300      	movs	r3, #0
 80067ce:	6053      	str	r3, [r2, #4]
 80067d0:	e7de      	b.n	8006790 <_malloc_r+0xa8>
 80067d2:	230c      	movs	r3, #12
 80067d4:	6033      	str	r3, [r6, #0]
 80067d6:	4630      	mov	r0, r6
 80067d8:	f000 f80c 	bl	80067f4 <__malloc_unlock>
 80067dc:	e794      	b.n	8006708 <_malloc_r+0x20>
 80067de:	6005      	str	r5, [r0, #0]
 80067e0:	e7d6      	b.n	8006790 <_malloc_r+0xa8>
 80067e2:	bf00      	nop
 80067e4:	20000610 	.word	0x20000610

080067e8 <__malloc_lock>:
 80067e8:	4801      	ldr	r0, [pc, #4]	@ (80067f0 <__malloc_lock+0x8>)
 80067ea:	f7ff b8b8 	b.w	800595e <__retarget_lock_acquire_recursive>
 80067ee:	bf00      	nop
 80067f0:	20000608 	.word	0x20000608

080067f4 <__malloc_unlock>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__malloc_unlock+0x8>)
 80067f6:	f7ff b8b3 	b.w	8005960 <__retarget_lock_release_recursive>
 80067fa:	bf00      	nop
 80067fc:	20000608 	.word	0x20000608

08006800 <_Balloc>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	69c6      	ldr	r6, [r0, #28]
 8006804:	4604      	mov	r4, r0
 8006806:	460d      	mov	r5, r1
 8006808:	b976      	cbnz	r6, 8006828 <_Balloc+0x28>
 800680a:	2010      	movs	r0, #16
 800680c:	f7ff ff42 	bl	8006694 <malloc>
 8006810:	4602      	mov	r2, r0
 8006812:	61e0      	str	r0, [r4, #28]
 8006814:	b920      	cbnz	r0, 8006820 <_Balloc+0x20>
 8006816:	4b18      	ldr	r3, [pc, #96]	@ (8006878 <_Balloc+0x78>)
 8006818:	4818      	ldr	r0, [pc, #96]	@ (800687c <_Balloc+0x7c>)
 800681a:	216b      	movs	r1, #107	@ 0x6b
 800681c:	f000 fcc0 	bl	80071a0 <__assert_func>
 8006820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006824:	6006      	str	r6, [r0, #0]
 8006826:	60c6      	str	r6, [r0, #12]
 8006828:	69e6      	ldr	r6, [r4, #28]
 800682a:	68f3      	ldr	r3, [r6, #12]
 800682c:	b183      	cbz	r3, 8006850 <_Balloc+0x50>
 800682e:	69e3      	ldr	r3, [r4, #28]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006836:	b9b8      	cbnz	r0, 8006868 <_Balloc+0x68>
 8006838:	2101      	movs	r1, #1
 800683a:	fa01 f605 	lsl.w	r6, r1, r5
 800683e:	1d72      	adds	r2, r6, #5
 8006840:	0092      	lsls	r2, r2, #2
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fcca 	bl	80071dc <_calloc_r>
 8006848:	b160      	cbz	r0, 8006864 <_Balloc+0x64>
 800684a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800684e:	e00e      	b.n	800686e <_Balloc+0x6e>
 8006850:	2221      	movs	r2, #33	@ 0x21
 8006852:	2104      	movs	r1, #4
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fcc1 	bl	80071dc <_calloc_r>
 800685a:	69e3      	ldr	r3, [r4, #28]
 800685c:	60f0      	str	r0, [r6, #12]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e4      	bne.n	800682e <_Balloc+0x2e>
 8006864:	2000      	movs	r0, #0
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	6802      	ldr	r2, [r0, #0]
 800686a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800686e:	2300      	movs	r3, #0
 8006870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006874:	e7f7      	b.n	8006866 <_Balloc+0x66>
 8006876:	bf00      	nop
 8006878:	08007647 	.word	0x08007647
 800687c:	080076c7 	.word	0x080076c7

08006880 <_Bfree>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	69c6      	ldr	r6, [r0, #28]
 8006884:	4605      	mov	r5, r0
 8006886:	460c      	mov	r4, r1
 8006888:	b976      	cbnz	r6, 80068a8 <_Bfree+0x28>
 800688a:	2010      	movs	r0, #16
 800688c:	f7ff ff02 	bl	8006694 <malloc>
 8006890:	4602      	mov	r2, r0
 8006892:	61e8      	str	r0, [r5, #28]
 8006894:	b920      	cbnz	r0, 80068a0 <_Bfree+0x20>
 8006896:	4b09      	ldr	r3, [pc, #36]	@ (80068bc <_Bfree+0x3c>)
 8006898:	4809      	ldr	r0, [pc, #36]	@ (80068c0 <_Bfree+0x40>)
 800689a:	218f      	movs	r1, #143	@ 0x8f
 800689c:	f000 fc80 	bl	80071a0 <__assert_func>
 80068a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068a4:	6006      	str	r6, [r0, #0]
 80068a6:	60c6      	str	r6, [r0, #12]
 80068a8:	b13c      	cbz	r4, 80068ba <_Bfree+0x3a>
 80068aa:	69eb      	ldr	r3, [r5, #28]
 80068ac:	6862      	ldr	r2, [r4, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b4:	6021      	str	r1, [r4, #0]
 80068b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	08007647 	.word	0x08007647
 80068c0:	080076c7 	.word	0x080076c7

080068c4 <__multadd>:
 80068c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c8:	690d      	ldr	r5, [r1, #16]
 80068ca:	4607      	mov	r7, r0
 80068cc:	460c      	mov	r4, r1
 80068ce:	461e      	mov	r6, r3
 80068d0:	f101 0c14 	add.w	ip, r1, #20
 80068d4:	2000      	movs	r0, #0
 80068d6:	f8dc 3000 	ldr.w	r3, [ip]
 80068da:	b299      	uxth	r1, r3
 80068dc:	fb02 6101 	mla	r1, r2, r1, r6
 80068e0:	0c1e      	lsrs	r6, r3, #16
 80068e2:	0c0b      	lsrs	r3, r1, #16
 80068e4:	fb02 3306 	mla	r3, r2, r6, r3
 80068e8:	b289      	uxth	r1, r1
 80068ea:	3001      	adds	r0, #1
 80068ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068f0:	4285      	cmp	r5, r0
 80068f2:	f84c 1b04 	str.w	r1, [ip], #4
 80068f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068fa:	dcec      	bgt.n	80068d6 <__multadd+0x12>
 80068fc:	b30e      	cbz	r6, 8006942 <__multadd+0x7e>
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	42ab      	cmp	r3, r5
 8006902:	dc19      	bgt.n	8006938 <__multadd+0x74>
 8006904:	6861      	ldr	r1, [r4, #4]
 8006906:	4638      	mov	r0, r7
 8006908:	3101      	adds	r1, #1
 800690a:	f7ff ff79 	bl	8006800 <_Balloc>
 800690e:	4680      	mov	r8, r0
 8006910:	b928      	cbnz	r0, 800691e <__multadd+0x5a>
 8006912:	4602      	mov	r2, r0
 8006914:	4b0c      	ldr	r3, [pc, #48]	@ (8006948 <__multadd+0x84>)
 8006916:	480d      	ldr	r0, [pc, #52]	@ (800694c <__multadd+0x88>)
 8006918:	21ba      	movs	r1, #186	@ 0xba
 800691a:	f000 fc41 	bl	80071a0 <__assert_func>
 800691e:	6922      	ldr	r2, [r4, #16]
 8006920:	3202      	adds	r2, #2
 8006922:	f104 010c 	add.w	r1, r4, #12
 8006926:	0092      	lsls	r2, r2, #2
 8006928:	300c      	adds	r0, #12
 800692a:	f000 fc2b 	bl	8007184 <memcpy>
 800692e:	4621      	mov	r1, r4
 8006930:	4638      	mov	r0, r7
 8006932:	f7ff ffa5 	bl	8006880 <_Bfree>
 8006936:	4644      	mov	r4, r8
 8006938:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800693c:	3501      	adds	r5, #1
 800693e:	615e      	str	r6, [r3, #20]
 8006940:	6125      	str	r5, [r4, #16]
 8006942:	4620      	mov	r0, r4
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006948:	080076b6 	.word	0x080076b6
 800694c:	080076c7 	.word	0x080076c7

08006950 <__hi0bits>:
 8006950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006954:	4603      	mov	r3, r0
 8006956:	bf36      	itet	cc
 8006958:	0403      	lslcc	r3, r0, #16
 800695a:	2000      	movcs	r0, #0
 800695c:	2010      	movcc	r0, #16
 800695e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006962:	bf3c      	itt	cc
 8006964:	021b      	lslcc	r3, r3, #8
 8006966:	3008      	addcc	r0, #8
 8006968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800696c:	bf3c      	itt	cc
 800696e:	011b      	lslcc	r3, r3, #4
 8006970:	3004      	addcc	r0, #4
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	bf3c      	itt	cc
 8006978:	009b      	lslcc	r3, r3, #2
 800697a:	3002      	addcc	r0, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	db05      	blt.n	800698c <__hi0bits+0x3c>
 8006980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006984:	f100 0001 	add.w	r0, r0, #1
 8006988:	bf08      	it	eq
 800698a:	2020      	moveq	r0, #32
 800698c:	4770      	bx	lr

0800698e <__lo0bits>:
 800698e:	6803      	ldr	r3, [r0, #0]
 8006990:	4602      	mov	r2, r0
 8006992:	f013 0007 	ands.w	r0, r3, #7
 8006996:	d00b      	beq.n	80069b0 <__lo0bits+0x22>
 8006998:	07d9      	lsls	r1, r3, #31
 800699a:	d421      	bmi.n	80069e0 <__lo0bits+0x52>
 800699c:	0798      	lsls	r0, r3, #30
 800699e:	bf49      	itett	mi
 80069a0:	085b      	lsrmi	r3, r3, #1
 80069a2:	089b      	lsrpl	r3, r3, #2
 80069a4:	2001      	movmi	r0, #1
 80069a6:	6013      	strmi	r3, [r2, #0]
 80069a8:	bf5c      	itt	pl
 80069aa:	6013      	strpl	r3, [r2, #0]
 80069ac:	2002      	movpl	r0, #2
 80069ae:	4770      	bx	lr
 80069b0:	b299      	uxth	r1, r3
 80069b2:	b909      	cbnz	r1, 80069b8 <__lo0bits+0x2a>
 80069b4:	0c1b      	lsrs	r3, r3, #16
 80069b6:	2010      	movs	r0, #16
 80069b8:	b2d9      	uxtb	r1, r3
 80069ba:	b909      	cbnz	r1, 80069c0 <__lo0bits+0x32>
 80069bc:	3008      	adds	r0, #8
 80069be:	0a1b      	lsrs	r3, r3, #8
 80069c0:	0719      	lsls	r1, r3, #28
 80069c2:	bf04      	itt	eq
 80069c4:	091b      	lsreq	r3, r3, #4
 80069c6:	3004      	addeq	r0, #4
 80069c8:	0799      	lsls	r1, r3, #30
 80069ca:	bf04      	itt	eq
 80069cc:	089b      	lsreq	r3, r3, #2
 80069ce:	3002      	addeq	r0, #2
 80069d0:	07d9      	lsls	r1, r3, #31
 80069d2:	d403      	bmi.n	80069dc <__lo0bits+0x4e>
 80069d4:	085b      	lsrs	r3, r3, #1
 80069d6:	f100 0001 	add.w	r0, r0, #1
 80069da:	d003      	beq.n	80069e4 <__lo0bits+0x56>
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4770      	bx	lr
 80069e0:	2000      	movs	r0, #0
 80069e2:	4770      	bx	lr
 80069e4:	2020      	movs	r0, #32
 80069e6:	4770      	bx	lr

080069e8 <__i2b>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	460c      	mov	r4, r1
 80069ec:	2101      	movs	r1, #1
 80069ee:	f7ff ff07 	bl	8006800 <_Balloc>
 80069f2:	4602      	mov	r2, r0
 80069f4:	b928      	cbnz	r0, 8006a02 <__i2b+0x1a>
 80069f6:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <__i2b+0x24>)
 80069f8:	4805      	ldr	r0, [pc, #20]	@ (8006a10 <__i2b+0x28>)
 80069fa:	f240 1145 	movw	r1, #325	@ 0x145
 80069fe:	f000 fbcf 	bl	80071a0 <__assert_func>
 8006a02:	2301      	movs	r3, #1
 8006a04:	6144      	str	r4, [r0, #20]
 8006a06:	6103      	str	r3, [r0, #16]
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	080076b6 	.word	0x080076b6
 8006a10:	080076c7 	.word	0x080076c7

08006a14 <__multiply>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4614      	mov	r4, r2
 8006a1a:	690a      	ldr	r2, [r1, #16]
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	bfa8      	it	ge
 8006a22:	4623      	movge	r3, r4
 8006a24:	460f      	mov	r7, r1
 8006a26:	bfa4      	itt	ge
 8006a28:	460c      	movge	r4, r1
 8006a2a:	461f      	movge	r7, r3
 8006a2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	6861      	ldr	r1, [r4, #4]
 8006a38:	eb0a 0609 	add.w	r6, sl, r9
 8006a3c:	42b3      	cmp	r3, r6
 8006a3e:	b085      	sub	sp, #20
 8006a40:	bfb8      	it	lt
 8006a42:	3101      	addlt	r1, #1
 8006a44:	f7ff fedc 	bl	8006800 <_Balloc>
 8006a48:	b930      	cbnz	r0, 8006a58 <__multiply+0x44>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b44      	ldr	r3, [pc, #272]	@ (8006b60 <__multiply+0x14c>)
 8006a4e:	4845      	ldr	r0, [pc, #276]	@ (8006b64 <__multiply+0x150>)
 8006a50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a54:	f000 fba4 	bl	80071a0 <__assert_func>
 8006a58:	f100 0514 	add.w	r5, r0, #20
 8006a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a60:	462b      	mov	r3, r5
 8006a62:	2200      	movs	r2, #0
 8006a64:	4543      	cmp	r3, r8
 8006a66:	d321      	bcc.n	8006aac <__multiply+0x98>
 8006a68:	f107 0114 	add.w	r1, r7, #20
 8006a6c:	f104 0214 	add.w	r2, r4, #20
 8006a70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a78:	9302      	str	r3, [sp, #8]
 8006a7a:	1b13      	subs	r3, r2, r4
 8006a7c:	3b15      	subs	r3, #21
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	3304      	adds	r3, #4
 8006a84:	f104 0715 	add.w	r7, r4, #21
 8006a88:	42ba      	cmp	r2, r7
 8006a8a:	bf38      	it	cc
 8006a8c:	2304      	movcc	r3, #4
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	9103      	str	r1, [sp, #12]
 8006a94:	428b      	cmp	r3, r1
 8006a96:	d80c      	bhi.n	8006ab2 <__multiply+0x9e>
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	dd03      	ble.n	8006aa4 <__multiply+0x90>
 8006a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05b      	beq.n	8006b5c <__multiply+0x148>
 8006aa4:	6106      	str	r6, [r0, #16]
 8006aa6:	b005      	add	sp, #20
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	f843 2b04 	str.w	r2, [r3], #4
 8006ab0:	e7d8      	b.n	8006a64 <__multiply+0x50>
 8006ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ab6:	f1ba 0f00 	cmp.w	sl, #0
 8006aba:	d024      	beq.n	8006b06 <__multiply+0xf2>
 8006abc:	f104 0e14 	add.w	lr, r4, #20
 8006ac0:	46a9      	mov	r9, r5
 8006ac2:	f04f 0c00 	mov.w	ip, #0
 8006ac6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006aca:	f8d9 3000 	ldr.w	r3, [r9]
 8006ace:	fa1f fb87 	uxth.w	fp, r7
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ad8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006adc:	f8d9 7000 	ldr.w	r7, [r9]
 8006ae0:	4463      	add	r3, ip
 8006ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ae6:	fb0a c70b 	mla	r7, sl, fp, ip
 8006aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006af4:	4572      	cmp	r2, lr
 8006af6:	f849 3b04 	str.w	r3, [r9], #4
 8006afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006afe:	d8e2      	bhi.n	8006ac6 <__multiply+0xb2>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	f845 c003 	str.w	ip, [r5, r3]
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b0c:	3104      	adds	r1, #4
 8006b0e:	f1b9 0f00 	cmp.w	r9, #0
 8006b12:	d021      	beq.n	8006b58 <__multiply+0x144>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	f104 0c14 	add.w	ip, r4, #20
 8006b1a:	46ae      	mov	lr, r5
 8006b1c:	f04f 0a00 	mov.w	sl, #0
 8006b20:	f8bc b000 	ldrh.w	fp, [ip]
 8006b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b28:	fb09 770b 	mla	r7, r9, fp, r7
 8006b2c:	4457      	add	r7, sl
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b34:	f84e 3b04 	str.w	r3, [lr], #4
 8006b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b40:	f8be 3000 	ldrh.w	r3, [lr]
 8006b44:	fb09 330a 	mla	r3, r9, sl, r3
 8006b48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b4c:	4562      	cmp	r2, ip
 8006b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b52:	d8e5      	bhi.n	8006b20 <__multiply+0x10c>
 8006b54:	9f01      	ldr	r7, [sp, #4]
 8006b56:	51eb      	str	r3, [r5, r7]
 8006b58:	3504      	adds	r5, #4
 8006b5a:	e799      	b.n	8006a90 <__multiply+0x7c>
 8006b5c:	3e01      	subs	r6, #1
 8006b5e:	e79b      	b.n	8006a98 <__multiply+0x84>
 8006b60:	080076b6 	.word	0x080076b6
 8006b64:	080076c7 	.word	0x080076c7

08006b68 <__pow5mult>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	f012 0203 	ands.w	r2, r2, #3
 8006b72:	4607      	mov	r7, r0
 8006b74:	460e      	mov	r6, r1
 8006b76:	d007      	beq.n	8006b88 <__pow5mult+0x20>
 8006b78:	4c25      	ldr	r4, [pc, #148]	@ (8006c10 <__pow5mult+0xa8>)
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b82:	f7ff fe9f 	bl	80068c4 <__multadd>
 8006b86:	4606      	mov	r6, r0
 8006b88:	10ad      	asrs	r5, r5, #2
 8006b8a:	d03d      	beq.n	8006c08 <__pow5mult+0xa0>
 8006b8c:	69fc      	ldr	r4, [r7, #28]
 8006b8e:	b97c      	cbnz	r4, 8006bb0 <__pow5mult+0x48>
 8006b90:	2010      	movs	r0, #16
 8006b92:	f7ff fd7f 	bl	8006694 <malloc>
 8006b96:	4602      	mov	r2, r0
 8006b98:	61f8      	str	r0, [r7, #28]
 8006b9a:	b928      	cbnz	r0, 8006ba8 <__pow5mult+0x40>
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c14 <__pow5mult+0xac>)
 8006b9e:	481e      	ldr	r0, [pc, #120]	@ (8006c18 <__pow5mult+0xb0>)
 8006ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ba4:	f000 fafc 	bl	80071a0 <__assert_func>
 8006ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bac:	6004      	str	r4, [r0, #0]
 8006bae:	60c4      	str	r4, [r0, #12]
 8006bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bb8:	b94c      	cbnz	r4, 8006bce <__pow5mult+0x66>
 8006bba:	f240 2171 	movw	r1, #625	@ 0x271
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7ff ff12 	bl	80069e8 <__i2b>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bca:	4604      	mov	r4, r0
 8006bcc:	6003      	str	r3, [r0, #0]
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	07eb      	lsls	r3, r5, #31
 8006bd4:	d50a      	bpl.n	8006bec <__pow5mult+0x84>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f7ff ff1a 	bl	8006a14 <__multiply>
 8006be0:	4631      	mov	r1, r6
 8006be2:	4680      	mov	r8, r0
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff fe4b 	bl	8006880 <_Bfree>
 8006bea:	4646      	mov	r6, r8
 8006bec:	106d      	asrs	r5, r5, #1
 8006bee:	d00b      	beq.n	8006c08 <__pow5mult+0xa0>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	b938      	cbnz	r0, 8006c04 <__pow5mult+0x9c>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ff0b 	bl	8006a14 <__multiply>
 8006bfe:	6020      	str	r0, [r4, #0]
 8006c00:	f8c0 9000 	str.w	r9, [r0]
 8006c04:	4604      	mov	r4, r0
 8006c06:	e7e4      	b.n	8006bd2 <__pow5mult+0x6a>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c0e:	bf00      	nop
 8006c10:	08007720 	.word	0x08007720
 8006c14:	08007647 	.word	0x08007647
 8006c18:	080076c7 	.word	0x080076c7

08006c1c <__lshift>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	6849      	ldr	r1, [r1, #4]
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c2a:	68a3      	ldr	r3, [r4, #8]
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	4691      	mov	r9, r2
 8006c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c34:	f108 0601 	add.w	r6, r8, #1
 8006c38:	42b3      	cmp	r3, r6
 8006c3a:	db0b      	blt.n	8006c54 <__lshift+0x38>
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f7ff fddf 	bl	8006800 <_Balloc>
 8006c42:	4605      	mov	r5, r0
 8006c44:	b948      	cbnz	r0, 8006c5a <__lshift+0x3e>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b28      	ldr	r3, [pc, #160]	@ (8006cec <__lshift+0xd0>)
 8006c4a:	4829      	ldr	r0, [pc, #164]	@ (8006cf0 <__lshift+0xd4>)
 8006c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c50:	f000 faa6 	bl	80071a0 <__assert_func>
 8006c54:	3101      	adds	r1, #1
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	e7ee      	b.n	8006c38 <__lshift+0x1c>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f100 0114 	add.w	r1, r0, #20
 8006c60:	f100 0210 	add.w	r2, r0, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	4553      	cmp	r3, sl
 8006c68:	db33      	blt.n	8006cd2 <__lshift+0xb6>
 8006c6a:	6920      	ldr	r0, [r4, #16]
 8006c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c70:	f104 0314 	add.w	r3, r4, #20
 8006c74:	f019 091f 	ands.w	r9, r9, #31
 8006c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c80:	d02b      	beq.n	8006cda <__lshift+0xbe>
 8006c82:	f1c9 0e20 	rsb	lr, r9, #32
 8006c86:	468a      	mov	sl, r1
 8006c88:	2200      	movs	r2, #0
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c90:	4310      	orrs	r0, r2
 8006c92:	f84a 0b04 	str.w	r0, [sl], #4
 8006c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9a:	459c      	cmp	ip, r3
 8006c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ca0:	d8f3      	bhi.n	8006c8a <__lshift+0x6e>
 8006ca2:	ebac 0304 	sub.w	r3, ip, r4
 8006ca6:	3b15      	subs	r3, #21
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	3304      	adds	r3, #4
 8006cae:	f104 0015 	add.w	r0, r4, #21
 8006cb2:	4584      	cmp	ip, r0
 8006cb4:	bf38      	it	cc
 8006cb6:	2304      	movcc	r3, #4
 8006cb8:	50ca      	str	r2, [r1, r3]
 8006cba:	b10a      	cbz	r2, 8006cc0 <__lshift+0xa4>
 8006cbc:	f108 0602 	add.w	r6, r8, #2
 8006cc0:	3e01      	subs	r6, #1
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	612e      	str	r6, [r5, #16]
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f7ff fdda 	bl	8006880 <_Bfree>
 8006ccc:	4628      	mov	r0, r5
 8006cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	e7c5      	b.n	8006c66 <__lshift+0x4a>
 8006cda:	3904      	subs	r1, #4
 8006cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ce4:	459c      	cmp	ip, r3
 8006ce6:	d8f9      	bhi.n	8006cdc <__lshift+0xc0>
 8006ce8:	e7ea      	b.n	8006cc0 <__lshift+0xa4>
 8006cea:	bf00      	nop
 8006cec:	080076b6 	.word	0x080076b6
 8006cf0:	080076c7 	.word	0x080076c7

08006cf4 <__mcmp>:
 8006cf4:	690a      	ldr	r2, [r1, #16]
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	6900      	ldr	r0, [r0, #16]
 8006cfa:	1a80      	subs	r0, r0, r2
 8006cfc:	b530      	push	{r4, r5, lr}
 8006cfe:	d10e      	bne.n	8006d1e <__mcmp+0x2a>
 8006d00:	3314      	adds	r3, #20
 8006d02:	3114      	adds	r1, #20
 8006d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d14:	4295      	cmp	r5, r2
 8006d16:	d003      	beq.n	8006d20 <__mcmp+0x2c>
 8006d18:	d205      	bcs.n	8006d26 <__mcmp+0x32>
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1e:	bd30      	pop	{r4, r5, pc}
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d3f3      	bcc.n	8006d0c <__mcmp+0x18>
 8006d24:	e7fb      	b.n	8006d1e <__mcmp+0x2a>
 8006d26:	2001      	movs	r0, #1
 8006d28:	e7f9      	b.n	8006d1e <__mcmp+0x2a>
	...

08006d2c <__mdiff>:
 8006d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4689      	mov	r9, r1
 8006d32:	4606      	mov	r6, r0
 8006d34:	4611      	mov	r1, r2
 8006d36:	4648      	mov	r0, r9
 8006d38:	4614      	mov	r4, r2
 8006d3a:	f7ff ffdb 	bl	8006cf4 <__mcmp>
 8006d3e:	1e05      	subs	r5, r0, #0
 8006d40:	d112      	bne.n	8006d68 <__mdiff+0x3c>
 8006d42:	4629      	mov	r1, r5
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff fd5b 	bl	8006800 <_Balloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	b928      	cbnz	r0, 8006d5a <__mdiff+0x2e>
 8006d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e4c <__mdiff+0x120>)
 8006d50:	f240 2137 	movw	r1, #567	@ 0x237
 8006d54:	483e      	ldr	r0, [pc, #248]	@ (8006e50 <__mdiff+0x124>)
 8006d56:	f000 fa23 	bl	80071a0 <__assert_func>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d60:	4610      	mov	r0, r2
 8006d62:	b003      	add	sp, #12
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d68:	bfbc      	itt	lt
 8006d6a:	464b      	movlt	r3, r9
 8006d6c:	46a1      	movlt	r9, r4
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d74:	bfba      	itte	lt
 8006d76:	461c      	movlt	r4, r3
 8006d78:	2501      	movlt	r5, #1
 8006d7a:	2500      	movge	r5, #0
 8006d7c:	f7ff fd40 	bl	8006800 <_Balloc>
 8006d80:	4602      	mov	r2, r0
 8006d82:	b918      	cbnz	r0, 8006d8c <__mdiff+0x60>
 8006d84:	4b31      	ldr	r3, [pc, #196]	@ (8006e4c <__mdiff+0x120>)
 8006d86:	f240 2145 	movw	r1, #581	@ 0x245
 8006d8a:	e7e3      	b.n	8006d54 <__mdiff+0x28>
 8006d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d90:	6926      	ldr	r6, [r4, #16]
 8006d92:	60c5      	str	r5, [r0, #12]
 8006d94:	f109 0310 	add.w	r3, r9, #16
 8006d98:	f109 0514 	add.w	r5, r9, #20
 8006d9c:	f104 0e14 	add.w	lr, r4, #20
 8006da0:	f100 0b14 	add.w	fp, r0, #20
 8006da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	46d9      	mov	r9, fp
 8006db0:	f04f 0c00 	mov.w	ip, #0
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	fa1f f38a 	uxth.w	r3, sl
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	b283      	uxth	r3, r0
 8006dc8:	1acb      	subs	r3, r1, r3
 8006dca:	0c00      	lsrs	r0, r0, #16
 8006dcc:	4463      	add	r3, ip
 8006dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ddc:	4576      	cmp	r6, lr
 8006dde:	f849 3b04 	str.w	r3, [r9], #4
 8006de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006de6:	d8e5      	bhi.n	8006db4 <__mdiff+0x88>
 8006de8:	1b33      	subs	r3, r6, r4
 8006dea:	3b15      	subs	r3, #21
 8006dec:	f023 0303 	bic.w	r3, r3, #3
 8006df0:	3415      	adds	r4, #21
 8006df2:	3304      	adds	r3, #4
 8006df4:	42a6      	cmp	r6, r4
 8006df6:	bf38      	it	cc
 8006df8:	2304      	movcc	r3, #4
 8006dfa:	441d      	add	r5, r3
 8006dfc:	445b      	add	r3, fp
 8006dfe:	461e      	mov	r6, r3
 8006e00:	462c      	mov	r4, r5
 8006e02:	4544      	cmp	r4, r8
 8006e04:	d30e      	bcc.n	8006e24 <__mdiff+0xf8>
 8006e06:	f108 0103 	add.w	r1, r8, #3
 8006e0a:	1b49      	subs	r1, r1, r5
 8006e0c:	f021 0103 	bic.w	r1, r1, #3
 8006e10:	3d03      	subs	r5, #3
 8006e12:	45a8      	cmp	r8, r5
 8006e14:	bf38      	it	cc
 8006e16:	2100      	movcc	r1, #0
 8006e18:	440b      	add	r3, r1
 8006e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e1e:	b191      	cbz	r1, 8006e46 <__mdiff+0x11a>
 8006e20:	6117      	str	r7, [r2, #16]
 8006e22:	e79d      	b.n	8006d60 <__mdiff+0x34>
 8006e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e28:	46e6      	mov	lr, ip
 8006e2a:	0c08      	lsrs	r0, r1, #16
 8006e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8006e30:	4471      	add	r1, lr
 8006e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e36:	b289      	uxth	r1, r1
 8006e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e3c:	f846 1b04 	str.w	r1, [r6], #4
 8006e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e44:	e7dd      	b.n	8006e02 <__mdiff+0xd6>
 8006e46:	3f01      	subs	r7, #1
 8006e48:	e7e7      	b.n	8006e1a <__mdiff+0xee>
 8006e4a:	bf00      	nop
 8006e4c:	080076b6 	.word	0x080076b6
 8006e50:	080076c7 	.word	0x080076c7

08006e54 <__d2b>:
 8006e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	460f      	mov	r7, r1
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	ec59 8b10 	vmov	r8, r9, d0
 8006e60:	4616      	mov	r6, r2
 8006e62:	f7ff fccd 	bl	8006800 <_Balloc>
 8006e66:	4604      	mov	r4, r0
 8006e68:	b930      	cbnz	r0, 8006e78 <__d2b+0x24>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b23      	ldr	r3, [pc, #140]	@ (8006efc <__d2b+0xa8>)
 8006e6e:	4824      	ldr	r0, [pc, #144]	@ (8006f00 <__d2b+0xac>)
 8006e70:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e74:	f000 f994 	bl	80071a0 <__assert_func>
 8006e78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e80:	b10d      	cbz	r5, 8006e86 <__d2b+0x32>
 8006e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	f1b8 0300 	subs.w	r3, r8, #0
 8006e8c:	d023      	beq.n	8006ed6 <__d2b+0x82>
 8006e8e:	4668      	mov	r0, sp
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	f7ff fd7c 	bl	800698e <__lo0bits>
 8006e96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e9a:	b1d0      	cbz	r0, 8006ed2 <__d2b+0x7e>
 8006e9c:	f1c0 0320 	rsb	r3, r0, #32
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	40c2      	lsrs	r2, r0
 8006ea8:	6163      	str	r3, [r4, #20]
 8006eaa:	9201      	str	r2, [sp, #4]
 8006eac:	9b01      	ldr	r3, [sp, #4]
 8006eae:	61a3      	str	r3, [r4, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2201      	moveq	r2, #1
 8006eb6:	2202      	movne	r2, #2
 8006eb8:	6122      	str	r2, [r4, #16]
 8006eba:	b1a5      	cbz	r5, 8006ee6 <__d2b+0x92>
 8006ebc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ec0:	4405      	add	r5, r0
 8006ec2:	603d      	str	r5, [r7, #0]
 8006ec4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ec8:	6030      	str	r0, [r6, #0]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	b003      	add	sp, #12
 8006ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ed2:	6161      	str	r1, [r4, #20]
 8006ed4:	e7ea      	b.n	8006eac <__d2b+0x58>
 8006ed6:	a801      	add	r0, sp, #4
 8006ed8:	f7ff fd59 	bl	800698e <__lo0bits>
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	6163      	str	r3, [r4, #20]
 8006ee0:	3020      	adds	r0, #32
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	e7e8      	b.n	8006eb8 <__d2b+0x64>
 8006ee6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006eea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006eee:	6038      	str	r0, [r7, #0]
 8006ef0:	6918      	ldr	r0, [r3, #16]
 8006ef2:	f7ff fd2d 	bl	8006950 <__hi0bits>
 8006ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006efa:	e7e5      	b.n	8006ec8 <__d2b+0x74>
 8006efc:	080076b6 	.word	0x080076b6
 8006f00:	080076c7 	.word	0x080076c7

08006f04 <__sflush_r>:
 8006f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	0716      	lsls	r6, r2, #28
 8006f0e:	4605      	mov	r5, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	d454      	bmi.n	8006fbe <__sflush_r+0xba>
 8006f14:	684b      	ldr	r3, [r1, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	dc02      	bgt.n	8006f20 <__sflush_r+0x1c>
 8006f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd48      	ble.n	8006fb2 <__sflush_r+0xae>
 8006f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	d045      	beq.n	8006fb2 <__sflush_r+0xae>
 8006f26:	2300      	movs	r3, #0
 8006f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f2c:	682f      	ldr	r7, [r5, #0]
 8006f2e:	6a21      	ldr	r1, [r4, #32]
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	d030      	beq.n	8006f96 <__sflush_r+0x92>
 8006f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	0759      	lsls	r1, r3, #29
 8006f3a:	d505      	bpl.n	8006f48 <__sflush_r+0x44>
 8006f3c:	6863      	ldr	r3, [r4, #4]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f42:	b10b      	cbz	r3, 8006f48 <__sflush_r+0x44>
 8006f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f4c:	6a21      	ldr	r1, [r4, #32]
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b0      	blx	r6
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	d106      	bne.n	8006f66 <__sflush_r+0x62>
 8006f58:	6829      	ldr	r1, [r5, #0]
 8006f5a:	291d      	cmp	r1, #29
 8006f5c:	d82b      	bhi.n	8006fb6 <__sflush_r+0xb2>
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007008 <__sflush_r+0x104>)
 8006f60:	410a      	asrs	r2, r1
 8006f62:	07d6      	lsls	r6, r2, #31
 8006f64:	d427      	bmi.n	8006fb6 <__sflush_r+0xb2>
 8006f66:	2200      	movs	r2, #0
 8006f68:	6062      	str	r2, [r4, #4]
 8006f6a:	04d9      	lsls	r1, r3, #19
 8006f6c:	6922      	ldr	r2, [r4, #16]
 8006f6e:	6022      	str	r2, [r4, #0]
 8006f70:	d504      	bpl.n	8006f7c <__sflush_r+0x78>
 8006f72:	1c42      	adds	r2, r0, #1
 8006f74:	d101      	bne.n	8006f7a <__sflush_r+0x76>
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	b903      	cbnz	r3, 8006f7c <__sflush_r+0x78>
 8006f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f7e:	602f      	str	r7, [r5, #0]
 8006f80:	b1b9      	cbz	r1, 8006fb2 <__sflush_r+0xae>
 8006f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d002      	beq.n	8006f90 <__sflush_r+0x8c>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7ff fb38 	bl	8006600 <_free_r>
 8006f90:	2300      	movs	r3, #0
 8006f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f94:	e00d      	b.n	8006fb2 <__sflush_r+0xae>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b0      	blx	r6
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	1c50      	adds	r0, r2, #1
 8006fa0:	d1c9      	bne.n	8006f36 <__sflush_r+0x32>
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0c6      	beq.n	8006f36 <__sflush_r+0x32>
 8006fa8:	2b1d      	cmp	r3, #29
 8006faa:	d001      	beq.n	8006fb0 <__sflush_r+0xac>
 8006fac:	2b16      	cmp	r3, #22
 8006fae:	d11e      	bne.n	8006fee <__sflush_r+0xea>
 8006fb0:	602f      	str	r7, [r5, #0]
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e022      	b.n	8006ffc <__sflush_r+0xf8>
 8006fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fba:	b21b      	sxth	r3, r3
 8006fbc:	e01b      	b.n	8006ff6 <__sflush_r+0xf2>
 8006fbe:	690f      	ldr	r7, [r1, #16]
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	d0f6      	beq.n	8006fb2 <__sflush_r+0xae>
 8006fc4:	0793      	lsls	r3, r2, #30
 8006fc6:	680e      	ldr	r6, [r1, #0]
 8006fc8:	bf08      	it	eq
 8006fca:	694b      	ldreq	r3, [r1, #20]
 8006fcc:	600f      	str	r7, [r1, #0]
 8006fce:	bf18      	it	ne
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	eba6 0807 	sub.w	r8, r6, r7
 8006fd6:	608b      	str	r3, [r1, #8]
 8006fd8:	f1b8 0f00 	cmp.w	r8, #0
 8006fdc:	dde9      	ble.n	8006fb2 <__sflush_r+0xae>
 8006fde:	6a21      	ldr	r1, [r4, #32]
 8006fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fe2:	4643      	mov	r3, r8
 8006fe4:	463a      	mov	r2, r7
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b0      	blx	r6
 8006fea:	2800      	cmp	r0, #0
 8006fec:	dc08      	bgt.n	8007000 <__sflush_r+0xfc>
 8006fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007000:	4407      	add	r7, r0
 8007002:	eba8 0800 	sub.w	r8, r8, r0
 8007006:	e7e7      	b.n	8006fd8 <__sflush_r+0xd4>
 8007008:	dfbffffe 	.word	0xdfbffffe

0800700c <_fflush_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	4605      	mov	r5, r0
 8007012:	460c      	mov	r4, r1
 8007014:	b913      	cbnz	r3, 800701c <_fflush_r+0x10>
 8007016:	2500      	movs	r5, #0
 8007018:	4628      	mov	r0, r5
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	b118      	cbz	r0, 8007026 <_fflush_r+0x1a>
 800701e:	6a03      	ldr	r3, [r0, #32]
 8007020:	b90b      	cbnz	r3, 8007026 <_fflush_r+0x1a>
 8007022:	f7fe fab3 	bl	800558c <__sinit>
 8007026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f3      	beq.n	8007016 <_fflush_r+0xa>
 800702e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007030:	07d0      	lsls	r0, r2, #31
 8007032:	d404      	bmi.n	800703e <_fflush_r+0x32>
 8007034:	0599      	lsls	r1, r3, #22
 8007036:	d402      	bmi.n	800703e <_fflush_r+0x32>
 8007038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800703a:	f7fe fc90 	bl	800595e <__retarget_lock_acquire_recursive>
 800703e:	4628      	mov	r0, r5
 8007040:	4621      	mov	r1, r4
 8007042:	f7ff ff5f 	bl	8006f04 <__sflush_r>
 8007046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007048:	07da      	lsls	r2, r3, #31
 800704a:	4605      	mov	r5, r0
 800704c:	d4e4      	bmi.n	8007018 <_fflush_r+0xc>
 800704e:	89a3      	ldrh	r3, [r4, #12]
 8007050:	059b      	lsls	r3, r3, #22
 8007052:	d4e1      	bmi.n	8007018 <_fflush_r+0xc>
 8007054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007056:	f7fe fc83 	bl	8005960 <__retarget_lock_release_recursive>
 800705a:	e7dd      	b.n	8007018 <_fflush_r+0xc>

0800705c <__swhatbuf_r>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	2900      	cmp	r1, #0
 8007066:	b096      	sub	sp, #88	@ 0x58
 8007068:	4615      	mov	r5, r2
 800706a:	461e      	mov	r6, r3
 800706c:	da0d      	bge.n	800708a <__swhatbuf_r+0x2e>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	bf14      	ite	ne
 800707a:	2340      	movne	r3, #64	@ 0x40
 800707c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007080:	2000      	movs	r0, #0
 8007082:	6031      	str	r1, [r6, #0]
 8007084:	602b      	str	r3, [r5, #0]
 8007086:	b016      	add	sp, #88	@ 0x58
 8007088:	bd70      	pop	{r4, r5, r6, pc}
 800708a:	466a      	mov	r2, sp
 800708c:	f000 f848 	bl	8007120 <_fstat_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	dbec      	blt.n	800706e <__swhatbuf_r+0x12>
 8007094:	9901      	ldr	r1, [sp, #4]
 8007096:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800709a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800709e:	4259      	negs	r1, r3
 80070a0:	4159      	adcs	r1, r3
 80070a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070a6:	e7eb      	b.n	8007080 <__swhatbuf_r+0x24>

080070a8 <__smakebuf_r>:
 80070a8:	898b      	ldrh	r3, [r1, #12]
 80070aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ac:	079d      	lsls	r5, r3, #30
 80070ae:	4606      	mov	r6, r0
 80070b0:	460c      	mov	r4, r1
 80070b2:	d507      	bpl.n	80070c4 <__smakebuf_r+0x1c>
 80070b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	6123      	str	r3, [r4, #16]
 80070bc:	2301      	movs	r3, #1
 80070be:	6163      	str	r3, [r4, #20]
 80070c0:	b003      	add	sp, #12
 80070c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c4:	ab01      	add	r3, sp, #4
 80070c6:	466a      	mov	r2, sp
 80070c8:	f7ff ffc8 	bl	800705c <__swhatbuf_r>
 80070cc:	9f00      	ldr	r7, [sp, #0]
 80070ce:	4605      	mov	r5, r0
 80070d0:	4639      	mov	r1, r7
 80070d2:	4630      	mov	r0, r6
 80070d4:	f7ff fb08 	bl	80066e8 <_malloc_r>
 80070d8:	b948      	cbnz	r0, 80070ee <__smakebuf_r+0x46>
 80070da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070de:	059a      	lsls	r2, r3, #22
 80070e0:	d4ee      	bmi.n	80070c0 <__smakebuf_r+0x18>
 80070e2:	f023 0303 	bic.w	r3, r3, #3
 80070e6:	f043 0302 	orr.w	r3, r3, #2
 80070ea:	81a3      	strh	r3, [r4, #12]
 80070ec:	e7e2      	b.n	80070b4 <__smakebuf_r+0xc>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	6020      	str	r0, [r4, #0]
 80070f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070fe:	b15b      	cbz	r3, 8007118 <__smakebuf_r+0x70>
 8007100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007104:	4630      	mov	r0, r6
 8007106:	f000 f81d 	bl	8007144 <_isatty_r>
 800710a:	b128      	cbz	r0, 8007118 <__smakebuf_r+0x70>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	431d      	orrs	r5, r3
 800711c:	81a5      	strh	r5, [r4, #12]
 800711e:	e7cf      	b.n	80070c0 <__smakebuf_r+0x18>

08007120 <_fstat_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d07      	ldr	r5, [pc, #28]	@ (8007140 <_fstat_r+0x20>)
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	4611      	mov	r1, r2
 800712c:	602b      	str	r3, [r5, #0]
 800712e:	f7fd fbca 	bl	80048c6 <_fstat>
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	d102      	bne.n	800713c <_fstat_r+0x1c>
 8007136:	682b      	ldr	r3, [r5, #0]
 8007138:	b103      	cbz	r3, 800713c <_fstat_r+0x1c>
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	bd38      	pop	{r3, r4, r5, pc}
 800713e:	bf00      	nop
 8007140:	20000604 	.word	0x20000604

08007144 <_isatty_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4d06      	ldr	r5, [pc, #24]	@ (8007160 <_isatty_r+0x1c>)
 8007148:	2300      	movs	r3, #0
 800714a:	4604      	mov	r4, r0
 800714c:	4608      	mov	r0, r1
 800714e:	602b      	str	r3, [r5, #0]
 8007150:	f7fd fd1c 	bl	8004b8c <_isatty>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_isatty_r+0x1a>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_isatty_r+0x1a>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20000604 	.word	0x20000604

08007164 <_sbrk_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d06      	ldr	r5, [pc, #24]	@ (8007180 <_sbrk_r+0x1c>)
 8007168:	2300      	movs	r3, #0
 800716a:	4604      	mov	r4, r0
 800716c:	4608      	mov	r0, r1
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	f7fa fb1c 	bl	80017ac <_sbrk>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_sbrk_r+0x1a>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_sbrk_r+0x1a>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	20000604 	.word	0x20000604

08007184 <memcpy>:
 8007184:	440a      	add	r2, r1
 8007186:	4291      	cmp	r1, r2
 8007188:	f100 33ff 	add.w	r3, r0, #4294967295
 800718c:	d100      	bne.n	8007190 <memcpy+0xc>
 800718e:	4770      	bx	lr
 8007190:	b510      	push	{r4, lr}
 8007192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800719a:	4291      	cmp	r1, r2
 800719c:	d1f9      	bne.n	8007192 <memcpy+0xe>
 800719e:	bd10      	pop	{r4, pc}

080071a0 <__assert_func>:
 80071a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071a2:	4614      	mov	r4, r2
 80071a4:	461a      	mov	r2, r3
 80071a6:	4b09      	ldr	r3, [pc, #36]	@ (80071cc <__assert_func+0x2c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4605      	mov	r5, r0
 80071ac:	68d8      	ldr	r0, [r3, #12]
 80071ae:	b954      	cbnz	r4, 80071c6 <__assert_func+0x26>
 80071b0:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <__assert_func+0x30>)
 80071b2:	461c      	mov	r4, r3
 80071b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071b8:	9100      	str	r1, [sp, #0]
 80071ba:	462b      	mov	r3, r5
 80071bc:	4905      	ldr	r1, [pc, #20]	@ (80071d4 <__assert_func+0x34>)
 80071be:	f000 f841 	bl	8007244 <fiprintf>
 80071c2:	f000 f851 	bl	8007268 <abort>
 80071c6:	4b04      	ldr	r3, [pc, #16]	@ (80071d8 <__assert_func+0x38>)
 80071c8:	e7f4      	b.n	80071b4 <__assert_func+0x14>
 80071ca:	bf00      	nop
 80071cc:	20000020 	.word	0x20000020
 80071d0:	08007865 	.word	0x08007865
 80071d4:	08007837 	.word	0x08007837
 80071d8:	0800782a 	.word	0x0800782a

080071dc <_calloc_r>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	fba1 5402 	umull	r5, r4, r1, r2
 80071e2:	b93c      	cbnz	r4, 80071f4 <_calloc_r+0x18>
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7ff fa7f 	bl	80066e8 <_malloc_r>
 80071ea:	4606      	mov	r6, r0
 80071ec:	b928      	cbnz	r0, 80071fa <_calloc_r+0x1e>
 80071ee:	2600      	movs	r6, #0
 80071f0:	4630      	mov	r0, r6
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	220c      	movs	r2, #12
 80071f6:	6002      	str	r2, [r0, #0]
 80071f8:	e7f9      	b.n	80071ee <_calloc_r+0x12>
 80071fa:	462a      	mov	r2, r5
 80071fc:	4621      	mov	r1, r4
 80071fe:	f7fe fb31 	bl	8005864 <memset>
 8007202:	e7f5      	b.n	80071f0 <_calloc_r+0x14>

08007204 <__ascii_mbtowc>:
 8007204:	b082      	sub	sp, #8
 8007206:	b901      	cbnz	r1, 800720a <__ascii_mbtowc+0x6>
 8007208:	a901      	add	r1, sp, #4
 800720a:	b142      	cbz	r2, 800721e <__ascii_mbtowc+0x1a>
 800720c:	b14b      	cbz	r3, 8007222 <__ascii_mbtowc+0x1e>
 800720e:	7813      	ldrb	r3, [r2, #0]
 8007210:	600b      	str	r3, [r1, #0]
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	1e10      	subs	r0, r2, #0
 8007216:	bf18      	it	ne
 8007218:	2001      	movne	r0, #1
 800721a:	b002      	add	sp, #8
 800721c:	4770      	bx	lr
 800721e:	4610      	mov	r0, r2
 8007220:	e7fb      	b.n	800721a <__ascii_mbtowc+0x16>
 8007222:	f06f 0001 	mvn.w	r0, #1
 8007226:	e7f8      	b.n	800721a <__ascii_mbtowc+0x16>

08007228 <__ascii_wctomb>:
 8007228:	4603      	mov	r3, r0
 800722a:	4608      	mov	r0, r1
 800722c:	b141      	cbz	r1, 8007240 <__ascii_wctomb+0x18>
 800722e:	2aff      	cmp	r2, #255	@ 0xff
 8007230:	d904      	bls.n	800723c <__ascii_wctomb+0x14>
 8007232:	228a      	movs	r2, #138	@ 0x8a
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	4770      	bx	lr
 800723c:	700a      	strb	r2, [r1, #0]
 800723e:	2001      	movs	r0, #1
 8007240:	4770      	bx	lr
	...

08007244 <fiprintf>:
 8007244:	b40e      	push	{r1, r2, r3}
 8007246:	b503      	push	{r0, r1, lr}
 8007248:	4601      	mov	r1, r0
 800724a:	ab03      	add	r3, sp, #12
 800724c:	4805      	ldr	r0, [pc, #20]	@ (8007264 <fiprintf+0x20>)
 800724e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	f000 f837 	bl	80072c8 <_vfiprintf_r>
 800725a:	b002      	add	sp, #8
 800725c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007260:	b003      	add	sp, #12
 8007262:	4770      	bx	lr
 8007264:	20000020 	.word	0x20000020

08007268 <abort>:
 8007268:	b508      	push	{r3, lr}
 800726a:	2006      	movs	r0, #6
 800726c:	f000 f96c 	bl	8007548 <raise>
 8007270:	2001      	movs	r0, #1
 8007272:	f000 f98d 	bl	8007590 <_exit>

08007276 <__sfputc_r>:
 8007276:	6893      	ldr	r3, [r2, #8]
 8007278:	3b01      	subs	r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	b410      	push	{r4}
 800727e:	6093      	str	r3, [r2, #8]
 8007280:	da08      	bge.n	8007294 <__sfputc_r+0x1e>
 8007282:	6994      	ldr	r4, [r2, #24]
 8007284:	42a3      	cmp	r3, r4
 8007286:	db01      	blt.n	800728c <__sfputc_r+0x16>
 8007288:	290a      	cmp	r1, #10
 800728a:	d103      	bne.n	8007294 <__sfputc_r+0x1e>
 800728c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007290:	f7fe ba53 	b.w	800573a <__swbuf_r>
 8007294:	6813      	ldr	r3, [r2, #0]
 8007296:	1c58      	adds	r0, r3, #1
 8007298:	6010      	str	r0, [r2, #0]
 800729a:	7019      	strb	r1, [r3, #0]
 800729c:	4608      	mov	r0, r1
 800729e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <__sfputs_r>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	4606      	mov	r6, r0
 80072a8:	460f      	mov	r7, r1
 80072aa:	4614      	mov	r4, r2
 80072ac:	18d5      	adds	r5, r2, r3
 80072ae:	42ac      	cmp	r4, r5
 80072b0:	d101      	bne.n	80072b6 <__sfputs_r+0x12>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e007      	b.n	80072c6 <__sfputs_r+0x22>
 80072b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ba:	463a      	mov	r2, r7
 80072bc:	4630      	mov	r0, r6
 80072be:	f7ff ffda 	bl	8007276 <__sfputc_r>
 80072c2:	1c43      	adds	r3, r0, #1
 80072c4:	d1f3      	bne.n	80072ae <__sfputs_r+0xa>
 80072c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072c8 <_vfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	460d      	mov	r5, r1
 80072ce:	b09d      	sub	sp, #116	@ 0x74
 80072d0:	4614      	mov	r4, r2
 80072d2:	4698      	mov	r8, r3
 80072d4:	4606      	mov	r6, r0
 80072d6:	b118      	cbz	r0, 80072e0 <_vfiprintf_r+0x18>
 80072d8:	6a03      	ldr	r3, [r0, #32]
 80072da:	b90b      	cbnz	r3, 80072e0 <_vfiprintf_r+0x18>
 80072dc:	f7fe f956 	bl	800558c <__sinit>
 80072e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072e2:	07d9      	lsls	r1, r3, #31
 80072e4:	d405      	bmi.n	80072f2 <_vfiprintf_r+0x2a>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	059a      	lsls	r2, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_vfiprintf_r+0x2a>
 80072ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ee:	f7fe fb36 	bl	800595e <__retarget_lock_acquire_recursive>
 80072f2:	89ab      	ldrh	r3, [r5, #12]
 80072f4:	071b      	lsls	r3, r3, #28
 80072f6:	d501      	bpl.n	80072fc <_vfiprintf_r+0x34>
 80072f8:	692b      	ldr	r3, [r5, #16]
 80072fa:	b99b      	cbnz	r3, 8007324 <_vfiprintf_r+0x5c>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7fe fa5a 	bl	80057b8 <__swsetup_r>
 8007304:	b170      	cbz	r0, 8007324 <_vfiprintf_r+0x5c>
 8007306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007308:	07dc      	lsls	r4, r3, #31
 800730a:	d504      	bpl.n	8007316 <_vfiprintf_r+0x4e>
 800730c:	f04f 30ff 	mov.w	r0, #4294967295
 8007310:	b01d      	add	sp, #116	@ 0x74
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	89ab      	ldrh	r3, [r5, #12]
 8007318:	0598      	lsls	r0, r3, #22
 800731a:	d4f7      	bmi.n	800730c <_vfiprintf_r+0x44>
 800731c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800731e:	f7fe fb1f 	bl	8005960 <__retarget_lock_release_recursive>
 8007322:	e7f3      	b.n	800730c <_vfiprintf_r+0x44>
 8007324:	2300      	movs	r3, #0
 8007326:	9309      	str	r3, [sp, #36]	@ 0x24
 8007328:	2320      	movs	r3, #32
 800732a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800732e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007332:	2330      	movs	r3, #48	@ 0x30
 8007334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074e4 <_vfiprintf_r+0x21c>
 8007338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800733c:	f04f 0901 	mov.w	r9, #1
 8007340:	4623      	mov	r3, r4
 8007342:	469a      	mov	sl, r3
 8007344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007348:	b10a      	cbz	r2, 800734e <_vfiprintf_r+0x86>
 800734a:	2a25      	cmp	r2, #37	@ 0x25
 800734c:	d1f9      	bne.n	8007342 <_vfiprintf_r+0x7a>
 800734e:	ebba 0b04 	subs.w	fp, sl, r4
 8007352:	d00b      	beq.n	800736c <_vfiprintf_r+0xa4>
 8007354:	465b      	mov	r3, fp
 8007356:	4622      	mov	r2, r4
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f7ff ffa2 	bl	80072a4 <__sfputs_r>
 8007360:	3001      	adds	r0, #1
 8007362:	f000 80a7 	beq.w	80074b4 <_vfiprintf_r+0x1ec>
 8007366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007368:	445a      	add	r2, fp
 800736a:	9209      	str	r2, [sp, #36]	@ 0x24
 800736c:	f89a 3000 	ldrb.w	r3, [sl]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 809f 	beq.w	80074b4 <_vfiprintf_r+0x1ec>
 8007376:	2300      	movs	r3, #0
 8007378:	f04f 32ff 	mov.w	r2, #4294967295
 800737c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007380:	f10a 0a01 	add.w	sl, sl, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	9307      	str	r3, [sp, #28]
 8007388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800738c:	931a      	str	r3, [sp, #104]	@ 0x68
 800738e:	4654      	mov	r4, sl
 8007390:	2205      	movs	r2, #5
 8007392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007396:	4853      	ldr	r0, [pc, #332]	@ (80074e4 <_vfiprintf_r+0x21c>)
 8007398:	f7f8 ff22 	bl	80001e0 <memchr>
 800739c:	9a04      	ldr	r2, [sp, #16]
 800739e:	b9d8      	cbnz	r0, 80073d8 <_vfiprintf_r+0x110>
 80073a0:	06d1      	lsls	r1, r2, #27
 80073a2:	bf44      	itt	mi
 80073a4:	2320      	movmi	r3, #32
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073aa:	0713      	lsls	r3, r2, #28
 80073ac:	bf44      	itt	mi
 80073ae:	232b      	movmi	r3, #43	@ 0x2b
 80073b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ba:	d015      	beq.n	80073e8 <_vfiprintf_r+0x120>
 80073bc:	9a07      	ldr	r2, [sp, #28]
 80073be:	4654      	mov	r4, sl
 80073c0:	2000      	movs	r0, #0
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4621      	mov	r1, r4
 80073c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073cc:	3b30      	subs	r3, #48	@ 0x30
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d94b      	bls.n	800746a <_vfiprintf_r+0x1a2>
 80073d2:	b1b0      	cbz	r0, 8007402 <_vfiprintf_r+0x13a>
 80073d4:	9207      	str	r2, [sp, #28]
 80073d6:	e014      	b.n	8007402 <_vfiprintf_r+0x13a>
 80073d8:	eba0 0308 	sub.w	r3, r0, r8
 80073dc:	fa09 f303 	lsl.w	r3, r9, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	9304      	str	r3, [sp, #16]
 80073e4:	46a2      	mov	sl, r4
 80073e6:	e7d2      	b.n	800738e <_vfiprintf_r+0xc6>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d19      	adds	r1, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9103      	str	r1, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfbb      	ittet	lt
 80073f4:	425b      	neglt	r3, r3
 80073f6:	f042 0202 	orrlt.w	r2, r2, #2
 80073fa:	9307      	strge	r3, [sp, #28]
 80073fc:	9307      	strlt	r3, [sp, #28]
 80073fe:	bfb8      	it	lt
 8007400:	9204      	strlt	r2, [sp, #16]
 8007402:	7823      	ldrb	r3, [r4, #0]
 8007404:	2b2e      	cmp	r3, #46	@ 0x2e
 8007406:	d10a      	bne.n	800741e <_vfiprintf_r+0x156>
 8007408:	7863      	ldrb	r3, [r4, #1]
 800740a:	2b2a      	cmp	r3, #42	@ 0x2a
 800740c:	d132      	bne.n	8007474 <_vfiprintf_r+0x1ac>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d1a      	adds	r2, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9203      	str	r2, [sp, #12]
 8007416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800741a:	3402      	adds	r4, #2
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074f4 <_vfiprintf_r+0x22c>
 8007422:	7821      	ldrb	r1, [r4, #0]
 8007424:	2203      	movs	r2, #3
 8007426:	4650      	mov	r0, sl
 8007428:	f7f8 feda 	bl	80001e0 <memchr>
 800742c:	b138      	cbz	r0, 800743e <_vfiprintf_r+0x176>
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	eba0 000a 	sub.w	r0, r0, sl
 8007434:	2240      	movs	r2, #64	@ 0x40
 8007436:	4082      	lsls	r2, r0
 8007438:	4313      	orrs	r3, r2
 800743a:	3401      	adds	r4, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007442:	4829      	ldr	r0, [pc, #164]	@ (80074e8 <_vfiprintf_r+0x220>)
 8007444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007448:	2206      	movs	r2, #6
 800744a:	f7f8 fec9 	bl	80001e0 <memchr>
 800744e:	2800      	cmp	r0, #0
 8007450:	d03f      	beq.n	80074d2 <_vfiprintf_r+0x20a>
 8007452:	4b26      	ldr	r3, [pc, #152]	@ (80074ec <_vfiprintf_r+0x224>)
 8007454:	bb1b      	cbnz	r3, 800749e <_vfiprintf_r+0x1d6>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	3307      	adds	r3, #7
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	3308      	adds	r3, #8
 8007460:	9303      	str	r3, [sp, #12]
 8007462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007464:	443b      	add	r3, r7
 8007466:	9309      	str	r3, [sp, #36]	@ 0x24
 8007468:	e76a      	b.n	8007340 <_vfiprintf_r+0x78>
 800746a:	fb0c 3202 	mla	r2, ip, r2, r3
 800746e:	460c      	mov	r4, r1
 8007470:	2001      	movs	r0, #1
 8007472:	e7a8      	b.n	80073c6 <_vfiprintf_r+0xfe>
 8007474:	2300      	movs	r3, #0
 8007476:	3401      	adds	r4, #1
 8007478:	9305      	str	r3, [sp, #20]
 800747a:	4619      	mov	r1, r3
 800747c:	f04f 0c0a 	mov.w	ip, #10
 8007480:	4620      	mov	r0, r4
 8007482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007486:	3a30      	subs	r2, #48	@ 0x30
 8007488:	2a09      	cmp	r2, #9
 800748a:	d903      	bls.n	8007494 <_vfiprintf_r+0x1cc>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d0c6      	beq.n	800741e <_vfiprintf_r+0x156>
 8007490:	9105      	str	r1, [sp, #20]
 8007492:	e7c4      	b.n	800741e <_vfiprintf_r+0x156>
 8007494:	fb0c 2101 	mla	r1, ip, r1, r2
 8007498:	4604      	mov	r4, r0
 800749a:	2301      	movs	r3, #1
 800749c:	e7f0      	b.n	8007480 <_vfiprintf_r+0x1b8>
 800749e:	ab03      	add	r3, sp, #12
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	462a      	mov	r2, r5
 80074a4:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <_vfiprintf_r+0x228>)
 80074a6:	a904      	add	r1, sp, #16
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7fd fc2b 	bl	8004d04 <_printf_float>
 80074ae:	4607      	mov	r7, r0
 80074b0:	1c78      	adds	r0, r7, #1
 80074b2:	d1d6      	bne.n	8007462 <_vfiprintf_r+0x19a>
 80074b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_vfiprintf_r+0x1fe>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	059a      	lsls	r2, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_vfiprintf_r+0x1fe>
 80074c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074c2:	f7fe fa4d 	bl	8005960 <__retarget_lock_release_recursive>
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	065b      	lsls	r3, r3, #25
 80074ca:	f53f af1f 	bmi.w	800730c <_vfiprintf_r+0x44>
 80074ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074d0:	e71e      	b.n	8007310 <_vfiprintf_r+0x48>
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	462a      	mov	r2, r5
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <_vfiprintf_r+0x228>)
 80074da:	a904      	add	r1, sp, #16
 80074dc:	4630      	mov	r0, r6
 80074de:	f7fd fea9 	bl	8005234 <_printf_i>
 80074e2:	e7e4      	b.n	80074ae <_vfiprintf_r+0x1e6>
 80074e4:	08007967 	.word	0x08007967
 80074e8:	08007971 	.word	0x08007971
 80074ec:	08004d05 	.word	0x08004d05
 80074f0:	080072a5 	.word	0x080072a5
 80074f4:	0800796d 	.word	0x0800796d

080074f8 <_raise_r>:
 80074f8:	291f      	cmp	r1, #31
 80074fa:	b538      	push	{r3, r4, r5, lr}
 80074fc:	4605      	mov	r5, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	d904      	bls.n	800750c <_raise_r+0x14>
 8007502:	2316      	movs	r3, #22
 8007504:	6003      	str	r3, [r0, #0]
 8007506:	f04f 30ff 	mov.w	r0, #4294967295
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800750e:	b112      	cbz	r2, 8007516 <_raise_r+0x1e>
 8007510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007514:	b94b      	cbnz	r3, 800752a <_raise_r+0x32>
 8007516:	4628      	mov	r0, r5
 8007518:	f000 f830 	bl	800757c <_getpid_r>
 800751c:	4622      	mov	r2, r4
 800751e:	4601      	mov	r1, r0
 8007520:	4628      	mov	r0, r5
 8007522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007526:	f000 b817 	b.w	8007558 <_kill_r>
 800752a:	2b01      	cmp	r3, #1
 800752c:	d00a      	beq.n	8007544 <_raise_r+0x4c>
 800752e:	1c59      	adds	r1, r3, #1
 8007530:	d103      	bne.n	800753a <_raise_r+0x42>
 8007532:	2316      	movs	r3, #22
 8007534:	6003      	str	r3, [r0, #0]
 8007536:	2001      	movs	r0, #1
 8007538:	e7e7      	b.n	800750a <_raise_r+0x12>
 800753a:	2100      	movs	r1, #0
 800753c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007540:	4620      	mov	r0, r4
 8007542:	4798      	blx	r3
 8007544:	2000      	movs	r0, #0
 8007546:	e7e0      	b.n	800750a <_raise_r+0x12>

08007548 <raise>:
 8007548:	4b02      	ldr	r3, [pc, #8]	@ (8007554 <raise+0xc>)
 800754a:	4601      	mov	r1, r0
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	f7ff bfd3 	b.w	80074f8 <_raise_r>
 8007552:	bf00      	nop
 8007554:	20000020 	.word	0x20000020

08007558 <_kill_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	@ (8007578 <_kill_r+0x20>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f000 f80b 	bl	8007580 <_kill>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_kill_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_kill_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	20000604 	.word	0x20000604

0800757c <_getpid_r>:
 800757c:	f7fd b980 	b.w	8004880 <_getpid>

08007580 <_kill>:
 8007580:	4b02      	ldr	r3, [pc, #8]	@ (800758c <_kill+0xc>)
 8007582:	2258      	movs	r2, #88	@ 0x58
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	4770      	bx	lr
 800758c:	20000604 	.word	0x20000604

08007590 <_exit>:
 8007590:	e7fe      	b.n	8007590 <_exit>
	...

08007594 <_init>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr

080075a0 <_fini>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr
