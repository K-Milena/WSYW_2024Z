
projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08004b28  08004b28  00005b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00005cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004d00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  08004d70  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004d70  00006334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009055  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0000f0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00010860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000777  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164fd  00000000  00000000  00011987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa09  00000000  00000000  00027e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb7c  00000000  00000000  0003288d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf409  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  000bf44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c2a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b10 	.word	0x08004b10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b10 	.word	0x08004b10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	zaczyna się od ustalenia w losowy sposób długości czasu świecenia diody na czas trwania
//	rundy, a kończy na prawidłowym odgadnięciu czasu świecenia diody.
//	Zmierzony czas wydrukować w konsoli i porównać do faktycznego czasu świecenia
//	diody.

	initialise_monitor_handles();
 8000584:	f003 f97c 	bl	8003880 <initialise_monitor_handles>
	printf("Trzymaj przycisk, gdy zielona dioda się świeci. Powodzenia! \n");
 8000588:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0x50>)
 800058a:	f003 fba1 	bl	8003cd0 <puts>
	srand(time(NULL));
 800058e:	2000      	movs	r0, #0
 8000590:	f003 fc86 	bl	8003ea0 <time>
 8000594:	4602      	mov	r2, r0
 8000596:	460b      	mov	r3, r1
 8000598:	4613      	mov	r3, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fa02 	bl	80039a4 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fd14 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f81a 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f96c 	bl	8000884 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005ac:	f000 f8f2 	bl	8000794 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005b0:	f000 f87e 	bl	80006b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start_IT(&htim4);
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <main+0x54>)
 80005b6:	f001 fcdf 	bl	8001f78 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 80005ba:	2100      	movs	r1, #0
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <main+0x54>)
 80005be:	f001 fd97 	bl	80020f0 <HAL_TIM_OC_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <main+0x58>)
 80005c6:	f001 fe9d 	bl	8002304 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x4a>
 80005ce:	bf00      	nop
 80005d0:	08004b28 	.word	0x08004b28
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	2000008c 	.word	0x2000008c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fc50 	bl	8003e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000650:	23c0      	movs	r3, #192	@ 0xc0
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 ffd5 	bl	8001610 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 fb24 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2103      	movs	r1, #3
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa36 	bl	8001b00 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 fb0d 	bl	8000cb8 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006e4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 80006f0:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006f2:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <MX_TIM2_Init+0xe0>)
 80006f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000702:	4822      	ldr	r0, [pc, #136]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000704:	f001 fbe8 	bl	8001ed8 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800070e:	f000 fad3 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	4619      	mov	r1, r3
 800071e:	481b      	ldr	r0, [pc, #108]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000720:	f002 f8f2 	bl	8002908 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800072a:	f000 fac5 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800072e:	4817      	ldr	r0, [pc, #92]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000730:	f001 fd8e 	bl	8002250 <HAL_TIM_IC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800073a:	f000 fabd 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4619      	mov	r1, r3
 800074c:	480f      	ldr	r0, [pc, #60]	@ (800078c <MX_TIM2_Init+0xdc>)
 800074e:	f002 fdfb 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000758:	f000 faae 	bl	8000cb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800075c:	230a      	movs	r3, #10
 800075e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000774:	f002 f82c 	bl	80027d0 <HAL_TIM_IC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800077e:	f000 fa9b 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	@ 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000008c 	.word	0x2000008c
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08e      	sub	sp, #56	@ 0x38
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000880 <MX_TIM4_Init+0xec>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007cc:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 80007d8:	4b28      	ldr	r3, [pc, #160]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007da:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80007de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ec:	4823      	ldr	r0, [pc, #140]	@ (800087c <MX_TIM4_Init+0xe8>)
 80007ee:	f001 fb73 	bl	8001ed8 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007f8:	f000 fa5e 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000806:	4619      	mov	r1, r3
 8000808:	481c      	ldr	r0, [pc, #112]	@ (800087c <MX_TIM4_Init+0xe8>)
 800080a:	f002 f87d 	bl	8002908 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000814:	f000 fa50 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000818:	4818      	ldr	r0, [pc, #96]	@ (800087c <MX_TIM4_Init+0xe8>)
 800081a:	f001 fc0f 	bl	800203c <HAL_TIM_OC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000824:	f000 fa48 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4619      	mov	r1, r3
 8000836:	4811      	ldr	r0, [pc, #68]	@ (800087c <MX_TIM4_Init+0xe8>)
 8000838:	f002 fd86 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000842:	f000 fa39 	bl	8000cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000846:	2330      	movs	r3, #48	@ 0x30
 8000848:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <MX_TIM4_Init+0xe8>)
 800085e:	f001 ff5b 	bl	8002718 <HAL_TIM_OC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000868:	f000 fa26 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <MX_TIM4_Init+0xe8>)
 800086e:	f000 fabd 	bl	8000dec <HAL_TIM_MspPostInit>

}
 8000872:	bf00      	nop
 8000874:	3738      	adds	r7, #56	@ 0x38
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000d4 	.word	0x200000d4
 8000880:	40000800 	.word	0x40000800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	@ 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	4b9b      	ldr	r3, [pc, #620]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a9a      	ldr	r2, [pc, #616]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b98      	ldr	r3, [pc, #608]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	4b94      	ldr	r3, [pc, #592]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a93      	ldr	r2, [pc, #588]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b91      	ldr	r3, [pc, #580]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b8d      	ldr	r3, [pc, #564]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a8c      	ldr	r2, [pc, #560]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b8a      	ldr	r3, [pc, #552]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b86      	ldr	r3, [pc, #536]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a85      	ldr	r2, [pc, #532]	@ (8000b0c <MX_GPIO_Init+0x288>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b83      	ldr	r3, [pc, #524]	@ (8000b0c <MX_GPIO_Init+0x288>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b7f      	ldr	r3, [pc, #508]	@ (8000b0c <MX_GPIO_Init+0x288>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a7e      	ldr	r2, [pc, #504]	@ (8000b0c <MX_GPIO_Init+0x288>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b7c      	ldr	r3, [pc, #496]	@ (8000b0c <MX_GPIO_Init+0x288>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b78      	ldr	r3, [pc, #480]	@ (8000b0c <MX_GPIO_Init+0x288>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a77      	ldr	r2, [pc, #476]	@ (8000b0c <MX_GPIO_Init+0x288>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b75      	ldr	r3, [pc, #468]	@ (8000b0c <MX_GPIO_Init+0x288>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2108      	movs	r1, #8
 8000946:	4872      	ldr	r0, [pc, #456]	@ (8000b10 <MX_GPIO_Init+0x28c>)
 8000948:	f000 fe48 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2101      	movs	r1, #1
 8000950:	4870      	ldr	r0, [pc, #448]	@ (8000b14 <MX_GPIO_Init+0x290>)
 8000952:	f000 fe43 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f242 0110 	movw	r1, #8208	@ 0x2010
 800095c:	486e      	ldr	r0, [pc, #440]	@ (8000b18 <MX_GPIO_Init+0x294>)
 800095e:	f000 fe3d 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000962:	2304      	movs	r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4866      	ldr	r0, [pc, #408]	@ (8000b10 <MX_GPIO_Init+0x28c>)
 8000976:	f000 fcad 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800097a:	2308      	movs	r3, #8
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	485f      	ldr	r0, [pc, #380]	@ (8000b10 <MX_GPIO_Init+0x28c>)
 8000992:	f000 fc9f 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000996:	2332      	movs	r3, #50	@ 0x32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4859      	ldr	r0, [pc, #356]	@ (8000b10 <MX_GPIO_Init+0x28c>)
 80009ac:	f000 fc92 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4853      	ldr	r0, [pc, #332]	@ (8000b14 <MX_GPIO_Init+0x290>)
 80009c8:	f000 fc84 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009cc:	2308      	movs	r3, #8
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009dc:	2305      	movs	r3, #5
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	484b      	ldr	r0, [pc, #300]	@ (8000b14 <MX_GPIO_Init+0x290>)
 80009e8:	f000 fc74 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009ec:	2310      	movs	r3, #16
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fc:	2306      	movs	r3, #6
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4845      	ldr	r0, [pc, #276]	@ (8000b1c <MX_GPIO_Init+0x298>)
 8000a08:	f000 fc64 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a0c:	23e0      	movs	r3, #224	@ 0xe0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	483d      	ldr	r0, [pc, #244]	@ (8000b1c <MX_GPIO_Init+0x298>)
 8000a28:	f000 fc54 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3e:	2305      	movs	r3, #5
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4835      	ldr	r0, [pc, #212]	@ (8000b20 <MX_GPIO_Init+0x29c>)
 8000a4a:	f000 fc43 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|Audio_RST_Pin;
 8000a4e:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	482c      	ldr	r0, [pc, #176]	@ (8000b18 <MX_GPIO_Init+0x294>)
 8000a68:	f000 fc34 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a6c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4822      	ldr	r0, [pc, #136]	@ (8000b14 <MX_GPIO_Init+0x290>)
 8000a8a:	f000 fc23 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481e      	ldr	r0, [pc, #120]	@ (8000b1c <MX_GPIO_Init+0x298>)
 8000aa4:	f000 fc16 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000aa8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aba:	230a      	movs	r3, #10
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4815      	ldr	r0, [pc, #84]	@ (8000b1c <MX_GPIO_Init+0x298>)
 8000ac6:	f000 fc05 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000aca:	2320      	movs	r3, #32
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <MX_GPIO_Init+0x294>)
 8000ade:	f000 fbf9 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ae2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae8:	2312      	movs	r3, #18
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af4:	2304      	movs	r3, #4
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <MX_GPIO_Init+0x29c>)
 8000b00:	f000 fbe8 	bl	80012d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	@ 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_TIM_PeriodElapsedCallback>:
uint32_t interrupt_trigger_number = 0;
uint32_t last_capture_time = 0;
bool game_active = false; //is game active flag - required for sync of press_time with actual pulse_val

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    if(htim == &htim4 && !game_active)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d12d      	bne.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d026      	beq.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0x6c>
    {
        pulse_val = (rand() % (MAX_ON_TIME - MIN_ON_TIME + 1)) + MIN_ON_TIME;
 8000b42:	f002 ff5d 	bl	8003a00 <rand>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b4e:	1299      	asrs	r1, r3, #10
 8000b50:	17d3      	asrs	r3, r2, #31
 8000b52:	1acb      	subs	r3, r1, r3
 8000b54:	f640 11c5 	movw	r1, #2501	@ 0x9c5
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b66:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_AUTORELOAD(&htim4, pulse_val);
 8000b68:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b78:	60d3      	str	r3, [r2, #12]
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	480a      	ldr	r0, [pc, #40]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b80:	f000 fd2c 	bl	80015dc <HAL_GPIO_WritePin>
        HAL_TIM_Base_Start_IT(&htim4);
 8000b84:	4804      	ldr	r0, [pc, #16]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b86:	f001 f9f7 	bl	8001f78 <HAL_TIM_Base_Start_IT>
        game_active = true;
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
    }
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000d4 	.word	0x200000d4
 8000b9c:	20000130 	.word	0x20000130
 8000ba0:	68d0cfff 	.word	0x68d0cfff
 8000ba4:	2000011c 	.word	0x2000011c
 8000ba8:	40020000 	.word	0x40020000

08000bac <HAL_TIM_IC_CaptureCallback>:
        HAL_TIM_Base_Stop_IT(&htim4);
    }
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    if(htim == &htim2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a35      	ldr	r2, [pc, #212]	@ (8000c8c <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d163      	bne.n	8000c84 <HAL_TIM_IC_CaptureCallback+0xd8>
    {
        uint32_t current_time = HAL_GetTick();
 8000bbc:	f000 fa6c 	bl	8001098 <HAL_GetTick>
 8000bc0:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_capture_time) < DEBOUNCE_DELAY) {
 8000bc2:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b63      	cmp	r3, #99	@ 0x63
 8000bcc:	d959      	bls.n	8000c82 <HAL_TIM_IC_CaptureCallback+0xd6>
            return;
        }
        last_capture_time = current_time;
 8000bce:	4a30      	ldr	r2, [pc, #192]	@ (8000c90 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6013      	str	r3, [r2, #0]

        if(interrupt_trigger_number == 0)
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10d      	bne.n	8000bf8 <HAL_TIM_IC_CaptureCallback+0x4c>
        {
            press_moment = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f001 ff5a 	bl	8002a98 <HAL_TIM_ReadCapturedValue>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000be8:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	482a      	ldr	r0, [pc, #168]	@ (8000c9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000bf2:	f000 fcf3 	bl	80015dc <HAL_GPIO_WritePin>
 8000bf6:	e010      	b.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x6e>
        }
        else if(interrupt_trigger_number == 1)
 8000bf8:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10c      	bne.n	8000c1a <HAL_TIM_IC_CaptureCallback+0x6e>
        {
            release_moment = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c00:	2100      	movs	r1, #0
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f001 ff48 	bl	8002a98 <HAL_TIM_ReadCapturedValue>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a25      	ldr	r2, [pc, #148]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000c0c:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c14:	4821      	ldr	r0, [pc, #132]	@ (8000c9c <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000c16:	f000 fce1 	bl	80015dc <HAL_GPIO_WritePin>
        }

        interrupt_trigger_number++;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a1c      	ldr	r2, [pc, #112]	@ (8000c94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c22:	6013      	str	r3, [r2, #0]

        if(interrupt_trigger_number == 2)
 8000c24:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d12b      	bne.n	8000c84 <HAL_TIM_IC_CaptureCallback+0xd8>
        {
            interrupt_trigger_number = 0;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
            uint32_t press_time = release_moment - press_moment;
 8000c32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	60bb      	str	r3, [r7, #8]
            printf("Czas wciśnięcia przycisku: %d ms\n", press_time);
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	4818      	ldr	r0, [pc, #96]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000c42:	f002 ffdd 	bl	8003c00 <iprintf>

            if(abs((int32_t)press_time - (int32_t)pulse_val) <= WIN_TOLERANCE)
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000c52:	db0c      	blt.n	8000c6e <HAL_TIM_IC_CaptureCallback+0xc2>
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	2b64      	cmp	r3, #100	@ 0x64
 8000c5e:	dc06      	bgt.n	8000c6e <HAL_TIM_IC_CaptureCallback+0xc2>
            {
                printf("Gratulacje! Dioda świeciła się %d ms!\n", pulse_val);
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4811      	ldr	r0, [pc, #68]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x100>)
 8000c68:	f002 ffca 	bl	8003c00 <iprintf>
 8000c6c:	e005      	b.n	8000c7a <HAL_TIM_IC_CaptureCallback+0xce>
            }
            else
            {
                printf("Nie udało się! Dioda świeciła się %d ms!\n", pulse_val);
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000c76:	f002 ffc3 	bl	8003c00 <iprintf>
            }

            game_active = false;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e000      	b.n	8000c84 <HAL_TIM_IC_CaptureCallback+0xd8>
            return;
 8000c82:	bf00      	nop
        }
    }
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000008c 	.word	0x2000008c
 8000c90:	2000012c 	.word	0x2000012c
 8000c94:	20000128 	.word	0x20000128
 8000c98:	20000120 	.word	0x20000120
 8000c9c:	40020c00 	.word	0x40020c00
 8000ca0:	20000124 	.word	0x20000124
 8000ca4:	08004b68 	.word	0x08004b68
 8000ca8:	2000011c 	.word	0x2000011c
 8000cac:	08004b8c 	.word	0x08004b8c
 8000cb0:	08004bb8 	.word	0x08004bb8
 8000cb4:	20000130 	.word	0x20000130

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d02:	2007      	movs	r0, #7
 8000d04:	f000 faa4 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d134      	bne.n	8000da0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	4a28      	ldr	r2, [pc, #160]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a21      	ldr	r2, [pc, #132]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4816      	ldr	r0, [pc, #88]	@ (8000de4 <HAL_TIM_Base_MspInit+0xd0>)
 8000d8a:	f000 faa3 	bl	80012d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	201c      	movs	r0, #28
 8000d94:	f000 fa67 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d98:	201c      	movs	r0, #28
 8000d9a:	f000 fa80 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d9e:	e01a      	b.n	8000dd6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <HAL_TIM_Base_MspInit+0xd4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d115      	bne.n	8000dd6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_TIM_Base_MspInit+0xcc>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	201e      	movs	r0, #30
 8000dcc:	f000 fa4b 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dd0:	201e      	movs	r0, #30
 8000dd2:	f000 fa64 	bl	800129e <HAL_NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40000800 	.word	0x40000800

08000dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <HAL_TIM_MspPostInit+0x68>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d11e      	bne.n	8000e4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_TIM_MspPostInit+0x6c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_TIM_MspPostInit+0x6c>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_TIM_MspPostInit+0x6c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <HAL_TIM_MspPostInit+0x70>)
 8000e48:	f000 fa44 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40000800 	.word	0x40000800
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f8db 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <TIM2_IRQHandler+0x10>)
 8000ec6:	f001 fb37 	bl	8002538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000008c 	.word	0x2000008c

08000ed4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <TIM4_IRQHandler+0x10>)
 8000eda:	f001 fb2d 	bl	8002538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000d4 	.word	0x200000d4

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f003 f836 	bl	8003f88 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000134 	.word	0x20000134
 8000f50:	20000338 	.word	0x20000338

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 fff5 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fae9 	bl	8000580 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fbc:	08004d00 	.word	0x08004d00
  ldr r2, =_sbss
 8000fc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc4:	20000334 	.word	0x20000334

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <HAL_Init+0x40>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <HAL_Init+0x40>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_Init+0x40>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f92b 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fe60 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023c00 	.word	0x40023c00

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f943 	bl	80012ba <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f90b 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	@ (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	20000138 	.word	0x20000138

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000138 	.word	0x20000138

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	@ (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e159      	b.n	80015a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8148 	bne.w	800159e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	2b02      	cmp	r3, #2
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a2 	beq.w	800159e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b57      	ldr	r3, [pc, #348]	@ (80015bc <HAL_GPIO_Init+0x2e8>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a56      	ldr	r2, [pc, #344]	@ (80015bc <HAL_GPIO_Init+0x2e8>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b54      	ldr	r3, [pc, #336]	@ (80015bc <HAL_GPIO_Init+0x2e8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a52      	ldr	r2, [pc, #328]	@ (80015c0 <HAL_GPIO_Init+0x2ec>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a49      	ldr	r2, [pc, #292]	@ (80015c4 <HAL_GPIO_Init+0x2f0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x202>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a48      	ldr	r2, [pc, #288]	@ (80015c8 <HAL_GPIO_Init+0x2f4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x1fe>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a47      	ldr	r2, [pc, #284]	@ (80015cc <HAL_GPIO_Init+0x2f8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a46      	ldr	r2, [pc, #280]	@ (80015d0 <HAL_GPIO_Init+0x2fc>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x1f6>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	@ (80015d4 <HAL_GPIO_Init+0x300>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x1f2>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014c6:	2307      	movs	r3, #7
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	@ (80015c0 <HAL_GPIO_Init+0x2ec>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151a:	4a2f      	ldr	r2, [pc, #188]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001520:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001544:	4a24      	ldr	r2, [pc, #144]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154a:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001598:	4a0f      	ldr	r2, [pc, #60]	@ (80015d8 <HAL_GPIO_Init+0x304>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f aea2 	bls.w	80012f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e267      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d075      	beq.n	800171a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800162e:	4b88      	ldr	r3, [pc, #544]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b04      	cmp	r3, #4
 8001638:	d00c      	beq.n	8001654 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163a:	4b85      	ldr	r3, [pc, #532]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001642:	2b08      	cmp	r3, #8
 8001644:	d112      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001646:	4b82      	ldr	r3, [pc, #520]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001652:	d10b      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b7e      	ldr	r3, [pc, #504]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d05b      	beq.n	8001718 <HAL_RCC_OscConfig+0x108>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d157      	bne.n	8001718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e242      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x74>
 8001676:	4b76      	ldr	r3, [pc, #472]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a75      	ldr	r2, [pc, #468]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01d      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b70      	ldr	r3, [pc, #448]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6f      	ldr	r2, [pc, #444]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b6d      	ldr	r3, [pc, #436]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6c      	ldr	r2, [pc, #432]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 80016a8:	4b69      	ldr	r3, [pc, #420]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a68      	ldr	r2, [pc, #416]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b66      	ldr	r3, [pc, #408]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a65      	ldr	r2, [pc, #404]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fce6 	bl	8001098 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fce2 	bl	8001098 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	@ 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e207      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0xc0>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fcd2 	bl	8001098 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fcce 	bl	8001098 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	@ 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1f3      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	4b51      	ldr	r3, [pc, #324]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0xe8>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d063      	beq.n	80017ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001726:	4b4a      	ldr	r3, [pc, #296]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001732:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800173a:	2b08      	cmp	r3, #8
 800173c:	d11c      	bne.n	8001778 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b44      	ldr	r3, [pc, #272]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d116      	bne.n	8001778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x152>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e1c7      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4937      	ldr	r1, [pc, #220]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	e03a      	b.n	80017ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001780:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <HAL_RCC_OscConfig+0x244>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fc87 	bl	8001098 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fc83 	bl	8001098 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1a8      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4925      	ldr	r1, [pc, #148]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_RCC_OscConfig+0x244>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc66 	bl	8001098 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fc62 	bl	8001098 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e187      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d036      	beq.n	8001868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d016      	beq.n	8001830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_RCC_OscConfig+0x248>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fc46 	bl	8001098 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff fc42 	bl	8001098 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e167      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_RCC_OscConfig+0x240>)
 8001824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x200>
 800182e:	e01b      	b.n	8001868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_RCC_OscConfig+0x248>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fc2f 	bl	8001098 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	e00e      	b.n	800185c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fc2b 	bl	8001098 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d907      	bls.n	800185c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e150      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
 8001850:	40023800 	.word	0x40023800
 8001854:	42470000 	.word	0x42470000
 8001858:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800185e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ea      	bne.n	800183e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8097 	beq.w	80019a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b81      	ldr	r3, [pc, #516]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
 8001896:	4b7a      	ldr	r3, [pc, #488]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b77      	ldr	r3, [pc, #476]	@ (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b74      	ldr	r3, [pc, #464]	@ (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a73      	ldr	r2, [pc, #460]	@ (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff fbeb 	bl	8001098 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fbe7 	bl	8001098 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e10c      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x2ea>
 80018ec:	4b64      	ldr	r3, [pc, #400]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a63      	ldr	r2, [pc, #396]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x324>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x30c>
 8001902:	4b5f      	ldr	r3, [pc, #380]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001906:	4a5e      	ldr	r2, [pc, #376]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6713      	str	r3, [r2, #112]	@ 0x70
 800190e:	4b5c      	ldr	r3, [pc, #368]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001912:	4a5b      	ldr	r2, [pc, #364]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6713      	str	r3, [r2, #112]	@ 0x70
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0x324>
 800191c:	4b58      	ldr	r3, [pc, #352]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001920:	4a57      	ldr	r2, [pc, #348]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	@ 0x70
 8001928:	4b55      	ldr	r3, [pc, #340]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192c:	4a54      	ldr	r2, [pc, #336]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d015      	beq.n	8001968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fbac 	bl	8001098 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff fba8 	bl	8001098 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0cb      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	4b49      	ldr	r3, [pc, #292]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ee      	beq.n	8001944 <HAL_RCC_OscConfig+0x334>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fb96 	bl	8001098 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fb92 	bl	8001098 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0b5      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	4b3e      	ldr	r3, [pc, #248]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ee      	bne.n	8001970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	4a38      	ldr	r2, [pc, #224]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a1 	beq.w	8001af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ae:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d05c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d141      	bne.n	8001a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_RCC_OscConfig+0x478>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb66 	bl	8001098 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fb62 	bl	8001098 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e087      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	3b01      	subs	r3, #1
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	491b      	ldr	r1, [pc, #108]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_RCC_OscConfig+0x478>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb3b 	bl	8001098 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff fb37 	bl	8001098 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e05c      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x416>
 8001a44:	e054      	b.n	8001af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_RCC_OscConfig+0x478>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb24 	bl	8001098 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fb20 	bl	8001098 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e045      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x444>
 8001a72:	e03d      	b.n	8001af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e038      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x4ec>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d028      	beq.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d121      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d111      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0cc      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b68      	ldr	r3, [pc, #416]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d90c      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b65      	ldr	r3, [pc, #404]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b63      	ldr	r3, [pc, #396]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0b8      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b54:	4b59      	ldr	r3, [pc, #356]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a58      	ldr	r2, [pc, #352]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b6c:	4b53      	ldr	r3, [pc, #332]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a52      	ldr	r2, [pc, #328]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b50      	ldr	r3, [pc, #320]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	494d      	ldr	r1, [pc, #308]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d044      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d119      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e07f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e067      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bde:	4b37      	ldr	r3, [pc, #220]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 0203 	bic.w	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4934      	ldr	r1, [pc, #208]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fa52 	bl	8001098 <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7ff fa4e 	bl	8001098 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e04f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 020c 	and.w	r2, r3, #12
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1eb      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d20c      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e032      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4916      	ldr	r1, [pc, #88]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	490e      	ldr	r1, [pc, #56]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c86:	f000 f821 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	490a      	ldr	r1, [pc, #40]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	5ccb      	ldrb	r3, [r1, r3]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f9b2 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023c00 	.word	0x40023c00
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	08004be8 	.word	0x08004be8
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd0:	b094      	sub	sp, #80	@ 0x50
 8001cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce4:	4b79      	ldr	r3, [pc, #484]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d00d      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x40>
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	f200 80e1 	bhi.w	8001eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfe:	e0db      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d00:	4b73      	ldr	r3, [pc, #460]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d04:	e0db      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d06:	4b73      	ldr	r3, [pc, #460]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d0a:	e0d8      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d16:	4b6d      	ldr	r3, [pc, #436]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d22:	4b6a      	ldr	r3, [pc, #424]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	099b      	lsrs	r3, r3, #6
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d3e:	4622      	mov	r2, r4
 8001d40:	462b      	mov	r3, r5
 8001d42:	f04f 0000 	mov.w	r0, #0
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	0159      	lsls	r1, r3, #5
 8001d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d50:	0150      	lsls	r0, r2, #5
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4621      	mov	r1, r4
 8001d58:	1a51      	subs	r1, r2, r1
 8001d5a:	6139      	str	r1, [r7, #16]
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d70:	4659      	mov	r1, fp
 8001d72:	018b      	lsls	r3, r1, #6
 8001d74:	4651      	mov	r1, sl
 8001d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	018a      	lsls	r2, r1, #6
 8001d7e:	4651      	mov	r1, sl
 8001d80:	ebb2 0801 	subs.w	r8, r2, r1
 8001d84:	4659      	mov	r1, fp
 8001d86:	eb63 0901 	sbc.w	r9, r3, r1
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d9e:	4690      	mov	r8, r2
 8001da0:	4699      	mov	r9, r3
 8001da2:	4623      	mov	r3, r4
 8001da4:	eb18 0303 	adds.w	r3, r8, r3
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	462b      	mov	r3, r5
 8001dac:	eb49 0303 	adc.w	r3, r9, r3
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	024b      	lsls	r3, r1, #9
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dc8:	4621      	mov	r1, r4
 8001dca:	024a      	lsls	r2, r1, #9
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ddc:	f7fe fa58 	bl	8000290 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001de8:	e058      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dea:	4b38      	ldr	r3, [pc, #224]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	2200      	movs	r2, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	4611      	mov	r1, r2
 8001df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e04:	4642      	mov	r2, r8
 8001e06:	464b      	mov	r3, r9
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	0159      	lsls	r1, r3, #5
 8001e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e16:	0150      	lsls	r0, r2, #5
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e22:	4649      	mov	r1, r9
 8001e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e40:	eb63 050b 	sbc.w	r5, r3, fp
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	00eb      	lsls	r3, r5, #3
 8001e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e52:	00e2      	lsls	r2, r4, #3
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	4643      	mov	r3, r8
 8001e5a:	18e3      	adds	r3, r4, r3
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	464b      	mov	r3, r9
 8001e60:	eb45 0303 	adc.w	r3, r5, r3
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e72:	4629      	mov	r1, r5
 8001e74:	028b      	lsls	r3, r1, #10
 8001e76:	4621      	mov	r1, r4
 8001e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	028a      	lsls	r2, r1, #10
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e86:	2200      	movs	r2, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	61fa      	str	r2, [r7, #28]
 8001e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e90:	f7fe f9fe 	bl	8000290 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3750      	adds	r7, #80	@ 0x50
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	007a1200 	.word	0x007a1200

08001ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e041      	b.n	8001f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe ff08 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3304      	adds	r3, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f000 fe20 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d001      	beq.n	8001f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e044      	b.n	800201a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <HAL_TIM_Base_Start_IT+0xb0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d018      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fba:	d013      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800202c <HAL_TIM_Base_Start_IT+0xb4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00e      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <HAL_TIM_Base_Start_IT+0xb8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_TIM_Base_Start_IT+0xbc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a16      	ldr	r2, [pc, #88]	@ (8002038 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d010      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002006:	e007      	b.n	8002018 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40000c00 	.word	0x40000c00
 8002038:	40014000 	.word	0x40014000

0800203c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e041      	b.n	80020d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f839 	bl	80020da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3304      	adds	r3, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4610      	mov	r0, r2
 800207c:	f000 fd6e 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_TIM_OC_Start+0x24>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e022      	b.n	800215a <HAL_TIM_OC_Start+0x6a>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d109      	bne.n	800212e <HAL_TIM_OC_Start+0x3e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e015      	b.n	800215a <HAL_TIM_OC_Start+0x6a>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d109      	bne.n	8002148 <HAL_TIM_OC_Start+0x58>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e008      	b.n	800215a <HAL_TIM_OC_Start+0x6a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e068      	b.n	8002234 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_TIM_OC_Start+0x82>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002170:	e013      	b.n	800219a <HAL_TIM_OC_Start+0xaa>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d104      	bne.n	8002182 <HAL_TIM_OC_Start+0x92>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002180:	e00b      	b.n	800219a <HAL_TIM_OC_Start+0xaa>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d104      	bne.n	8002192 <HAL_TIM_OC_Start+0xa2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002190:	e003      	b.n	800219a <HAL_TIM_OC_Start+0xaa>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 f8aa 	bl	80032fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	@ (800223c <HAL_TIM_OC_Start+0x14c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d107      	bne.n	80021c2 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1d      	ldr	r2, [pc, #116]	@ (800223c <HAL_TIM_OC_Start+0x14c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d018      	beq.n	80021fe <HAL_TIM_OC_Start+0x10e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d013      	beq.n	80021fe <HAL_TIM_OC_Start+0x10e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_TIM_OC_Start+0x150>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00e      	beq.n	80021fe <HAL_TIM_OC_Start+0x10e>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a17      	ldr	r2, [pc, #92]	@ (8002244 <HAL_TIM_OC_Start+0x154>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_TIM_OC_Start+0x10e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <HAL_TIM_OC_Start+0x158>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d004      	beq.n	80021fe <HAL_TIM_OC_Start+0x10e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a14      	ldr	r2, [pc, #80]	@ (800224c <HAL_TIM_OC_Start+0x15c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d111      	bne.n	8002222 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d010      	beq.n	8002232 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002220:	e007      	b.n	8002232 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40010000 	.word	0x40010000
 8002240:	40000400 	.word	0x40000400
 8002244:	40000800 	.word	0x40000800
 8002248:	40000c00 	.word	0x40000c00
 800224c:	40014000 	.word	0x40014000

08002250 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e041      	b.n	80022e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f839 	bl	80022ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f000 fc64 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_TIM_IC_Start_IT+0x1e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e013      	b.n	800234a <HAL_TIM_IC_Start_IT+0x46>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d104      	bne.n	8002332 <HAL_TIM_IC_Start_IT+0x2e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800232e:	b2db      	uxtb	r3, r3
 8002330:	e00b      	b.n	800234a <HAL_TIM_IC_Start_IT+0x46>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_TIM_IC_Start_IT+0x3e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800233e:	b2db      	uxtb	r3, r3
 8002340:	e003      	b.n	800234a <HAL_TIM_IC_Start_IT+0x46>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <HAL_TIM_IC_Start_IT+0x58>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e013      	b.n	8002384 <HAL_TIM_IC_Start_IT+0x80>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b04      	cmp	r3, #4
 8002360:	d104      	bne.n	800236c <HAL_TIM_IC_Start_IT+0x68>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e00b      	b.n	8002384 <HAL_TIM_IC_Start_IT+0x80>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b08      	cmp	r3, #8
 8002370:	d104      	bne.n	800237c <HAL_TIM_IC_Start_IT+0x78>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e003      	b.n	8002384 <HAL_TIM_IC_Start_IT+0x80>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002382:	b2db      	uxtb	r3, r3
 8002384:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800238c:	7b7b      	ldrb	r3, [r7, #13]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0c2      	b.n	800251c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <HAL_TIM_IC_Start_IT+0xa2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a4:	e013      	b.n	80023ce <HAL_TIM_IC_Start_IT+0xca>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_IC_Start_IT+0xb2>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b4:	e00b      	b.n	80023ce <HAL_TIM_IC_Start_IT+0xca>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_IC_Start_IT+0xc2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c4:	e003      	b.n	80023ce <HAL_TIM_IC_Start_IT+0xca>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_TIM_IC_Start_IT+0xda>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023dc:	e013      	b.n	8002406 <HAL_TIM_IC_Start_IT+0x102>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d104      	bne.n	80023ee <HAL_TIM_IC_Start_IT+0xea>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023ec:	e00b      	b.n	8002406 <HAL_TIM_IC_Start_IT+0x102>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_IC_Start_IT+0xfa>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023fc:	e003      	b.n	8002406 <HAL_TIM_IC_Start_IT+0x102>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2202      	movs	r2, #2
 8002402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d841      	bhi.n	8002490 <HAL_TIM_IC_Start_IT+0x18c>
 800240c:	a201      	add	r2, pc, #4	@ (adr r2, 8002414 <HAL_TIM_IC_Start_IT+0x110>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002449 	.word	0x08002449
 8002418:	08002491 	.word	0x08002491
 800241c:	08002491 	.word	0x08002491
 8002420:	08002491 	.word	0x08002491
 8002424:	0800245b 	.word	0x0800245b
 8002428:	08002491 	.word	0x08002491
 800242c:	08002491 	.word	0x08002491
 8002430:	08002491 	.word	0x08002491
 8002434:	0800246d 	.word	0x0800246d
 8002438:	08002491 	.word	0x08002491
 800243c:	08002491 	.word	0x08002491
 8002440:	08002491 	.word	0x08002491
 8002444:	0800247f 	.word	0x0800247f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0202 	orr.w	r2, r2, #2
 8002456:	60da      	str	r2, [r3, #12]
      break;
 8002458:	e01d      	b.n	8002496 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0204 	orr.w	r2, r2, #4
 8002468:	60da      	str	r2, [r3, #12]
      break;
 800246a:	e014      	b.n	8002496 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0208 	orr.w	r2, r2, #8
 800247a:	60da      	str	r2, [r3, #12]
      break;
 800247c:	e00b      	b.n	8002496 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0210 	orr.w	r2, r2, #16
 800248c:	60da      	str	r2, [r3, #12]
      break;
 800248e:	e002      	b.n	8002496 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	bf00      	nop
  }

  if (status == HAL_OK)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d13e      	bne.n	800251a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 ff29 	bl	80032fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <HAL_TIM_IC_Start_IT+0x220>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d018      	beq.n	80024e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024bc:	d013      	beq.n	80024e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a19      	ldr	r2, [pc, #100]	@ (8002528 <HAL_TIM_IC_Start_IT+0x224>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00e      	beq.n	80024e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a17      	ldr	r2, [pc, #92]	@ (800252c <HAL_TIM_IC_Start_IT+0x228>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d009      	beq.n	80024e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a16      	ldr	r2, [pc, #88]	@ (8002530 <HAL_TIM_IC_Start_IT+0x22c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_TIM_IC_Start_IT+0x230>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d010      	beq.n	800251a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	e007      	b.n	800251a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40010000 	.word	0x40010000
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800
 8002530:	40000c00 	.word	0x40000c00
 8002534:	40014000 	.word	0x40014000

08002538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01b      	beq.n	800259c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0202 	mvn.w	r2, #2
 800256c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb12 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fac8 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 facf 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d020      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0204 	mvn.w	r2, #4
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe faec 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 faa2 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 faa9 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0208 	mvn.w	r2, #8
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2204      	movs	r2, #4
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fac6 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa7c 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fa83 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0210 	mvn.w	r2, #16
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2208      	movs	r2, #8
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe faa0 	bl	8000bac <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa56 	bl	8002b20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa5d 	bl	8002b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0201 	mvn.w	r2, #1
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fa40 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 feb8 	bl	8003438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa2e 	bl	8002b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0220 	mvn.w	r2, #32
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fe8a 	bl	8003424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002732:	2302      	movs	r3, #2
 8002734:	e048      	b.n	80027c8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d839      	bhi.n	80027b8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002744:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	08002781 	.word	0x08002781
 8002750:	080027b9 	.word	0x080027b9
 8002754:	080027b9 	.word	0x080027b9
 8002758:	080027b9 	.word	0x080027b9
 800275c:	0800278f 	.word	0x0800278f
 8002760:	080027b9 	.word	0x080027b9
 8002764:	080027b9 	.word	0x080027b9
 8002768:	080027b9 	.word	0x080027b9
 800276c:	0800279d 	.word	0x0800279d
 8002770:	080027b9 	.word	0x080027b9
 8002774:	080027b9 	.word	0x080027b9
 8002778:	080027b9 	.word	0x080027b9
 800277c:	080027ab 	.word	0x080027ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fa74 	bl	8002c74 <TIM_OC1_SetConfig>
      break;
 800278c:	e017      	b.n	80027be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fad3 	bl	8002d40 <TIM_OC2_SetConfig>
      break;
 800279a:	e010      	b.n	80027be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fb38 	bl	8002e18 <TIM_OC3_SetConfig>
      break;
 80027a8:	e009      	b.n	80027be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fb9b 	bl	8002eec <TIM_OC4_SetConfig>
      break;
 80027b6:	e002      	b.n	80027be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
      break;
 80027bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_IC_ConfigChannel+0x1e>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e088      	b.n	8002900 <HAL_TIM_IC_ConfigChannel+0x130>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800280c:	f000 fbbe 	bl	8002f8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020c 	bic.w	r2, r2, #12
 800281e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6999      	ldr	r1, [r3, #24]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]
 8002832:	e060      	b.n	80028f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d11c      	bne.n	8002874 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800284a:	f000 fc36 	bl	80030ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699a      	ldr	r2, [r3, #24]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800285c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6999      	ldr	r1, [r3, #24]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	619a      	str	r2, [r3, #24]
 8002872:	e040      	b.n	80028f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d11b      	bne.n	80028b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800288a:	f000 fc83 	bl	8003194 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 020c 	bic.w	r2, r2, #12
 800289c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69d9      	ldr	r1, [r3, #28]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	61da      	str	r2, [r3, #28]
 80028b0:	e021      	b.n	80028f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d11c      	bne.n	80028f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80028c8:	f000 fca0 	bl	800320c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69d9      	ldr	r1, [r3, #28]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	61da      	str	r2, [r3, #28]
 80028f0:	e001      	b.n	80028f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_TIM_ConfigClockSource+0x1c>
 8002920:	2302      	movs	r3, #2
 8002922:	e0b4      	b.n	8002a8e <HAL_TIM_ConfigClockSource+0x186>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800294a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295c:	d03e      	beq.n	80029dc <HAL_TIM_ConfigClockSource+0xd4>
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002962:	f200 8087 	bhi.w	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296a:	f000 8086 	beq.w	8002a7a <HAL_TIM_ConfigClockSource+0x172>
 800296e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002972:	d87f      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b70      	cmp	r3, #112	@ 0x70
 8002976:	d01a      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0xa6>
 8002978:	2b70      	cmp	r3, #112	@ 0x70
 800297a:	d87b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b60      	cmp	r3, #96	@ 0x60
 800297e:	d050      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x11a>
 8002980:	2b60      	cmp	r3, #96	@ 0x60
 8002982:	d877      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b50      	cmp	r3, #80	@ 0x50
 8002986:	d03c      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xfa>
 8002988:	2b50      	cmp	r3, #80	@ 0x50
 800298a:	d873      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d058      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x13a>
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d86f      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b30      	cmp	r3, #48	@ 0x30
 8002996:	d064      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	2b30      	cmp	r3, #48	@ 0x30
 800299a:	d86b      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b20      	cmp	r3, #32
 800299e:	d060      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d867      	bhi.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05c      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d05a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	e062      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029be:	f000 fc7d 	bl	80032bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	609a      	str	r2, [r3, #8]
      break;
 80029da:	e04f      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ec:	f000 fc66 	bl	80032bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029fe:	609a      	str	r2, [r3, #8]
      break;
 8002a00:	e03c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 fb24 	bl	800305c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2150      	movs	r1, #80	@ 0x50
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fc33 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002a20:	e02c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 fb80 	bl	8003134 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2160      	movs	r1, #96	@ 0x60
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fc23 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e01c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f000 fb04 	bl	800305c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2140      	movs	r1, #64	@ 0x40
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fc13 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e00c      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f000 fc0a 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002a72:	e003      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      break;
 8002a78:	e000      	b.n	8002a7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d831      	bhi.n	8002b10 <HAL_TIM_ReadCapturedValue+0x78>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ae9 	.word	0x08002ae9
 8002ab8:	08002b11 	.word	0x08002b11
 8002abc:	08002b11 	.word	0x08002b11
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002af3 	.word	0x08002af3
 8002ac8:	08002b11 	.word	0x08002b11
 8002acc:	08002b11 	.word	0x08002b11
 8002ad0:	08002b11 	.word	0x08002b11
 8002ad4:	08002afd 	.word	0x08002afd
 8002ad8:	08002b11 	.word	0x08002b11
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002b11 	.word	0x08002b11
 8002ae4:	08002b07 	.word	0x08002b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aee:	60fb      	str	r3, [r7, #12]

      break;
 8002af0:	e00f      	b.n	8002b12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af8:	60fb      	str	r3, [r7, #12]

      break;
 8002afa:	e00a      	b.n	8002b12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b02:	60fb      	str	r3, [r7, #12]

      break;
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	60fb      	str	r3, [r7, #12]

      break;
 8002b0e:	e000      	b.n	8002b12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002b10:	bf00      	nop
  }

  return tmpreg;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	@ (8002c5c <TIM_Base_SetConfig+0x100>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a36      	ldr	r2, [pc, #216]	@ (8002c60 <TIM_Base_SetConfig+0x104>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <TIM_Base_SetConfig+0x108>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01b      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d017      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a28      	ldr	r2, [pc, #160]	@ (8002c5c <TIM_Base_SetConfig+0x100>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	@ (8002c60 <TIM_Base_SetConfig+0x104>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	@ (8002c64 <TIM_Base_SetConfig+0x108>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <TIM_Base_SetConfig+0x10c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <TIM_Base_SetConfig+0x110>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <TIM_Base_SetConfig+0x114>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d103      	bne.n	8002c2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f023 0201 	bic.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 0302 	bic.w	r3, r3, #2
 8002cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <TIM_OC1_SetConfig+0xc8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10c      	bne.n	8002cea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0308 	bic.w	r3, r3, #8
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a13      	ldr	r2, [pc, #76]	@ (8002d3c <TIM_OC1_SetConfig+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40010000 	.word	0x40010000

08002d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0210 	bic.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0320 	bic.w	r3, r3, #32
 8002d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e14 <TIM_OC2_SetConfig+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10d      	bne.n	8002dbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	@ (8002e14 <TIM_OC2_SetConfig+0xd4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d113      	bne.n	8002dec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000

08002e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee8 <TIM_OC3_SetConfig+0xd0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10d      	bne.n	8002e92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <TIM_OC3_SetConfig+0xd0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d113      	bne.n	8002ec2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	621a      	str	r2, [r3, #32]
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40010000 	.word	0x40010000

08002eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	031b      	lsls	r3, r3, #12
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <TIM_OC4_SetConfig+0x9c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d109      	bne.n	8002f60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000

08002f8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0201 	bic.w	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a24      	ldr	r2, [pc, #144]	@ (8003048 <TIM_TI1_SetConfig+0xbc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x56>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc0:	d00f      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x56>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a21      	ldr	r2, [pc, #132]	@ (800304c <TIM_TI1_SetConfig+0xc0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x56>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	@ (8003050 <TIM_TI1_SetConfig+0xc4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d007      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x56>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003054 <TIM_TI1_SetConfig+0xc8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_TI1_SetConfig+0x56>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <TIM_TI1_SetConfig+0xcc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <TIM_TI1_SetConfig+0x5a>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <TIM_TI1_SetConfig+0x5c>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e003      	b.n	8003006 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800300c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	b2db      	uxtb	r3, r3
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 030a 	and.w	r3, r3, #10
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	40000c00 	.word	0x40000c00
 8003058:	40014000 	.word	0x40014000

0800305c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0201 	bic.w	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 030a 	bic.w	r3, r3, #10
 8003098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f023 0210 	bic.w	r2, r3, #16
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	031b      	lsls	r3, r3, #12
 80030fe:	b29b      	uxth	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800310c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f023 0210 	bic.w	r2, r3, #16
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800315e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	031b      	lsls	r3, r3, #12
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003170:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	621a      	str	r2, [r3, #32]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	621a      	str	r2, [r3, #32]
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003238:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800324a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	031b      	lsls	r3, r3, #12
 8003250:	b29b      	uxth	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800325e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	031b      	lsls	r3, r3, #12
 8003264:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f043 0307 	orr.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	021a      	lsls	r2, r3, #8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	431a      	orrs	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	609a      	str	r2, [r3, #8]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2201      	movs	r2, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1a      	ldr	r2, [r3, #32]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800335c:	2302      	movs	r3, #2
 800335e:	e050      	b.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d018      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d013      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	@ (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a15      	ldr	r2, [pc, #84]	@ (800341c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a13      	ldr	r2, [pc, #76]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10c      	bne.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40014000 	.word	0x40014000

08003424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <findslot>:
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <findslot+0x2c>)
 800344e:	b510      	push	{r4, lr}
 8003450:	4604      	mov	r4, r0
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	b118      	cbz	r0, 800345e <findslot+0x12>
 8003456:	6a03      	ldr	r3, [r0, #32]
 8003458:	b90b      	cbnz	r3, 800345e <findslot+0x12>
 800345a:	f000 fb9b 	bl	8003b94 <__sinit>
 800345e:	2c13      	cmp	r4, #19
 8003460:	d807      	bhi.n	8003472 <findslot+0x26>
 8003462:	4806      	ldr	r0, [pc, #24]	@ (800347c <findslot+0x30>)
 8003464:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003468:	3201      	adds	r2, #1
 800346a:	d002      	beq.n	8003472 <findslot+0x26>
 800346c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003470:	bd10      	pop	{r4, pc}
 8003472:	2000      	movs	r0, #0
 8003474:	e7fc      	b.n	8003470 <findslot+0x24>
 8003476:	bf00      	nop
 8003478:	20000020 	.word	0x20000020
 800347c:	20000148 	.word	0x20000148

08003480 <error>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	4604      	mov	r4, r0
 8003484:	f000 fd80 	bl	8003f88 <__errno>
 8003488:	2613      	movs	r6, #19
 800348a:	4605      	mov	r5, r0
 800348c:	2700      	movs	r7, #0
 800348e:	4630      	mov	r0, r6
 8003490:	4639      	mov	r1, r7
 8003492:	beab      	bkpt	0x00ab
 8003494:	4606      	mov	r6, r0
 8003496:	602e      	str	r6, [r5, #0]
 8003498:	4620      	mov	r0, r4
 800349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800349c <checkerror>:
 800349c:	1c43      	adds	r3, r0, #1
 800349e:	d101      	bne.n	80034a4 <checkerror+0x8>
 80034a0:	f7ff bfee 	b.w	8003480 <error>
 80034a4:	4770      	bx	lr

080034a6 <_swiread>:
 80034a6:	b530      	push	{r4, r5, lr}
 80034a8:	b085      	sub	sp, #20
 80034aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80034ae:	9203      	str	r2, [sp, #12]
 80034b0:	2406      	movs	r4, #6
 80034b2:	ad01      	add	r5, sp, #4
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	beab      	bkpt	0x00ab
 80034ba:	4604      	mov	r4, r0
 80034bc:	4620      	mov	r0, r4
 80034be:	f7ff ffed 	bl	800349c <checkerror>
 80034c2:	b005      	add	sp, #20
 80034c4:	bd30      	pop	{r4, r5, pc}

080034c6 <_read>:
 80034c6:	b570      	push	{r4, r5, r6, lr}
 80034c8:	460e      	mov	r6, r1
 80034ca:	4614      	mov	r4, r2
 80034cc:	f7ff ffbe 	bl	800344c <findslot>
 80034d0:	4605      	mov	r5, r0
 80034d2:	b930      	cbnz	r0, 80034e2 <_read+0x1c>
 80034d4:	f000 fd58 	bl	8003f88 <__errno>
 80034d8:	2309      	movs	r3, #9
 80034da:	6003      	str	r3, [r0, #0]
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	4622      	mov	r2, r4
 80034e6:	4631      	mov	r1, r6
 80034e8:	f7ff ffdd 	bl	80034a6 <_swiread>
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d0f5      	beq.n	80034dc <_read+0x16>
 80034f0:	686b      	ldr	r3, [r5, #4]
 80034f2:	1a20      	subs	r0, r4, r0
 80034f4:	4403      	add	r3, r0
 80034f6:	606b      	str	r3, [r5, #4]
 80034f8:	e7f2      	b.n	80034e0 <_read+0x1a>

080034fa <_swilseek>:
 80034fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034fc:	460c      	mov	r4, r1
 80034fe:	4616      	mov	r6, r2
 8003500:	f7ff ffa4 	bl	800344c <findslot>
 8003504:	4605      	mov	r5, r0
 8003506:	b940      	cbnz	r0, 800351a <_swilseek+0x20>
 8003508:	f000 fd3e 	bl	8003f88 <__errno>
 800350c:	2309      	movs	r3, #9
 800350e:	6003      	str	r3, [r0, #0]
 8003510:	f04f 34ff 	mov.w	r4, #4294967295
 8003514:	4620      	mov	r0, r4
 8003516:	b003      	add	sp, #12
 8003518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351a:	2e02      	cmp	r6, #2
 800351c:	d903      	bls.n	8003526 <_swilseek+0x2c>
 800351e:	f000 fd33 	bl	8003f88 <__errno>
 8003522:	2316      	movs	r3, #22
 8003524:	e7f3      	b.n	800350e <_swilseek+0x14>
 8003526:	2e01      	cmp	r6, #1
 8003528:	d112      	bne.n	8003550 <_swilseek+0x56>
 800352a:	6843      	ldr	r3, [r0, #4]
 800352c:	18e4      	adds	r4, r4, r3
 800352e:	d4f6      	bmi.n	800351e <_swilseek+0x24>
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	260a      	movs	r6, #10
 8003534:	e9cd 3400 	strd	r3, r4, [sp]
 8003538:	466f      	mov	r7, sp
 800353a:	4630      	mov	r0, r6
 800353c:	4639      	mov	r1, r7
 800353e:	beab      	bkpt	0x00ab
 8003540:	4606      	mov	r6, r0
 8003542:	4630      	mov	r0, r6
 8003544:	f7ff ffaa 	bl	800349c <checkerror>
 8003548:	2800      	cmp	r0, #0
 800354a:	dbe1      	blt.n	8003510 <_swilseek+0x16>
 800354c:	606c      	str	r4, [r5, #4]
 800354e:	e7e1      	b.n	8003514 <_swilseek+0x1a>
 8003550:	2e02      	cmp	r6, #2
 8003552:	6803      	ldr	r3, [r0, #0]
 8003554:	d1ec      	bne.n	8003530 <_swilseek+0x36>
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	260c      	movs	r6, #12
 800355a:	466f      	mov	r7, sp
 800355c:	4630      	mov	r0, r6
 800355e:	4639      	mov	r1, r7
 8003560:	beab      	bkpt	0x00ab
 8003562:	4606      	mov	r6, r0
 8003564:	4630      	mov	r0, r6
 8003566:	f7ff ff99 	bl	800349c <checkerror>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d0d0      	beq.n	8003510 <_swilseek+0x16>
 800356e:	4404      	add	r4, r0
 8003570:	e7de      	b.n	8003530 <_swilseek+0x36>

08003572 <_lseek>:
 8003572:	f7ff bfc2 	b.w	80034fa <_swilseek>

08003576 <_swiwrite>:
 8003576:	b530      	push	{r4, r5, lr}
 8003578:	b085      	sub	sp, #20
 800357a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800357e:	9203      	str	r2, [sp, #12]
 8003580:	2405      	movs	r4, #5
 8003582:	ad01      	add	r5, sp, #4
 8003584:	4620      	mov	r0, r4
 8003586:	4629      	mov	r1, r5
 8003588:	beab      	bkpt	0x00ab
 800358a:	4604      	mov	r4, r0
 800358c:	4620      	mov	r0, r4
 800358e:	f7ff ff85 	bl	800349c <checkerror>
 8003592:	b005      	add	sp, #20
 8003594:	bd30      	pop	{r4, r5, pc}

08003596 <_write>:
 8003596:	b570      	push	{r4, r5, r6, lr}
 8003598:	460e      	mov	r6, r1
 800359a:	4615      	mov	r5, r2
 800359c:	f7ff ff56 	bl	800344c <findslot>
 80035a0:	4604      	mov	r4, r0
 80035a2:	b930      	cbnz	r0, 80035b2 <_write+0x1c>
 80035a4:	f000 fcf0 	bl	8003f88 <__errno>
 80035a8:	2309      	movs	r3, #9
 80035aa:	6003      	str	r3, [r0, #0]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295
 80035b0:	bd70      	pop	{r4, r5, r6, pc}
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	462a      	mov	r2, r5
 80035b6:	4631      	mov	r1, r6
 80035b8:	f7ff ffdd 	bl	8003576 <_swiwrite>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	dbf5      	blt.n	80035ac <_write+0x16>
 80035c0:	6862      	ldr	r2, [r4, #4]
 80035c2:	1ae8      	subs	r0, r5, r3
 80035c4:	4402      	add	r2, r0
 80035c6:	42ab      	cmp	r3, r5
 80035c8:	6062      	str	r2, [r4, #4]
 80035ca:	d1f1      	bne.n	80035b0 <_write+0x1a>
 80035cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7ff bf55 	b.w	8003480 <error>

080035d6 <_swiclose>:
 80035d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035d8:	2402      	movs	r4, #2
 80035da:	9001      	str	r0, [sp, #4]
 80035dc:	ad01      	add	r5, sp, #4
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	beab      	bkpt	0x00ab
 80035e4:	4604      	mov	r4, r0
 80035e6:	4620      	mov	r0, r4
 80035e8:	f7ff ff58 	bl	800349c <checkerror>
 80035ec:	b003      	add	sp, #12
 80035ee:	bd30      	pop	{r4, r5, pc}

080035f0 <_close>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	f7ff ff2a 	bl	800344c <findslot>
 80035f8:	4604      	mov	r4, r0
 80035fa:	b930      	cbnz	r0, 800360a <_close+0x1a>
 80035fc:	f000 fcc4 	bl	8003f88 <__errno>
 8003600:	2309      	movs	r3, #9
 8003602:	6003      	str	r3, [r0, #0]
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	bd38      	pop	{r3, r4, r5, pc}
 800360a:	3d01      	subs	r5, #1
 800360c:	2d01      	cmp	r5, #1
 800360e:	d809      	bhi.n	8003624 <_close+0x34>
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <_close+0x40>)
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d104      	bne.n	8003624 <_close+0x34>
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	6023      	str	r3, [r4, #0]
 8003620:	2000      	movs	r0, #0
 8003622:	e7f1      	b.n	8003608 <_close+0x18>
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	f7ff ffd6 	bl	80035d6 <_swiclose>
 800362a:	2800      	cmp	r0, #0
 800362c:	d0f5      	beq.n	800361a <_close+0x2a>
 800362e:	e7eb      	b.n	8003608 <_close+0x18>
 8003630:	20000148 	.word	0x20000148

08003634 <_getpid>:
 8003634:	2001      	movs	r0, #1
 8003636:	4770      	bx	lr

08003638 <_swistat>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	460c      	mov	r4, r1
 800363c:	f7ff ff06 	bl	800344c <findslot>
 8003640:	4605      	mov	r5, r0
 8003642:	b930      	cbnz	r0, 8003652 <_swistat+0x1a>
 8003644:	f000 fca0 	bl	8003f88 <__errno>
 8003648:	2309      	movs	r3, #9
 800364a:	6003      	str	r3, [r0, #0]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	6863      	ldr	r3, [r4, #4]
 8003654:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003658:	6063      	str	r3, [r4, #4]
 800365a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800365e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003660:	260c      	movs	r6, #12
 8003662:	4630      	mov	r0, r6
 8003664:	4629      	mov	r1, r5
 8003666:	beab      	bkpt	0x00ab
 8003668:	4605      	mov	r5, r0
 800366a:	4628      	mov	r0, r5
 800366c:	f7ff ff16 	bl	800349c <checkerror>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d0eb      	beq.n	800364c <_swistat+0x14>
 8003674:	6120      	str	r0, [r4, #16]
 8003676:	2000      	movs	r0, #0
 8003678:	e7ea      	b.n	8003650 <_swistat+0x18>

0800367a <_fstat>:
 800367a:	460b      	mov	r3, r1
 800367c:	b510      	push	{r4, lr}
 800367e:	2100      	movs	r1, #0
 8003680:	4604      	mov	r4, r0
 8003682:	2258      	movs	r2, #88	@ 0x58
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fc03 	bl	8003e90 <memset>
 800368a:	4601      	mov	r1, r0
 800368c:	4620      	mov	r0, r4
 800368e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003692:	f7ff bfd1 	b.w	8003638 <_swistat>

08003696 <_stat>:
 8003696:	b538      	push	{r3, r4, r5, lr}
 8003698:	460d      	mov	r5, r1
 800369a:	4604      	mov	r4, r0
 800369c:	2258      	movs	r2, #88	@ 0x58
 800369e:	2100      	movs	r1, #0
 80036a0:	4628      	mov	r0, r5
 80036a2:	f000 fbf5 	bl	8003e90 <memset>
 80036a6:	4620      	mov	r0, r4
 80036a8:	2100      	movs	r1, #0
 80036aa:	f000 f811 	bl	80036d0 <_swiopen>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	4604      	mov	r4, r0
 80036b2:	d00b      	beq.n	80036cc <_stat+0x36>
 80036b4:	686b      	ldr	r3, [r5, #4]
 80036b6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80036ba:	606b      	str	r3, [r5, #4]
 80036bc:	4629      	mov	r1, r5
 80036be:	f7ff ffbb 	bl	8003638 <_swistat>
 80036c2:	4605      	mov	r5, r0
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7ff ff93 	bl	80035f0 <_close>
 80036ca:	462c      	mov	r4, r5
 80036cc:	4620      	mov	r0, r4
 80036ce:	bd38      	pop	{r3, r4, r5, pc}

080036d0 <_swiopen>:
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	4f29      	ldr	r7, [pc, #164]	@ (800377c <_swiopen+0xac>)
 80036d6:	b096      	sub	sp, #88	@ 0x58
 80036d8:	4682      	mov	sl, r0
 80036da:	460e      	mov	r6, r1
 80036dc:	2400      	movs	r4, #0
 80036de:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80036e2:	3301      	adds	r3, #1
 80036e4:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80036e8:	d00c      	beq.n	8003704 <_swiopen+0x34>
 80036ea:	3401      	adds	r4, #1
 80036ec:	2c14      	cmp	r4, #20
 80036ee:	d1f6      	bne.n	80036de <_swiopen+0xe>
 80036f0:	f000 fc4a 	bl	8003f88 <__errno>
 80036f4:	2318      	movs	r3, #24
 80036f6:	6003      	str	r3, [r0, #0]
 80036f8:	f04f 34ff 	mov.w	r4, #4294967295
 80036fc:	4620      	mov	r0, r4
 80036fe:	b016      	add	sp, #88	@ 0x58
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003708:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800370c:	46e9      	mov	r9, sp
 800370e:	d109      	bne.n	8003724 <_swiopen+0x54>
 8003710:	4649      	mov	r1, r9
 8003712:	4650      	mov	r0, sl
 8003714:	f7ff ffbf 	bl	8003696 <_stat>
 8003718:	3001      	adds	r0, #1
 800371a:	d003      	beq.n	8003724 <_swiopen+0x54>
 800371c:	f000 fc34 	bl	8003f88 <__errno>
 8003720:	2311      	movs	r3, #17
 8003722:	e7e8      	b.n	80036f6 <_swiopen+0x26>
 8003724:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003728:	f240 6301 	movw	r3, #1537	@ 0x601
 800372c:	07b2      	lsls	r2, r6, #30
 800372e:	bf48      	it	mi
 8003730:	f045 0502 	orrmi.w	r5, r5, #2
 8003734:	421e      	tst	r6, r3
 8003736:	bf18      	it	ne
 8003738:	f045 0504 	orrne.w	r5, r5, #4
 800373c:	0733      	lsls	r3, r6, #28
 800373e:	bf48      	it	mi
 8003740:	f025 0504 	bicmi.w	r5, r5, #4
 8003744:	4650      	mov	r0, sl
 8003746:	bf48      	it	mi
 8003748:	f045 0508 	orrmi.w	r5, r5, #8
 800374c:	f8cd a000 	str.w	sl, [sp]
 8003750:	f7fc fd46 	bl	80001e0 <strlen>
 8003754:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003758:	2501      	movs	r5, #1
 800375a:	4628      	mov	r0, r5
 800375c:	4649      	mov	r1, r9
 800375e:	beab      	bkpt	0x00ab
 8003760:	4605      	mov	r5, r0
 8003762:	2d00      	cmp	r5, #0
 8003764:	db05      	blt.n	8003772 <_swiopen+0xa2>
 8003766:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800376a:	4447      	add	r7, r8
 800376c:	2300      	movs	r3, #0
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	e7c4      	b.n	80036fc <_swiopen+0x2c>
 8003772:	4628      	mov	r0, r5
 8003774:	f7ff fe84 	bl	8003480 <error>
 8003778:	4604      	mov	r4, r0
 800377a:	e7bf      	b.n	80036fc <_swiopen+0x2c>
 800377c:	20000148 	.word	0x20000148

08003780 <_get_semihosting_exts>:
 8003780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003784:	4606      	mov	r6, r0
 8003786:	460f      	mov	r7, r1
 8003788:	4829      	ldr	r0, [pc, #164]	@ (8003830 <_get_semihosting_exts+0xb0>)
 800378a:	2100      	movs	r1, #0
 800378c:	4615      	mov	r5, r2
 800378e:	f7ff ff9f 	bl	80036d0 <_swiopen>
 8003792:	462a      	mov	r2, r5
 8003794:	4604      	mov	r4, r0
 8003796:	2100      	movs	r1, #0
 8003798:	4630      	mov	r0, r6
 800379a:	f000 fb79 	bl	8003e90 <memset>
 800379e:	1c63      	adds	r3, r4, #1
 80037a0:	d014      	beq.n	80037cc <_get_semihosting_exts+0x4c>
 80037a2:	4620      	mov	r0, r4
 80037a4:	f7ff fe52 	bl	800344c <findslot>
 80037a8:	f04f 080c 	mov.w	r8, #12
 80037ac:	4681      	mov	r9, r0
 80037ae:	4640      	mov	r0, r8
 80037b0:	4649      	mov	r1, r9
 80037b2:	beab      	bkpt	0x00ab
 80037b4:	4680      	mov	r8, r0
 80037b6:	4640      	mov	r0, r8
 80037b8:	f7ff fe70 	bl	800349c <checkerror>
 80037bc:	2803      	cmp	r0, #3
 80037be:	dd02      	ble.n	80037c6 <_get_semihosting_exts+0x46>
 80037c0:	1ec3      	subs	r3, r0, #3
 80037c2:	42ab      	cmp	r3, r5
 80037c4:	dc07      	bgt.n	80037d6 <_get_semihosting_exts+0x56>
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff ff12 	bl	80035f0 <_close>
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	b003      	add	sp, #12
 80037d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037d6:	2204      	movs	r2, #4
 80037d8:	eb0d 0102 	add.w	r1, sp, r2
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff fe72 	bl	80034c6 <_read>
 80037e2:	2803      	cmp	r0, #3
 80037e4:	ddef      	ble.n	80037c6 <_get_semihosting_exts+0x46>
 80037e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037ea:	2b53      	cmp	r3, #83	@ 0x53
 80037ec:	d1eb      	bne.n	80037c6 <_get_semihosting_exts+0x46>
 80037ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80037f2:	2b48      	cmp	r3, #72	@ 0x48
 80037f4:	d1e7      	bne.n	80037c6 <_get_semihosting_exts+0x46>
 80037f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80037fa:	2b46      	cmp	r3, #70	@ 0x46
 80037fc:	d1e3      	bne.n	80037c6 <_get_semihosting_exts+0x46>
 80037fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003802:	2b42      	cmp	r3, #66	@ 0x42
 8003804:	d1df      	bne.n	80037c6 <_get_semihosting_exts+0x46>
 8003806:	2201      	movs	r2, #1
 8003808:	4639      	mov	r1, r7
 800380a:	4620      	mov	r0, r4
 800380c:	f7ff fe75 	bl	80034fa <_swilseek>
 8003810:	2800      	cmp	r0, #0
 8003812:	dbd8      	blt.n	80037c6 <_get_semihosting_exts+0x46>
 8003814:	462a      	mov	r2, r5
 8003816:	4631      	mov	r1, r6
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff fe54 	bl	80034c6 <_read>
 800381e:	4605      	mov	r5, r0
 8003820:	4620      	mov	r0, r4
 8003822:	f7ff fee5 	bl	80035f0 <_close>
 8003826:	4628      	mov	r0, r5
 8003828:	f7ff fe38 	bl	800349c <checkerror>
 800382c:	e7d0      	b.n	80037d0 <_get_semihosting_exts+0x50>
 800382e:	bf00      	nop
 8003830:	08004bf8 	.word	0x08004bf8

08003834 <initialise_semihosting_exts>:
 8003834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003836:	4d0a      	ldr	r5, [pc, #40]	@ (8003860 <initialise_semihosting_exts+0x2c>)
 8003838:	4c0a      	ldr	r4, [pc, #40]	@ (8003864 <initialise_semihosting_exts+0x30>)
 800383a:	2100      	movs	r1, #0
 800383c:	2201      	movs	r2, #1
 800383e:	a801      	add	r0, sp, #4
 8003840:	6029      	str	r1, [r5, #0]
 8003842:	6022      	str	r2, [r4, #0]
 8003844:	f7ff ff9c 	bl	8003780 <_get_semihosting_exts>
 8003848:	2800      	cmp	r0, #0
 800384a:	dd07      	ble.n	800385c <initialise_semihosting_exts+0x28>
 800384c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003850:	f003 0201 	and.w	r2, r3, #1
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	602a      	str	r2, [r5, #0]
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	b003      	add	sp, #12
 800385e:	bd30      	pop	{r4, r5, pc}
 8003860:	20000010 	.word	0x20000010
 8003864:	2000000c 	.word	0x2000000c

08003868 <_has_ext_stdout_stderr>:
 8003868:	b510      	push	{r4, lr}
 800386a:	4c04      	ldr	r4, [pc, #16]	@ (800387c <_has_ext_stdout_stderr+0x14>)
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	da01      	bge.n	8003876 <_has_ext_stdout_stderr+0xe>
 8003872:	f7ff ffdf 	bl	8003834 <initialise_semihosting_exts>
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	bd10      	pop	{r4, pc}
 800387a:	bf00      	nop
 800387c:	2000000c 	.word	0x2000000c

08003880 <initialise_monitor_handles>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	b085      	sub	sp, #20
 8003886:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003938 <initialise_monitor_handles+0xb8>
 800388a:	f8cd 9004 	str.w	r9, [sp, #4]
 800388e:	2303      	movs	r3, #3
 8003890:	2400      	movs	r4, #0
 8003892:	9303      	str	r3, [sp, #12]
 8003894:	af01      	add	r7, sp, #4
 8003896:	9402      	str	r4, [sp, #8]
 8003898:	2501      	movs	r5, #1
 800389a:	4628      	mov	r0, r5
 800389c:	4639      	mov	r1, r7
 800389e:	beab      	bkpt	0x00ab
 80038a0:	4605      	mov	r5, r0
 80038a2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800393c <initialise_monitor_handles+0xbc>
 80038a6:	4623      	mov	r3, r4
 80038a8:	4c20      	ldr	r4, [pc, #128]	@ (800392c <initialise_monitor_handles+0xac>)
 80038aa:	f8c8 5000 	str.w	r5, [r8]
 80038ae:	f04f 32ff 	mov.w	r2, #4294967295
 80038b2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80038b6:	3301      	adds	r3, #1
 80038b8:	2b14      	cmp	r3, #20
 80038ba:	d1fa      	bne.n	80038b2 <initialise_monitor_handles+0x32>
 80038bc:	f7ff ffd4 	bl	8003868 <_has_ext_stdout_stderr>
 80038c0:	4d1b      	ldr	r5, [pc, #108]	@ (8003930 <initialise_monitor_handles+0xb0>)
 80038c2:	b1d0      	cbz	r0, 80038fa <initialise_monitor_handles+0x7a>
 80038c4:	f04f 0a03 	mov.w	sl, #3
 80038c8:	2304      	movs	r3, #4
 80038ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80038ce:	2601      	movs	r6, #1
 80038d0:	f8cd a00c 	str.w	sl, [sp, #12]
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	4630      	mov	r0, r6
 80038d8:	4639      	mov	r1, r7
 80038da:	beab      	bkpt	0x00ab
 80038dc:	4683      	mov	fp, r0
 80038de:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <initialise_monitor_handles+0xb4>)
 80038e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80038e4:	f8c3 b000 	str.w	fp, [r3]
 80038e8:	2308      	movs	r3, #8
 80038ea:	f8cd a00c 	str.w	sl, [sp, #12]
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	4630      	mov	r0, r6
 80038f2:	4639      	mov	r1, r7
 80038f4:	beab      	bkpt	0x00ab
 80038f6:	4606      	mov	r6, r0
 80038f8:	602e      	str	r6, [r5, #0]
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	bf02      	ittt	eq
 8003900:	4b0c      	ldreq	r3, [pc, #48]	@ (8003934 <initialise_monitor_handles+0xb4>)
 8003902:	681b      	ldreq	r3, [r3, #0]
 8003904:	602b      	streq	r3, [r5, #0]
 8003906:	2600      	movs	r6, #0
 8003908:	f8d8 3000 	ldr.w	r3, [r8]
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	6066      	str	r6, [r4, #4]
 8003910:	f7ff ffaa 	bl	8003868 <_has_ext_stdout_stderr>
 8003914:	b130      	cbz	r0, 8003924 <initialise_monitor_handles+0xa4>
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <initialise_monitor_handles+0xb4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800391e:	682b      	ldr	r3, [r5, #0]
 8003920:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003924:	b005      	add	sp, #20
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392a:	bf00      	nop
 800392c:	20000148 	.word	0x20000148
 8003930:	2000013c 	.word	0x2000013c
 8003934:	20000140 	.word	0x20000140
 8003938:	08004c0e 	.word	0x08004c0e
 800393c:	20000144 	.word	0x20000144

08003940 <_gettimeofday>:
 8003940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003942:	460d      	mov	r5, r1
 8003944:	4604      	mov	r4, r0
 8003946:	b148      	cbz	r0, 800395c <_gettimeofday+0x1c>
 8003948:	2700      	movs	r7, #0
 800394a:	2611      	movs	r6, #17
 800394c:	4630      	mov	r0, r6
 800394e:	4639      	mov	r1, r7
 8003950:	beab      	bkpt	0x00ab
 8003952:	4606      	mov	r6, r0
 8003954:	17f3      	asrs	r3, r6, #31
 8003956:	e9c4 6300 	strd	r6, r3, [r4]
 800395a:	60a7      	str	r7, [r4, #8]
 800395c:	b115      	cbz	r5, 8003964 <_gettimeofday+0x24>
 800395e:	2300      	movs	r3, #0
 8003960:	e9c5 3300 	strd	r3, r3, [r5]
 8003964:	2000      	movs	r0, #0
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003968 <_isatty>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	f7ff fd6f 	bl	800344c <findslot>
 800396e:	2409      	movs	r4, #9
 8003970:	4605      	mov	r5, r0
 8003972:	b920      	cbnz	r0, 800397e <_isatty+0x16>
 8003974:	f000 fb08 	bl	8003f88 <__errno>
 8003978:	6004      	str	r4, [r0, #0]
 800397a:	2000      	movs	r0, #0
 800397c:	bd70      	pop	{r4, r5, r6, pc}
 800397e:	4620      	mov	r0, r4
 8003980:	4629      	mov	r1, r5
 8003982:	beab      	bkpt	0x00ab
 8003984:	4604      	mov	r4, r0
 8003986:	2c01      	cmp	r4, #1
 8003988:	4620      	mov	r0, r4
 800398a:	d0f7      	beq.n	800397c <_isatty+0x14>
 800398c:	f000 fafc 	bl	8003f88 <__errno>
 8003990:	2513      	movs	r5, #19
 8003992:	4604      	mov	r4, r0
 8003994:	2600      	movs	r6, #0
 8003996:	4628      	mov	r0, r5
 8003998:	4631      	mov	r1, r6
 800399a:	beab      	bkpt	0x00ab
 800399c:	4605      	mov	r5, r0
 800399e:	6025      	str	r5, [r4, #0]
 80039a0:	e7eb      	b.n	800397a <_isatty+0x12>
	...

080039a4 <srand>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <srand+0x44>)
 80039a8:	681d      	ldr	r5, [r3, #0]
 80039aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80039ac:	4604      	mov	r4, r0
 80039ae:	b9b3      	cbnz	r3, 80039de <srand+0x3a>
 80039b0:	2018      	movs	r0, #24
 80039b2:	f000 fb7f 	bl	80040b4 <malloc>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6328      	str	r0, [r5, #48]	@ 0x30
 80039ba:	b920      	cbnz	r0, 80039c6 <srand+0x22>
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <srand+0x48>)
 80039be:	480c      	ldr	r0, [pc, #48]	@ (80039f0 <srand+0x4c>)
 80039c0:	2146      	movs	r1, #70	@ 0x46
 80039c2:	f000 fb0f 	bl	8003fe4 <__assert_func>
 80039c6:	490b      	ldr	r1, [pc, #44]	@ (80039f4 <srand+0x50>)
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <srand+0x54>)
 80039ca:	e9c0 1300 	strd	r1, r3, [r0]
 80039ce:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <srand+0x58>)
 80039d0:	6083      	str	r3, [r0, #8]
 80039d2:	230b      	movs	r3, #11
 80039d4:	8183      	strh	r3, [r0, #12]
 80039d6:	2100      	movs	r1, #0
 80039d8:	2001      	movs	r0, #1
 80039da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80039de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80039e0:	2200      	movs	r2, #0
 80039e2:	611c      	str	r4, [r3, #16]
 80039e4:	615a      	str	r2, [r3, #20]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	20000020 	.word	0x20000020
 80039ec:	08004c12 	.word	0x08004c12
 80039f0:	08004c29 	.word	0x08004c29
 80039f4:	abcd330e 	.word	0xabcd330e
 80039f8:	e66d1234 	.word	0xe66d1234
 80039fc:	0005deec 	.word	0x0005deec

08003a00 <rand>:
 8003a00:	4b16      	ldr	r3, [pc, #88]	@ (8003a5c <rand+0x5c>)
 8003a02:	b510      	push	{r4, lr}
 8003a04:	681c      	ldr	r4, [r3, #0]
 8003a06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a08:	b9b3      	cbnz	r3, 8003a38 <rand+0x38>
 8003a0a:	2018      	movs	r0, #24
 8003a0c:	f000 fb52 	bl	80040b4 <malloc>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6320      	str	r0, [r4, #48]	@ 0x30
 8003a14:	b920      	cbnz	r0, 8003a20 <rand+0x20>
 8003a16:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <rand+0x60>)
 8003a18:	4812      	ldr	r0, [pc, #72]	@ (8003a64 <rand+0x64>)
 8003a1a:	2152      	movs	r1, #82	@ 0x52
 8003a1c:	f000 fae2 	bl	8003fe4 <__assert_func>
 8003a20:	4911      	ldr	r1, [pc, #68]	@ (8003a68 <rand+0x68>)
 8003a22:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <rand+0x6c>)
 8003a24:	e9c0 1300 	strd	r1, r3, [r0]
 8003a28:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <rand+0x70>)
 8003a2a:	6083      	str	r3, [r0, #8]
 8003a2c:	230b      	movs	r3, #11
 8003a2e:	8183      	strh	r3, [r0, #12]
 8003a30:	2100      	movs	r1, #0
 8003a32:	2001      	movs	r0, #1
 8003a34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003a38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003a3a:	480e      	ldr	r0, [pc, #56]	@ (8003a74 <rand+0x74>)
 8003a3c:	690b      	ldr	r3, [r1, #16]
 8003a3e:	694c      	ldr	r4, [r1, #20]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	@ (8003a78 <rand+0x78>)
 8003a42:	4358      	muls	r0, r3
 8003a44:	fb02 0004 	mla	r0, r2, r4, r0
 8003a48:	fba3 3202 	umull	r3, r2, r3, r2
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	eb40 0002 	adc.w	r0, r0, r2
 8003a52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003a56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a5a:	bd10      	pop	{r4, pc}
 8003a5c:	20000020 	.word	0x20000020
 8003a60:	08004c12 	.word	0x08004c12
 8003a64:	08004c29 	.word	0x08004c29
 8003a68:	abcd330e 	.word	0xabcd330e
 8003a6c:	e66d1234 	.word	0xe66d1234
 8003a70:	0005deec 	.word	0x0005deec
 8003a74:	5851f42d 	.word	0x5851f42d
 8003a78:	4c957f2d 	.word	0x4c957f2d

08003a7c <std>:
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	4604      	mov	r4, r0
 8003a82:	e9c0 3300 	strd	r3, r3, [r0]
 8003a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a8a:	6083      	str	r3, [r0, #8]
 8003a8c:	8181      	strh	r1, [r0, #12]
 8003a8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a90:	81c2      	strh	r2, [r0, #14]
 8003a92:	6183      	str	r3, [r0, #24]
 8003a94:	4619      	mov	r1, r3
 8003a96:	2208      	movs	r2, #8
 8003a98:	305c      	adds	r0, #92	@ 0x5c
 8003a9a:	f000 f9f9 	bl	8003e90 <memset>
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <std+0x58>)
 8003aa0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <std+0x5c>)
 8003aa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <std+0x60>)
 8003aa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <std+0x64>)
 8003aac:	6323      	str	r3, [r4, #48]	@ 0x30
 8003aae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <std+0x68>)
 8003ab0:	6224      	str	r4, [r4, #32]
 8003ab2:	429c      	cmp	r4, r3
 8003ab4:	d006      	beq.n	8003ac4 <std+0x48>
 8003ab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003aba:	4294      	cmp	r4, r2
 8003abc:	d002      	beq.n	8003ac4 <std+0x48>
 8003abe:	33d0      	adds	r3, #208	@ 0xd0
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	d105      	bne.n	8003ad0 <std+0x54>
 8003ac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003acc:	f000 ba86 	b.w	8003fdc <__retarget_lock_init_recursive>
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003ce1 	.word	0x08003ce1
 8003ad8:	08003d03 	.word	0x08003d03
 8003adc:	08003d3b 	.word	0x08003d3b
 8003ae0:	08003d5f 	.word	0x08003d5f
 8003ae4:	200001e8 	.word	0x200001e8

08003ae8 <stdio_exit_handler>:
 8003ae8:	4a02      	ldr	r2, [pc, #8]	@ (8003af4 <stdio_exit_handler+0xc>)
 8003aea:	4903      	ldr	r1, [pc, #12]	@ (8003af8 <stdio_exit_handler+0x10>)
 8003aec:	4803      	ldr	r0, [pc, #12]	@ (8003afc <stdio_exit_handler+0x14>)
 8003aee:	f000 b869 	b.w	8003bc4 <_fwalk_sglue>
 8003af2:	bf00      	nop
 8003af4:	20000014 	.word	0x20000014
 8003af8:	080048c9 	.word	0x080048c9
 8003afc:	20000024 	.word	0x20000024

08003b00 <cleanup_stdio>:
 8003b00:	6841      	ldr	r1, [r0, #4]
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <cleanup_stdio+0x34>)
 8003b04:	4299      	cmp	r1, r3
 8003b06:	b510      	push	{r4, lr}
 8003b08:	4604      	mov	r4, r0
 8003b0a:	d001      	beq.n	8003b10 <cleanup_stdio+0x10>
 8003b0c:	f000 fedc 	bl	80048c8 <_fflush_r>
 8003b10:	68a1      	ldr	r1, [r4, #8]
 8003b12:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <cleanup_stdio+0x38>)
 8003b14:	4299      	cmp	r1, r3
 8003b16:	d002      	beq.n	8003b1e <cleanup_stdio+0x1e>
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f000 fed5 	bl	80048c8 <_fflush_r>
 8003b1e:	68e1      	ldr	r1, [r4, #12]
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <cleanup_stdio+0x3c>)
 8003b22:	4299      	cmp	r1, r3
 8003b24:	d004      	beq.n	8003b30 <cleanup_stdio+0x30>
 8003b26:	4620      	mov	r0, r4
 8003b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b2c:	f000 becc 	b.w	80048c8 <_fflush_r>
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	bf00      	nop
 8003b34:	200001e8 	.word	0x200001e8
 8003b38:	20000250 	.word	0x20000250
 8003b3c:	200002b8 	.word	0x200002b8

08003b40 <global_stdio_init.part.0>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <global_stdio_init.part.0+0x30>)
 8003b44:	4c0b      	ldr	r4, [pc, #44]	@ (8003b74 <global_stdio_init.part.0+0x34>)
 8003b46:	4a0c      	ldr	r2, [pc, #48]	@ (8003b78 <global_stdio_init.part.0+0x38>)
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2104      	movs	r1, #4
 8003b50:	f7ff ff94 	bl	8003a7c <std>
 8003b54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2109      	movs	r1, #9
 8003b5c:	f7ff ff8e 	bl	8003a7c <std>
 8003b60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b64:	2202      	movs	r2, #2
 8003b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b6a:	2112      	movs	r1, #18
 8003b6c:	f7ff bf86 	b.w	8003a7c <std>
 8003b70:	20000320 	.word	0x20000320
 8003b74:	200001e8 	.word	0x200001e8
 8003b78:	08003ae9 	.word	0x08003ae9

08003b7c <__sfp_lock_acquire>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	@ (8003b84 <__sfp_lock_acquire+0x8>)
 8003b7e:	f000 ba2e 	b.w	8003fde <__retarget_lock_acquire_recursive>
 8003b82:	bf00      	nop
 8003b84:	20000329 	.word	0x20000329

08003b88 <__sfp_lock_release>:
 8003b88:	4801      	ldr	r0, [pc, #4]	@ (8003b90 <__sfp_lock_release+0x8>)
 8003b8a:	f000 ba29 	b.w	8003fe0 <__retarget_lock_release_recursive>
 8003b8e:	bf00      	nop
 8003b90:	20000329 	.word	0x20000329

08003b94 <__sinit>:
 8003b94:	b510      	push	{r4, lr}
 8003b96:	4604      	mov	r4, r0
 8003b98:	f7ff fff0 	bl	8003b7c <__sfp_lock_acquire>
 8003b9c:	6a23      	ldr	r3, [r4, #32]
 8003b9e:	b11b      	cbz	r3, 8003ba8 <__sinit+0x14>
 8003ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba4:	f7ff bff0 	b.w	8003b88 <__sfp_lock_release>
 8003ba8:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <__sinit+0x28>)
 8003baa:	6223      	str	r3, [r4, #32]
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <__sinit+0x2c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f5      	bne.n	8003ba0 <__sinit+0xc>
 8003bb4:	f7ff ffc4 	bl	8003b40 <global_stdio_init.part.0>
 8003bb8:	e7f2      	b.n	8003ba0 <__sinit+0xc>
 8003bba:	bf00      	nop
 8003bbc:	08003b01 	.word	0x08003b01
 8003bc0:	20000320 	.word	0x20000320

08003bc4 <_fwalk_sglue>:
 8003bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc8:	4607      	mov	r7, r0
 8003bca:	4688      	mov	r8, r1
 8003bcc:	4614      	mov	r4, r2
 8003bce:	2600      	movs	r6, #0
 8003bd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bd4:	f1b9 0901 	subs.w	r9, r9, #1
 8003bd8:	d505      	bpl.n	8003be6 <_fwalk_sglue+0x22>
 8003bda:	6824      	ldr	r4, [r4, #0]
 8003bdc:	2c00      	cmp	r4, #0
 8003bde:	d1f7      	bne.n	8003bd0 <_fwalk_sglue+0xc>
 8003be0:	4630      	mov	r0, r6
 8003be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003be6:	89ab      	ldrh	r3, [r5, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d907      	bls.n	8003bfc <_fwalk_sglue+0x38>
 8003bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	d003      	beq.n	8003bfc <_fwalk_sglue+0x38>
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	47c0      	blx	r8
 8003bfa:	4306      	orrs	r6, r0
 8003bfc:	3568      	adds	r5, #104	@ 0x68
 8003bfe:	e7e9      	b.n	8003bd4 <_fwalk_sglue+0x10>

08003c00 <iprintf>:
 8003c00:	b40f      	push	{r0, r1, r2, r3}
 8003c02:	b507      	push	{r0, r1, r2, lr}
 8003c04:	4906      	ldr	r1, [pc, #24]	@ (8003c20 <iprintf+0x20>)
 8003c06:	ab04      	add	r3, sp, #16
 8003c08:	6808      	ldr	r0, [r1, #0]
 8003c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0e:	6881      	ldr	r1, [r0, #8]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	f000 fb2f 	bl	8004274 <_vfiprintf_r>
 8003c16:	b003      	add	sp, #12
 8003c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c1c:	b004      	add	sp, #16
 8003c1e:	4770      	bx	lr
 8003c20:	20000020 	.word	0x20000020

08003c24 <_puts_r>:
 8003c24:	6a03      	ldr	r3, [r0, #32]
 8003c26:	b570      	push	{r4, r5, r6, lr}
 8003c28:	6884      	ldr	r4, [r0, #8]
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	460e      	mov	r6, r1
 8003c2e:	b90b      	cbnz	r3, 8003c34 <_puts_r+0x10>
 8003c30:	f7ff ffb0 	bl	8003b94 <__sinit>
 8003c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c36:	07db      	lsls	r3, r3, #31
 8003c38:	d405      	bmi.n	8003c46 <_puts_r+0x22>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	0598      	lsls	r0, r3, #22
 8003c3e:	d402      	bmi.n	8003c46 <_puts_r+0x22>
 8003c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c42:	f000 f9cc 	bl	8003fde <__retarget_lock_acquire_recursive>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	0719      	lsls	r1, r3, #28
 8003c4a:	d502      	bpl.n	8003c52 <_puts_r+0x2e>
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d135      	bne.n	8003cbe <_puts_r+0x9a>
 8003c52:	4621      	mov	r1, r4
 8003c54:	4628      	mov	r0, r5
 8003c56:	f000 f8c5 	bl	8003de4 <__swsetup_r>
 8003c5a:	b380      	cbz	r0, 8003cbe <_puts_r+0x9a>
 8003c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c62:	07da      	lsls	r2, r3, #31
 8003c64:	d405      	bmi.n	8003c72 <_puts_r+0x4e>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	059b      	lsls	r3, r3, #22
 8003c6a:	d402      	bmi.n	8003c72 <_puts_r+0x4e>
 8003c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c6e:	f000 f9b7 	bl	8003fe0 <__retarget_lock_release_recursive>
 8003c72:	4628      	mov	r0, r5
 8003c74:	bd70      	pop	{r4, r5, r6, pc}
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da04      	bge.n	8003c84 <_puts_r+0x60>
 8003c7a:	69a2      	ldr	r2, [r4, #24]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	dc17      	bgt.n	8003cb0 <_puts_r+0x8c>
 8003c80:	290a      	cmp	r1, #10
 8003c82:	d015      	beq.n	8003cb0 <_puts_r+0x8c>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	6022      	str	r2, [r4, #0]
 8003c8a:	7019      	strb	r1, [r3, #0]
 8003c8c:	68a3      	ldr	r3, [r4, #8]
 8003c8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c92:	3b01      	subs	r3, #1
 8003c94:	60a3      	str	r3, [r4, #8]
 8003c96:	2900      	cmp	r1, #0
 8003c98:	d1ed      	bne.n	8003c76 <_puts_r+0x52>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da11      	bge.n	8003cc2 <_puts_r+0x9e>
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	210a      	movs	r1, #10
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 f85f 	bl	8003d66 <__swbuf_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d0d7      	beq.n	8003c5c <_puts_r+0x38>
 8003cac:	250a      	movs	r5, #10
 8003cae:	e7d7      	b.n	8003c60 <_puts_r+0x3c>
 8003cb0:	4622      	mov	r2, r4
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f000 f857 	bl	8003d66 <__swbuf_r>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d1e7      	bne.n	8003c8c <_puts_r+0x68>
 8003cbc:	e7ce      	b.n	8003c5c <_puts_r+0x38>
 8003cbe:	3e01      	subs	r6, #1
 8003cc0:	e7e4      	b.n	8003c8c <_puts_r+0x68>
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	6022      	str	r2, [r4, #0]
 8003cc8:	220a      	movs	r2, #10
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e7ee      	b.n	8003cac <_puts_r+0x88>
	...

08003cd0 <puts>:
 8003cd0:	4b02      	ldr	r3, [pc, #8]	@ (8003cdc <puts+0xc>)
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f7ff bfa5 	b.w	8003c24 <_puts_r>
 8003cda:	bf00      	nop
 8003cdc:	20000020 	.word	0x20000020

08003ce0 <__sread>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	f000 f92a 	bl	8003f40 <_read_r>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	bfab      	itete	ge
 8003cf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8003cf4:	181b      	addge	r3, r3, r0
 8003cf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cfa:	bfac      	ite	ge
 8003cfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cfe:	81a3      	strhlt	r3, [r4, #12]
 8003d00:	bd10      	pop	{r4, pc}

08003d02 <__swrite>:
 8003d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d06:	461f      	mov	r7, r3
 8003d08:	898b      	ldrh	r3, [r1, #12]
 8003d0a:	05db      	lsls	r3, r3, #23
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	4616      	mov	r6, r2
 8003d12:	d505      	bpl.n	8003d20 <__swrite+0x1e>
 8003d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f000 f8fe 	bl	8003f1c <_lseek_r>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	463b      	mov	r3, r7
 8003d30:	4628      	mov	r0, r5
 8003d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d36:	f000 b915 	b.w	8003f64 <_write_r>

08003d3a <__sseek>:
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d42:	f000 f8eb 	bl	8003f1c <_lseek_r>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	bf15      	itete	ne
 8003d4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d56:	81a3      	strheq	r3, [r4, #12]
 8003d58:	bf18      	it	ne
 8003d5a:	81a3      	strhne	r3, [r4, #12]
 8003d5c:	bd10      	pop	{r4, pc}

08003d5e <__sclose>:
 8003d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d62:	f000 b8b9 	b.w	8003ed8 <_close_r>

08003d66 <__swbuf_r>:
 8003d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d68:	460e      	mov	r6, r1
 8003d6a:	4614      	mov	r4, r2
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b118      	cbz	r0, 8003d78 <__swbuf_r+0x12>
 8003d70:	6a03      	ldr	r3, [r0, #32]
 8003d72:	b90b      	cbnz	r3, 8003d78 <__swbuf_r+0x12>
 8003d74:	f7ff ff0e 	bl	8003b94 <__sinit>
 8003d78:	69a3      	ldr	r3, [r4, #24]
 8003d7a:	60a3      	str	r3, [r4, #8]
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	071a      	lsls	r2, r3, #28
 8003d80:	d501      	bpl.n	8003d86 <__swbuf_r+0x20>
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	b943      	cbnz	r3, 8003d98 <__swbuf_r+0x32>
 8003d86:	4621      	mov	r1, r4
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 f82b 	bl	8003de4 <__swsetup_r>
 8003d8e:	b118      	cbz	r0, 8003d98 <__swbuf_r+0x32>
 8003d90:	f04f 37ff 	mov.w	r7, #4294967295
 8003d94:	4638      	mov	r0, r7
 8003d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	6922      	ldr	r2, [r4, #16]
 8003d9c:	1a98      	subs	r0, r3, r2
 8003d9e:	6963      	ldr	r3, [r4, #20]
 8003da0:	b2f6      	uxtb	r6, r6
 8003da2:	4283      	cmp	r3, r0
 8003da4:	4637      	mov	r7, r6
 8003da6:	dc05      	bgt.n	8003db4 <__swbuf_r+0x4e>
 8003da8:	4621      	mov	r1, r4
 8003daa:	4628      	mov	r0, r5
 8003dac:	f000 fd8c 	bl	80048c8 <_fflush_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d1ed      	bne.n	8003d90 <__swbuf_r+0x2a>
 8003db4:	68a3      	ldr	r3, [r4, #8]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	60a3      	str	r3, [r4, #8]
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	6022      	str	r2, [r4, #0]
 8003dc0:	701e      	strb	r6, [r3, #0]
 8003dc2:	6962      	ldr	r2, [r4, #20]
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d004      	beq.n	8003dd4 <__swbuf_r+0x6e>
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	07db      	lsls	r3, r3, #31
 8003dce:	d5e1      	bpl.n	8003d94 <__swbuf_r+0x2e>
 8003dd0:	2e0a      	cmp	r6, #10
 8003dd2:	d1df      	bne.n	8003d94 <__swbuf_r+0x2e>
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 fd76 	bl	80048c8 <_fflush_r>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d0d9      	beq.n	8003d94 <__swbuf_r+0x2e>
 8003de0:	e7d6      	b.n	8003d90 <__swbuf_r+0x2a>
	...

08003de4 <__swsetup_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4b29      	ldr	r3, [pc, #164]	@ (8003e8c <__swsetup_r+0xa8>)
 8003de8:	4605      	mov	r5, r0
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	460c      	mov	r4, r1
 8003dee:	b118      	cbz	r0, 8003df8 <__swsetup_r+0x14>
 8003df0:	6a03      	ldr	r3, [r0, #32]
 8003df2:	b90b      	cbnz	r3, 8003df8 <__swsetup_r+0x14>
 8003df4:	f7ff fece 	bl	8003b94 <__sinit>
 8003df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfc:	0719      	lsls	r1, r3, #28
 8003dfe:	d422      	bmi.n	8003e46 <__swsetup_r+0x62>
 8003e00:	06da      	lsls	r2, r3, #27
 8003e02:	d407      	bmi.n	8003e14 <__swsetup_r+0x30>
 8003e04:	2209      	movs	r2, #9
 8003e06:	602a      	str	r2, [r5, #0]
 8003e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e0c:	81a3      	strh	r3, [r4, #12]
 8003e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e12:	e033      	b.n	8003e7c <__swsetup_r+0x98>
 8003e14:	0758      	lsls	r0, r3, #29
 8003e16:	d512      	bpl.n	8003e3e <__swsetup_r+0x5a>
 8003e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e1a:	b141      	cbz	r1, 8003e2e <__swsetup_r+0x4a>
 8003e1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e20:	4299      	cmp	r1, r3
 8003e22:	d002      	beq.n	8003e2a <__swsetup_r+0x46>
 8003e24:	4628      	mov	r0, r5
 8003e26:	f000 f8fb 	bl	8004020 <_free_r>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	2300      	movs	r3, #0
 8003e38:	6063      	str	r3, [r4, #4]
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	b94b      	cbnz	r3, 8003e5e <__swsetup_r+0x7a>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e54:	d003      	beq.n	8003e5e <__swsetup_r+0x7a>
 8003e56:	4621      	mov	r1, r4
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 fd95 	bl	8004988 <__smakebuf_r>
 8003e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e62:	f013 0201 	ands.w	r2, r3, #1
 8003e66:	d00a      	beq.n	8003e7e <__swsetup_r+0x9a>
 8003e68:	2200      	movs	r2, #0
 8003e6a:	60a2      	str	r2, [r4, #8]
 8003e6c:	6962      	ldr	r2, [r4, #20]
 8003e6e:	4252      	negs	r2, r2
 8003e70:	61a2      	str	r2, [r4, #24]
 8003e72:	6922      	ldr	r2, [r4, #16]
 8003e74:	b942      	cbnz	r2, 8003e88 <__swsetup_r+0xa4>
 8003e76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e7a:	d1c5      	bne.n	8003e08 <__swsetup_r+0x24>
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
 8003e7e:	0799      	lsls	r1, r3, #30
 8003e80:	bf58      	it	pl
 8003e82:	6962      	ldrpl	r2, [r4, #20]
 8003e84:	60a2      	str	r2, [r4, #8]
 8003e86:	e7f4      	b.n	8003e72 <__swsetup_r+0x8e>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e7f7      	b.n	8003e7c <__swsetup_r+0x98>
 8003e8c:	20000020 	.word	0x20000020

08003e90 <memset>:
 8003e90:	4402      	add	r2, r0
 8003e92:	4603      	mov	r3, r0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d100      	bne.n	8003e9a <memset+0xa>
 8003e98:	4770      	bx	lr
 8003e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9e:	e7f9      	b.n	8003e94 <memset+0x4>

08003ea0 <time>:
 8003ea0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <time+0x34>)
 8003ea4:	f04f 36ff 	mov.w	r6, #4294967295
 8003ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8003eac:	4669      	mov	r1, sp
 8003eae:	4604      	mov	r4, r0
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	e9cd 6700 	strd	r6, r7, [sp]
 8003eb8:	f000 f81e 	bl	8003ef8 <_gettimeofday_r>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	bfb8      	it	lt
 8003ec0:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ec8:	b10c      	cbz	r4, 8003ece <time+0x2e>
 8003eca:	e9c4 0100 	strd	r0, r1, [r4]
 8003ece:	b004      	add	sp, #16
 8003ed0:	bdd0      	pop	{r4, r6, r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000020 	.word	0x20000020

08003ed8 <_close_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d06      	ldr	r5, [pc, #24]	@ (8003ef4 <_close_r+0x1c>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7ff fb84 	bl	80035f0 <_close>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_close_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_close_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	20000324 	.word	0x20000324

08003ef8 <_gettimeofday_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d07      	ldr	r5, [pc, #28]	@ (8003f18 <_gettimeofday_r+0x20>)
 8003efc:	2300      	movs	r3, #0
 8003efe:	4604      	mov	r4, r0
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	602b      	str	r3, [r5, #0]
 8003f06:	f7ff fd1b 	bl	8003940 <_gettimeofday>
 8003f0a:	1c43      	adds	r3, r0, #1
 8003f0c:	d102      	bne.n	8003f14 <_gettimeofday_r+0x1c>
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	b103      	cbz	r3, 8003f14 <_gettimeofday_r+0x1c>
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	bd38      	pop	{r3, r4, r5, pc}
 8003f16:	bf00      	nop
 8003f18:	20000324 	.word	0x20000324

08003f1c <_lseek_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d07      	ldr	r5, [pc, #28]	@ (8003f3c <_lseek_r+0x20>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	4608      	mov	r0, r1
 8003f24:	4611      	mov	r1, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7ff fb21 	bl	8003572 <_lseek>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_lseek_r+0x1e>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_lseek_r+0x1e>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20000324 	.word	0x20000324

08003f40 <_read_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d07      	ldr	r5, [pc, #28]	@ (8003f60 <_read_r+0x20>)
 8003f44:	4604      	mov	r4, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	602a      	str	r2, [r5, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7ff fab9 	bl	80034c6 <_read>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_read_r+0x1e>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_read_r+0x1e>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000324 	.word	0x20000324

08003f64 <_write_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d07      	ldr	r5, [pc, #28]	@ (8003f84 <_write_r+0x20>)
 8003f68:	4604      	mov	r4, r0
 8003f6a:	4608      	mov	r0, r1
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7ff fb0f 	bl	8003596 <_write>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_write_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_write_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	20000324 	.word	0x20000324

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	@ (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000020 	.word	0x20000020

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4d0d      	ldr	r5, [pc, #52]	@ (8003fcc <__libc_init_array+0x38>)
 8003f98:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd0 <__libc_init_array+0x3c>)
 8003f9a:	1b64      	subs	r4, r4, r5
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	42a6      	cmp	r6, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	4d0b      	ldr	r5, [pc, #44]	@ (8003fd4 <__libc_init_array+0x40>)
 8003fa6:	4c0c      	ldr	r4, [pc, #48]	@ (8003fd8 <__libc_init_array+0x44>)
 8003fa8:	f000 fdb2 	bl	8004b10 <_init>
 8003fac:	1b64      	subs	r4, r4, r5
 8003fae:	10a4      	asrs	r4, r4, #2
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	42a6      	cmp	r6, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbc:	4798      	blx	r3
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc6:	4798      	blx	r3
 8003fc8:	3601      	adds	r6, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08004cf8 	.word	0x08004cf8
 8003fd0:	08004cf8 	.word	0x08004cf8
 8003fd4:	08004cf8 	.word	0x08004cf8
 8003fd8:	08004cfc 	.word	0x08004cfc

08003fdc <__retarget_lock_init_recursive>:
 8003fdc:	4770      	bx	lr

08003fde <__retarget_lock_acquire_recursive>:
 8003fde:	4770      	bx	lr

08003fe0 <__retarget_lock_release_recursive>:
 8003fe0:	4770      	bx	lr
	...

08003fe4 <__assert_func>:
 8003fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <__assert_func+0x2c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4605      	mov	r5, r0
 8003ff0:	68d8      	ldr	r0, [r3, #12]
 8003ff2:	b954      	cbnz	r4, 800400a <__assert_func+0x26>
 8003ff4:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <__assert_func+0x30>)
 8003ff6:	461c      	mov	r4, r3
 8003ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ffc:	9100      	str	r1, [sp, #0]
 8003ffe:	462b      	mov	r3, r5
 8004000:	4905      	ldr	r1, [pc, #20]	@ (8004018 <__assert_func+0x34>)
 8004002:	f000 fc89 	bl	8004918 <fiprintf>
 8004006:	f000 fd2d 	bl	8004a64 <abort>
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <__assert_func+0x38>)
 800400c:	e7f4      	b.n	8003ff8 <__assert_func+0x14>
 800400e:	bf00      	nop
 8004010:	20000020 	.word	0x20000020
 8004014:	08004cbc 	.word	0x08004cbc
 8004018:	08004c8e 	.word	0x08004c8e
 800401c:	08004c81 	.word	0x08004c81

08004020 <_free_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4605      	mov	r5, r0
 8004024:	2900      	cmp	r1, #0
 8004026:	d041      	beq.n	80040ac <_free_r+0x8c>
 8004028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402c:	1f0c      	subs	r4, r1, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfb8      	it	lt
 8004032:	18e4      	addlt	r4, r4, r3
 8004034:	f000 f8e8 	bl	8004208 <__malloc_lock>
 8004038:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <_free_r+0x90>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	b933      	cbnz	r3, 800404c <_free_r+0x2c>
 800403e:	6063      	str	r3, [r4, #4]
 8004040:	6014      	str	r4, [r2, #0]
 8004042:	4628      	mov	r0, r5
 8004044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004048:	f000 b8e4 	b.w	8004214 <__malloc_unlock>
 800404c:	42a3      	cmp	r3, r4
 800404e:	d908      	bls.n	8004062 <_free_r+0x42>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	1821      	adds	r1, r4, r0
 8004054:	428b      	cmp	r3, r1
 8004056:	bf01      	itttt	eq
 8004058:	6819      	ldreq	r1, [r3, #0]
 800405a:	685b      	ldreq	r3, [r3, #4]
 800405c:	1809      	addeq	r1, r1, r0
 800405e:	6021      	streq	r1, [r4, #0]
 8004060:	e7ed      	b.n	800403e <_free_r+0x1e>
 8004062:	461a      	mov	r2, r3
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b10b      	cbz	r3, 800406c <_free_r+0x4c>
 8004068:	42a3      	cmp	r3, r4
 800406a:	d9fa      	bls.n	8004062 <_free_r+0x42>
 800406c:	6811      	ldr	r1, [r2, #0]
 800406e:	1850      	adds	r0, r2, r1
 8004070:	42a0      	cmp	r0, r4
 8004072:	d10b      	bne.n	800408c <_free_r+0x6c>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	4401      	add	r1, r0
 8004078:	1850      	adds	r0, r2, r1
 800407a:	4283      	cmp	r3, r0
 800407c:	6011      	str	r1, [r2, #0]
 800407e:	d1e0      	bne.n	8004042 <_free_r+0x22>
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	6053      	str	r3, [r2, #4]
 8004086:	4408      	add	r0, r1
 8004088:	6010      	str	r0, [r2, #0]
 800408a:	e7da      	b.n	8004042 <_free_r+0x22>
 800408c:	d902      	bls.n	8004094 <_free_r+0x74>
 800408e:	230c      	movs	r3, #12
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	e7d6      	b.n	8004042 <_free_r+0x22>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428b      	cmp	r3, r1
 800409a:	bf04      	itt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	6063      	str	r3, [r4, #4]
 80040a2:	bf04      	itt	eq
 80040a4:	1809      	addeq	r1, r1, r0
 80040a6:	6021      	streq	r1, [r4, #0]
 80040a8:	6054      	str	r4, [r2, #4]
 80040aa:	e7ca      	b.n	8004042 <_free_r+0x22>
 80040ac:	bd38      	pop	{r3, r4, r5, pc}
 80040ae:	bf00      	nop
 80040b0:	20000330 	.word	0x20000330

080040b4 <malloc>:
 80040b4:	4b02      	ldr	r3, [pc, #8]	@ (80040c0 <malloc+0xc>)
 80040b6:	4601      	mov	r1, r0
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	f000 b825 	b.w	8004108 <_malloc_r>
 80040be:	bf00      	nop
 80040c0:	20000020 	.word	0x20000020

080040c4 <sbrk_aligned>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004104 <sbrk_aligned+0x40>)
 80040c8:	460c      	mov	r4, r1
 80040ca:	6831      	ldr	r1, [r6, #0]
 80040cc:	4605      	mov	r5, r0
 80040ce:	b911      	cbnz	r1, 80040d6 <sbrk_aligned+0x12>
 80040d0:	f000 fcb8 	bl	8004a44 <_sbrk_r>
 80040d4:	6030      	str	r0, [r6, #0]
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 fcb3 	bl	8004a44 <_sbrk_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d103      	bne.n	80040ea <sbrk_aligned+0x26>
 80040e2:	f04f 34ff 	mov.w	r4, #4294967295
 80040e6:	4620      	mov	r0, r4
 80040e8:	bd70      	pop	{r4, r5, r6, pc}
 80040ea:	1cc4      	adds	r4, r0, #3
 80040ec:	f024 0403 	bic.w	r4, r4, #3
 80040f0:	42a0      	cmp	r0, r4
 80040f2:	d0f8      	beq.n	80040e6 <sbrk_aligned+0x22>
 80040f4:	1a21      	subs	r1, r4, r0
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 fca4 	bl	8004a44 <_sbrk_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d1f2      	bne.n	80040e6 <sbrk_aligned+0x22>
 8004100:	e7ef      	b.n	80040e2 <sbrk_aligned+0x1e>
 8004102:	bf00      	nop
 8004104:	2000032c 	.word	0x2000032c

08004108 <_malloc_r>:
 8004108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800410c:	1ccd      	adds	r5, r1, #3
 800410e:	f025 0503 	bic.w	r5, r5, #3
 8004112:	3508      	adds	r5, #8
 8004114:	2d0c      	cmp	r5, #12
 8004116:	bf38      	it	cc
 8004118:	250c      	movcc	r5, #12
 800411a:	2d00      	cmp	r5, #0
 800411c:	4606      	mov	r6, r0
 800411e:	db01      	blt.n	8004124 <_malloc_r+0x1c>
 8004120:	42a9      	cmp	r1, r5
 8004122:	d904      	bls.n	800412e <_malloc_r+0x26>
 8004124:	230c      	movs	r3, #12
 8004126:	6033      	str	r3, [r6, #0]
 8004128:	2000      	movs	r0, #0
 800412a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004204 <_malloc_r+0xfc>
 8004132:	f000 f869 	bl	8004208 <__malloc_lock>
 8004136:	f8d8 3000 	ldr.w	r3, [r8]
 800413a:	461c      	mov	r4, r3
 800413c:	bb44      	cbnz	r4, 8004190 <_malloc_r+0x88>
 800413e:	4629      	mov	r1, r5
 8004140:	4630      	mov	r0, r6
 8004142:	f7ff ffbf 	bl	80040c4 <sbrk_aligned>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	4604      	mov	r4, r0
 800414a:	d158      	bne.n	80041fe <_malloc_r+0xf6>
 800414c:	f8d8 4000 	ldr.w	r4, [r8]
 8004150:	4627      	mov	r7, r4
 8004152:	2f00      	cmp	r7, #0
 8004154:	d143      	bne.n	80041de <_malloc_r+0xd6>
 8004156:	2c00      	cmp	r4, #0
 8004158:	d04b      	beq.n	80041f2 <_malloc_r+0xea>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	4639      	mov	r1, r7
 800415e:	4630      	mov	r0, r6
 8004160:	eb04 0903 	add.w	r9, r4, r3
 8004164:	f000 fc6e 	bl	8004a44 <_sbrk_r>
 8004168:	4581      	cmp	r9, r0
 800416a:	d142      	bne.n	80041f2 <_malloc_r+0xea>
 800416c:	6821      	ldr	r1, [r4, #0]
 800416e:	1a6d      	subs	r5, r5, r1
 8004170:	4629      	mov	r1, r5
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff ffa6 	bl	80040c4 <sbrk_aligned>
 8004178:	3001      	adds	r0, #1
 800417a:	d03a      	beq.n	80041f2 <_malloc_r+0xea>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	442b      	add	r3, r5
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	f8d8 3000 	ldr.w	r3, [r8]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	bb62      	cbnz	r2, 80041e4 <_malloc_r+0xdc>
 800418a:	f8c8 7000 	str.w	r7, [r8]
 800418e:	e00f      	b.n	80041b0 <_malloc_r+0xa8>
 8004190:	6822      	ldr	r2, [r4, #0]
 8004192:	1b52      	subs	r2, r2, r5
 8004194:	d420      	bmi.n	80041d8 <_malloc_r+0xd0>
 8004196:	2a0b      	cmp	r2, #11
 8004198:	d917      	bls.n	80041ca <_malloc_r+0xc2>
 800419a:	1961      	adds	r1, r4, r5
 800419c:	42a3      	cmp	r3, r4
 800419e:	6025      	str	r5, [r4, #0]
 80041a0:	bf18      	it	ne
 80041a2:	6059      	strne	r1, [r3, #4]
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	bf08      	it	eq
 80041a8:	f8c8 1000 	streq.w	r1, [r8]
 80041ac:	5162      	str	r2, [r4, r5]
 80041ae:	604b      	str	r3, [r1, #4]
 80041b0:	4630      	mov	r0, r6
 80041b2:	f000 f82f 	bl	8004214 <__malloc_unlock>
 80041b6:	f104 000b 	add.w	r0, r4, #11
 80041ba:	1d23      	adds	r3, r4, #4
 80041bc:	f020 0007 	bic.w	r0, r0, #7
 80041c0:	1ac2      	subs	r2, r0, r3
 80041c2:	bf1c      	itt	ne
 80041c4:	1a1b      	subne	r3, r3, r0
 80041c6:	50a3      	strne	r3, [r4, r2]
 80041c8:	e7af      	b.n	800412a <_malloc_r+0x22>
 80041ca:	6862      	ldr	r2, [r4, #4]
 80041cc:	42a3      	cmp	r3, r4
 80041ce:	bf0c      	ite	eq
 80041d0:	f8c8 2000 	streq.w	r2, [r8]
 80041d4:	605a      	strne	r2, [r3, #4]
 80041d6:	e7eb      	b.n	80041b0 <_malloc_r+0xa8>
 80041d8:	4623      	mov	r3, r4
 80041da:	6864      	ldr	r4, [r4, #4]
 80041dc:	e7ae      	b.n	800413c <_malloc_r+0x34>
 80041de:	463c      	mov	r4, r7
 80041e0:	687f      	ldr	r7, [r7, #4]
 80041e2:	e7b6      	b.n	8004152 <_malloc_r+0x4a>
 80041e4:	461a      	mov	r2, r3
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d1fb      	bne.n	80041e4 <_malloc_r+0xdc>
 80041ec:	2300      	movs	r3, #0
 80041ee:	6053      	str	r3, [r2, #4]
 80041f0:	e7de      	b.n	80041b0 <_malloc_r+0xa8>
 80041f2:	230c      	movs	r3, #12
 80041f4:	6033      	str	r3, [r6, #0]
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 f80c 	bl	8004214 <__malloc_unlock>
 80041fc:	e794      	b.n	8004128 <_malloc_r+0x20>
 80041fe:	6005      	str	r5, [r0, #0]
 8004200:	e7d6      	b.n	80041b0 <_malloc_r+0xa8>
 8004202:	bf00      	nop
 8004204:	20000330 	.word	0x20000330

08004208 <__malloc_lock>:
 8004208:	4801      	ldr	r0, [pc, #4]	@ (8004210 <__malloc_lock+0x8>)
 800420a:	f7ff bee8 	b.w	8003fde <__retarget_lock_acquire_recursive>
 800420e:	bf00      	nop
 8004210:	20000328 	.word	0x20000328

08004214 <__malloc_unlock>:
 8004214:	4801      	ldr	r0, [pc, #4]	@ (800421c <__malloc_unlock+0x8>)
 8004216:	f7ff bee3 	b.w	8003fe0 <__retarget_lock_release_recursive>
 800421a:	bf00      	nop
 800421c:	20000328 	.word	0x20000328

08004220 <__sfputc_r>:
 8004220:	6893      	ldr	r3, [r2, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	b410      	push	{r4}
 8004228:	6093      	str	r3, [r2, #8]
 800422a:	da08      	bge.n	800423e <__sfputc_r+0x1e>
 800422c:	6994      	ldr	r4, [r2, #24]
 800422e:	42a3      	cmp	r3, r4
 8004230:	db01      	blt.n	8004236 <__sfputc_r+0x16>
 8004232:	290a      	cmp	r1, #10
 8004234:	d103      	bne.n	800423e <__sfputc_r+0x1e>
 8004236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800423a:	f7ff bd94 	b.w	8003d66 <__swbuf_r>
 800423e:	6813      	ldr	r3, [r2, #0]
 8004240:	1c58      	adds	r0, r3, #1
 8004242:	6010      	str	r0, [r2, #0]
 8004244:	7019      	strb	r1, [r3, #0]
 8004246:	4608      	mov	r0, r1
 8004248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800424c:	4770      	bx	lr

0800424e <__sfputs_r>:
 800424e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004250:	4606      	mov	r6, r0
 8004252:	460f      	mov	r7, r1
 8004254:	4614      	mov	r4, r2
 8004256:	18d5      	adds	r5, r2, r3
 8004258:	42ac      	cmp	r4, r5
 800425a:	d101      	bne.n	8004260 <__sfputs_r+0x12>
 800425c:	2000      	movs	r0, #0
 800425e:	e007      	b.n	8004270 <__sfputs_r+0x22>
 8004260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004264:	463a      	mov	r2, r7
 8004266:	4630      	mov	r0, r6
 8004268:	f7ff ffda 	bl	8004220 <__sfputc_r>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d1f3      	bne.n	8004258 <__sfputs_r+0xa>
 8004270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004274 <_vfiprintf_r>:
 8004274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004278:	460d      	mov	r5, r1
 800427a:	b09d      	sub	sp, #116	@ 0x74
 800427c:	4614      	mov	r4, r2
 800427e:	4698      	mov	r8, r3
 8004280:	4606      	mov	r6, r0
 8004282:	b118      	cbz	r0, 800428c <_vfiprintf_r+0x18>
 8004284:	6a03      	ldr	r3, [r0, #32]
 8004286:	b90b      	cbnz	r3, 800428c <_vfiprintf_r+0x18>
 8004288:	f7ff fc84 	bl	8003b94 <__sinit>
 800428c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800428e:	07d9      	lsls	r1, r3, #31
 8004290:	d405      	bmi.n	800429e <_vfiprintf_r+0x2a>
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	059a      	lsls	r2, r3, #22
 8004296:	d402      	bmi.n	800429e <_vfiprintf_r+0x2a>
 8004298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800429a:	f7ff fea0 	bl	8003fde <__retarget_lock_acquire_recursive>
 800429e:	89ab      	ldrh	r3, [r5, #12]
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	d501      	bpl.n	80042a8 <_vfiprintf_r+0x34>
 80042a4:	692b      	ldr	r3, [r5, #16]
 80042a6:	b99b      	cbnz	r3, 80042d0 <_vfiprintf_r+0x5c>
 80042a8:	4629      	mov	r1, r5
 80042aa:	4630      	mov	r0, r6
 80042ac:	f7ff fd9a 	bl	8003de4 <__swsetup_r>
 80042b0:	b170      	cbz	r0, 80042d0 <_vfiprintf_r+0x5c>
 80042b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042b4:	07dc      	lsls	r4, r3, #31
 80042b6:	d504      	bpl.n	80042c2 <_vfiprintf_r+0x4e>
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	b01d      	add	sp, #116	@ 0x74
 80042be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c2:	89ab      	ldrh	r3, [r5, #12]
 80042c4:	0598      	lsls	r0, r3, #22
 80042c6:	d4f7      	bmi.n	80042b8 <_vfiprintf_r+0x44>
 80042c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042ca:	f7ff fe89 	bl	8003fe0 <__retarget_lock_release_recursive>
 80042ce:	e7f3      	b.n	80042b8 <_vfiprintf_r+0x44>
 80042d0:	2300      	movs	r3, #0
 80042d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d4:	2320      	movs	r3, #32
 80042d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042da:	f8cd 800c 	str.w	r8, [sp, #12]
 80042de:	2330      	movs	r3, #48	@ 0x30
 80042e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004490 <_vfiprintf_r+0x21c>
 80042e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042e8:	f04f 0901 	mov.w	r9, #1
 80042ec:	4623      	mov	r3, r4
 80042ee:	469a      	mov	sl, r3
 80042f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f4:	b10a      	cbz	r2, 80042fa <_vfiprintf_r+0x86>
 80042f6:	2a25      	cmp	r2, #37	@ 0x25
 80042f8:	d1f9      	bne.n	80042ee <_vfiprintf_r+0x7a>
 80042fa:	ebba 0b04 	subs.w	fp, sl, r4
 80042fe:	d00b      	beq.n	8004318 <_vfiprintf_r+0xa4>
 8004300:	465b      	mov	r3, fp
 8004302:	4622      	mov	r2, r4
 8004304:	4629      	mov	r1, r5
 8004306:	4630      	mov	r0, r6
 8004308:	f7ff ffa1 	bl	800424e <__sfputs_r>
 800430c:	3001      	adds	r0, #1
 800430e:	f000 80a7 	beq.w	8004460 <_vfiprintf_r+0x1ec>
 8004312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004314:	445a      	add	r2, fp
 8004316:	9209      	str	r2, [sp, #36]	@ 0x24
 8004318:	f89a 3000 	ldrb.w	r3, [sl]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 809f 	beq.w	8004460 <_vfiprintf_r+0x1ec>
 8004322:	2300      	movs	r3, #0
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800432c:	f10a 0a01 	add.w	sl, sl, #1
 8004330:	9304      	str	r3, [sp, #16]
 8004332:	9307      	str	r3, [sp, #28]
 8004334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004338:	931a      	str	r3, [sp, #104]	@ 0x68
 800433a:	4654      	mov	r4, sl
 800433c:	2205      	movs	r2, #5
 800433e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004342:	4853      	ldr	r0, [pc, #332]	@ (8004490 <_vfiprintf_r+0x21c>)
 8004344:	f7fb ff54 	bl	80001f0 <memchr>
 8004348:	9a04      	ldr	r2, [sp, #16]
 800434a:	b9d8      	cbnz	r0, 8004384 <_vfiprintf_r+0x110>
 800434c:	06d1      	lsls	r1, r2, #27
 800434e:	bf44      	itt	mi
 8004350:	2320      	movmi	r3, #32
 8004352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004356:	0713      	lsls	r3, r2, #28
 8004358:	bf44      	itt	mi
 800435a:	232b      	movmi	r3, #43	@ 0x2b
 800435c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004360:	f89a 3000 	ldrb.w	r3, [sl]
 8004364:	2b2a      	cmp	r3, #42	@ 0x2a
 8004366:	d015      	beq.n	8004394 <_vfiprintf_r+0x120>
 8004368:	9a07      	ldr	r2, [sp, #28]
 800436a:	4654      	mov	r4, sl
 800436c:	2000      	movs	r0, #0
 800436e:	f04f 0c0a 	mov.w	ip, #10
 8004372:	4621      	mov	r1, r4
 8004374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004378:	3b30      	subs	r3, #48	@ 0x30
 800437a:	2b09      	cmp	r3, #9
 800437c:	d94b      	bls.n	8004416 <_vfiprintf_r+0x1a2>
 800437e:	b1b0      	cbz	r0, 80043ae <_vfiprintf_r+0x13a>
 8004380:	9207      	str	r2, [sp, #28]
 8004382:	e014      	b.n	80043ae <_vfiprintf_r+0x13a>
 8004384:	eba0 0308 	sub.w	r3, r0, r8
 8004388:	fa09 f303 	lsl.w	r3, r9, r3
 800438c:	4313      	orrs	r3, r2
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	46a2      	mov	sl, r4
 8004392:	e7d2      	b.n	800433a <_vfiprintf_r+0xc6>
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	1d19      	adds	r1, r3, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	9103      	str	r1, [sp, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	bfbb      	ittet	lt
 80043a0:	425b      	neglt	r3, r3
 80043a2:	f042 0202 	orrlt.w	r2, r2, #2
 80043a6:	9307      	strge	r3, [sp, #28]
 80043a8:	9307      	strlt	r3, [sp, #28]
 80043aa:	bfb8      	it	lt
 80043ac:	9204      	strlt	r2, [sp, #16]
 80043ae:	7823      	ldrb	r3, [r4, #0]
 80043b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80043b2:	d10a      	bne.n	80043ca <_vfiprintf_r+0x156>
 80043b4:	7863      	ldrb	r3, [r4, #1]
 80043b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b8:	d132      	bne.n	8004420 <_vfiprintf_r+0x1ac>
 80043ba:	9b03      	ldr	r3, [sp, #12]
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	9203      	str	r2, [sp, #12]
 80043c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043c6:	3402      	adds	r4, #2
 80043c8:	9305      	str	r3, [sp, #20]
 80043ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80044a0 <_vfiprintf_r+0x22c>
 80043ce:	7821      	ldrb	r1, [r4, #0]
 80043d0:	2203      	movs	r2, #3
 80043d2:	4650      	mov	r0, sl
 80043d4:	f7fb ff0c 	bl	80001f0 <memchr>
 80043d8:	b138      	cbz	r0, 80043ea <_vfiprintf_r+0x176>
 80043da:	9b04      	ldr	r3, [sp, #16]
 80043dc:	eba0 000a 	sub.w	r0, r0, sl
 80043e0:	2240      	movs	r2, #64	@ 0x40
 80043e2:	4082      	lsls	r2, r0
 80043e4:	4313      	orrs	r3, r2
 80043e6:	3401      	adds	r4, #1
 80043e8:	9304      	str	r3, [sp, #16]
 80043ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ee:	4829      	ldr	r0, [pc, #164]	@ (8004494 <_vfiprintf_r+0x220>)
 80043f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043f4:	2206      	movs	r2, #6
 80043f6:	f7fb fefb 	bl	80001f0 <memchr>
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d03f      	beq.n	800447e <_vfiprintf_r+0x20a>
 80043fe:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <_vfiprintf_r+0x224>)
 8004400:	bb1b      	cbnz	r3, 800444a <_vfiprintf_r+0x1d6>
 8004402:	9b03      	ldr	r3, [sp, #12]
 8004404:	3307      	adds	r3, #7
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	3308      	adds	r3, #8
 800440c:	9303      	str	r3, [sp, #12]
 800440e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004410:	443b      	add	r3, r7
 8004412:	9309      	str	r3, [sp, #36]	@ 0x24
 8004414:	e76a      	b.n	80042ec <_vfiprintf_r+0x78>
 8004416:	fb0c 3202 	mla	r2, ip, r2, r3
 800441a:	460c      	mov	r4, r1
 800441c:	2001      	movs	r0, #1
 800441e:	e7a8      	b.n	8004372 <_vfiprintf_r+0xfe>
 8004420:	2300      	movs	r3, #0
 8004422:	3401      	adds	r4, #1
 8004424:	9305      	str	r3, [sp, #20]
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 0c0a 	mov.w	ip, #10
 800442c:	4620      	mov	r0, r4
 800442e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004432:	3a30      	subs	r2, #48	@ 0x30
 8004434:	2a09      	cmp	r2, #9
 8004436:	d903      	bls.n	8004440 <_vfiprintf_r+0x1cc>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0c6      	beq.n	80043ca <_vfiprintf_r+0x156>
 800443c:	9105      	str	r1, [sp, #20]
 800443e:	e7c4      	b.n	80043ca <_vfiprintf_r+0x156>
 8004440:	fb0c 2101 	mla	r1, ip, r1, r2
 8004444:	4604      	mov	r4, r0
 8004446:	2301      	movs	r3, #1
 8004448:	e7f0      	b.n	800442c <_vfiprintf_r+0x1b8>
 800444a:	ab03      	add	r3, sp, #12
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	462a      	mov	r2, r5
 8004450:	4b12      	ldr	r3, [pc, #72]	@ (800449c <_vfiprintf_r+0x228>)
 8004452:	a904      	add	r1, sp, #16
 8004454:	4630      	mov	r0, r6
 8004456:	f3af 8000 	nop.w
 800445a:	4607      	mov	r7, r0
 800445c:	1c78      	adds	r0, r7, #1
 800445e:	d1d6      	bne.n	800440e <_vfiprintf_r+0x19a>
 8004460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004462:	07d9      	lsls	r1, r3, #31
 8004464:	d405      	bmi.n	8004472 <_vfiprintf_r+0x1fe>
 8004466:	89ab      	ldrh	r3, [r5, #12]
 8004468:	059a      	lsls	r2, r3, #22
 800446a:	d402      	bmi.n	8004472 <_vfiprintf_r+0x1fe>
 800446c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800446e:	f7ff fdb7 	bl	8003fe0 <__retarget_lock_release_recursive>
 8004472:	89ab      	ldrh	r3, [r5, #12]
 8004474:	065b      	lsls	r3, r3, #25
 8004476:	f53f af1f 	bmi.w	80042b8 <_vfiprintf_r+0x44>
 800447a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800447c:	e71e      	b.n	80042bc <_vfiprintf_r+0x48>
 800447e:	ab03      	add	r3, sp, #12
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	462a      	mov	r2, r5
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <_vfiprintf_r+0x228>)
 8004486:	a904      	add	r1, sp, #16
 8004488:	4630      	mov	r0, r6
 800448a:	f000 f879 	bl	8004580 <_printf_i>
 800448e:	e7e4      	b.n	800445a <_vfiprintf_r+0x1e6>
 8004490:	08004cbd 	.word	0x08004cbd
 8004494:	08004cc7 	.word	0x08004cc7
 8004498:	00000000 	.word	0x00000000
 800449c:	0800424f 	.word	0x0800424f
 80044a0:	08004cc3 	.word	0x08004cc3

080044a4 <_printf_common>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	4616      	mov	r6, r2
 80044aa:	4698      	mov	r8, r3
 80044ac:	688a      	ldr	r2, [r1, #8]
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	bfb8      	it	lt
 80044b8:	4613      	movlt	r3, r2
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044c0:	4607      	mov	r7, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	b10a      	cbz	r2, 80044ca <_printf_common+0x26>
 80044c6:	3301      	adds	r3, #1
 80044c8:	6033      	str	r3, [r6, #0]
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	0699      	lsls	r1, r3, #26
 80044ce:	bf42      	ittt	mi
 80044d0:	6833      	ldrmi	r3, [r6, #0]
 80044d2:	3302      	addmi	r3, #2
 80044d4:	6033      	strmi	r3, [r6, #0]
 80044d6:	6825      	ldr	r5, [r4, #0]
 80044d8:	f015 0506 	ands.w	r5, r5, #6
 80044dc:	d106      	bne.n	80044ec <_printf_common+0x48>
 80044de:	f104 0a19 	add.w	sl, r4, #25
 80044e2:	68e3      	ldr	r3, [r4, #12]
 80044e4:	6832      	ldr	r2, [r6, #0]
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	42ab      	cmp	r3, r5
 80044ea:	dc26      	bgt.n	800453a <_printf_common+0x96>
 80044ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044f0:	6822      	ldr	r2, [r4, #0]
 80044f2:	3b00      	subs	r3, #0
 80044f4:	bf18      	it	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d42b      	bmi.n	8004554 <_printf_common+0xb0>
 80044fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004500:	4641      	mov	r1, r8
 8004502:	4638      	mov	r0, r7
 8004504:	47c8      	blx	r9
 8004506:	3001      	adds	r0, #1
 8004508:	d01e      	beq.n	8004548 <_printf_common+0xa4>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	f003 0306 	and.w	r3, r3, #6
 8004512:	2b04      	cmp	r3, #4
 8004514:	bf02      	ittt	eq
 8004516:	68e5      	ldreq	r5, [r4, #12]
 8004518:	6833      	ldreq	r3, [r6, #0]
 800451a:	1aed      	subeq	r5, r5, r3
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	bf0c      	ite	eq
 8004520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004524:	2500      	movne	r5, #0
 8004526:	4293      	cmp	r3, r2
 8004528:	bfc4      	itt	gt
 800452a:	1a9b      	subgt	r3, r3, r2
 800452c:	18ed      	addgt	r5, r5, r3
 800452e:	2600      	movs	r6, #0
 8004530:	341a      	adds	r4, #26
 8004532:	42b5      	cmp	r5, r6
 8004534:	d11a      	bne.n	800456c <_printf_common+0xc8>
 8004536:	2000      	movs	r0, #0
 8004538:	e008      	b.n	800454c <_printf_common+0xa8>
 800453a:	2301      	movs	r3, #1
 800453c:	4652      	mov	r2, sl
 800453e:	4641      	mov	r1, r8
 8004540:	4638      	mov	r0, r7
 8004542:	47c8      	blx	r9
 8004544:	3001      	adds	r0, #1
 8004546:	d103      	bne.n	8004550 <_printf_common+0xac>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004550:	3501      	adds	r5, #1
 8004552:	e7c6      	b.n	80044e2 <_printf_common+0x3e>
 8004554:	18e1      	adds	r1, r4, r3
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	2030      	movs	r0, #48	@ 0x30
 800455a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800455e:	4422      	add	r2, r4
 8004560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004568:	3302      	adds	r3, #2
 800456a:	e7c7      	b.n	80044fc <_printf_common+0x58>
 800456c:	2301      	movs	r3, #1
 800456e:	4622      	mov	r2, r4
 8004570:	4641      	mov	r1, r8
 8004572:	4638      	mov	r0, r7
 8004574:	47c8      	blx	r9
 8004576:	3001      	adds	r0, #1
 8004578:	d0e6      	beq.n	8004548 <_printf_common+0xa4>
 800457a:	3601      	adds	r6, #1
 800457c:	e7d9      	b.n	8004532 <_printf_common+0x8e>
	...

08004580 <_printf_i>:
 8004580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	7e0f      	ldrb	r7, [r1, #24]
 8004586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004588:	2f78      	cmp	r7, #120	@ 0x78
 800458a:	4691      	mov	r9, r2
 800458c:	4680      	mov	r8, r0
 800458e:	460c      	mov	r4, r1
 8004590:	469a      	mov	sl, r3
 8004592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004596:	d807      	bhi.n	80045a8 <_printf_i+0x28>
 8004598:	2f62      	cmp	r7, #98	@ 0x62
 800459a:	d80a      	bhi.n	80045b2 <_printf_i+0x32>
 800459c:	2f00      	cmp	r7, #0
 800459e:	f000 80d2 	beq.w	8004746 <_printf_i+0x1c6>
 80045a2:	2f58      	cmp	r7, #88	@ 0x58
 80045a4:	f000 80b9 	beq.w	800471a <_printf_i+0x19a>
 80045a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045b0:	e03a      	b.n	8004628 <_printf_i+0xa8>
 80045b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045b6:	2b15      	cmp	r3, #21
 80045b8:	d8f6      	bhi.n	80045a8 <_printf_i+0x28>
 80045ba:	a101      	add	r1, pc, #4	@ (adr r1, 80045c0 <_printf_i+0x40>)
 80045bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c0:	08004619 	.word	0x08004619
 80045c4:	0800462d 	.word	0x0800462d
 80045c8:	080045a9 	.word	0x080045a9
 80045cc:	080045a9 	.word	0x080045a9
 80045d0:	080045a9 	.word	0x080045a9
 80045d4:	080045a9 	.word	0x080045a9
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	080045a9 	.word	0x080045a9
 80045e0:	080045a9 	.word	0x080045a9
 80045e4:	080045a9 	.word	0x080045a9
 80045e8:	080045a9 	.word	0x080045a9
 80045ec:	0800472d 	.word	0x0800472d
 80045f0:	08004657 	.word	0x08004657
 80045f4:	080046e7 	.word	0x080046e7
 80045f8:	080045a9 	.word	0x080045a9
 80045fc:	080045a9 	.word	0x080045a9
 8004600:	0800474f 	.word	0x0800474f
 8004604:	080045a9 	.word	0x080045a9
 8004608:	08004657 	.word	0x08004657
 800460c:	080045a9 	.word	0x080045a9
 8004610:	080045a9 	.word	0x080045a9
 8004614:	080046ef 	.word	0x080046ef
 8004618:	6833      	ldr	r3, [r6, #0]
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6032      	str	r2, [r6, #0]
 8004620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004628:	2301      	movs	r3, #1
 800462a:	e09d      	b.n	8004768 <_printf_i+0x1e8>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	6820      	ldr	r0, [r4, #0]
 8004630:	1d19      	adds	r1, r3, #4
 8004632:	6031      	str	r1, [r6, #0]
 8004634:	0606      	lsls	r6, r0, #24
 8004636:	d501      	bpl.n	800463c <_printf_i+0xbc>
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	e003      	b.n	8004644 <_printf_i+0xc4>
 800463c:	0645      	lsls	r5, r0, #25
 800463e:	d5fb      	bpl.n	8004638 <_printf_i+0xb8>
 8004640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004644:	2d00      	cmp	r5, #0
 8004646:	da03      	bge.n	8004650 <_printf_i+0xd0>
 8004648:	232d      	movs	r3, #45	@ 0x2d
 800464a:	426d      	negs	r5, r5
 800464c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004650:	4859      	ldr	r0, [pc, #356]	@ (80047b8 <_printf_i+0x238>)
 8004652:	230a      	movs	r3, #10
 8004654:	e011      	b.n	800467a <_printf_i+0xfa>
 8004656:	6821      	ldr	r1, [r4, #0]
 8004658:	6833      	ldr	r3, [r6, #0]
 800465a:	0608      	lsls	r0, r1, #24
 800465c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004660:	d402      	bmi.n	8004668 <_printf_i+0xe8>
 8004662:	0649      	lsls	r1, r1, #25
 8004664:	bf48      	it	mi
 8004666:	b2ad      	uxthmi	r5, r5
 8004668:	2f6f      	cmp	r7, #111	@ 0x6f
 800466a:	4853      	ldr	r0, [pc, #332]	@ (80047b8 <_printf_i+0x238>)
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	bf14      	ite	ne
 8004670:	230a      	movne	r3, #10
 8004672:	2308      	moveq	r3, #8
 8004674:	2100      	movs	r1, #0
 8004676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800467a:	6866      	ldr	r6, [r4, #4]
 800467c:	60a6      	str	r6, [r4, #8]
 800467e:	2e00      	cmp	r6, #0
 8004680:	bfa2      	ittt	ge
 8004682:	6821      	ldrge	r1, [r4, #0]
 8004684:	f021 0104 	bicge.w	r1, r1, #4
 8004688:	6021      	strge	r1, [r4, #0]
 800468a:	b90d      	cbnz	r5, 8004690 <_printf_i+0x110>
 800468c:	2e00      	cmp	r6, #0
 800468e:	d04b      	beq.n	8004728 <_printf_i+0x1a8>
 8004690:	4616      	mov	r6, r2
 8004692:	fbb5 f1f3 	udiv	r1, r5, r3
 8004696:	fb03 5711 	mls	r7, r3, r1, r5
 800469a:	5dc7      	ldrb	r7, [r0, r7]
 800469c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046a0:	462f      	mov	r7, r5
 80046a2:	42bb      	cmp	r3, r7
 80046a4:	460d      	mov	r5, r1
 80046a6:	d9f4      	bls.n	8004692 <_printf_i+0x112>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d10b      	bne.n	80046c4 <_printf_i+0x144>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	07df      	lsls	r7, r3, #31
 80046b0:	d508      	bpl.n	80046c4 <_printf_i+0x144>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6861      	ldr	r1, [r4, #4]
 80046b6:	4299      	cmp	r1, r3
 80046b8:	bfde      	ittt	le
 80046ba:	2330      	movle	r3, #48	@ 0x30
 80046bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046c4:	1b92      	subs	r2, r2, r6
 80046c6:	6122      	str	r2, [r4, #16]
 80046c8:	f8cd a000 	str.w	sl, [sp]
 80046cc:	464b      	mov	r3, r9
 80046ce:	aa03      	add	r2, sp, #12
 80046d0:	4621      	mov	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f7ff fee6 	bl	80044a4 <_printf_common>
 80046d8:	3001      	adds	r0, #1
 80046da:	d14a      	bne.n	8004772 <_printf_i+0x1f2>
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	b004      	add	sp, #16
 80046e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	f043 0320 	orr.w	r3, r3, #32
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	4833      	ldr	r0, [pc, #204]	@ (80047bc <_printf_i+0x23c>)
 80046f0:	2778      	movs	r7, #120	@ 0x78
 80046f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	6831      	ldr	r1, [r6, #0]
 80046fa:	061f      	lsls	r7, r3, #24
 80046fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004700:	d402      	bmi.n	8004708 <_printf_i+0x188>
 8004702:	065f      	lsls	r7, r3, #25
 8004704:	bf48      	it	mi
 8004706:	b2ad      	uxthmi	r5, r5
 8004708:	6031      	str	r1, [r6, #0]
 800470a:	07d9      	lsls	r1, r3, #31
 800470c:	bf44      	itt	mi
 800470e:	f043 0320 	orrmi.w	r3, r3, #32
 8004712:	6023      	strmi	r3, [r4, #0]
 8004714:	b11d      	cbz	r5, 800471e <_printf_i+0x19e>
 8004716:	2310      	movs	r3, #16
 8004718:	e7ac      	b.n	8004674 <_printf_i+0xf4>
 800471a:	4827      	ldr	r0, [pc, #156]	@ (80047b8 <_printf_i+0x238>)
 800471c:	e7e9      	b.n	80046f2 <_printf_i+0x172>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f023 0320 	bic.w	r3, r3, #32
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	e7f6      	b.n	8004716 <_printf_i+0x196>
 8004728:	4616      	mov	r6, r2
 800472a:	e7bd      	b.n	80046a8 <_printf_i+0x128>
 800472c:	6833      	ldr	r3, [r6, #0]
 800472e:	6825      	ldr	r5, [r4, #0]
 8004730:	6961      	ldr	r1, [r4, #20]
 8004732:	1d18      	adds	r0, r3, #4
 8004734:	6030      	str	r0, [r6, #0]
 8004736:	062e      	lsls	r6, r5, #24
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	d501      	bpl.n	8004740 <_printf_i+0x1c0>
 800473c:	6019      	str	r1, [r3, #0]
 800473e:	e002      	b.n	8004746 <_printf_i+0x1c6>
 8004740:	0668      	lsls	r0, r5, #25
 8004742:	d5fb      	bpl.n	800473c <_printf_i+0x1bc>
 8004744:	8019      	strh	r1, [r3, #0]
 8004746:	2300      	movs	r3, #0
 8004748:	6123      	str	r3, [r4, #16]
 800474a:	4616      	mov	r6, r2
 800474c:	e7bc      	b.n	80046c8 <_printf_i+0x148>
 800474e:	6833      	ldr	r3, [r6, #0]
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	6032      	str	r2, [r6, #0]
 8004754:	681e      	ldr	r6, [r3, #0]
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	2100      	movs	r1, #0
 800475a:	4630      	mov	r0, r6
 800475c:	f7fb fd48 	bl	80001f0 <memchr>
 8004760:	b108      	cbz	r0, 8004766 <_printf_i+0x1e6>
 8004762:	1b80      	subs	r0, r0, r6
 8004764:	6060      	str	r0, [r4, #4]
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	6123      	str	r3, [r4, #16]
 800476a:	2300      	movs	r3, #0
 800476c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004770:	e7aa      	b.n	80046c8 <_printf_i+0x148>
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	4632      	mov	r2, r6
 8004776:	4649      	mov	r1, r9
 8004778:	4640      	mov	r0, r8
 800477a:	47d0      	blx	sl
 800477c:	3001      	adds	r0, #1
 800477e:	d0ad      	beq.n	80046dc <_printf_i+0x15c>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	079b      	lsls	r3, r3, #30
 8004784:	d413      	bmi.n	80047ae <_printf_i+0x22e>
 8004786:	68e0      	ldr	r0, [r4, #12]
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	4298      	cmp	r0, r3
 800478c:	bfb8      	it	lt
 800478e:	4618      	movlt	r0, r3
 8004790:	e7a6      	b.n	80046e0 <_printf_i+0x160>
 8004792:	2301      	movs	r3, #1
 8004794:	4632      	mov	r2, r6
 8004796:	4649      	mov	r1, r9
 8004798:	4640      	mov	r0, r8
 800479a:	47d0      	blx	sl
 800479c:	3001      	adds	r0, #1
 800479e:	d09d      	beq.n	80046dc <_printf_i+0x15c>
 80047a0:	3501      	adds	r5, #1
 80047a2:	68e3      	ldr	r3, [r4, #12]
 80047a4:	9903      	ldr	r1, [sp, #12]
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	42ab      	cmp	r3, r5
 80047aa:	dcf2      	bgt.n	8004792 <_printf_i+0x212>
 80047ac:	e7eb      	b.n	8004786 <_printf_i+0x206>
 80047ae:	2500      	movs	r5, #0
 80047b0:	f104 0619 	add.w	r6, r4, #25
 80047b4:	e7f5      	b.n	80047a2 <_printf_i+0x222>
 80047b6:	bf00      	nop
 80047b8:	08004cce 	.word	0x08004cce
 80047bc:	08004cdf 	.word	0x08004cdf

080047c0 <__sflush_r>:
 80047c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c8:	0716      	lsls	r6, r2, #28
 80047ca:	4605      	mov	r5, r0
 80047cc:	460c      	mov	r4, r1
 80047ce:	d454      	bmi.n	800487a <__sflush_r+0xba>
 80047d0:	684b      	ldr	r3, [r1, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc02      	bgt.n	80047dc <__sflush_r+0x1c>
 80047d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dd48      	ble.n	800486e <__sflush_r+0xae>
 80047dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d045      	beq.n	800486e <__sflush_r+0xae>
 80047e2:	2300      	movs	r3, #0
 80047e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047e8:	682f      	ldr	r7, [r5, #0]
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	d030      	beq.n	8004852 <__sflush_r+0x92>
 80047f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	0759      	lsls	r1, r3, #29
 80047f6:	d505      	bpl.n	8004804 <__sflush_r+0x44>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047fe:	b10b      	cbz	r3, 8004804 <__sflush_r+0x44>
 8004800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004808:	6a21      	ldr	r1, [r4, #32]
 800480a:	4628      	mov	r0, r5
 800480c:	47b0      	blx	r6
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	d106      	bne.n	8004822 <__sflush_r+0x62>
 8004814:	6829      	ldr	r1, [r5, #0]
 8004816:	291d      	cmp	r1, #29
 8004818:	d82b      	bhi.n	8004872 <__sflush_r+0xb2>
 800481a:	4a2a      	ldr	r2, [pc, #168]	@ (80048c4 <__sflush_r+0x104>)
 800481c:	410a      	asrs	r2, r1
 800481e:	07d6      	lsls	r6, r2, #31
 8004820:	d427      	bmi.n	8004872 <__sflush_r+0xb2>
 8004822:	2200      	movs	r2, #0
 8004824:	6062      	str	r2, [r4, #4]
 8004826:	04d9      	lsls	r1, r3, #19
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	d504      	bpl.n	8004838 <__sflush_r+0x78>
 800482e:	1c42      	adds	r2, r0, #1
 8004830:	d101      	bne.n	8004836 <__sflush_r+0x76>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	b903      	cbnz	r3, 8004838 <__sflush_r+0x78>
 8004836:	6560      	str	r0, [r4, #84]	@ 0x54
 8004838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800483a:	602f      	str	r7, [r5, #0]
 800483c:	b1b9      	cbz	r1, 800486e <__sflush_r+0xae>
 800483e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004842:	4299      	cmp	r1, r3
 8004844:	d002      	beq.n	800484c <__sflush_r+0x8c>
 8004846:	4628      	mov	r0, r5
 8004848:	f7ff fbea 	bl	8004020 <_free_r>
 800484c:	2300      	movs	r3, #0
 800484e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004850:	e00d      	b.n	800486e <__sflush_r+0xae>
 8004852:	2301      	movs	r3, #1
 8004854:	4628      	mov	r0, r5
 8004856:	47b0      	blx	r6
 8004858:	4602      	mov	r2, r0
 800485a:	1c50      	adds	r0, r2, #1
 800485c:	d1c9      	bne.n	80047f2 <__sflush_r+0x32>
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0c6      	beq.n	80047f2 <__sflush_r+0x32>
 8004864:	2b1d      	cmp	r3, #29
 8004866:	d001      	beq.n	800486c <__sflush_r+0xac>
 8004868:	2b16      	cmp	r3, #22
 800486a:	d11e      	bne.n	80048aa <__sflush_r+0xea>
 800486c:	602f      	str	r7, [r5, #0]
 800486e:	2000      	movs	r0, #0
 8004870:	e022      	b.n	80048b8 <__sflush_r+0xf8>
 8004872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004876:	b21b      	sxth	r3, r3
 8004878:	e01b      	b.n	80048b2 <__sflush_r+0xf2>
 800487a:	690f      	ldr	r7, [r1, #16]
 800487c:	2f00      	cmp	r7, #0
 800487e:	d0f6      	beq.n	800486e <__sflush_r+0xae>
 8004880:	0793      	lsls	r3, r2, #30
 8004882:	680e      	ldr	r6, [r1, #0]
 8004884:	bf08      	it	eq
 8004886:	694b      	ldreq	r3, [r1, #20]
 8004888:	600f      	str	r7, [r1, #0]
 800488a:	bf18      	it	ne
 800488c:	2300      	movne	r3, #0
 800488e:	eba6 0807 	sub.w	r8, r6, r7
 8004892:	608b      	str	r3, [r1, #8]
 8004894:	f1b8 0f00 	cmp.w	r8, #0
 8004898:	dde9      	ble.n	800486e <__sflush_r+0xae>
 800489a:	6a21      	ldr	r1, [r4, #32]
 800489c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800489e:	4643      	mov	r3, r8
 80048a0:	463a      	mov	r2, r7
 80048a2:	4628      	mov	r0, r5
 80048a4:	47b0      	blx	r6
 80048a6:	2800      	cmp	r0, #0
 80048a8:	dc08      	bgt.n	80048bc <__sflush_r+0xfc>
 80048aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048bc:	4407      	add	r7, r0
 80048be:	eba8 0800 	sub.w	r8, r8, r0
 80048c2:	e7e7      	b.n	8004894 <__sflush_r+0xd4>
 80048c4:	dfbffffe 	.word	0xdfbffffe

080048c8 <_fflush_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	690b      	ldr	r3, [r1, #16]
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	b913      	cbnz	r3, 80048d8 <_fflush_r+0x10>
 80048d2:	2500      	movs	r5, #0
 80048d4:	4628      	mov	r0, r5
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	b118      	cbz	r0, 80048e2 <_fflush_r+0x1a>
 80048da:	6a03      	ldr	r3, [r0, #32]
 80048dc:	b90b      	cbnz	r3, 80048e2 <_fflush_r+0x1a>
 80048de:	f7ff f959 	bl	8003b94 <__sinit>
 80048e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f3      	beq.n	80048d2 <_fflush_r+0xa>
 80048ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048ec:	07d0      	lsls	r0, r2, #31
 80048ee:	d404      	bmi.n	80048fa <_fflush_r+0x32>
 80048f0:	0599      	lsls	r1, r3, #22
 80048f2:	d402      	bmi.n	80048fa <_fflush_r+0x32>
 80048f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048f6:	f7ff fb72 	bl	8003fde <__retarget_lock_acquire_recursive>
 80048fa:	4628      	mov	r0, r5
 80048fc:	4621      	mov	r1, r4
 80048fe:	f7ff ff5f 	bl	80047c0 <__sflush_r>
 8004902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004904:	07da      	lsls	r2, r3, #31
 8004906:	4605      	mov	r5, r0
 8004908:	d4e4      	bmi.n	80048d4 <_fflush_r+0xc>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	059b      	lsls	r3, r3, #22
 800490e:	d4e1      	bmi.n	80048d4 <_fflush_r+0xc>
 8004910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004912:	f7ff fb65 	bl	8003fe0 <__retarget_lock_release_recursive>
 8004916:	e7dd      	b.n	80048d4 <_fflush_r+0xc>

08004918 <fiprintf>:
 8004918:	b40e      	push	{r1, r2, r3}
 800491a:	b503      	push	{r0, r1, lr}
 800491c:	4601      	mov	r1, r0
 800491e:	ab03      	add	r3, sp, #12
 8004920:	4805      	ldr	r0, [pc, #20]	@ (8004938 <fiprintf+0x20>)
 8004922:	f853 2b04 	ldr.w	r2, [r3], #4
 8004926:	6800      	ldr	r0, [r0, #0]
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	f7ff fca3 	bl	8004274 <_vfiprintf_r>
 800492e:	b002      	add	sp, #8
 8004930:	f85d eb04 	ldr.w	lr, [sp], #4
 8004934:	b003      	add	sp, #12
 8004936:	4770      	bx	lr
 8004938:	20000020 	.word	0x20000020

0800493c <__swhatbuf_r>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	460c      	mov	r4, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	2900      	cmp	r1, #0
 8004946:	b096      	sub	sp, #88	@ 0x58
 8004948:	4615      	mov	r5, r2
 800494a:	461e      	mov	r6, r3
 800494c:	da0d      	bge.n	800496a <__swhatbuf_r+0x2e>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	bf14      	ite	ne
 800495a:	2340      	movne	r3, #64	@ 0x40
 800495c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004960:	2000      	movs	r0, #0
 8004962:	6031      	str	r1, [r6, #0]
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	b016      	add	sp, #88	@ 0x58
 8004968:	bd70      	pop	{r4, r5, r6, pc}
 800496a:	466a      	mov	r2, sp
 800496c:	f000 f848 	bl	8004a00 <_fstat_r>
 8004970:	2800      	cmp	r0, #0
 8004972:	dbec      	blt.n	800494e <__swhatbuf_r+0x12>
 8004974:	9901      	ldr	r1, [sp, #4]
 8004976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800497a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800497e:	4259      	negs	r1, r3
 8004980:	4159      	adcs	r1, r3
 8004982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004986:	e7eb      	b.n	8004960 <__swhatbuf_r+0x24>

08004988 <__smakebuf_r>:
 8004988:	898b      	ldrh	r3, [r1, #12]
 800498a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800498c:	079d      	lsls	r5, r3, #30
 800498e:	4606      	mov	r6, r0
 8004990:	460c      	mov	r4, r1
 8004992:	d507      	bpl.n	80049a4 <__smakebuf_r+0x1c>
 8004994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	2301      	movs	r3, #1
 800499e:	6163      	str	r3, [r4, #20]
 80049a0:	b003      	add	sp, #12
 80049a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a4:	ab01      	add	r3, sp, #4
 80049a6:	466a      	mov	r2, sp
 80049a8:	f7ff ffc8 	bl	800493c <__swhatbuf_r>
 80049ac:	9f00      	ldr	r7, [sp, #0]
 80049ae:	4605      	mov	r5, r0
 80049b0:	4639      	mov	r1, r7
 80049b2:	4630      	mov	r0, r6
 80049b4:	f7ff fba8 	bl	8004108 <_malloc_r>
 80049b8:	b948      	cbnz	r0, 80049ce <__smakebuf_r+0x46>
 80049ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049be:	059a      	lsls	r2, r3, #22
 80049c0:	d4ee      	bmi.n	80049a0 <__smakebuf_r+0x18>
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	e7e2      	b.n	8004994 <__smakebuf_r+0xc>
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	6020      	str	r0, [r4, #0]
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049de:	b15b      	cbz	r3, 80049f8 <__smakebuf_r+0x70>
 80049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 f81d 	bl	8004a24 <_isatty_r>
 80049ea:	b128      	cbz	r0, 80049f8 <__smakebuf_r+0x70>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	431d      	orrs	r5, r3
 80049fc:	81a5      	strh	r5, [r4, #12]
 80049fe:	e7cf      	b.n	80049a0 <__smakebuf_r+0x18>

08004a00 <_fstat_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d07      	ldr	r5, [pc, #28]	@ (8004a20 <_fstat_r+0x20>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	f7fe fe34 	bl	800367a <_fstat>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	d102      	bne.n	8004a1c <_fstat_r+0x1c>
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	b103      	cbz	r3, 8004a1c <_fstat_r+0x1c>
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000324 	.word	0x20000324

08004a24 <_isatty_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	4d06      	ldr	r5, [pc, #24]	@ (8004a40 <_isatty_r+0x1c>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	f7fe ff9a 	bl	8003968 <_isatty>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_isatty_r+0x1a>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_isatty_r+0x1a>
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	20000324 	.word	0x20000324

08004a44 <_sbrk_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4d06      	ldr	r5, [pc, #24]	@ (8004a60 <_sbrk_r+0x1c>)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	602b      	str	r3, [r5, #0]
 8004a50:	f7fc fa4a 	bl	8000ee8 <_sbrk>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_sbrk_r+0x1a>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_sbrk_r+0x1a>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20000324 	.word	0x20000324

08004a64 <abort>:
 8004a64:	b508      	push	{r3, lr}
 8004a66:	2006      	movs	r0, #6
 8004a68:	f000 f82c 	bl	8004ac4 <raise>
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f000 f84d 	bl	8004b0c <_exit>

08004a72 <_raise_r>:
 8004a72:	291f      	cmp	r1, #31
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4605      	mov	r5, r0
 8004a78:	460c      	mov	r4, r1
 8004a7a:	d904      	bls.n	8004a86 <_raise_r+0x14>
 8004a7c:	2316      	movs	r3, #22
 8004a7e:	6003      	str	r3, [r0, #0]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	bd38      	pop	{r3, r4, r5, pc}
 8004a86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004a88:	b112      	cbz	r2, 8004a90 <_raise_r+0x1e>
 8004a8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a8e:	b94b      	cbnz	r3, 8004aa4 <_raise_r+0x32>
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f831 	bl	8004af8 <_getpid_r>
 8004a96:	4622      	mov	r2, r4
 8004a98:	4601      	mov	r1, r0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aa0:	f000 b818 	b.w	8004ad4 <_kill_r>
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d00a      	beq.n	8004abe <_raise_r+0x4c>
 8004aa8:	1c59      	adds	r1, r3, #1
 8004aaa:	d103      	bne.n	8004ab4 <_raise_r+0x42>
 8004aac:	2316      	movs	r3, #22
 8004aae:	6003      	str	r3, [r0, #0]
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	e7e7      	b.n	8004a84 <_raise_r+0x12>
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004aba:	4620      	mov	r0, r4
 8004abc:	4798      	blx	r3
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e7e0      	b.n	8004a84 <_raise_r+0x12>
	...

08004ac4 <raise>:
 8004ac4:	4b02      	ldr	r3, [pc, #8]	@ (8004ad0 <raise+0xc>)
 8004ac6:	4601      	mov	r1, r0
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	f7ff bfd2 	b.w	8004a72 <_raise_r>
 8004ace:	bf00      	nop
 8004ad0:	20000020 	.word	0x20000020

08004ad4 <_kill_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	@ (8004af4 <_kill_r+0x20>)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4608      	mov	r0, r1
 8004ade:	4611      	mov	r1, r2
 8004ae0:	602b      	str	r3, [r5, #0]
 8004ae2:	f000 f80b 	bl	8004afc <_kill>
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	d102      	bne.n	8004af0 <_kill_r+0x1c>
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	b103      	cbz	r3, 8004af0 <_kill_r+0x1c>
 8004aee:	6023      	str	r3, [r4, #0]
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	20000324 	.word	0x20000324

08004af8 <_getpid_r>:
 8004af8:	f7fe bd9c 	b.w	8003634 <_getpid>

08004afc <_kill>:
 8004afc:	4b02      	ldr	r3, [pc, #8]	@ (8004b08 <_kill+0xc>)
 8004afe:	2258      	movs	r2, #88	@ 0x58
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	f04f 30ff 	mov.w	r0, #4294967295
 8004b06:	4770      	bx	lr
 8004b08:	20000324 	.word	0x20000324

08004b0c <_exit>:
 8004b0c:	e7fe      	b.n	8004b0c <_exit>
	...

08004b10 <_init>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	bf00      	nop
 8004b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b16:	bc08      	pop	{r3}
 8004b18:	469e      	mov	lr, r3
 8004b1a:	4770      	bx	lr

08004b1c <_fini>:
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	bf00      	nop
 8004b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b22:	bc08      	pop	{r3}
 8004b24:	469e      	mov	lr, r3
 8004b26:	4770      	bx	lr
