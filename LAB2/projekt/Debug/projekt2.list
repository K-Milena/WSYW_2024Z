
projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004af8  08004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c8c  08004c8c  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c8c  08004c8c  00005c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c94  08004c94  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c98  08004c98  00005c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004c9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  08004d0c  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08004d0c  00006334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009020  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00010830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000770  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016681  00000000  00000000  00011948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9cd  00000000  00000000  00027fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d33b  00000000  00000000  00032996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfcd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003624  00000000  00000000  000bfd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c3338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ae0 	.word	0x08004ae0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ae0 	.word	0x08004ae0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	zaczyna się od ustalenia w losowy sposób długości czasu świecenia diody na czas trwania
//	rundy, a kończy na prawidłowym odgadnięciu czasu świecenia diody.
//	Zmierzony czas wydrukować w konsoli i porównać do faktycznego czasu świecenia
//	diody.

	initialise_monitor_handles();
 8000584:	f003 f964 	bl	8003850 <initialise_monitor_handles>
	printf("Semihosting test. \n");
 8000588:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0x50>)
 800058a:	f003 fb89 	bl	8003ca0 <puts>
	srand(time(NULL));
 800058e:	2000      	movs	r0, #0
 8000590:	f003 fc6e 	bl	8003e70 <time>
 8000594:	4602      	mov	r2, r0
 8000596:	460b      	mov	r3, r1
 8000598:	4613      	mov	r3, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f003 f9ea 	bl	8003974 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fcfc 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f81a 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f96a 	bl	8000880 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005ac:	f000 f8f0 	bl	8000790 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005b0:	f000 f87e 	bl	80006b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start_IT(&htim4);
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <main+0x54>)
 80005b6:	f001 fcc7 	bl	8001f48 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 80005ba:	2100      	movs	r1, #0
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <main+0x54>)
 80005be:	f001 fd7f 	bl	80020c0 <HAL_TIM_OC_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <main+0x58>)
 80005c6:	f001 fe85 	bl	80022d4 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x4a>
 80005ce:	bf00      	nop
 80005d0:	08004af8 	.word	0x08004af8
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	2000008c 	.word	0x2000008c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fc38 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000650:	23c0      	movs	r3, #192	@ 0xc0
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 ffbd 	bl	80015e0 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 fb0c 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2103      	movs	r1, #3
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa1e 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 faf5 	bl	8000c88 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006e4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80006f0:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006f2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80006f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000704:	4821      	ldr	r0, [pc, #132]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000706:	f001 fbcf 	bl	8001ea8 <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000710:	f000 faba 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4619      	mov	r1, r3
 8000720:	481a      	ldr	r0, [pc, #104]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000722:	f002 f8d9 	bl	80028d8 <HAL_TIM_ConfigClockSource>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800072c:	f000 faac 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000730:	4816      	ldr	r0, [pc, #88]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000732:	f001 fd75 	bl	8002220 <HAL_TIM_IC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800073c:	f000 faa4 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	480f      	ldr	r0, [pc, #60]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000750:	f002 fde2 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800075a:	f000 fa95 	bl	8000c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800075e:	230a      	movs	r3, #10
 8000760:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000776:	f002 f813 	bl	80027a0 <HAL_TIM_IC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000780:	f000 fa82 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000008c 	.word	0x2000008c

08000790 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	@ 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007c2:	4a2e      	ldr	r2, [pc, #184]	@ (800087c <MX_TIM4_Init+0xec>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80007c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007c8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 80007d4:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007d6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80007da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007e8:	4823      	ldr	r0, [pc, #140]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007ea:	f001 fb5d 	bl	8001ea8 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007f4:	f000 fa48 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	4619      	mov	r1, r3
 8000804:	481c      	ldr	r0, [pc, #112]	@ (8000878 <MX_TIM4_Init+0xe8>)
 8000806:	f002 f867 	bl	80028d8 <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000810:	f000 fa3a 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000814:	4818      	ldr	r0, [pc, #96]	@ (8000878 <MX_TIM4_Init+0xe8>)
 8000816:	f001 fbf9 	bl	800200c <HAL_TIM_OC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000820:	f000 fa32 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4619      	mov	r1, r3
 8000832:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_TIM4_Init+0xe8>)
 8000834:	f002 fd70 	bl	8003318 <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800083e:	f000 fa23 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000842:	2330      	movs	r3, #48	@ 0x30
 8000844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	@ (8000878 <MX_TIM4_Init+0xe8>)
 800085a:	f001 ff45 	bl	80026e8 <HAL_TIM_OC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000864:	f000 fa10 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <MX_TIM4_Init+0xe8>)
 800086a:	f000 faa7 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3738      	adds	r7, #56	@ 0x38
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000d4 	.word	0x200000d4
 800087c:	40000800 	.word	0x40000800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b9b      	ldr	r3, [pc, #620]	@ (8000b08 <MX_GPIO_Init+0x288>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b98      	ldr	r3, [pc, #608]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b94      	ldr	r3, [pc, #592]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a93      	ldr	r2, [pc, #588]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b91      	ldr	r3, [pc, #580]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a8c      	ldr	r2, [pc, #560]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b8a      	ldr	r3, [pc, #552]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b86      	ldr	r3, [pc, #536]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a85      	ldr	r2, [pc, #532]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b83      	ldr	r3, [pc, #524]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b08 <MX_GPIO_Init+0x288>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a7e      	ldr	r2, [pc, #504]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b7c      	ldr	r3, [pc, #496]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b78      	ldr	r3, [pc, #480]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a77      	ldr	r2, [pc, #476]	@ (8000b08 <MX_GPIO_Init+0x288>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b75      	ldr	r3, [pc, #468]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4872      	ldr	r0, [pc, #456]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 8000944:	f000 fe32 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4870      	ldr	r0, [pc, #448]	@ (8000b10 <MX_GPIO_Init+0x290>)
 800094e:	f000 fe2d 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f242 0110 	movw	r1, #8208	@ 0x2010
 8000958:	486e      	ldr	r0, [pc, #440]	@ (8000b14 <MX_GPIO_Init+0x294>)
 800095a:	f000 fe27 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095e:	2304      	movs	r3, #4
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4866      	ldr	r0, [pc, #408]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 8000972:	f000 fc97 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000976:	2308      	movs	r3, #8
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	485f      	ldr	r0, [pc, #380]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 800098e:	f000 fc89 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000992:	2332      	movs	r3, #50	@ 0x32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000996:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4859      	ldr	r0, [pc, #356]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 80009a8:	f000 fc7c 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4853      	ldr	r0, [pc, #332]	@ (8000b10 <MX_GPIO_Init+0x290>)
 80009c4:	f000 fc6e 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c8:	2308      	movs	r3, #8
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d8:	2305      	movs	r3, #5
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	484b      	ldr	r0, [pc, #300]	@ (8000b10 <MX_GPIO_Init+0x290>)
 80009e4:	f000 fc5e 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009e8:	2310      	movs	r3, #16
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f8:	2306      	movs	r3, #6
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4845      	ldr	r0, [pc, #276]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000a04:	f000 fc4e 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a08:	23e0      	movs	r3, #224	@ 0xe0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	483d      	ldr	r0, [pc, #244]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000a24:	f000 fc3e 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4835      	ldr	r0, [pc, #212]	@ (8000b1c <MX_GPIO_Init+0x29c>)
 8000a46:	f000 fc2d 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|Audio_RST_Pin;
 8000a4a:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	482c      	ldr	r0, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0x294>)
 8000a64:	f000 fc1e 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a68:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4822      	ldr	r0, [pc, #136]	@ (8000b10 <MX_GPIO_Init+0x290>)
 8000a86:	f000 fc0d 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481e      	ldr	r0, [pc, #120]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000aa0:	f000 fc00 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000aa4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000ac2:	f000 fbef 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <MX_GPIO_Init+0x294>)
 8000ada:	f000 fbe3 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ade:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <MX_GPIO_Init+0x29c>)
 8000afc:	f000 fbd2 	bl	80012a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	@ 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_TIM_PeriodElapsedCallback>:
uint32_t moment_wcisniecia, moment_zwolnienia;
uint32_t numer_wyzwolenia_przerwania = 0;
uint32_t last_capture_time = 0; // Zmienna do debouncingu

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    if(htim == &htim4)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d117      	bne.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x40>
    {
        led_zapalony = (rand() % (MAX_ON_TIME - MIN_ON_TIME)) + MIN_ON_TIME;
 8000b30:	f002 ff4e 	bl	80039d0 <rand>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b38:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3c:	1299      	asrs	r1, r3, #10
 8000b3e:	17d3      	asrs	r3, r2, #31
 8000b40:	1acb      	subs	r3, r1, r3
 8000b42:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000b46:	fb01 f303 	mul.w	r3, r1, r3
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
        pulse_val = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5c:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b5e:	6013      	str	r3, [r2, #0]
    }
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000d4 	.word	0x200000d4
 8000b6c:	68db8bad 	.word	0x68db8bad
 8000b70:	20000120 	.word	0x20000120
 8000b74:	2000011c 	.word	0x2000011c

08000b78 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    if(htim == &htim2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a37      	ldr	r2, [pc, #220]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d167      	bne.n	8000c58 <HAL_TIM_IC_CaptureCallback+0xe0>
    {
        uint32_t current_time = HAL_GetTick();  // Pobieramy aktualny czas w ms
 8000b88:	f000 fa6e 	bl	8001068 <HAL_GetTick>
 8000b8c:	60f8      	str	r0, [r7, #12]
        if ((current_time - last_capture_time) < DEBOUNCE_DELAY) {
 8000b8e:	4b35      	ldr	r3, [pc, #212]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b31      	cmp	r3, #49	@ 0x31
 8000b98:	d95d      	bls.n	8000c56 <HAL_TIM_IC_CaptureCallback+0xde>
            // Jeśli czas od ostatniego przerwania jest mniejszy niż DEBOUNCE_DELAY, ignorujemy to przerwanie
            return;
        }
        last_capture_time = current_time;  // Aktualizujemy czas ostatniego wciśnięcia
 8000b9a:	4a32      	ldr	r2, [pc, #200]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6013      	str	r3, [r2, #0]

        if(numer_wyzwolenia_przerwania == 0)
 8000ba0:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d10d      	bne.n	8000bc4 <HAL_TIM_IC_CaptureCallback+0x4c>
        {
            moment_wcisniecia = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 ff5c 	bl	8002a68 <HAL_TIM_ReadCapturedValue>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000bb4:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bbc:	482c      	ldr	r0, [pc, #176]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000bbe:	f000 fcf5 	bl	80015ac <HAL_GPIO_WritePin>
 8000bc2:	e010      	b.n	8000be6 <HAL_TIM_IC_CaptureCallback+0x6e>
        }
        else if(numer_wyzwolenia_przerwania == 1)
 8000bc4:	4b28      	ldr	r3, [pc, #160]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10c      	bne.n	8000be6 <HAL_TIM_IC_CaptureCallback+0x6e>
        {
            moment_zwolnienia = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f001 ff4a 	bl	8002a68 <HAL_TIM_ReadCapturedValue>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000bd8:	6013      	str	r3, [r2, #0]
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be0:	4823      	ldr	r0, [pc, #140]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000be2:	f000 fce3 	bl	80015ac <HAL_GPIO_WritePin>
        }

        numer_wyzwolenia_przerwania++;
 8000be6:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000bee:	6013      	str	r3, [r2, #0]

        if(numer_wyzwolenia_przerwania == 2)
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d12f      	bne.n	8000c58 <HAL_TIM_IC_CaptureCallback+0xe0>
        {
            printf("Czas wcisniecia przycisku %d ms \n", moment_zwolnienia - moment_wcisniecia);
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	481c      	ldr	r0, [pc, #112]	@ (8000c78 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000c06:	f002 ffe3 	bl	8003bd0 <iprintf>
            numer_wyzwolenia_przerwania = 0;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]

            // Sprawdzanie wyniku
            int32_t czas_wcisniecia = moment_zwolnienia - moment_wcisniecia;
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	60bb      	str	r3, [r7, #8]
            if(abs(czas_wcisniecia - (int32_t)led_zapalony) <= WIN_TOLERANCE)
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000c2a:	db0d      	blt.n	8000c48 <HAL_TIM_IC_CaptureCallback+0xd0>
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	2b64      	cmp	r3, #100	@ 0x64
 8000c38:	dc06      	bgt.n	8000c48 <HAL_TIM_IC_CaptureCallback+0xd0>
            {
                printf("Gratulacje! Dioda swiecila sie %d ms!\n", led_zapalony);
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000c42:	f002 ffc5 	bl	8003bd0 <iprintf>
 8000c46:	e007      	b.n	8000c58 <HAL_TIM_IC_CaptureCallback+0xe0>
            }
            else
            {
                printf("Nie udalo sie! Dioda swiecila sie %d ms!\n", led_zapalony);
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000c50:	f002 ffbe 	bl	8003bd0 <iprintf>
 8000c54:	e000      	b.n	8000c58 <HAL_TIM_IC_CaptureCallback+0xe0>
            return;
 8000c56:	bf00      	nop
            }
        }
    }
}
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000008c 	.word	0x2000008c
 8000c64:	20000130 	.word	0x20000130
 8000c68:	2000012c 	.word	0x2000012c
 8000c6c:	20000124 	.word	0x20000124
 8000c70:	40020c00 	.word	0x40020c00
 8000c74:	20000128 	.word	0x20000128
 8000c78:	08004b0c 	.word	0x08004b0c
 8000c7c:	20000120 	.word	0x20000120
 8000c80:	08004b30 	.word	0x08004b30
 8000c84:	08004b58 	.word	0x08004b58

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 faa4 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d04:	d134      	bne.n	8000d70 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a28      	ldr	r2, [pc, #160]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a21      	ldr	r2, [pc, #132]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4816      	ldr	r0, [pc, #88]	@ (8000db4 <HAL_TIM_Base_MspInit+0xd0>)
 8000d5a:	f000 faa3 	bl	80012a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	201c      	movs	r0, #28
 8000d64:	f000 fa67 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d68:	201c      	movs	r0, #28
 8000d6a:	f000 fa80 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d6e:	e01a      	b.n	8000da6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <HAL_TIM_Base_MspInit+0xd4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d115      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_TIM_Base_MspInit+0xcc>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	201e      	movs	r0, #30
 8000d9c:	f000 fa4b 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000da0:	201e      	movs	r0, #30
 8000da2:	f000 fa64 	bl	800126e <HAL_NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40000800 	.word	0x40000800

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <HAL_TIM_MspPostInit+0x68>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d11e      	bne.n	8000e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <HAL_TIM_MspPostInit+0x70>)
 8000e18:	f000 fa44 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40000800 	.word	0x40000800
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f8db 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM2_IRQHandler+0x10>)
 8000e96:	f001 fb37 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000008c 	.word	0x2000008c

08000ea4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM4_IRQHandler+0x10>)
 8000eaa:	f001 fb2d 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000d4 	.word	0x200000d4

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f003 f836 	bl	8003f58 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20020000 	.word	0x20020000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000134 	.word	0x20000134
 8000f20:	20000338 	.word	0x20000338

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 fff5 	bl	8003f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fb01 	bl	8000580 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f8c:	08004c9c 	.word	0x08004c9c
  ldr r2, =_sbss
 8000f90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f94:	20000334 	.word	0x20000334

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f92b 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe60 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f943 	bl	800128a <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f90b 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000138 	.word	0x20000138

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000138 	.word	0x20000138

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	@ (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	@ (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	@ (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	@ 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e159      	b.n	8001574 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8148 	bne.w	800156e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d005      	beq.n	80012f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d130      	bne.n	8001358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b03      	cmp	r3, #3
 8001362:	d017      	beq.n	8001394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a2 	beq.w	800156e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b57      	ldr	r3, [pc, #348]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a56      	ldr	r2, [pc, #344]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b54      	ldr	r3, [pc, #336]	@ (800158c <HAL_GPIO_Init+0x2e8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a52      	ldr	r2, [pc, #328]	@ (8001590 <HAL_GPIO_Init+0x2ec>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a49      	ldr	r2, [pc, #292]	@ (8001594 <HAL_GPIO_Init+0x2f0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x202>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a48      	ldr	r2, [pc, #288]	@ (8001598 <HAL_GPIO_Init+0x2f4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x1fe>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a47      	ldr	r2, [pc, #284]	@ (800159c <HAL_GPIO_Init+0x2f8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x1fa>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x1f6>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a45      	ldr	r2, [pc, #276]	@ (80015a4 <HAL_GPIO_Init+0x300>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x1f2>
 8001492:	2304      	movs	r3, #4
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 8001496:	2307      	movs	r3, #7
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 80014a6:	2300      	movs	r3, #0
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b8:	4935      	ldr	r1, [pc, #212]	@ (8001590 <HAL_GPIO_Init+0x2ec>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c6:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ea:	4a2f      	ldr	r2, [pc, #188]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001514:	4a24      	ldr	r2, [pc, #144]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151a:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153e:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001568:	4a0f      	ldr	r2, [pc, #60]	@ (80015a8 <HAL_GPIO_Init+0x304>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	f67f aea2 	bls.w	80012c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40013800 	.word	0x40013800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40013c00 	.word	0x40013c00

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e267      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d075      	beq.n	80016ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015fe:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d00c      	beq.n	8001624 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b85      	ldr	r3, [pc, #532]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001612:	2b08      	cmp	r3, #8
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b82      	ldr	r3, [pc, #520]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001622:	d10b      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	4b7e      	ldr	r3, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d05b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x108>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d157      	bne.n	80016e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e242      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x74>
 8001646:	4b76      	ldr	r3, [pc, #472]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a75      	ldr	r2, [pc, #468]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6f      	ldr	r2, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6d      	ldr	r3, [pc, #436]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6c      	ldr	r2, [pc, #432]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001678:	4b69      	ldr	r3, [pc, #420]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a68      	ldr	r2, [pc, #416]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b66      	ldr	r3, [pc, #408]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fce6 	bl	8001068 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fce2 	bl	8001068 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e207      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fcd2 	bl	8001068 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fcce 	bl	8001068 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	@ 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1f3      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b51      	ldr	r3, [pc, #324]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0xe8>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b44      	ldr	r3, [pc, #272]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c7      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4937      	ldr	r1, [pc, #220]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x244>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fc87 	bl	8001068 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc83 	bl	8001068 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a8      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4925      	ldr	r1, [pc, #148]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <HAL_RCC_OscConfig+0x244>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fc66 	bl	8001068 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc62 	bl	8001068 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e187      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d036      	beq.n	8001838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <HAL_RCC_OscConfig+0x248>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc46 	bl	8001068 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc42 	bl	8001068 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e167      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_RCC_OscConfig+0x240>)
 80017f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x200>
 80017fe:	e01b      	b.n	8001838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <HAL_RCC_OscConfig+0x248>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fc2f 	bl	8001068 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	e00e      	b.n	800182c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fc2b 	bl	8001068 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d907      	bls.n	800182c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e150      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	42470000 	.word	0x42470000
 8001828:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ea      	bne.n	800180e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8097 	beq.w	8001974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b81      	ldr	r3, [pc, #516]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40
 8001866:	4b7a      	ldr	r3, [pc, #488]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b77      	ldr	r3, [pc, #476]	@ (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b74      	ldr	r3, [pc, #464]	@ (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a73      	ldr	r2, [pc, #460]	@ (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff fbeb 	bl	8001068 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff fbe7 	bl	8001068 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e10c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a54 <HAL_RCC_OscConfig+0x474>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x2ea>
 80018bc:	4b64      	ldr	r3, [pc, #400]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c0:	4a63      	ldr	r2, [pc, #396]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x30c>
 80018d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018de:	4b5c      	ldr	r3, [pc, #368]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ec:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a57      	ldr	r2, [pc, #348]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f8:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a54      	ldr	r2, [pc, #336]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0304 	bic.w	r3, r3, #4
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fbac 	bl	8001068 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fba8 	bl	8001068 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0cb      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0ee      	beq.n	8001914 <HAL_RCC_OscConfig+0x334>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb96 	bl	8001068 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fb92 	bl	8001068 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0b5      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	4a38      	ldr	r2, [pc, #224]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a1 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197e:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b08      	cmp	r3, #8
 8001988:	d05c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d141      	bne.n	8001a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb66 	bl	8001068 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fb62 	bl	8001068 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e087      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	491b      	ldr	r1, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_RCC_OscConfig+0x478>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb3b 	bl	8001068 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff fb37 	bl	8001068 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e05c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x416>
 8001a14:	e054      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb24 	bl	8001068 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff fb20 	bl	8001068 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e045      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
 8001a42:	e03d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e038      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d028      	beq.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d121      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d11a      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cc      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b68      	ldr	r3, [pc, #416]	@ (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d90c      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b65      	ldr	r3, [pc, #404]	@ (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	@ (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d044      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d119      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e067      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b37      	ldr	r3, [pc, #220]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4934      	ldr	r1, [pc, #208]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa52 	bl	8001068 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff fa4e 	bl	8001068 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e04f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20c      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490a      	ldr	r1, [pc, #40]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f9b2 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08004b84 	.word	0x08004b84
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b094      	sub	sp, #80	@ 0x50
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb4:	4b79      	ldr	r3, [pc, #484]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d00d      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	f200 80e1 	bhi.w	8001e88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cce:	e0db      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b73      	ldr	r3, [pc, #460]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd4:	e0db      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd6:	4b73      	ldr	r3, [pc, #460]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cda:	e0d8      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d0e:	4622      	mov	r2, r4
 8001d10:	462b      	mov	r3, r5
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0159      	lsls	r1, r3, #5
 8001d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d20:	0150      	lsls	r0, r2, #5
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4621      	mov	r1, r4
 8001d28:	1a51      	subs	r1, r2, r1
 8001d2a:	6139      	str	r1, [r7, #16]
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d40:	4659      	mov	r1, fp
 8001d42:	018b      	lsls	r3, r1, #6
 8001d44:	4651      	mov	r1, sl
 8001d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	018a      	lsls	r2, r1, #6
 8001d4e:	4651      	mov	r1, sl
 8001d50:	ebb2 0801 	subs.w	r8, r2, r1
 8001d54:	4659      	mov	r1, fp
 8001d56:	eb63 0901 	sbc.w	r9, r3, r1
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d6e:	4690      	mov	r8, r2
 8001d70:	4699      	mov	r9, r3
 8001d72:	4623      	mov	r3, r4
 8001d74:	eb18 0303 	adds.w	r3, r8, r3
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	462b      	mov	r3, r5
 8001d7c:	eb49 0303 	adc.w	r3, r9, r3
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d8e:	4629      	mov	r1, r5
 8001d90:	024b      	lsls	r3, r1, #9
 8001d92:	4621      	mov	r1, r4
 8001d94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d98:	4621      	mov	r1, r4
 8001d9a:	024a      	lsls	r2, r1, #9
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001da2:	2200      	movs	r2, #0
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dac:	f7fe fa70 	bl	8000290 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001db8:	e058      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dca:	623b      	str	r3, [r7, #32]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	464b      	mov	r3, r9
 8001dd8:	f04f 0000 	mov.w	r0, #0
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	0159      	lsls	r1, r3, #5
 8001de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de6:	0150      	lsls	r0, r2, #5
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4641      	mov	r1, r8
 8001dee:	ebb2 0a01 	subs.w	sl, r2, r1
 8001df2:	4649      	mov	r1, r9
 8001df4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e0c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e10:	eb63 050b 	sbc.w	r5, r3, fp
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	00eb      	lsls	r3, r5, #3
 8001e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e22:	00e2      	lsls	r2, r4, #3
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4643      	mov	r3, r8
 8001e2a:	18e3      	adds	r3, r4, r3
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	464b      	mov	r3, r9
 8001e30:	eb45 0303 	adc.w	r3, r5, r3
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e42:	4629      	mov	r1, r5
 8001e44:	028b      	lsls	r3, r1, #10
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	028a      	lsls	r2, r1, #10
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e56:	2200      	movs	r2, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	61fa      	str	r2, [r7, #28]
 8001e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e60:	f7fe fa16 	bl	8000290 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	3301      	adds	r3, #1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e86:	e002      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3750      	adds	r7, #80	@ 0x50
 8001e94:	46bd      	mov	sp, r7
 8001e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	00f42400 	.word	0x00f42400
 8001ea4:	007a1200 	.word	0x007a1200

08001ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e041      	b.n	8001f3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe ff08 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 fe20 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e044      	b.n	8001fea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8a:	d013      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_TIM_Base_Start_IT+0xb4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00e      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_TIM_Base_Start_IT+0xbc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a16      	ldr	r2, [pc, #88]	@ (8002008 <HAL_TIM_Base_Start_IT+0xc0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d010      	beq.n	8001fe8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	e007      	b.n	8001fe8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40014000 	.word	0x40014000

0800200c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e041      	b.n	80020a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f839 	bl	80020aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f000 fd6e 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_TIM_OC_Start+0x24>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e022      	b.n	800212a <HAL_TIM_OC_Start+0x6a>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d109      	bne.n	80020fe <HAL_TIM_OC_Start+0x3e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	e015      	b.n	800212a <HAL_TIM_OC_Start+0x6a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b08      	cmp	r3, #8
 8002102:	d109      	bne.n	8002118 <HAL_TIM_OC_Start+0x58>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e008      	b.n	800212a <HAL_TIM_OC_Start+0x6a>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e068      	b.n	8002204 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_TIM_OC_Start+0x82>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002140:	e013      	b.n	800216a <HAL_TIM_OC_Start+0xaa>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d104      	bne.n	8002152 <HAL_TIM_OC_Start+0x92>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002150:	e00b      	b.n	800216a <HAL_TIM_OC_Start+0xaa>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_TIM_OC_Start+0xa2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002160:	e003      	b.n	800216a <HAL_TIM_OC_Start+0xaa>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f001 f8aa 	bl	80032cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a23      	ldr	r2, [pc, #140]	@ (800220c <HAL_TIM_OC_Start+0x14c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d107      	bne.n	8002192 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1d      	ldr	r2, [pc, #116]	@ (800220c <HAL_TIM_OC_Start+0x14c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d018      	beq.n	80021ce <HAL_TIM_OC_Start+0x10e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a4:	d013      	beq.n	80021ce <HAL_TIM_OC_Start+0x10e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a19      	ldr	r2, [pc, #100]	@ (8002210 <HAL_TIM_OC_Start+0x150>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00e      	beq.n	80021ce <HAL_TIM_OC_Start+0x10e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <HAL_TIM_OC_Start+0x154>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_OC_Start+0x10e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a16      	ldr	r2, [pc, #88]	@ (8002218 <HAL_TIM_OC_Start+0x158>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_OC_Start+0x10e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_TIM_OC_Start+0x15c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d111      	bne.n	80021f2 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d010      	beq.n	8002202 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	e007      	b.n	8002202 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010000 	.word	0x40010000
 8002210:	40000400 	.word	0x40000400
 8002214:	40000800 	.word	0x40000800
 8002218:	40000c00 	.word	0x40000c00
 800221c:	40014000 	.word	0x40014000

08002220 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e041      	b.n	80022b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f839 	bl	80022be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 fc64 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_IC_Start_IT+0x1e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e013      	b.n	800231a <HAL_TIM_IC_Start_IT+0x46>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_IC_Start_IT+0x2e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	e00b      	b.n	800231a <HAL_TIM_IC_Start_IT+0x46>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d104      	bne.n	8002312 <HAL_TIM_IC_Start_IT+0x3e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230e:	b2db      	uxtb	r3, r3
 8002310:	e003      	b.n	800231a <HAL_TIM_IC_Start_IT+0x46>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002318:	b2db      	uxtb	r3, r3
 800231a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <HAL_TIM_IC_Start_IT+0x58>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e013      	b.n	8002354 <HAL_TIM_IC_Start_IT+0x80>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d104      	bne.n	800233c <HAL_TIM_IC_Start_IT+0x68>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00b      	b.n	8002354 <HAL_TIM_IC_Start_IT+0x80>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b08      	cmp	r3, #8
 8002340:	d104      	bne.n	800234c <HAL_TIM_IC_Start_IT+0x78>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e003      	b.n	8002354 <HAL_TIM_IC_Start_IT+0x80>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002352:	b2db      	uxtb	r3, r3
 8002354:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d102      	bne.n	8002362 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800235c:	7b7b      	ldrb	r3, [r7, #13]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0c2      	b.n	80024ec <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <HAL_TIM_IC_Start_IT+0xa2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002374:	e013      	b.n	800239e <HAL_TIM_IC_Start_IT+0xca>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d104      	bne.n	8002386 <HAL_TIM_IC_Start_IT+0xb2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002384:	e00b      	b.n	800239e <HAL_TIM_IC_Start_IT+0xca>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d104      	bne.n	8002396 <HAL_TIM_IC_Start_IT+0xc2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002394:	e003      	b.n	800239e <HAL_TIM_IC_Start_IT+0xca>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <HAL_TIM_IC_Start_IT+0xda>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ac:	e013      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x102>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d104      	bne.n	80023be <HAL_TIM_IC_Start_IT+0xea>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023bc:	e00b      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x102>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d104      	bne.n	80023ce <HAL_TIM_IC_Start_IT+0xfa>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023cc:	e003      	b.n	80023d6 <HAL_TIM_IC_Start_IT+0x102>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b0c      	cmp	r3, #12
 80023da:	d841      	bhi.n	8002460 <HAL_TIM_IC_Start_IT+0x18c>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <HAL_TIM_IC_Start_IT+0x110>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	08002419 	.word	0x08002419
 80023e8:	08002461 	.word	0x08002461
 80023ec:	08002461 	.word	0x08002461
 80023f0:	08002461 	.word	0x08002461
 80023f4:	0800242b 	.word	0x0800242b
 80023f8:	08002461 	.word	0x08002461
 80023fc:	08002461 	.word	0x08002461
 8002400:	08002461 	.word	0x08002461
 8002404:	0800243d 	.word	0x0800243d
 8002408:	08002461 	.word	0x08002461
 800240c:	08002461 	.word	0x08002461
 8002410:	08002461 	.word	0x08002461
 8002414:	0800244f 	.word	0x0800244f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0202 	orr.w	r2, r2, #2
 8002426:	60da      	str	r2, [r3, #12]
      break;
 8002428:	e01d      	b.n	8002466 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0204 	orr.w	r2, r2, #4
 8002438:	60da      	str	r2, [r3, #12]
      break;
 800243a:	e014      	b.n	8002466 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0208 	orr.w	r2, r2, #8
 800244a:	60da      	str	r2, [r3, #12]
      break;
 800244c:	e00b      	b.n	8002466 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0210 	orr.w	r2, r2, #16
 800245c:	60da      	str	r2, [r3, #12]
      break;
 800245e:	e002      	b.n	8002466 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	bf00      	nop
  }

  if (status == HAL_OK)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d13e      	bne.n	80024ea <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 ff29 	bl	80032cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_TIM_IC_Start_IT+0x220>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d018      	beq.n	80024b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800248c:	d013      	beq.n	80024b6 <HAL_TIM_IC_Start_IT+0x1e2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_TIM_IC_Start_IT+0x224>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00e      	beq.n	80024b6 <HAL_TIM_IC_Start_IT+0x1e2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_TIM_IC_Start_IT+0x228>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <HAL_TIM_IC_Start_IT+0x22c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d004      	beq.n	80024b6 <HAL_TIM_IC_Start_IT+0x1e2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <HAL_TIM_IC_Start_IT+0x230>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d111      	bne.n	80024da <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d010      	beq.n	80024ea <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	e007      	b.n	80024ea <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0201 	orr.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40000c00 	.word	0x40000c00
 8002504:	40014000 	.word	0x40014000

08002508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0202 	mvn.w	r2, #2
 800253c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fb10 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fac8 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 facf 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d020      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe faea 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 faa2 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 faa9 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d020      	beq.n	8002604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0208 	mvn.w	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fac4 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa7c 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fa83 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d020      	beq.n	8002650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0210 	mvn.w	r2, #16
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2208      	movs	r2, #8
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fa9e 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa56 	bl	8002af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fa5d 	bl	8002b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0201 	mvn.w	r2, #1
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fa56 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 feb8 	bl	8003408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fa2e 	bl	8002b18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0220 	mvn.w	r2, #32
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fe8a 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002702:	2302      	movs	r3, #2
 8002704:	e048      	b.n	8002798 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d839      	bhi.n	8002788 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002714:	a201      	add	r2, pc, #4	@ (adr r2, 800271c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002751 	.word	0x08002751
 8002720:	08002789 	.word	0x08002789
 8002724:	08002789 	.word	0x08002789
 8002728:	08002789 	.word	0x08002789
 800272c:	0800275f 	.word	0x0800275f
 8002730:	08002789 	.word	0x08002789
 8002734:	08002789 	.word	0x08002789
 8002738:	08002789 	.word	0x08002789
 800273c:	0800276d 	.word	0x0800276d
 8002740:	08002789 	.word	0x08002789
 8002744:	08002789 	.word	0x08002789
 8002748:	08002789 	.word	0x08002789
 800274c:	0800277b 	.word	0x0800277b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fa74 	bl	8002c44 <TIM_OC1_SetConfig>
      break;
 800275c:	e017      	b.n	800278e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fad3 	bl	8002d10 <TIM_OC2_SetConfig>
      break;
 800276a:	e010      	b.n	800278e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fb38 	bl	8002de8 <TIM_OC3_SetConfig>
      break;
 8002778:	e009      	b.n	800278e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fb9b 	bl	8002ebc <TIM_OC4_SetConfig>
      break;
 8002786:	e002      	b.n	800278e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	75fb      	strb	r3, [r7, #23]
      break;
 800278c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_TIM_IC_ConfigChannel+0x1e>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e088      	b.n	80028d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d11b      	bne.n	8002804 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80027dc:	f000 fbbe 	bl	8002f5c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 020c 	bic.w	r2, r2, #12
 80027ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6999      	ldr	r1, [r3, #24]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	619a      	str	r2, [r3, #24]
 8002802:	e060      	b.n	80028c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d11c      	bne.n	8002844 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800281a:	f000 fc36 	bl	800308a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800282c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6999      	ldr	r1, [r3, #24]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	021a      	lsls	r2, r3, #8
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	619a      	str	r2, [r3, #24]
 8002842:	e040      	b.n	80028c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b08      	cmp	r3, #8
 8002848:	d11b      	bne.n	8002882 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800285a:	f000 fc83 	bl	8003164 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 020c 	bic.w	r2, r2, #12
 800286c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69d9      	ldr	r1, [r3, #28]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	e021      	b.n	80028c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d11c      	bne.n	80028c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002898:	f000 fca0 	bl	80031dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69d9      	ldr	r1, [r3, #28]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	61da      	str	r2, [r3, #28]
 80028c0:	e001      	b.n	80028c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_TIM_ConfigClockSource+0x1c>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0b4      	b.n	8002a5e <HAL_TIM_ConfigClockSource+0x186>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800291a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800292c:	d03e      	beq.n	80029ac <HAL_TIM_ConfigClockSource+0xd4>
 800292e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002932:	f200 8087 	bhi.w	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800293a:	f000 8086 	beq.w	8002a4a <HAL_TIM_ConfigClockSource+0x172>
 800293e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002942:	d87f      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b70      	cmp	r3, #112	@ 0x70
 8002946:	d01a      	beq.n	800297e <HAL_TIM_ConfigClockSource+0xa6>
 8002948:	2b70      	cmp	r3, #112	@ 0x70
 800294a:	d87b      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b60      	cmp	r3, #96	@ 0x60
 800294e:	d050      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002950:	2b60      	cmp	r3, #96	@ 0x60
 8002952:	d877      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b50      	cmp	r3, #80	@ 0x50
 8002956:	d03c      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002958:	2b50      	cmp	r3, #80	@ 0x50
 800295a:	d873      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b40      	cmp	r3, #64	@ 0x40
 800295e:	d058      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x13a>
 8002960:	2b40      	cmp	r3, #64	@ 0x40
 8002962:	d86f      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b30      	cmp	r3, #48	@ 0x30
 8002966:	d064      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 8002968:	2b30      	cmp	r3, #48	@ 0x30
 800296a:	d86b      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b20      	cmp	r3, #32
 800296e:	d060      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	2b20      	cmp	r3, #32
 8002972:	d867      	bhi.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d05c      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	2b10      	cmp	r3, #16
 800297a:	d05a      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x15a>
 800297c:	e062      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800298e:	f000 fc7d 	bl	800328c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	609a      	str	r2, [r3, #8]
      break;
 80029aa:	e04f      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029bc:	f000 fc66 	bl	800328c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029ce:	609a      	str	r2, [r3, #8]
      break;
 80029d0:	e03c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	461a      	mov	r2, r3
 80029e0:	f000 fb24 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2150      	movs	r1, #80	@ 0x50
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fc33 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e02c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029fe:	461a      	mov	r2, r3
 8002a00:	f000 fb80 	bl	8003104 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2160      	movs	r1, #96	@ 0x60
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fc23 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002a10:	e01c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f000 fb04 	bl	800302c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2140      	movs	r1, #64	@ 0x40
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fc13 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002a30:	e00c      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f000 fc0a 	bl	8003256 <TIM_ITRx_SetConfig>
      break;
 8002a42:	e003      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e000      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d831      	bhi.n	8002ae0 <HAL_TIM_ReadCapturedValue+0x78>
 8002a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a84 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002ab9 	.word	0x08002ab9
 8002a88:	08002ae1 	.word	0x08002ae1
 8002a8c:	08002ae1 	.word	0x08002ae1
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002ac3 	.word	0x08002ac3
 8002a98:	08002ae1 	.word	0x08002ae1
 8002a9c:	08002ae1 	.word	0x08002ae1
 8002aa0:	08002ae1 	.word	0x08002ae1
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	08002ae1 	.word	0x08002ae1
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002ad7 	.word	0x08002ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abe:	60fb      	str	r3, [r7, #12]

      break;
 8002ac0:	e00f      	b.n	8002ae2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	60fb      	str	r3, [r7, #12]

      break;
 8002aca:	e00a      	b.n	8002ae2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad2:	60fb      	str	r3, [r7, #12]

      break;
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	60fb      	str	r3, [r7, #12]

      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002ae0:	bf00      	nop
  }

  return tmpreg;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a37      	ldr	r2, [pc, #220]	@ (8002c2c <TIM_Base_SetConfig+0x100>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a36      	ldr	r2, [pc, #216]	@ (8002c30 <TIM_Base_SetConfig+0x104>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x38>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a35      	ldr	r2, [pc, #212]	@ (8002c34 <TIM_Base_SetConfig+0x108>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01b      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b84:	d017      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <TIM_Base_SetConfig+0x100>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a27      	ldr	r2, [pc, #156]	@ (8002c30 <TIM_Base_SetConfig+0x104>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00f      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a26      	ldr	r2, [pc, #152]	@ (8002c34 <TIM_Base_SetConfig+0x108>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00b      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	@ (8002c38 <TIM_Base_SetConfig+0x10c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <TIM_Base_SetConfig+0x110>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0x8a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <TIM_Base_SetConfig+0x114>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d108      	bne.n	8002bc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <TIM_Base_SetConfig+0xfc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f023 0201 	bic.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40000c00 	.word	0x40000c00
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800

08002c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 0201 	bic.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0303 	bic.w	r3, r3, #3
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f023 0302 	bic.w	r3, r3, #2
 8002c8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d0c <TIM_OC1_SetConfig+0xc8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d10c      	bne.n	8002cba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f023 0308 	bic.w	r3, r3, #8
 8002ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <TIM_OC1_SetConfig+0xc8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d111      	bne.n	8002ce6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40010000 	.word	0x40010000

08002d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f023 0210 	bic.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0320 	bic.w	r3, r3, #32
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002de4 <TIM_OC2_SetConfig+0xd4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10d      	bne.n	8002d8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a15      	ldr	r2, [pc, #84]	@ (8002de4 <TIM_OC2_SetConfig+0xd4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d113      	bne.n	8002dbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40010000 	.word	0x40010000

08002de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <TIM_OC3_SetConfig+0xd0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d10d      	bne.n	8002e62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <TIM_OC3_SetConfig+0xd0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d113      	bne.n	8002e92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	621a      	str	r2, [r3, #32]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40010000 	.word	0x40010000

08002ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	031b      	lsls	r3, r3, #12
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a10      	ldr	r2, [pc, #64]	@ (8002f58 <TIM_OC4_SetConfig+0x9c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d109      	bne.n	8002f30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000

08002f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 0201 	bic.w	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a24      	ldr	r2, [pc, #144]	@ (8003018 <TIM_TI1_SetConfig+0xbc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f90:	d00f      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a21      	ldr	r2, [pc, #132]	@ (800301c <TIM_TI1_SetConfig+0xc0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	@ (8003020 <TIM_TI1_SetConfig+0xc4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <TIM_TI1_SetConfig+0xc8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <TIM_TI1_SetConfig+0x56>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <TIM_TI1_SetConfig+0xcc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <TIM_TI1_SetConfig+0x5a>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <TIM_TI1_SetConfig+0x5c>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e003      	b.n	8002fd6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f023 030a 	bic.w	r3, r3, #10
 8002ff0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f003 030a 	and.w	r3, r3, #10
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40014000 	.word	0x40014000

0800302c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f023 030a 	bic.w	r3, r3, #10
 8003068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	621a      	str	r2, [r3, #32]
}
 800307e:	bf00      	nop
 8003080:	371c      	adds	r7, #28
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0210 	bic.w	r2, r3, #16
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	031b      	lsls	r3, r3, #12
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	621a      	str	r2, [r3, #32]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0210 	bic.w	r2, r3, #16
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	031b      	lsls	r3, r3, #12
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f023 0303 	bic.w	r3, r3, #3
 8003190:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80031b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003208:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800321a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	031b      	lsls	r3, r3, #12
 8003220:	b29b      	uxth	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800322e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	031b      	lsls	r3, r3, #12
 8003234:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800326c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	f043 0307 	orr.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	021a      	lsls	r2, r3, #8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2201      	movs	r2, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	401a      	ands	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800332c:	2302      	movs	r3, #2
 800332e:	e050      	b.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337c:	d013      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a18      	ldr	r2, [pc, #96]	@ (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a16      	ldr	r2, [pc, #88]	@ (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10c      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <findslot>:
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <findslot+0x2c>)
 800341e:	b510      	push	{r4, lr}
 8003420:	4604      	mov	r4, r0
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	b118      	cbz	r0, 800342e <findslot+0x12>
 8003426:	6a03      	ldr	r3, [r0, #32]
 8003428:	b90b      	cbnz	r3, 800342e <findslot+0x12>
 800342a:	f000 fb9b 	bl	8003b64 <__sinit>
 800342e:	2c13      	cmp	r4, #19
 8003430:	d807      	bhi.n	8003442 <findslot+0x26>
 8003432:	4806      	ldr	r0, [pc, #24]	@ (800344c <findslot+0x30>)
 8003434:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003438:	3201      	adds	r2, #1
 800343a:	d002      	beq.n	8003442 <findslot+0x26>
 800343c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003440:	bd10      	pop	{r4, pc}
 8003442:	2000      	movs	r0, #0
 8003444:	e7fc      	b.n	8003440 <findslot+0x24>
 8003446:	bf00      	nop
 8003448:	20000020 	.word	0x20000020
 800344c:	20000148 	.word	0x20000148

08003450 <error>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	4604      	mov	r4, r0
 8003454:	f000 fd80 	bl	8003f58 <__errno>
 8003458:	2613      	movs	r6, #19
 800345a:	4605      	mov	r5, r0
 800345c:	2700      	movs	r7, #0
 800345e:	4630      	mov	r0, r6
 8003460:	4639      	mov	r1, r7
 8003462:	beab      	bkpt	0x00ab
 8003464:	4606      	mov	r6, r0
 8003466:	602e      	str	r6, [r5, #0]
 8003468:	4620      	mov	r0, r4
 800346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800346c <checkerror>:
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d101      	bne.n	8003474 <checkerror+0x8>
 8003470:	f7ff bfee 	b.w	8003450 <error>
 8003474:	4770      	bx	lr

08003476 <_swiread>:
 8003476:	b530      	push	{r4, r5, lr}
 8003478:	b085      	sub	sp, #20
 800347a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	2406      	movs	r4, #6
 8003482:	ad01      	add	r5, sp, #4
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	beab      	bkpt	0x00ab
 800348a:	4604      	mov	r4, r0
 800348c:	4620      	mov	r0, r4
 800348e:	f7ff ffed 	bl	800346c <checkerror>
 8003492:	b005      	add	sp, #20
 8003494:	bd30      	pop	{r4, r5, pc}

08003496 <_read>:
 8003496:	b570      	push	{r4, r5, r6, lr}
 8003498:	460e      	mov	r6, r1
 800349a:	4614      	mov	r4, r2
 800349c:	f7ff ffbe 	bl	800341c <findslot>
 80034a0:	4605      	mov	r5, r0
 80034a2:	b930      	cbnz	r0, 80034b2 <_read+0x1c>
 80034a4:	f000 fd58 	bl	8003f58 <__errno>
 80034a8:	2309      	movs	r3, #9
 80034aa:	6003      	str	r3, [r0, #0]
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	4622      	mov	r2, r4
 80034b6:	4631      	mov	r1, r6
 80034b8:	f7ff ffdd 	bl	8003476 <_swiread>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d0f5      	beq.n	80034ac <_read+0x16>
 80034c0:	686b      	ldr	r3, [r5, #4]
 80034c2:	1a20      	subs	r0, r4, r0
 80034c4:	4403      	add	r3, r0
 80034c6:	606b      	str	r3, [r5, #4]
 80034c8:	e7f2      	b.n	80034b0 <_read+0x1a>

080034ca <_swilseek>:
 80034ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034cc:	460c      	mov	r4, r1
 80034ce:	4616      	mov	r6, r2
 80034d0:	f7ff ffa4 	bl	800341c <findslot>
 80034d4:	4605      	mov	r5, r0
 80034d6:	b940      	cbnz	r0, 80034ea <_swilseek+0x20>
 80034d8:	f000 fd3e 	bl	8003f58 <__errno>
 80034dc:	2309      	movs	r3, #9
 80034de:	6003      	str	r3, [r0, #0]
 80034e0:	f04f 34ff 	mov.w	r4, #4294967295
 80034e4:	4620      	mov	r0, r4
 80034e6:	b003      	add	sp, #12
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ea:	2e02      	cmp	r6, #2
 80034ec:	d903      	bls.n	80034f6 <_swilseek+0x2c>
 80034ee:	f000 fd33 	bl	8003f58 <__errno>
 80034f2:	2316      	movs	r3, #22
 80034f4:	e7f3      	b.n	80034de <_swilseek+0x14>
 80034f6:	2e01      	cmp	r6, #1
 80034f8:	d112      	bne.n	8003520 <_swilseek+0x56>
 80034fa:	6843      	ldr	r3, [r0, #4]
 80034fc:	18e4      	adds	r4, r4, r3
 80034fe:	d4f6      	bmi.n	80034ee <_swilseek+0x24>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	260a      	movs	r6, #10
 8003504:	e9cd 3400 	strd	r3, r4, [sp]
 8003508:	466f      	mov	r7, sp
 800350a:	4630      	mov	r0, r6
 800350c:	4639      	mov	r1, r7
 800350e:	beab      	bkpt	0x00ab
 8003510:	4606      	mov	r6, r0
 8003512:	4630      	mov	r0, r6
 8003514:	f7ff ffaa 	bl	800346c <checkerror>
 8003518:	2800      	cmp	r0, #0
 800351a:	dbe1      	blt.n	80034e0 <_swilseek+0x16>
 800351c:	606c      	str	r4, [r5, #4]
 800351e:	e7e1      	b.n	80034e4 <_swilseek+0x1a>
 8003520:	2e02      	cmp	r6, #2
 8003522:	6803      	ldr	r3, [r0, #0]
 8003524:	d1ec      	bne.n	8003500 <_swilseek+0x36>
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	260c      	movs	r6, #12
 800352a:	466f      	mov	r7, sp
 800352c:	4630      	mov	r0, r6
 800352e:	4639      	mov	r1, r7
 8003530:	beab      	bkpt	0x00ab
 8003532:	4606      	mov	r6, r0
 8003534:	4630      	mov	r0, r6
 8003536:	f7ff ff99 	bl	800346c <checkerror>
 800353a:	1c43      	adds	r3, r0, #1
 800353c:	d0d0      	beq.n	80034e0 <_swilseek+0x16>
 800353e:	4404      	add	r4, r0
 8003540:	e7de      	b.n	8003500 <_swilseek+0x36>

08003542 <_lseek>:
 8003542:	f7ff bfc2 	b.w	80034ca <_swilseek>

08003546 <_swiwrite>:
 8003546:	b530      	push	{r4, r5, lr}
 8003548:	b085      	sub	sp, #20
 800354a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800354e:	9203      	str	r2, [sp, #12]
 8003550:	2405      	movs	r4, #5
 8003552:	ad01      	add	r5, sp, #4
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	beab      	bkpt	0x00ab
 800355a:	4604      	mov	r4, r0
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff ff85 	bl	800346c <checkerror>
 8003562:	b005      	add	sp, #20
 8003564:	bd30      	pop	{r4, r5, pc}

08003566 <_write>:
 8003566:	b570      	push	{r4, r5, r6, lr}
 8003568:	460e      	mov	r6, r1
 800356a:	4615      	mov	r5, r2
 800356c:	f7ff ff56 	bl	800341c <findslot>
 8003570:	4604      	mov	r4, r0
 8003572:	b930      	cbnz	r0, 8003582 <_write+0x1c>
 8003574:	f000 fcf0 	bl	8003f58 <__errno>
 8003578:	2309      	movs	r3, #9
 800357a:	6003      	str	r3, [r0, #0]
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	6800      	ldr	r0, [r0, #0]
 8003584:	462a      	mov	r2, r5
 8003586:	4631      	mov	r1, r6
 8003588:	f7ff ffdd 	bl	8003546 <_swiwrite>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	dbf5      	blt.n	800357c <_write+0x16>
 8003590:	6862      	ldr	r2, [r4, #4]
 8003592:	1ae8      	subs	r0, r5, r3
 8003594:	4402      	add	r2, r0
 8003596:	42ab      	cmp	r3, r5
 8003598:	6062      	str	r2, [r4, #4]
 800359a:	d1f1      	bne.n	8003580 <_write+0x1a>
 800359c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7ff bf55 	b.w	8003450 <error>

080035a6 <_swiclose>:
 80035a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035a8:	2402      	movs	r4, #2
 80035aa:	9001      	str	r0, [sp, #4]
 80035ac:	ad01      	add	r5, sp, #4
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	beab      	bkpt	0x00ab
 80035b4:	4604      	mov	r4, r0
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ff58 	bl	800346c <checkerror>
 80035bc:	b003      	add	sp, #12
 80035be:	bd30      	pop	{r4, r5, pc}

080035c0 <_close>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	4605      	mov	r5, r0
 80035c4:	f7ff ff2a 	bl	800341c <findslot>
 80035c8:	4604      	mov	r4, r0
 80035ca:	b930      	cbnz	r0, 80035da <_close+0x1a>
 80035cc:	f000 fcc4 	bl	8003f58 <__errno>
 80035d0:	2309      	movs	r3, #9
 80035d2:	6003      	str	r3, [r0, #0]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	bd38      	pop	{r3, r4, r5, pc}
 80035da:	3d01      	subs	r5, #1
 80035dc:	2d01      	cmp	r5, #1
 80035de:	d809      	bhi.n	80035f4 <_close+0x34>
 80035e0:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <_close+0x40>)
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d104      	bne.n	80035f4 <_close+0x34>
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	2000      	movs	r0, #0
 80035f2:	e7f1      	b.n	80035d8 <_close+0x18>
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	f7ff ffd6 	bl	80035a6 <_swiclose>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d0f5      	beq.n	80035ea <_close+0x2a>
 80035fe:	e7eb      	b.n	80035d8 <_close+0x18>
 8003600:	20000148 	.word	0x20000148

08003604 <_getpid>:
 8003604:	2001      	movs	r0, #1
 8003606:	4770      	bx	lr

08003608 <_swistat>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	460c      	mov	r4, r1
 800360c:	f7ff ff06 	bl	800341c <findslot>
 8003610:	4605      	mov	r5, r0
 8003612:	b930      	cbnz	r0, 8003622 <_swistat+0x1a>
 8003614:	f000 fca0 	bl	8003f58 <__errno>
 8003618:	2309      	movs	r3, #9
 800361a:	6003      	str	r3, [r0, #0]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	bd70      	pop	{r4, r5, r6, pc}
 8003622:	6863      	ldr	r3, [r4, #4]
 8003624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003628:	6063      	str	r3, [r4, #4]
 800362a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800362e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003630:	260c      	movs	r6, #12
 8003632:	4630      	mov	r0, r6
 8003634:	4629      	mov	r1, r5
 8003636:	beab      	bkpt	0x00ab
 8003638:	4605      	mov	r5, r0
 800363a:	4628      	mov	r0, r5
 800363c:	f7ff ff16 	bl	800346c <checkerror>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	d0eb      	beq.n	800361c <_swistat+0x14>
 8003644:	6120      	str	r0, [r4, #16]
 8003646:	2000      	movs	r0, #0
 8003648:	e7ea      	b.n	8003620 <_swistat+0x18>

0800364a <_fstat>:
 800364a:	460b      	mov	r3, r1
 800364c:	b510      	push	{r4, lr}
 800364e:	2100      	movs	r1, #0
 8003650:	4604      	mov	r4, r0
 8003652:	2258      	movs	r2, #88	@ 0x58
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fc03 	bl	8003e60 <memset>
 800365a:	4601      	mov	r1, r0
 800365c:	4620      	mov	r0, r4
 800365e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003662:	f7ff bfd1 	b.w	8003608 <_swistat>

08003666 <_stat>:
 8003666:	b538      	push	{r3, r4, r5, lr}
 8003668:	460d      	mov	r5, r1
 800366a:	4604      	mov	r4, r0
 800366c:	2258      	movs	r2, #88	@ 0x58
 800366e:	2100      	movs	r1, #0
 8003670:	4628      	mov	r0, r5
 8003672:	f000 fbf5 	bl	8003e60 <memset>
 8003676:	4620      	mov	r0, r4
 8003678:	2100      	movs	r1, #0
 800367a:	f000 f811 	bl	80036a0 <_swiopen>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	4604      	mov	r4, r0
 8003682:	d00b      	beq.n	800369c <_stat+0x36>
 8003684:	686b      	ldr	r3, [r5, #4]
 8003686:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800368a:	606b      	str	r3, [r5, #4]
 800368c:	4629      	mov	r1, r5
 800368e:	f7ff ffbb 	bl	8003608 <_swistat>
 8003692:	4605      	mov	r5, r0
 8003694:	4620      	mov	r0, r4
 8003696:	f7ff ff93 	bl	80035c0 <_close>
 800369a:	462c      	mov	r4, r5
 800369c:	4620      	mov	r0, r4
 800369e:	bd38      	pop	{r3, r4, r5, pc}

080036a0 <_swiopen>:
 80036a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	4f29      	ldr	r7, [pc, #164]	@ (800374c <_swiopen+0xac>)
 80036a6:	b096      	sub	sp, #88	@ 0x58
 80036a8:	4682      	mov	sl, r0
 80036aa:	460e      	mov	r6, r1
 80036ac:	2400      	movs	r4, #0
 80036ae:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80036b2:	3301      	adds	r3, #1
 80036b4:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80036b8:	d00c      	beq.n	80036d4 <_swiopen+0x34>
 80036ba:	3401      	adds	r4, #1
 80036bc:	2c14      	cmp	r4, #20
 80036be:	d1f6      	bne.n	80036ae <_swiopen+0xe>
 80036c0:	f000 fc4a 	bl	8003f58 <__errno>
 80036c4:	2318      	movs	r3, #24
 80036c6:	6003      	str	r3, [r0, #0]
 80036c8:	f04f 34ff 	mov.w	r4, #4294967295
 80036cc:	4620      	mov	r0, r4
 80036ce:	b016      	add	sp, #88	@ 0x58
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80036d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80036dc:	46e9      	mov	r9, sp
 80036de:	d109      	bne.n	80036f4 <_swiopen+0x54>
 80036e0:	4649      	mov	r1, r9
 80036e2:	4650      	mov	r0, sl
 80036e4:	f7ff ffbf 	bl	8003666 <_stat>
 80036e8:	3001      	adds	r0, #1
 80036ea:	d003      	beq.n	80036f4 <_swiopen+0x54>
 80036ec:	f000 fc34 	bl	8003f58 <__errno>
 80036f0:	2311      	movs	r3, #17
 80036f2:	e7e8      	b.n	80036c6 <_swiopen+0x26>
 80036f4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80036f8:	f240 6301 	movw	r3, #1537	@ 0x601
 80036fc:	07b2      	lsls	r2, r6, #30
 80036fe:	bf48      	it	mi
 8003700:	f045 0502 	orrmi.w	r5, r5, #2
 8003704:	421e      	tst	r6, r3
 8003706:	bf18      	it	ne
 8003708:	f045 0504 	orrne.w	r5, r5, #4
 800370c:	0733      	lsls	r3, r6, #28
 800370e:	bf48      	it	mi
 8003710:	f025 0504 	bicmi.w	r5, r5, #4
 8003714:	4650      	mov	r0, sl
 8003716:	bf48      	it	mi
 8003718:	f045 0508 	orrmi.w	r5, r5, #8
 800371c:	f8cd a000 	str.w	sl, [sp]
 8003720:	f7fc fd5e 	bl	80001e0 <strlen>
 8003724:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003728:	2501      	movs	r5, #1
 800372a:	4628      	mov	r0, r5
 800372c:	4649      	mov	r1, r9
 800372e:	beab      	bkpt	0x00ab
 8003730:	4605      	mov	r5, r0
 8003732:	2d00      	cmp	r5, #0
 8003734:	db05      	blt.n	8003742 <_swiopen+0xa2>
 8003736:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800373a:	4447      	add	r7, r8
 800373c:	2300      	movs	r3, #0
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	e7c4      	b.n	80036cc <_swiopen+0x2c>
 8003742:	4628      	mov	r0, r5
 8003744:	f7ff fe84 	bl	8003450 <error>
 8003748:	4604      	mov	r4, r0
 800374a:	e7bf      	b.n	80036cc <_swiopen+0x2c>
 800374c:	20000148 	.word	0x20000148

08003750 <_get_semihosting_exts>:
 8003750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003754:	4606      	mov	r6, r0
 8003756:	460f      	mov	r7, r1
 8003758:	4829      	ldr	r0, [pc, #164]	@ (8003800 <_get_semihosting_exts+0xb0>)
 800375a:	2100      	movs	r1, #0
 800375c:	4615      	mov	r5, r2
 800375e:	f7ff ff9f 	bl	80036a0 <_swiopen>
 8003762:	462a      	mov	r2, r5
 8003764:	4604      	mov	r4, r0
 8003766:	2100      	movs	r1, #0
 8003768:	4630      	mov	r0, r6
 800376a:	f000 fb79 	bl	8003e60 <memset>
 800376e:	1c63      	adds	r3, r4, #1
 8003770:	d014      	beq.n	800379c <_get_semihosting_exts+0x4c>
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff fe52 	bl	800341c <findslot>
 8003778:	f04f 080c 	mov.w	r8, #12
 800377c:	4681      	mov	r9, r0
 800377e:	4640      	mov	r0, r8
 8003780:	4649      	mov	r1, r9
 8003782:	beab      	bkpt	0x00ab
 8003784:	4680      	mov	r8, r0
 8003786:	4640      	mov	r0, r8
 8003788:	f7ff fe70 	bl	800346c <checkerror>
 800378c:	2803      	cmp	r0, #3
 800378e:	dd02      	ble.n	8003796 <_get_semihosting_exts+0x46>
 8003790:	1ec3      	subs	r3, r0, #3
 8003792:	42ab      	cmp	r3, r5
 8003794:	dc07      	bgt.n	80037a6 <_get_semihosting_exts+0x56>
 8003796:	4620      	mov	r0, r4
 8003798:	f7ff ff12 	bl	80035c0 <_close>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	b003      	add	sp, #12
 80037a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037a6:	2204      	movs	r2, #4
 80037a8:	eb0d 0102 	add.w	r1, sp, r2
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff fe72 	bl	8003496 <_read>
 80037b2:	2803      	cmp	r0, #3
 80037b4:	ddef      	ble.n	8003796 <_get_semihosting_exts+0x46>
 80037b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037ba:	2b53      	cmp	r3, #83	@ 0x53
 80037bc:	d1eb      	bne.n	8003796 <_get_semihosting_exts+0x46>
 80037be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80037c2:	2b48      	cmp	r3, #72	@ 0x48
 80037c4:	d1e7      	bne.n	8003796 <_get_semihosting_exts+0x46>
 80037c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80037ca:	2b46      	cmp	r3, #70	@ 0x46
 80037cc:	d1e3      	bne.n	8003796 <_get_semihosting_exts+0x46>
 80037ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037d2:	2b42      	cmp	r3, #66	@ 0x42
 80037d4:	d1df      	bne.n	8003796 <_get_semihosting_exts+0x46>
 80037d6:	2201      	movs	r2, #1
 80037d8:	4639      	mov	r1, r7
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff fe75 	bl	80034ca <_swilseek>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	dbd8      	blt.n	8003796 <_get_semihosting_exts+0x46>
 80037e4:	462a      	mov	r2, r5
 80037e6:	4631      	mov	r1, r6
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff fe54 	bl	8003496 <_read>
 80037ee:	4605      	mov	r5, r0
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7ff fee5 	bl	80035c0 <_close>
 80037f6:	4628      	mov	r0, r5
 80037f8:	f7ff fe38 	bl	800346c <checkerror>
 80037fc:	e7d0      	b.n	80037a0 <_get_semihosting_exts+0x50>
 80037fe:	bf00      	nop
 8003800:	08004b94 	.word	0x08004b94

08003804 <initialise_semihosting_exts>:
 8003804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003806:	4d0a      	ldr	r5, [pc, #40]	@ (8003830 <initialise_semihosting_exts+0x2c>)
 8003808:	4c0a      	ldr	r4, [pc, #40]	@ (8003834 <initialise_semihosting_exts+0x30>)
 800380a:	2100      	movs	r1, #0
 800380c:	2201      	movs	r2, #1
 800380e:	a801      	add	r0, sp, #4
 8003810:	6029      	str	r1, [r5, #0]
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	f7ff ff9c 	bl	8003750 <_get_semihosting_exts>
 8003818:	2800      	cmp	r0, #0
 800381a:	dd07      	ble.n	800382c <initialise_semihosting_exts+0x28>
 800381c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003820:	f003 0201 	and.w	r2, r3, #1
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	602a      	str	r2, [r5, #0]
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	b003      	add	sp, #12
 800382e:	bd30      	pop	{r4, r5, pc}
 8003830:	20000010 	.word	0x20000010
 8003834:	2000000c 	.word	0x2000000c

08003838 <_has_ext_stdout_stderr>:
 8003838:	b510      	push	{r4, lr}
 800383a:	4c04      	ldr	r4, [pc, #16]	@ (800384c <_has_ext_stdout_stderr+0x14>)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	da01      	bge.n	8003846 <_has_ext_stdout_stderr+0xe>
 8003842:	f7ff ffdf 	bl	8003804 <initialise_semihosting_exts>
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	2000000c 	.word	0x2000000c

08003850 <initialise_monitor_handles>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	b085      	sub	sp, #20
 8003856:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003908 <initialise_monitor_handles+0xb8>
 800385a:	f8cd 9004 	str.w	r9, [sp, #4]
 800385e:	2303      	movs	r3, #3
 8003860:	2400      	movs	r4, #0
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	af01      	add	r7, sp, #4
 8003866:	9402      	str	r4, [sp, #8]
 8003868:	2501      	movs	r5, #1
 800386a:	4628      	mov	r0, r5
 800386c:	4639      	mov	r1, r7
 800386e:	beab      	bkpt	0x00ab
 8003870:	4605      	mov	r5, r0
 8003872:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800390c <initialise_monitor_handles+0xbc>
 8003876:	4623      	mov	r3, r4
 8003878:	4c20      	ldr	r4, [pc, #128]	@ (80038fc <initialise_monitor_handles+0xac>)
 800387a:	f8c8 5000 	str.w	r5, [r8]
 800387e:	f04f 32ff 	mov.w	r2, #4294967295
 8003882:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003886:	3301      	adds	r3, #1
 8003888:	2b14      	cmp	r3, #20
 800388a:	d1fa      	bne.n	8003882 <initialise_monitor_handles+0x32>
 800388c:	f7ff ffd4 	bl	8003838 <_has_ext_stdout_stderr>
 8003890:	4d1b      	ldr	r5, [pc, #108]	@ (8003900 <initialise_monitor_handles+0xb0>)
 8003892:	b1d0      	cbz	r0, 80038ca <initialise_monitor_handles+0x7a>
 8003894:	f04f 0a03 	mov.w	sl, #3
 8003898:	2304      	movs	r3, #4
 800389a:	f8cd 9004 	str.w	r9, [sp, #4]
 800389e:	2601      	movs	r6, #1
 80038a0:	f8cd a00c 	str.w	sl, [sp, #12]
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	4630      	mov	r0, r6
 80038a8:	4639      	mov	r1, r7
 80038aa:	beab      	bkpt	0x00ab
 80038ac:	4683      	mov	fp, r0
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <initialise_monitor_handles+0xb4>)
 80038b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80038b4:	f8c3 b000 	str.w	fp, [r3]
 80038b8:	2308      	movs	r3, #8
 80038ba:	f8cd a00c 	str.w	sl, [sp, #12]
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	4630      	mov	r0, r6
 80038c2:	4639      	mov	r1, r7
 80038c4:	beab      	bkpt	0x00ab
 80038c6:	4606      	mov	r6, r0
 80038c8:	602e      	str	r6, [r5, #0]
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	bf02      	ittt	eq
 80038d0:	4b0c      	ldreq	r3, [pc, #48]	@ (8003904 <initialise_monitor_handles+0xb4>)
 80038d2:	681b      	ldreq	r3, [r3, #0]
 80038d4:	602b      	streq	r3, [r5, #0]
 80038d6:	2600      	movs	r6, #0
 80038d8:	f8d8 3000 	ldr.w	r3, [r8]
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	6066      	str	r6, [r4, #4]
 80038e0:	f7ff ffaa 	bl	8003838 <_has_ext_stdout_stderr>
 80038e4:	b130      	cbz	r0, 80038f4 <initialise_monitor_handles+0xa4>
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <initialise_monitor_handles+0xb4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80038f4:	b005      	add	sp, #20
 80038f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038fa:	bf00      	nop
 80038fc:	20000148 	.word	0x20000148
 8003900:	2000013c 	.word	0x2000013c
 8003904:	20000140 	.word	0x20000140
 8003908:	08004baa 	.word	0x08004baa
 800390c:	20000144 	.word	0x20000144

08003910 <_gettimeofday>:
 8003910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003912:	460d      	mov	r5, r1
 8003914:	4604      	mov	r4, r0
 8003916:	b148      	cbz	r0, 800392c <_gettimeofday+0x1c>
 8003918:	2700      	movs	r7, #0
 800391a:	2611      	movs	r6, #17
 800391c:	4630      	mov	r0, r6
 800391e:	4639      	mov	r1, r7
 8003920:	beab      	bkpt	0x00ab
 8003922:	4606      	mov	r6, r0
 8003924:	17f3      	asrs	r3, r6, #31
 8003926:	e9c4 6300 	strd	r6, r3, [r4]
 800392a:	60a7      	str	r7, [r4, #8]
 800392c:	b115      	cbz	r5, 8003934 <_gettimeofday+0x24>
 800392e:	2300      	movs	r3, #0
 8003930:	e9c5 3300 	strd	r3, r3, [r5]
 8003934:	2000      	movs	r0, #0
 8003936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003938 <_isatty>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	f7ff fd6f 	bl	800341c <findslot>
 800393e:	2409      	movs	r4, #9
 8003940:	4605      	mov	r5, r0
 8003942:	b920      	cbnz	r0, 800394e <_isatty+0x16>
 8003944:	f000 fb08 	bl	8003f58 <__errno>
 8003948:	6004      	str	r4, [r0, #0]
 800394a:	2000      	movs	r0, #0
 800394c:	bd70      	pop	{r4, r5, r6, pc}
 800394e:	4620      	mov	r0, r4
 8003950:	4629      	mov	r1, r5
 8003952:	beab      	bkpt	0x00ab
 8003954:	4604      	mov	r4, r0
 8003956:	2c01      	cmp	r4, #1
 8003958:	4620      	mov	r0, r4
 800395a:	d0f7      	beq.n	800394c <_isatty+0x14>
 800395c:	f000 fafc 	bl	8003f58 <__errno>
 8003960:	2513      	movs	r5, #19
 8003962:	4604      	mov	r4, r0
 8003964:	2600      	movs	r6, #0
 8003966:	4628      	mov	r0, r5
 8003968:	4631      	mov	r1, r6
 800396a:	beab      	bkpt	0x00ab
 800396c:	4605      	mov	r5, r0
 800396e:	6025      	str	r5, [r4, #0]
 8003970:	e7eb      	b.n	800394a <_isatty+0x12>
	...

08003974 <srand>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4b10      	ldr	r3, [pc, #64]	@ (80039b8 <srand+0x44>)
 8003978:	681d      	ldr	r5, [r3, #0]
 800397a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800397c:	4604      	mov	r4, r0
 800397e:	b9b3      	cbnz	r3, 80039ae <srand+0x3a>
 8003980:	2018      	movs	r0, #24
 8003982:	f000 fb7f 	bl	8004084 <malloc>
 8003986:	4602      	mov	r2, r0
 8003988:	6328      	str	r0, [r5, #48]	@ 0x30
 800398a:	b920      	cbnz	r0, 8003996 <srand+0x22>
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <srand+0x48>)
 800398e:	480c      	ldr	r0, [pc, #48]	@ (80039c0 <srand+0x4c>)
 8003990:	2146      	movs	r1, #70	@ 0x46
 8003992:	f000 fb0f 	bl	8003fb4 <__assert_func>
 8003996:	490b      	ldr	r1, [pc, #44]	@ (80039c4 <srand+0x50>)
 8003998:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <srand+0x54>)
 800399a:	e9c0 1300 	strd	r1, r3, [r0]
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <srand+0x58>)
 80039a0:	6083      	str	r3, [r0, #8]
 80039a2:	230b      	movs	r3, #11
 80039a4:	8183      	strh	r3, [r0, #12]
 80039a6:	2100      	movs	r1, #0
 80039a8:	2001      	movs	r0, #1
 80039aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80039ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80039b0:	2200      	movs	r2, #0
 80039b2:	611c      	str	r4, [r3, #16]
 80039b4:	615a      	str	r2, [r3, #20]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	20000020 	.word	0x20000020
 80039bc:	08004bae 	.word	0x08004bae
 80039c0:	08004bc5 	.word	0x08004bc5
 80039c4:	abcd330e 	.word	0xabcd330e
 80039c8:	e66d1234 	.word	0xe66d1234
 80039cc:	0005deec 	.word	0x0005deec

080039d0 <rand>:
 80039d0:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <rand+0x5c>)
 80039d2:	b510      	push	{r4, lr}
 80039d4:	681c      	ldr	r4, [r3, #0]
 80039d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80039d8:	b9b3      	cbnz	r3, 8003a08 <rand+0x38>
 80039da:	2018      	movs	r0, #24
 80039dc:	f000 fb52 	bl	8004084 <malloc>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80039e4:	b920      	cbnz	r0, 80039f0 <rand+0x20>
 80039e6:	4b12      	ldr	r3, [pc, #72]	@ (8003a30 <rand+0x60>)
 80039e8:	4812      	ldr	r0, [pc, #72]	@ (8003a34 <rand+0x64>)
 80039ea:	2152      	movs	r1, #82	@ 0x52
 80039ec:	f000 fae2 	bl	8003fb4 <__assert_func>
 80039f0:	4911      	ldr	r1, [pc, #68]	@ (8003a38 <rand+0x68>)
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <rand+0x6c>)
 80039f4:	e9c0 1300 	strd	r1, r3, [r0]
 80039f8:	4b11      	ldr	r3, [pc, #68]	@ (8003a40 <rand+0x70>)
 80039fa:	6083      	str	r3, [r0, #8]
 80039fc:	230b      	movs	r3, #11
 80039fe:	8183      	strh	r3, [r0, #12]
 8003a00:	2100      	movs	r1, #0
 8003a02:	2001      	movs	r0, #1
 8003a04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003a08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003a0a:	480e      	ldr	r0, [pc, #56]	@ (8003a44 <rand+0x74>)
 8003a0c:	690b      	ldr	r3, [r1, #16]
 8003a0e:	694c      	ldr	r4, [r1, #20]
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <rand+0x78>)
 8003a12:	4358      	muls	r0, r3
 8003a14:	fb02 0004 	mla	r0, r2, r4, r0
 8003a18:	fba3 3202 	umull	r3, r2, r3, r2
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	eb40 0002 	adc.w	r0, r0, r2
 8003a22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003a26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003a2a:	bd10      	pop	{r4, pc}
 8003a2c:	20000020 	.word	0x20000020
 8003a30:	08004bae 	.word	0x08004bae
 8003a34:	08004bc5 	.word	0x08004bc5
 8003a38:	abcd330e 	.word	0xabcd330e
 8003a3c:	e66d1234 	.word	0xe66d1234
 8003a40:	0005deec 	.word	0x0005deec
 8003a44:	5851f42d 	.word	0x5851f42d
 8003a48:	4c957f2d 	.word	0x4c957f2d

08003a4c <std>:
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	4604      	mov	r4, r0
 8003a52:	e9c0 3300 	strd	r3, r3, [r0]
 8003a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a5a:	6083      	str	r3, [r0, #8]
 8003a5c:	8181      	strh	r1, [r0, #12]
 8003a5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a60:	81c2      	strh	r2, [r0, #14]
 8003a62:	6183      	str	r3, [r0, #24]
 8003a64:	4619      	mov	r1, r3
 8003a66:	2208      	movs	r2, #8
 8003a68:	305c      	adds	r0, #92	@ 0x5c
 8003a6a:	f000 f9f9 	bl	8003e60 <memset>
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <std+0x58>)
 8003a70:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <std+0x5c>)
 8003a74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <std+0x60>)
 8003a78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <std+0x64>)
 8003a7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <std+0x68>)
 8003a80:	6224      	str	r4, [r4, #32]
 8003a82:	429c      	cmp	r4, r3
 8003a84:	d006      	beq.n	8003a94 <std+0x48>
 8003a86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a8a:	4294      	cmp	r4, r2
 8003a8c:	d002      	beq.n	8003a94 <std+0x48>
 8003a8e:	33d0      	adds	r3, #208	@ 0xd0
 8003a90:	429c      	cmp	r4, r3
 8003a92:	d105      	bne.n	8003aa0 <std+0x54>
 8003a94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a9c:	f000 ba86 	b.w	8003fac <__retarget_lock_init_recursive>
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08003cb1 	.word	0x08003cb1
 8003aa8:	08003cd3 	.word	0x08003cd3
 8003aac:	08003d0b 	.word	0x08003d0b
 8003ab0:	08003d2f 	.word	0x08003d2f
 8003ab4:	200001e8 	.word	0x200001e8

08003ab8 <stdio_exit_handler>:
 8003ab8:	4a02      	ldr	r2, [pc, #8]	@ (8003ac4 <stdio_exit_handler+0xc>)
 8003aba:	4903      	ldr	r1, [pc, #12]	@ (8003ac8 <stdio_exit_handler+0x10>)
 8003abc:	4803      	ldr	r0, [pc, #12]	@ (8003acc <stdio_exit_handler+0x14>)
 8003abe:	f000 b869 	b.w	8003b94 <_fwalk_sglue>
 8003ac2:	bf00      	nop
 8003ac4:	20000014 	.word	0x20000014
 8003ac8:	08004899 	.word	0x08004899
 8003acc:	20000024 	.word	0x20000024

08003ad0 <cleanup_stdio>:
 8003ad0:	6841      	ldr	r1, [r0, #4]
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <cleanup_stdio+0x34>)
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	4604      	mov	r4, r0
 8003ada:	d001      	beq.n	8003ae0 <cleanup_stdio+0x10>
 8003adc:	f000 fedc 	bl	8004898 <_fflush_r>
 8003ae0:	68a1      	ldr	r1, [r4, #8]
 8003ae2:	4b09      	ldr	r3, [pc, #36]	@ (8003b08 <cleanup_stdio+0x38>)
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	d002      	beq.n	8003aee <cleanup_stdio+0x1e>
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f000 fed5 	bl	8004898 <_fflush_r>
 8003aee:	68e1      	ldr	r1, [r4, #12]
 8003af0:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <cleanup_stdio+0x3c>)
 8003af2:	4299      	cmp	r1, r3
 8003af4:	d004      	beq.n	8003b00 <cleanup_stdio+0x30>
 8003af6:	4620      	mov	r0, r4
 8003af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003afc:	f000 becc 	b.w	8004898 <_fflush_r>
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	bf00      	nop
 8003b04:	200001e8 	.word	0x200001e8
 8003b08:	20000250 	.word	0x20000250
 8003b0c:	200002b8 	.word	0x200002b8

08003b10 <global_stdio_init.part.0>:
 8003b10:	b510      	push	{r4, lr}
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <global_stdio_init.part.0+0x30>)
 8003b14:	4c0b      	ldr	r4, [pc, #44]	@ (8003b44 <global_stdio_init.part.0+0x34>)
 8003b16:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <global_stdio_init.part.0+0x38>)
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2104      	movs	r1, #4
 8003b20:	f7ff ff94 	bl	8003a4c <std>
 8003b24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b28:	2201      	movs	r2, #1
 8003b2a:	2109      	movs	r1, #9
 8003b2c:	f7ff ff8e 	bl	8003a4c <std>
 8003b30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b34:	2202      	movs	r2, #2
 8003b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b3a:	2112      	movs	r1, #18
 8003b3c:	f7ff bf86 	b.w	8003a4c <std>
 8003b40:	20000320 	.word	0x20000320
 8003b44:	200001e8 	.word	0x200001e8
 8003b48:	08003ab9 	.word	0x08003ab9

08003b4c <__sfp_lock_acquire>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <__sfp_lock_acquire+0x8>)
 8003b4e:	f000 ba2e 	b.w	8003fae <__retarget_lock_acquire_recursive>
 8003b52:	bf00      	nop
 8003b54:	20000329 	.word	0x20000329

08003b58 <__sfp_lock_release>:
 8003b58:	4801      	ldr	r0, [pc, #4]	@ (8003b60 <__sfp_lock_release+0x8>)
 8003b5a:	f000 ba29 	b.w	8003fb0 <__retarget_lock_release_recursive>
 8003b5e:	bf00      	nop
 8003b60:	20000329 	.word	0x20000329

08003b64 <__sinit>:
 8003b64:	b510      	push	{r4, lr}
 8003b66:	4604      	mov	r4, r0
 8003b68:	f7ff fff0 	bl	8003b4c <__sfp_lock_acquire>
 8003b6c:	6a23      	ldr	r3, [r4, #32]
 8003b6e:	b11b      	cbz	r3, 8003b78 <__sinit+0x14>
 8003b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b74:	f7ff bff0 	b.w	8003b58 <__sfp_lock_release>
 8003b78:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <__sinit+0x28>)
 8003b7a:	6223      	str	r3, [r4, #32]
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__sinit+0x2c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f5      	bne.n	8003b70 <__sinit+0xc>
 8003b84:	f7ff ffc4 	bl	8003b10 <global_stdio_init.part.0>
 8003b88:	e7f2      	b.n	8003b70 <__sinit+0xc>
 8003b8a:	bf00      	nop
 8003b8c:	08003ad1 	.word	0x08003ad1
 8003b90:	20000320 	.word	0x20000320

08003b94 <_fwalk_sglue>:
 8003b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b98:	4607      	mov	r7, r0
 8003b9a:	4688      	mov	r8, r1
 8003b9c:	4614      	mov	r4, r2
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ba8:	d505      	bpl.n	8003bb6 <_fwalk_sglue+0x22>
 8003baa:	6824      	ldr	r4, [r4, #0]
 8003bac:	2c00      	cmp	r4, #0
 8003bae:	d1f7      	bne.n	8003ba0 <_fwalk_sglue+0xc>
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d907      	bls.n	8003bcc <_fwalk_sglue+0x38>
 8003bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	d003      	beq.n	8003bcc <_fwalk_sglue+0x38>
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c0      	blx	r8
 8003bca:	4306      	orrs	r6, r0
 8003bcc:	3568      	adds	r5, #104	@ 0x68
 8003bce:	e7e9      	b.n	8003ba4 <_fwalk_sglue+0x10>

08003bd0 <iprintf>:
 8003bd0:	b40f      	push	{r0, r1, r2, r3}
 8003bd2:	b507      	push	{r0, r1, r2, lr}
 8003bd4:	4906      	ldr	r1, [pc, #24]	@ (8003bf0 <iprintf+0x20>)
 8003bd6:	ab04      	add	r3, sp, #16
 8003bd8:	6808      	ldr	r0, [r1, #0]
 8003bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bde:	6881      	ldr	r1, [r0, #8]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	f000 fb2f 	bl	8004244 <_vfiprintf_r>
 8003be6:	b003      	add	sp, #12
 8003be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bec:	b004      	add	sp, #16
 8003bee:	4770      	bx	lr
 8003bf0:	20000020 	.word	0x20000020

08003bf4 <_puts_r>:
 8003bf4:	6a03      	ldr	r3, [r0, #32]
 8003bf6:	b570      	push	{r4, r5, r6, lr}
 8003bf8:	6884      	ldr	r4, [r0, #8]
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	460e      	mov	r6, r1
 8003bfe:	b90b      	cbnz	r3, 8003c04 <_puts_r+0x10>
 8003c00:	f7ff ffb0 	bl	8003b64 <__sinit>
 8003c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c06:	07db      	lsls	r3, r3, #31
 8003c08:	d405      	bmi.n	8003c16 <_puts_r+0x22>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	0598      	lsls	r0, r3, #22
 8003c0e:	d402      	bmi.n	8003c16 <_puts_r+0x22>
 8003c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c12:	f000 f9cc 	bl	8003fae <__retarget_lock_acquire_recursive>
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	0719      	lsls	r1, r3, #28
 8003c1a:	d502      	bpl.n	8003c22 <_puts_r+0x2e>
 8003c1c:	6923      	ldr	r3, [r4, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d135      	bne.n	8003c8e <_puts_r+0x9a>
 8003c22:	4621      	mov	r1, r4
 8003c24:	4628      	mov	r0, r5
 8003c26:	f000 f8c5 	bl	8003db4 <__swsetup_r>
 8003c2a:	b380      	cbz	r0, 8003c8e <_puts_r+0x9a>
 8003c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c32:	07da      	lsls	r2, r3, #31
 8003c34:	d405      	bmi.n	8003c42 <_puts_r+0x4e>
 8003c36:	89a3      	ldrh	r3, [r4, #12]
 8003c38:	059b      	lsls	r3, r3, #22
 8003c3a:	d402      	bmi.n	8003c42 <_puts_r+0x4e>
 8003c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c3e:	f000 f9b7 	bl	8003fb0 <__retarget_lock_release_recursive>
 8003c42:	4628      	mov	r0, r5
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da04      	bge.n	8003c54 <_puts_r+0x60>
 8003c4a:	69a2      	ldr	r2, [r4, #24]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	dc17      	bgt.n	8003c80 <_puts_r+0x8c>
 8003c50:	290a      	cmp	r1, #10
 8003c52:	d015      	beq.n	8003c80 <_puts_r+0x8c>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	6022      	str	r2, [r4, #0]
 8003c5a:	7019      	strb	r1, [r3, #0]
 8003c5c:	68a3      	ldr	r3, [r4, #8]
 8003c5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60a3      	str	r3, [r4, #8]
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d1ed      	bne.n	8003c46 <_puts_r+0x52>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da11      	bge.n	8003c92 <_puts_r+0x9e>
 8003c6e:	4622      	mov	r2, r4
 8003c70:	210a      	movs	r1, #10
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f85f 	bl	8003d36 <__swbuf_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d0d7      	beq.n	8003c2c <_puts_r+0x38>
 8003c7c:	250a      	movs	r5, #10
 8003c7e:	e7d7      	b.n	8003c30 <_puts_r+0x3c>
 8003c80:	4622      	mov	r2, r4
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 f857 	bl	8003d36 <__swbuf_r>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d1e7      	bne.n	8003c5c <_puts_r+0x68>
 8003c8c:	e7ce      	b.n	8003c2c <_puts_r+0x38>
 8003c8e:	3e01      	subs	r6, #1
 8003c90:	e7e4      	b.n	8003c5c <_puts_r+0x68>
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	6022      	str	r2, [r4, #0]
 8003c98:	220a      	movs	r2, #10
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e7ee      	b.n	8003c7c <_puts_r+0x88>
	...

08003ca0 <puts>:
 8003ca0:	4b02      	ldr	r3, [pc, #8]	@ (8003cac <puts+0xc>)
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	f7ff bfa5 	b.w	8003bf4 <_puts_r>
 8003caa:	bf00      	nop
 8003cac:	20000020 	.word	0x20000020

08003cb0 <__sread>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb8:	f000 f92a 	bl	8003f10 <_read_r>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	bfab      	itete	ge
 8003cc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc4:	181b      	addge	r3, r3, r0
 8003cc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cca:	bfac      	ite	ge
 8003ccc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cce:	81a3      	strhlt	r3, [r4, #12]
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <__swrite>:
 8003cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	461f      	mov	r7, r3
 8003cd8:	898b      	ldrh	r3, [r1, #12]
 8003cda:	05db      	lsls	r3, r3, #23
 8003cdc:	4605      	mov	r5, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	d505      	bpl.n	8003cf0 <__swrite+0x1e>
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2200      	movs	r2, #0
 8003cec:	f000 f8fe 	bl	8003eec <_lseek_r>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	4632      	mov	r2, r6
 8003cfe:	463b      	mov	r3, r7
 8003d00:	4628      	mov	r0, r5
 8003d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d06:	f000 b915 	b.w	8003f34 <_write_r>

08003d0a <__sseek>:
 8003d0a:	b510      	push	{r4, lr}
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d12:	f000 f8eb 	bl	8003eec <_lseek_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	bf15      	itete	ne
 8003d1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d26:	81a3      	strheq	r3, [r4, #12]
 8003d28:	bf18      	it	ne
 8003d2a:	81a3      	strhne	r3, [r4, #12]
 8003d2c:	bd10      	pop	{r4, pc}

08003d2e <__sclose>:
 8003d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d32:	f000 b8b9 	b.w	8003ea8 <_close_r>

08003d36 <__swbuf_r>:
 8003d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d38:	460e      	mov	r6, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	b118      	cbz	r0, 8003d48 <__swbuf_r+0x12>
 8003d40:	6a03      	ldr	r3, [r0, #32]
 8003d42:	b90b      	cbnz	r3, 8003d48 <__swbuf_r+0x12>
 8003d44:	f7ff ff0e 	bl	8003b64 <__sinit>
 8003d48:	69a3      	ldr	r3, [r4, #24]
 8003d4a:	60a3      	str	r3, [r4, #8]
 8003d4c:	89a3      	ldrh	r3, [r4, #12]
 8003d4e:	071a      	lsls	r2, r3, #28
 8003d50:	d501      	bpl.n	8003d56 <__swbuf_r+0x20>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	b943      	cbnz	r3, 8003d68 <__swbuf_r+0x32>
 8003d56:	4621      	mov	r1, r4
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 f82b 	bl	8003db4 <__swsetup_r>
 8003d5e:	b118      	cbz	r0, 8003d68 <__swbuf_r+0x32>
 8003d60:	f04f 37ff 	mov.w	r7, #4294967295
 8003d64:	4638      	mov	r0, r7
 8003d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	6922      	ldr	r2, [r4, #16]
 8003d6c:	1a98      	subs	r0, r3, r2
 8003d6e:	6963      	ldr	r3, [r4, #20]
 8003d70:	b2f6      	uxtb	r6, r6
 8003d72:	4283      	cmp	r3, r0
 8003d74:	4637      	mov	r7, r6
 8003d76:	dc05      	bgt.n	8003d84 <__swbuf_r+0x4e>
 8003d78:	4621      	mov	r1, r4
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 fd8c 	bl	8004898 <_fflush_r>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d1ed      	bne.n	8003d60 <__swbuf_r+0x2a>
 8003d84:	68a3      	ldr	r3, [r4, #8]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60a3      	str	r3, [r4, #8]
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	701e      	strb	r6, [r3, #0]
 8003d92:	6962      	ldr	r2, [r4, #20]
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d004      	beq.n	8003da4 <__swbuf_r+0x6e>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	07db      	lsls	r3, r3, #31
 8003d9e:	d5e1      	bpl.n	8003d64 <__swbuf_r+0x2e>
 8003da0:	2e0a      	cmp	r6, #10
 8003da2:	d1df      	bne.n	8003d64 <__swbuf_r+0x2e>
 8003da4:	4621      	mov	r1, r4
 8003da6:	4628      	mov	r0, r5
 8003da8:	f000 fd76 	bl	8004898 <_fflush_r>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d0d9      	beq.n	8003d64 <__swbuf_r+0x2e>
 8003db0:	e7d6      	b.n	8003d60 <__swbuf_r+0x2a>
	...

08003db4 <__swsetup_r>:
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	4b29      	ldr	r3, [pc, #164]	@ (8003e5c <__swsetup_r+0xa8>)
 8003db8:	4605      	mov	r5, r0
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	b118      	cbz	r0, 8003dc8 <__swsetup_r+0x14>
 8003dc0:	6a03      	ldr	r3, [r0, #32]
 8003dc2:	b90b      	cbnz	r3, 8003dc8 <__swsetup_r+0x14>
 8003dc4:	f7ff fece 	bl	8003b64 <__sinit>
 8003dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dcc:	0719      	lsls	r1, r3, #28
 8003dce:	d422      	bmi.n	8003e16 <__swsetup_r+0x62>
 8003dd0:	06da      	lsls	r2, r3, #27
 8003dd2:	d407      	bmi.n	8003de4 <__swsetup_r+0x30>
 8003dd4:	2209      	movs	r2, #9
 8003dd6:	602a      	str	r2, [r5, #0]
 8003dd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ddc:	81a3      	strh	r3, [r4, #12]
 8003dde:	f04f 30ff 	mov.w	r0, #4294967295
 8003de2:	e033      	b.n	8003e4c <__swsetup_r+0x98>
 8003de4:	0758      	lsls	r0, r3, #29
 8003de6:	d512      	bpl.n	8003e0e <__swsetup_r+0x5a>
 8003de8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dea:	b141      	cbz	r1, 8003dfe <__swsetup_r+0x4a>
 8003dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003df0:	4299      	cmp	r1, r3
 8003df2:	d002      	beq.n	8003dfa <__swsetup_r+0x46>
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 f8fb 	bl	8003ff0 <_free_r>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dfe:	89a3      	ldrh	r3, [r4, #12]
 8003e00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	2300      	movs	r3, #0
 8003e08:	6063      	str	r3, [r4, #4]
 8003e0a:	6923      	ldr	r3, [r4, #16]
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f043 0308 	orr.w	r3, r3, #8
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	b94b      	cbnz	r3, 8003e2e <__swsetup_r+0x7a>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e24:	d003      	beq.n	8003e2e <__swsetup_r+0x7a>
 8003e26:	4621      	mov	r1, r4
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 fd95 	bl	8004958 <__smakebuf_r>
 8003e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e32:	f013 0201 	ands.w	r2, r3, #1
 8003e36:	d00a      	beq.n	8003e4e <__swsetup_r+0x9a>
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60a2      	str	r2, [r4, #8]
 8003e3c:	6962      	ldr	r2, [r4, #20]
 8003e3e:	4252      	negs	r2, r2
 8003e40:	61a2      	str	r2, [r4, #24]
 8003e42:	6922      	ldr	r2, [r4, #16]
 8003e44:	b942      	cbnz	r2, 8003e58 <__swsetup_r+0xa4>
 8003e46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e4a:	d1c5      	bne.n	8003dd8 <__swsetup_r+0x24>
 8003e4c:	bd38      	pop	{r3, r4, r5, pc}
 8003e4e:	0799      	lsls	r1, r3, #30
 8003e50:	bf58      	it	pl
 8003e52:	6962      	ldrpl	r2, [r4, #20]
 8003e54:	60a2      	str	r2, [r4, #8]
 8003e56:	e7f4      	b.n	8003e42 <__swsetup_r+0x8e>
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e7f7      	b.n	8003e4c <__swsetup_r+0x98>
 8003e5c:	20000020 	.word	0x20000020

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <time>:
 8003e70:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003e72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <time+0x34>)
 8003e74:	f04f 36ff 	mov.w	r6, #4294967295
 8003e78:	f04f 37ff 	mov.w	r7, #4294967295
 8003e7c:	4669      	mov	r1, sp
 8003e7e:	4604      	mov	r4, r0
 8003e80:	2200      	movs	r2, #0
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	e9cd 6700 	strd	r6, r7, [sp]
 8003e88:	f000 f81e 	bl	8003ec8 <_gettimeofday_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bfb8      	it	lt
 8003e90:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e98:	b10c      	cbz	r4, 8003e9e <time+0x2e>
 8003e9a:	e9c4 0100 	strd	r0, r1, [r4]
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bdd0      	pop	{r4, r6, r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000020 	.word	0x20000020

08003ea8 <_close_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d06      	ldr	r5, [pc, #24]	@ (8003ec4 <_close_r+0x1c>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7ff fb84 	bl	80035c0 <_close>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_close_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_close_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	20000324 	.word	0x20000324

08003ec8 <_gettimeofday_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4d07      	ldr	r5, [pc, #28]	@ (8003ee8 <_gettimeofday_r+0x20>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	f7ff fd1b 	bl	8003910 <_gettimeofday>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	d102      	bne.n	8003ee4 <_gettimeofday_r+0x1c>
 8003ede:	682b      	ldr	r3, [r5, #0]
 8003ee0:	b103      	cbz	r3, 8003ee4 <_gettimeofday_r+0x1c>
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000324 	.word	0x20000324

08003eec <_lseek_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4d07      	ldr	r5, [pc, #28]	@ (8003f0c <_lseek_r+0x20>)
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	4608      	mov	r0, r1
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f7ff fb21 	bl	8003542 <_lseek>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_lseek_r+0x1e>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_lseek_r+0x1e>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000324 	.word	0x20000324

08003f10 <_read_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4d07      	ldr	r5, [pc, #28]	@ (8003f30 <_read_r+0x20>)
 8003f14:	4604      	mov	r4, r0
 8003f16:	4608      	mov	r0, r1
 8003f18:	4611      	mov	r1, r2
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	602a      	str	r2, [r5, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f7ff fab9 	bl	8003496 <_read>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_read_r+0x1e>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_read_r+0x1e>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000324 	.word	0x20000324

08003f34 <_write_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d07      	ldr	r5, [pc, #28]	@ (8003f54 <_write_r+0x20>)
 8003f38:	4604      	mov	r4, r0
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7ff fb0f 	bl	8003566 <_write>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_write_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_write_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000324 	.word	0x20000324

08003f58 <__errno>:
 8003f58:	4b01      	ldr	r3, [pc, #4]	@ (8003f60 <__errno+0x8>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000020 	.word	0x20000020

08003f64 <__libc_init_array>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4d0d      	ldr	r5, [pc, #52]	@ (8003f9c <__libc_init_array+0x38>)
 8003f68:	4c0d      	ldr	r4, [pc, #52]	@ (8003fa0 <__libc_init_array+0x3c>)
 8003f6a:	1b64      	subs	r4, r4, r5
 8003f6c:	10a4      	asrs	r4, r4, #2
 8003f6e:	2600      	movs	r6, #0
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	d109      	bne.n	8003f88 <__libc_init_array+0x24>
 8003f74:	4d0b      	ldr	r5, [pc, #44]	@ (8003fa4 <__libc_init_array+0x40>)
 8003f76:	4c0c      	ldr	r4, [pc, #48]	@ (8003fa8 <__libc_init_array+0x44>)
 8003f78:	f000 fdb2 	bl	8004ae0 <_init>
 8003f7c:	1b64      	subs	r4, r4, r5
 8003f7e:	10a4      	asrs	r4, r4, #2
 8003f80:	2600      	movs	r6, #0
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	d105      	bne.n	8003f92 <__libc_init_array+0x2e>
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8c:	4798      	blx	r3
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7ee      	b.n	8003f70 <__libc_init_array+0xc>
 8003f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f96:	4798      	blx	r3
 8003f98:	3601      	adds	r6, #1
 8003f9a:	e7f2      	b.n	8003f82 <__libc_init_array+0x1e>
 8003f9c:	08004c94 	.word	0x08004c94
 8003fa0:	08004c94 	.word	0x08004c94
 8003fa4:	08004c94 	.word	0x08004c94
 8003fa8:	08004c98 	.word	0x08004c98

08003fac <__retarget_lock_init_recursive>:
 8003fac:	4770      	bx	lr

08003fae <__retarget_lock_acquire_recursive>:
 8003fae:	4770      	bx	lr

08003fb0 <__retarget_lock_release_recursive>:
 8003fb0:	4770      	bx	lr
	...

08003fb4 <__assert_func>:
 8003fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003fb6:	4614      	mov	r4, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <__assert_func+0x2c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	68d8      	ldr	r0, [r3, #12]
 8003fc2:	b954      	cbnz	r4, 8003fda <__assert_func+0x26>
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <__assert_func+0x30>)
 8003fc6:	461c      	mov	r4, r3
 8003fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003fcc:	9100      	str	r1, [sp, #0]
 8003fce:	462b      	mov	r3, r5
 8003fd0:	4905      	ldr	r1, [pc, #20]	@ (8003fe8 <__assert_func+0x34>)
 8003fd2:	f000 fc89 	bl	80048e8 <fiprintf>
 8003fd6:	f000 fd2d 	bl	8004a34 <abort>
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <__assert_func+0x38>)
 8003fdc:	e7f4      	b.n	8003fc8 <__assert_func+0x14>
 8003fde:	bf00      	nop
 8003fe0:	20000020 	.word	0x20000020
 8003fe4:	08004c58 	.word	0x08004c58
 8003fe8:	08004c2a 	.word	0x08004c2a
 8003fec:	08004c1d 	.word	0x08004c1d

08003ff0 <_free_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	2900      	cmp	r1, #0
 8003ff6:	d041      	beq.n	800407c <_free_r+0x8c>
 8003ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ffc:	1f0c      	subs	r4, r1, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bfb8      	it	lt
 8004002:	18e4      	addlt	r4, r4, r3
 8004004:	f000 f8e8 	bl	80041d8 <__malloc_lock>
 8004008:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <_free_r+0x90>)
 800400a:	6813      	ldr	r3, [r2, #0]
 800400c:	b933      	cbnz	r3, 800401c <_free_r+0x2c>
 800400e:	6063      	str	r3, [r4, #4]
 8004010:	6014      	str	r4, [r2, #0]
 8004012:	4628      	mov	r0, r5
 8004014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004018:	f000 b8e4 	b.w	80041e4 <__malloc_unlock>
 800401c:	42a3      	cmp	r3, r4
 800401e:	d908      	bls.n	8004032 <_free_r+0x42>
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	1821      	adds	r1, r4, r0
 8004024:	428b      	cmp	r3, r1
 8004026:	bf01      	itttt	eq
 8004028:	6819      	ldreq	r1, [r3, #0]
 800402a:	685b      	ldreq	r3, [r3, #4]
 800402c:	1809      	addeq	r1, r1, r0
 800402e:	6021      	streq	r1, [r4, #0]
 8004030:	e7ed      	b.n	800400e <_free_r+0x1e>
 8004032:	461a      	mov	r2, r3
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	b10b      	cbz	r3, 800403c <_free_r+0x4c>
 8004038:	42a3      	cmp	r3, r4
 800403a:	d9fa      	bls.n	8004032 <_free_r+0x42>
 800403c:	6811      	ldr	r1, [r2, #0]
 800403e:	1850      	adds	r0, r2, r1
 8004040:	42a0      	cmp	r0, r4
 8004042:	d10b      	bne.n	800405c <_free_r+0x6c>
 8004044:	6820      	ldr	r0, [r4, #0]
 8004046:	4401      	add	r1, r0
 8004048:	1850      	adds	r0, r2, r1
 800404a:	4283      	cmp	r3, r0
 800404c:	6011      	str	r1, [r2, #0]
 800404e:	d1e0      	bne.n	8004012 <_free_r+0x22>
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	6053      	str	r3, [r2, #4]
 8004056:	4408      	add	r0, r1
 8004058:	6010      	str	r0, [r2, #0]
 800405a:	e7da      	b.n	8004012 <_free_r+0x22>
 800405c:	d902      	bls.n	8004064 <_free_r+0x74>
 800405e:	230c      	movs	r3, #12
 8004060:	602b      	str	r3, [r5, #0]
 8004062:	e7d6      	b.n	8004012 <_free_r+0x22>
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	1821      	adds	r1, r4, r0
 8004068:	428b      	cmp	r3, r1
 800406a:	bf04      	itt	eq
 800406c:	6819      	ldreq	r1, [r3, #0]
 800406e:	685b      	ldreq	r3, [r3, #4]
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	bf04      	itt	eq
 8004074:	1809      	addeq	r1, r1, r0
 8004076:	6021      	streq	r1, [r4, #0]
 8004078:	6054      	str	r4, [r2, #4]
 800407a:	e7ca      	b.n	8004012 <_free_r+0x22>
 800407c:	bd38      	pop	{r3, r4, r5, pc}
 800407e:	bf00      	nop
 8004080:	20000330 	.word	0x20000330

08004084 <malloc>:
 8004084:	4b02      	ldr	r3, [pc, #8]	@ (8004090 <malloc+0xc>)
 8004086:	4601      	mov	r1, r0
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	f000 b825 	b.w	80040d8 <_malloc_r>
 800408e:	bf00      	nop
 8004090:	20000020 	.word	0x20000020

08004094 <sbrk_aligned>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4e0f      	ldr	r6, [pc, #60]	@ (80040d4 <sbrk_aligned+0x40>)
 8004098:	460c      	mov	r4, r1
 800409a:	6831      	ldr	r1, [r6, #0]
 800409c:	4605      	mov	r5, r0
 800409e:	b911      	cbnz	r1, 80040a6 <sbrk_aligned+0x12>
 80040a0:	f000 fcb8 	bl	8004a14 <_sbrk_r>
 80040a4:	6030      	str	r0, [r6, #0]
 80040a6:	4621      	mov	r1, r4
 80040a8:	4628      	mov	r0, r5
 80040aa:	f000 fcb3 	bl	8004a14 <_sbrk_r>
 80040ae:	1c43      	adds	r3, r0, #1
 80040b0:	d103      	bne.n	80040ba <sbrk_aligned+0x26>
 80040b2:	f04f 34ff 	mov.w	r4, #4294967295
 80040b6:	4620      	mov	r0, r4
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d0f8      	beq.n	80040b6 <sbrk_aligned+0x22>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 fca4 	bl	8004a14 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d1f2      	bne.n	80040b6 <sbrk_aligned+0x22>
 80040d0:	e7ef      	b.n	80040b2 <sbrk_aligned+0x1e>
 80040d2:	bf00      	nop
 80040d4:	2000032c 	.word	0x2000032c

080040d8 <_malloc_r>:
 80040d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040dc:	1ccd      	adds	r5, r1, #3
 80040de:	f025 0503 	bic.w	r5, r5, #3
 80040e2:	3508      	adds	r5, #8
 80040e4:	2d0c      	cmp	r5, #12
 80040e6:	bf38      	it	cc
 80040e8:	250c      	movcc	r5, #12
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	4606      	mov	r6, r0
 80040ee:	db01      	blt.n	80040f4 <_malloc_r+0x1c>
 80040f0:	42a9      	cmp	r1, r5
 80040f2:	d904      	bls.n	80040fe <_malloc_r+0x26>
 80040f4:	230c      	movs	r3, #12
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	2000      	movs	r0, #0
 80040fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041d4 <_malloc_r+0xfc>
 8004102:	f000 f869 	bl	80041d8 <__malloc_lock>
 8004106:	f8d8 3000 	ldr.w	r3, [r8]
 800410a:	461c      	mov	r4, r3
 800410c:	bb44      	cbnz	r4, 8004160 <_malloc_r+0x88>
 800410e:	4629      	mov	r1, r5
 8004110:	4630      	mov	r0, r6
 8004112:	f7ff ffbf 	bl	8004094 <sbrk_aligned>
 8004116:	1c43      	adds	r3, r0, #1
 8004118:	4604      	mov	r4, r0
 800411a:	d158      	bne.n	80041ce <_malloc_r+0xf6>
 800411c:	f8d8 4000 	ldr.w	r4, [r8]
 8004120:	4627      	mov	r7, r4
 8004122:	2f00      	cmp	r7, #0
 8004124:	d143      	bne.n	80041ae <_malloc_r+0xd6>
 8004126:	2c00      	cmp	r4, #0
 8004128:	d04b      	beq.n	80041c2 <_malloc_r+0xea>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	4639      	mov	r1, r7
 800412e:	4630      	mov	r0, r6
 8004130:	eb04 0903 	add.w	r9, r4, r3
 8004134:	f000 fc6e 	bl	8004a14 <_sbrk_r>
 8004138:	4581      	cmp	r9, r0
 800413a:	d142      	bne.n	80041c2 <_malloc_r+0xea>
 800413c:	6821      	ldr	r1, [r4, #0]
 800413e:	1a6d      	subs	r5, r5, r1
 8004140:	4629      	mov	r1, r5
 8004142:	4630      	mov	r0, r6
 8004144:	f7ff ffa6 	bl	8004094 <sbrk_aligned>
 8004148:	3001      	adds	r0, #1
 800414a:	d03a      	beq.n	80041c2 <_malloc_r+0xea>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	442b      	add	r3, r5
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	f8d8 3000 	ldr.w	r3, [r8]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	bb62      	cbnz	r2, 80041b4 <_malloc_r+0xdc>
 800415a:	f8c8 7000 	str.w	r7, [r8]
 800415e:	e00f      	b.n	8004180 <_malloc_r+0xa8>
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	1b52      	subs	r2, r2, r5
 8004164:	d420      	bmi.n	80041a8 <_malloc_r+0xd0>
 8004166:	2a0b      	cmp	r2, #11
 8004168:	d917      	bls.n	800419a <_malloc_r+0xc2>
 800416a:	1961      	adds	r1, r4, r5
 800416c:	42a3      	cmp	r3, r4
 800416e:	6025      	str	r5, [r4, #0]
 8004170:	bf18      	it	ne
 8004172:	6059      	strne	r1, [r3, #4]
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	bf08      	it	eq
 8004178:	f8c8 1000 	streq.w	r1, [r8]
 800417c:	5162      	str	r2, [r4, r5]
 800417e:	604b      	str	r3, [r1, #4]
 8004180:	4630      	mov	r0, r6
 8004182:	f000 f82f 	bl	80041e4 <__malloc_unlock>
 8004186:	f104 000b 	add.w	r0, r4, #11
 800418a:	1d23      	adds	r3, r4, #4
 800418c:	f020 0007 	bic.w	r0, r0, #7
 8004190:	1ac2      	subs	r2, r0, r3
 8004192:	bf1c      	itt	ne
 8004194:	1a1b      	subne	r3, r3, r0
 8004196:	50a3      	strne	r3, [r4, r2]
 8004198:	e7af      	b.n	80040fa <_malloc_r+0x22>
 800419a:	6862      	ldr	r2, [r4, #4]
 800419c:	42a3      	cmp	r3, r4
 800419e:	bf0c      	ite	eq
 80041a0:	f8c8 2000 	streq.w	r2, [r8]
 80041a4:	605a      	strne	r2, [r3, #4]
 80041a6:	e7eb      	b.n	8004180 <_malloc_r+0xa8>
 80041a8:	4623      	mov	r3, r4
 80041aa:	6864      	ldr	r4, [r4, #4]
 80041ac:	e7ae      	b.n	800410c <_malloc_r+0x34>
 80041ae:	463c      	mov	r4, r7
 80041b0:	687f      	ldr	r7, [r7, #4]
 80041b2:	e7b6      	b.n	8004122 <_malloc_r+0x4a>
 80041b4:	461a      	mov	r2, r3
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	d1fb      	bne.n	80041b4 <_malloc_r+0xdc>
 80041bc:	2300      	movs	r3, #0
 80041be:	6053      	str	r3, [r2, #4]
 80041c0:	e7de      	b.n	8004180 <_malloc_r+0xa8>
 80041c2:	230c      	movs	r3, #12
 80041c4:	6033      	str	r3, [r6, #0]
 80041c6:	4630      	mov	r0, r6
 80041c8:	f000 f80c 	bl	80041e4 <__malloc_unlock>
 80041cc:	e794      	b.n	80040f8 <_malloc_r+0x20>
 80041ce:	6005      	str	r5, [r0, #0]
 80041d0:	e7d6      	b.n	8004180 <_malloc_r+0xa8>
 80041d2:	bf00      	nop
 80041d4:	20000330 	.word	0x20000330

080041d8 <__malloc_lock>:
 80041d8:	4801      	ldr	r0, [pc, #4]	@ (80041e0 <__malloc_lock+0x8>)
 80041da:	f7ff bee8 	b.w	8003fae <__retarget_lock_acquire_recursive>
 80041de:	bf00      	nop
 80041e0:	20000328 	.word	0x20000328

080041e4 <__malloc_unlock>:
 80041e4:	4801      	ldr	r0, [pc, #4]	@ (80041ec <__malloc_unlock+0x8>)
 80041e6:	f7ff bee3 	b.w	8003fb0 <__retarget_lock_release_recursive>
 80041ea:	bf00      	nop
 80041ec:	20000328 	.word	0x20000328

080041f0 <__sfputc_r>:
 80041f0:	6893      	ldr	r3, [r2, #8]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	b410      	push	{r4}
 80041f8:	6093      	str	r3, [r2, #8]
 80041fa:	da08      	bge.n	800420e <__sfputc_r+0x1e>
 80041fc:	6994      	ldr	r4, [r2, #24]
 80041fe:	42a3      	cmp	r3, r4
 8004200:	db01      	blt.n	8004206 <__sfputc_r+0x16>
 8004202:	290a      	cmp	r1, #10
 8004204:	d103      	bne.n	800420e <__sfputc_r+0x1e>
 8004206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800420a:	f7ff bd94 	b.w	8003d36 <__swbuf_r>
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	1c58      	adds	r0, r3, #1
 8004212:	6010      	str	r0, [r2, #0]
 8004214:	7019      	strb	r1, [r3, #0]
 8004216:	4608      	mov	r0, r1
 8004218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800421c:	4770      	bx	lr

0800421e <__sfputs_r>:
 800421e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	4614      	mov	r4, r2
 8004226:	18d5      	adds	r5, r2, r3
 8004228:	42ac      	cmp	r4, r5
 800422a:	d101      	bne.n	8004230 <__sfputs_r+0x12>
 800422c:	2000      	movs	r0, #0
 800422e:	e007      	b.n	8004240 <__sfputs_r+0x22>
 8004230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004234:	463a      	mov	r2, r7
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff ffda 	bl	80041f0 <__sfputc_r>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d1f3      	bne.n	8004228 <__sfputs_r+0xa>
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004244 <_vfiprintf_r>:
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	460d      	mov	r5, r1
 800424a:	b09d      	sub	sp, #116	@ 0x74
 800424c:	4614      	mov	r4, r2
 800424e:	4698      	mov	r8, r3
 8004250:	4606      	mov	r6, r0
 8004252:	b118      	cbz	r0, 800425c <_vfiprintf_r+0x18>
 8004254:	6a03      	ldr	r3, [r0, #32]
 8004256:	b90b      	cbnz	r3, 800425c <_vfiprintf_r+0x18>
 8004258:	f7ff fc84 	bl	8003b64 <__sinit>
 800425c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800425e:	07d9      	lsls	r1, r3, #31
 8004260:	d405      	bmi.n	800426e <_vfiprintf_r+0x2a>
 8004262:	89ab      	ldrh	r3, [r5, #12]
 8004264:	059a      	lsls	r2, r3, #22
 8004266:	d402      	bmi.n	800426e <_vfiprintf_r+0x2a>
 8004268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800426a:	f7ff fea0 	bl	8003fae <__retarget_lock_acquire_recursive>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	d501      	bpl.n	8004278 <_vfiprintf_r+0x34>
 8004274:	692b      	ldr	r3, [r5, #16]
 8004276:	b99b      	cbnz	r3, 80042a0 <_vfiprintf_r+0x5c>
 8004278:	4629      	mov	r1, r5
 800427a:	4630      	mov	r0, r6
 800427c:	f7ff fd9a 	bl	8003db4 <__swsetup_r>
 8004280:	b170      	cbz	r0, 80042a0 <_vfiprintf_r+0x5c>
 8004282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004284:	07dc      	lsls	r4, r3, #31
 8004286:	d504      	bpl.n	8004292 <_vfiprintf_r+0x4e>
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	b01d      	add	sp, #116	@ 0x74
 800428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	0598      	lsls	r0, r3, #22
 8004296:	d4f7      	bmi.n	8004288 <_vfiprintf_r+0x44>
 8004298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800429a:	f7ff fe89 	bl	8003fb0 <__retarget_lock_release_recursive>
 800429e:	e7f3      	b.n	8004288 <_vfiprintf_r+0x44>
 80042a0:	2300      	movs	r3, #0
 80042a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a4:	2320      	movs	r3, #32
 80042a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ae:	2330      	movs	r3, #48	@ 0x30
 80042b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004460 <_vfiprintf_r+0x21c>
 80042b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042b8:	f04f 0901 	mov.w	r9, #1
 80042bc:	4623      	mov	r3, r4
 80042be:	469a      	mov	sl, r3
 80042c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c4:	b10a      	cbz	r2, 80042ca <_vfiprintf_r+0x86>
 80042c6:	2a25      	cmp	r2, #37	@ 0x25
 80042c8:	d1f9      	bne.n	80042be <_vfiprintf_r+0x7a>
 80042ca:	ebba 0b04 	subs.w	fp, sl, r4
 80042ce:	d00b      	beq.n	80042e8 <_vfiprintf_r+0xa4>
 80042d0:	465b      	mov	r3, fp
 80042d2:	4622      	mov	r2, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff ffa1 	bl	800421e <__sfputs_r>
 80042dc:	3001      	adds	r0, #1
 80042de:	f000 80a7 	beq.w	8004430 <_vfiprintf_r+0x1ec>
 80042e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042e4:	445a      	add	r2, fp
 80042e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80042e8:	f89a 3000 	ldrb.w	r3, [sl]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 809f 	beq.w	8004430 <_vfiprintf_r+0x1ec>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042fc:	f10a 0a01 	add.w	sl, sl, #1
 8004300:	9304      	str	r3, [sp, #16]
 8004302:	9307      	str	r3, [sp, #28]
 8004304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004308:	931a      	str	r3, [sp, #104]	@ 0x68
 800430a:	4654      	mov	r4, sl
 800430c:	2205      	movs	r2, #5
 800430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004312:	4853      	ldr	r0, [pc, #332]	@ (8004460 <_vfiprintf_r+0x21c>)
 8004314:	f7fb ff6c 	bl	80001f0 <memchr>
 8004318:	9a04      	ldr	r2, [sp, #16]
 800431a:	b9d8      	cbnz	r0, 8004354 <_vfiprintf_r+0x110>
 800431c:	06d1      	lsls	r1, r2, #27
 800431e:	bf44      	itt	mi
 8004320:	2320      	movmi	r3, #32
 8004322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004326:	0713      	lsls	r3, r2, #28
 8004328:	bf44      	itt	mi
 800432a:	232b      	movmi	r3, #43	@ 0x2b
 800432c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004330:	f89a 3000 	ldrb.w	r3, [sl]
 8004334:	2b2a      	cmp	r3, #42	@ 0x2a
 8004336:	d015      	beq.n	8004364 <_vfiprintf_r+0x120>
 8004338:	9a07      	ldr	r2, [sp, #28]
 800433a:	4654      	mov	r4, sl
 800433c:	2000      	movs	r0, #0
 800433e:	f04f 0c0a 	mov.w	ip, #10
 8004342:	4621      	mov	r1, r4
 8004344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004348:	3b30      	subs	r3, #48	@ 0x30
 800434a:	2b09      	cmp	r3, #9
 800434c:	d94b      	bls.n	80043e6 <_vfiprintf_r+0x1a2>
 800434e:	b1b0      	cbz	r0, 800437e <_vfiprintf_r+0x13a>
 8004350:	9207      	str	r2, [sp, #28]
 8004352:	e014      	b.n	800437e <_vfiprintf_r+0x13a>
 8004354:	eba0 0308 	sub.w	r3, r0, r8
 8004358:	fa09 f303 	lsl.w	r3, r9, r3
 800435c:	4313      	orrs	r3, r2
 800435e:	9304      	str	r3, [sp, #16]
 8004360:	46a2      	mov	sl, r4
 8004362:	e7d2      	b.n	800430a <_vfiprintf_r+0xc6>
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	1d19      	adds	r1, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	9103      	str	r1, [sp, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	bfbb      	ittet	lt
 8004370:	425b      	neglt	r3, r3
 8004372:	f042 0202 	orrlt.w	r2, r2, #2
 8004376:	9307      	strge	r3, [sp, #28]
 8004378:	9307      	strlt	r3, [sp, #28]
 800437a:	bfb8      	it	lt
 800437c:	9204      	strlt	r2, [sp, #16]
 800437e:	7823      	ldrb	r3, [r4, #0]
 8004380:	2b2e      	cmp	r3, #46	@ 0x2e
 8004382:	d10a      	bne.n	800439a <_vfiprintf_r+0x156>
 8004384:	7863      	ldrb	r3, [r4, #1]
 8004386:	2b2a      	cmp	r3, #42	@ 0x2a
 8004388:	d132      	bne.n	80043f0 <_vfiprintf_r+0x1ac>
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	1d1a      	adds	r2, r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	9203      	str	r2, [sp, #12]
 8004392:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004396:	3402      	adds	r4, #2
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004470 <_vfiprintf_r+0x22c>
 800439e:	7821      	ldrb	r1, [r4, #0]
 80043a0:	2203      	movs	r2, #3
 80043a2:	4650      	mov	r0, sl
 80043a4:	f7fb ff24 	bl	80001f0 <memchr>
 80043a8:	b138      	cbz	r0, 80043ba <_vfiprintf_r+0x176>
 80043aa:	9b04      	ldr	r3, [sp, #16]
 80043ac:	eba0 000a 	sub.w	r0, r0, sl
 80043b0:	2240      	movs	r2, #64	@ 0x40
 80043b2:	4082      	lsls	r2, r0
 80043b4:	4313      	orrs	r3, r2
 80043b6:	3401      	adds	r4, #1
 80043b8:	9304      	str	r3, [sp, #16]
 80043ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043be:	4829      	ldr	r0, [pc, #164]	@ (8004464 <_vfiprintf_r+0x220>)
 80043c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043c4:	2206      	movs	r2, #6
 80043c6:	f7fb ff13 	bl	80001f0 <memchr>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d03f      	beq.n	800444e <_vfiprintf_r+0x20a>
 80043ce:	4b26      	ldr	r3, [pc, #152]	@ (8004468 <_vfiprintf_r+0x224>)
 80043d0:	bb1b      	cbnz	r3, 800441a <_vfiprintf_r+0x1d6>
 80043d2:	9b03      	ldr	r3, [sp, #12]
 80043d4:	3307      	adds	r3, #7
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	3308      	adds	r3, #8
 80043dc:	9303      	str	r3, [sp, #12]
 80043de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043e0:	443b      	add	r3, r7
 80043e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e4:	e76a      	b.n	80042bc <_vfiprintf_r+0x78>
 80043e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043ea:	460c      	mov	r4, r1
 80043ec:	2001      	movs	r0, #1
 80043ee:	e7a8      	b.n	8004342 <_vfiprintf_r+0xfe>
 80043f0:	2300      	movs	r3, #0
 80043f2:	3401      	adds	r4, #1
 80043f4:	9305      	str	r3, [sp, #20]
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 0c0a 	mov.w	ip, #10
 80043fc:	4620      	mov	r0, r4
 80043fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004402:	3a30      	subs	r2, #48	@ 0x30
 8004404:	2a09      	cmp	r2, #9
 8004406:	d903      	bls.n	8004410 <_vfiprintf_r+0x1cc>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0c6      	beq.n	800439a <_vfiprintf_r+0x156>
 800440c:	9105      	str	r1, [sp, #20]
 800440e:	e7c4      	b.n	800439a <_vfiprintf_r+0x156>
 8004410:	fb0c 2101 	mla	r1, ip, r1, r2
 8004414:	4604      	mov	r4, r0
 8004416:	2301      	movs	r3, #1
 8004418:	e7f0      	b.n	80043fc <_vfiprintf_r+0x1b8>
 800441a:	ab03      	add	r3, sp, #12
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	462a      	mov	r2, r5
 8004420:	4b12      	ldr	r3, [pc, #72]	@ (800446c <_vfiprintf_r+0x228>)
 8004422:	a904      	add	r1, sp, #16
 8004424:	4630      	mov	r0, r6
 8004426:	f3af 8000 	nop.w
 800442a:	4607      	mov	r7, r0
 800442c:	1c78      	adds	r0, r7, #1
 800442e:	d1d6      	bne.n	80043de <_vfiprintf_r+0x19a>
 8004430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004432:	07d9      	lsls	r1, r3, #31
 8004434:	d405      	bmi.n	8004442 <_vfiprintf_r+0x1fe>
 8004436:	89ab      	ldrh	r3, [r5, #12]
 8004438:	059a      	lsls	r2, r3, #22
 800443a:	d402      	bmi.n	8004442 <_vfiprintf_r+0x1fe>
 800443c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800443e:	f7ff fdb7 	bl	8003fb0 <__retarget_lock_release_recursive>
 8004442:	89ab      	ldrh	r3, [r5, #12]
 8004444:	065b      	lsls	r3, r3, #25
 8004446:	f53f af1f 	bmi.w	8004288 <_vfiprintf_r+0x44>
 800444a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800444c:	e71e      	b.n	800428c <_vfiprintf_r+0x48>
 800444e:	ab03      	add	r3, sp, #12
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	462a      	mov	r2, r5
 8004454:	4b05      	ldr	r3, [pc, #20]	@ (800446c <_vfiprintf_r+0x228>)
 8004456:	a904      	add	r1, sp, #16
 8004458:	4630      	mov	r0, r6
 800445a:	f000 f879 	bl	8004550 <_printf_i>
 800445e:	e7e4      	b.n	800442a <_vfiprintf_r+0x1e6>
 8004460:	08004c59 	.word	0x08004c59
 8004464:	08004c63 	.word	0x08004c63
 8004468:	00000000 	.word	0x00000000
 800446c:	0800421f 	.word	0x0800421f
 8004470:	08004c5f 	.word	0x08004c5f

08004474 <_printf_common>:
 8004474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	4616      	mov	r6, r2
 800447a:	4698      	mov	r8, r3
 800447c:	688a      	ldr	r2, [r1, #8]
 800447e:	690b      	ldr	r3, [r1, #16]
 8004480:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004484:	4293      	cmp	r3, r2
 8004486:	bfb8      	it	lt
 8004488:	4613      	movlt	r3, r2
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004490:	4607      	mov	r7, r0
 8004492:	460c      	mov	r4, r1
 8004494:	b10a      	cbz	r2, 800449a <_printf_common+0x26>
 8004496:	3301      	adds	r3, #1
 8004498:	6033      	str	r3, [r6, #0]
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	0699      	lsls	r1, r3, #26
 800449e:	bf42      	ittt	mi
 80044a0:	6833      	ldrmi	r3, [r6, #0]
 80044a2:	3302      	addmi	r3, #2
 80044a4:	6033      	strmi	r3, [r6, #0]
 80044a6:	6825      	ldr	r5, [r4, #0]
 80044a8:	f015 0506 	ands.w	r5, r5, #6
 80044ac:	d106      	bne.n	80044bc <_printf_common+0x48>
 80044ae:	f104 0a19 	add.w	sl, r4, #25
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	6832      	ldr	r2, [r6, #0]
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	42ab      	cmp	r3, r5
 80044ba:	dc26      	bgt.n	800450a <_printf_common+0x96>
 80044bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044c0:	6822      	ldr	r2, [r4, #0]
 80044c2:	3b00      	subs	r3, #0
 80044c4:	bf18      	it	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	0692      	lsls	r2, r2, #26
 80044ca:	d42b      	bmi.n	8004524 <_printf_common+0xb0>
 80044cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044d0:	4641      	mov	r1, r8
 80044d2:	4638      	mov	r0, r7
 80044d4:	47c8      	blx	r9
 80044d6:	3001      	adds	r0, #1
 80044d8:	d01e      	beq.n	8004518 <_printf_common+0xa4>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	f003 0306 	and.w	r3, r3, #6
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf02      	ittt	eq
 80044e6:	68e5      	ldreq	r5, [r4, #12]
 80044e8:	6833      	ldreq	r3, [r6, #0]
 80044ea:	1aed      	subeq	r5, r5, r3
 80044ec:	68a3      	ldr	r3, [r4, #8]
 80044ee:	bf0c      	ite	eq
 80044f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044f4:	2500      	movne	r5, #0
 80044f6:	4293      	cmp	r3, r2
 80044f8:	bfc4      	itt	gt
 80044fa:	1a9b      	subgt	r3, r3, r2
 80044fc:	18ed      	addgt	r5, r5, r3
 80044fe:	2600      	movs	r6, #0
 8004500:	341a      	adds	r4, #26
 8004502:	42b5      	cmp	r5, r6
 8004504:	d11a      	bne.n	800453c <_printf_common+0xc8>
 8004506:	2000      	movs	r0, #0
 8004508:	e008      	b.n	800451c <_printf_common+0xa8>
 800450a:	2301      	movs	r3, #1
 800450c:	4652      	mov	r2, sl
 800450e:	4641      	mov	r1, r8
 8004510:	4638      	mov	r0, r7
 8004512:	47c8      	blx	r9
 8004514:	3001      	adds	r0, #1
 8004516:	d103      	bne.n	8004520 <_printf_common+0xac>
 8004518:	f04f 30ff 	mov.w	r0, #4294967295
 800451c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004520:	3501      	adds	r5, #1
 8004522:	e7c6      	b.n	80044b2 <_printf_common+0x3e>
 8004524:	18e1      	adds	r1, r4, r3
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	2030      	movs	r0, #48	@ 0x30
 800452a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800452e:	4422      	add	r2, r4
 8004530:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004534:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004538:	3302      	adds	r3, #2
 800453a:	e7c7      	b.n	80044cc <_printf_common+0x58>
 800453c:	2301      	movs	r3, #1
 800453e:	4622      	mov	r2, r4
 8004540:	4641      	mov	r1, r8
 8004542:	4638      	mov	r0, r7
 8004544:	47c8      	blx	r9
 8004546:	3001      	adds	r0, #1
 8004548:	d0e6      	beq.n	8004518 <_printf_common+0xa4>
 800454a:	3601      	adds	r6, #1
 800454c:	e7d9      	b.n	8004502 <_printf_common+0x8e>
	...

08004550 <_printf_i>:
 8004550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	7e0f      	ldrb	r7, [r1, #24]
 8004556:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004558:	2f78      	cmp	r7, #120	@ 0x78
 800455a:	4691      	mov	r9, r2
 800455c:	4680      	mov	r8, r0
 800455e:	460c      	mov	r4, r1
 8004560:	469a      	mov	sl, r3
 8004562:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004566:	d807      	bhi.n	8004578 <_printf_i+0x28>
 8004568:	2f62      	cmp	r7, #98	@ 0x62
 800456a:	d80a      	bhi.n	8004582 <_printf_i+0x32>
 800456c:	2f00      	cmp	r7, #0
 800456e:	f000 80d2 	beq.w	8004716 <_printf_i+0x1c6>
 8004572:	2f58      	cmp	r7, #88	@ 0x58
 8004574:	f000 80b9 	beq.w	80046ea <_printf_i+0x19a>
 8004578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800457c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004580:	e03a      	b.n	80045f8 <_printf_i+0xa8>
 8004582:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004586:	2b15      	cmp	r3, #21
 8004588:	d8f6      	bhi.n	8004578 <_printf_i+0x28>
 800458a:	a101      	add	r1, pc, #4	@ (adr r1, 8004590 <_printf_i+0x40>)
 800458c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004590:	080045e9 	.word	0x080045e9
 8004594:	080045fd 	.word	0x080045fd
 8004598:	08004579 	.word	0x08004579
 800459c:	08004579 	.word	0x08004579
 80045a0:	08004579 	.word	0x08004579
 80045a4:	08004579 	.word	0x08004579
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	08004579 	.word	0x08004579
 80045b0:	08004579 	.word	0x08004579
 80045b4:	08004579 	.word	0x08004579
 80045b8:	08004579 	.word	0x08004579
 80045bc:	080046fd 	.word	0x080046fd
 80045c0:	08004627 	.word	0x08004627
 80045c4:	080046b7 	.word	0x080046b7
 80045c8:	08004579 	.word	0x08004579
 80045cc:	08004579 	.word	0x08004579
 80045d0:	0800471f 	.word	0x0800471f
 80045d4:	08004579 	.word	0x08004579
 80045d8:	08004627 	.word	0x08004627
 80045dc:	08004579 	.word	0x08004579
 80045e0:	08004579 	.word	0x08004579
 80045e4:	080046bf 	.word	0x080046bf
 80045e8:	6833      	ldr	r3, [r6, #0]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6032      	str	r2, [r6, #0]
 80045f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045f8:	2301      	movs	r3, #1
 80045fa:	e09d      	b.n	8004738 <_printf_i+0x1e8>
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	1d19      	adds	r1, r3, #4
 8004602:	6031      	str	r1, [r6, #0]
 8004604:	0606      	lsls	r6, r0, #24
 8004606:	d501      	bpl.n	800460c <_printf_i+0xbc>
 8004608:	681d      	ldr	r5, [r3, #0]
 800460a:	e003      	b.n	8004614 <_printf_i+0xc4>
 800460c:	0645      	lsls	r5, r0, #25
 800460e:	d5fb      	bpl.n	8004608 <_printf_i+0xb8>
 8004610:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004614:	2d00      	cmp	r5, #0
 8004616:	da03      	bge.n	8004620 <_printf_i+0xd0>
 8004618:	232d      	movs	r3, #45	@ 0x2d
 800461a:	426d      	negs	r5, r5
 800461c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004620:	4859      	ldr	r0, [pc, #356]	@ (8004788 <_printf_i+0x238>)
 8004622:	230a      	movs	r3, #10
 8004624:	e011      	b.n	800464a <_printf_i+0xfa>
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	0608      	lsls	r0, r1, #24
 800462c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004630:	d402      	bmi.n	8004638 <_printf_i+0xe8>
 8004632:	0649      	lsls	r1, r1, #25
 8004634:	bf48      	it	mi
 8004636:	b2ad      	uxthmi	r5, r5
 8004638:	2f6f      	cmp	r7, #111	@ 0x6f
 800463a:	4853      	ldr	r0, [pc, #332]	@ (8004788 <_printf_i+0x238>)
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	bf14      	ite	ne
 8004640:	230a      	movne	r3, #10
 8004642:	2308      	moveq	r3, #8
 8004644:	2100      	movs	r1, #0
 8004646:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800464a:	6866      	ldr	r6, [r4, #4]
 800464c:	60a6      	str	r6, [r4, #8]
 800464e:	2e00      	cmp	r6, #0
 8004650:	bfa2      	ittt	ge
 8004652:	6821      	ldrge	r1, [r4, #0]
 8004654:	f021 0104 	bicge.w	r1, r1, #4
 8004658:	6021      	strge	r1, [r4, #0]
 800465a:	b90d      	cbnz	r5, 8004660 <_printf_i+0x110>
 800465c:	2e00      	cmp	r6, #0
 800465e:	d04b      	beq.n	80046f8 <_printf_i+0x1a8>
 8004660:	4616      	mov	r6, r2
 8004662:	fbb5 f1f3 	udiv	r1, r5, r3
 8004666:	fb03 5711 	mls	r7, r3, r1, r5
 800466a:	5dc7      	ldrb	r7, [r0, r7]
 800466c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004670:	462f      	mov	r7, r5
 8004672:	42bb      	cmp	r3, r7
 8004674:	460d      	mov	r5, r1
 8004676:	d9f4      	bls.n	8004662 <_printf_i+0x112>
 8004678:	2b08      	cmp	r3, #8
 800467a:	d10b      	bne.n	8004694 <_printf_i+0x144>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	07df      	lsls	r7, r3, #31
 8004680:	d508      	bpl.n	8004694 <_printf_i+0x144>
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	6861      	ldr	r1, [r4, #4]
 8004686:	4299      	cmp	r1, r3
 8004688:	bfde      	ittt	le
 800468a:	2330      	movle	r3, #48	@ 0x30
 800468c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004690:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004694:	1b92      	subs	r2, r2, r6
 8004696:	6122      	str	r2, [r4, #16]
 8004698:	f8cd a000 	str.w	sl, [sp]
 800469c:	464b      	mov	r3, r9
 800469e:	aa03      	add	r2, sp, #12
 80046a0:	4621      	mov	r1, r4
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7ff fee6 	bl	8004474 <_printf_common>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d14a      	bne.n	8004742 <_printf_i+0x1f2>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	b004      	add	sp, #16
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f043 0320 	orr.w	r3, r3, #32
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	4833      	ldr	r0, [pc, #204]	@ (800478c <_printf_i+0x23c>)
 80046c0:	2778      	movs	r7, #120	@ 0x78
 80046c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	6831      	ldr	r1, [r6, #0]
 80046ca:	061f      	lsls	r7, r3, #24
 80046cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80046d0:	d402      	bmi.n	80046d8 <_printf_i+0x188>
 80046d2:	065f      	lsls	r7, r3, #25
 80046d4:	bf48      	it	mi
 80046d6:	b2ad      	uxthmi	r5, r5
 80046d8:	6031      	str	r1, [r6, #0]
 80046da:	07d9      	lsls	r1, r3, #31
 80046dc:	bf44      	itt	mi
 80046de:	f043 0320 	orrmi.w	r3, r3, #32
 80046e2:	6023      	strmi	r3, [r4, #0]
 80046e4:	b11d      	cbz	r5, 80046ee <_printf_i+0x19e>
 80046e6:	2310      	movs	r3, #16
 80046e8:	e7ac      	b.n	8004644 <_printf_i+0xf4>
 80046ea:	4827      	ldr	r0, [pc, #156]	@ (8004788 <_printf_i+0x238>)
 80046ec:	e7e9      	b.n	80046c2 <_printf_i+0x172>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	f023 0320 	bic.w	r3, r3, #32
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	e7f6      	b.n	80046e6 <_printf_i+0x196>
 80046f8:	4616      	mov	r6, r2
 80046fa:	e7bd      	b.n	8004678 <_printf_i+0x128>
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	6825      	ldr	r5, [r4, #0]
 8004700:	6961      	ldr	r1, [r4, #20]
 8004702:	1d18      	adds	r0, r3, #4
 8004704:	6030      	str	r0, [r6, #0]
 8004706:	062e      	lsls	r6, r5, #24
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	d501      	bpl.n	8004710 <_printf_i+0x1c0>
 800470c:	6019      	str	r1, [r3, #0]
 800470e:	e002      	b.n	8004716 <_printf_i+0x1c6>
 8004710:	0668      	lsls	r0, r5, #25
 8004712:	d5fb      	bpl.n	800470c <_printf_i+0x1bc>
 8004714:	8019      	strh	r1, [r3, #0]
 8004716:	2300      	movs	r3, #0
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	4616      	mov	r6, r2
 800471c:	e7bc      	b.n	8004698 <_printf_i+0x148>
 800471e:	6833      	ldr	r3, [r6, #0]
 8004720:	1d1a      	adds	r2, r3, #4
 8004722:	6032      	str	r2, [r6, #0]
 8004724:	681e      	ldr	r6, [r3, #0]
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	2100      	movs	r1, #0
 800472a:	4630      	mov	r0, r6
 800472c:	f7fb fd60 	bl	80001f0 <memchr>
 8004730:	b108      	cbz	r0, 8004736 <_printf_i+0x1e6>
 8004732:	1b80      	subs	r0, r0, r6
 8004734:	6060      	str	r0, [r4, #4]
 8004736:	6863      	ldr	r3, [r4, #4]
 8004738:	6123      	str	r3, [r4, #16]
 800473a:	2300      	movs	r3, #0
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004740:	e7aa      	b.n	8004698 <_printf_i+0x148>
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	4632      	mov	r2, r6
 8004746:	4649      	mov	r1, r9
 8004748:	4640      	mov	r0, r8
 800474a:	47d0      	blx	sl
 800474c:	3001      	adds	r0, #1
 800474e:	d0ad      	beq.n	80046ac <_printf_i+0x15c>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	079b      	lsls	r3, r3, #30
 8004754:	d413      	bmi.n	800477e <_printf_i+0x22e>
 8004756:	68e0      	ldr	r0, [r4, #12]
 8004758:	9b03      	ldr	r3, [sp, #12]
 800475a:	4298      	cmp	r0, r3
 800475c:	bfb8      	it	lt
 800475e:	4618      	movlt	r0, r3
 8004760:	e7a6      	b.n	80046b0 <_printf_i+0x160>
 8004762:	2301      	movs	r3, #1
 8004764:	4632      	mov	r2, r6
 8004766:	4649      	mov	r1, r9
 8004768:	4640      	mov	r0, r8
 800476a:	47d0      	blx	sl
 800476c:	3001      	adds	r0, #1
 800476e:	d09d      	beq.n	80046ac <_printf_i+0x15c>
 8004770:	3501      	adds	r5, #1
 8004772:	68e3      	ldr	r3, [r4, #12]
 8004774:	9903      	ldr	r1, [sp, #12]
 8004776:	1a5b      	subs	r3, r3, r1
 8004778:	42ab      	cmp	r3, r5
 800477a:	dcf2      	bgt.n	8004762 <_printf_i+0x212>
 800477c:	e7eb      	b.n	8004756 <_printf_i+0x206>
 800477e:	2500      	movs	r5, #0
 8004780:	f104 0619 	add.w	r6, r4, #25
 8004784:	e7f5      	b.n	8004772 <_printf_i+0x222>
 8004786:	bf00      	nop
 8004788:	08004c6a 	.word	0x08004c6a
 800478c:	08004c7b 	.word	0x08004c7b

08004790 <__sflush_r>:
 8004790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	0716      	lsls	r6, r2, #28
 800479a:	4605      	mov	r5, r0
 800479c:	460c      	mov	r4, r1
 800479e:	d454      	bmi.n	800484a <__sflush_r+0xba>
 80047a0:	684b      	ldr	r3, [r1, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	dc02      	bgt.n	80047ac <__sflush_r+0x1c>
 80047a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	dd48      	ble.n	800483e <__sflush_r+0xae>
 80047ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	d045      	beq.n	800483e <__sflush_r+0xae>
 80047b2:	2300      	movs	r3, #0
 80047b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047b8:	682f      	ldr	r7, [r5, #0]
 80047ba:	6a21      	ldr	r1, [r4, #32]
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	d030      	beq.n	8004822 <__sflush_r+0x92>
 80047c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	0759      	lsls	r1, r3, #29
 80047c6:	d505      	bpl.n	80047d4 <__sflush_r+0x44>
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	1ad2      	subs	r2, r2, r3
 80047cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047ce:	b10b      	cbz	r3, 80047d4 <__sflush_r+0x44>
 80047d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047d8:	6a21      	ldr	r1, [r4, #32]
 80047da:	4628      	mov	r0, r5
 80047dc:	47b0      	blx	r6
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	d106      	bne.n	80047f2 <__sflush_r+0x62>
 80047e4:	6829      	ldr	r1, [r5, #0]
 80047e6:	291d      	cmp	r1, #29
 80047e8:	d82b      	bhi.n	8004842 <__sflush_r+0xb2>
 80047ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <__sflush_r+0x104>)
 80047ec:	410a      	asrs	r2, r1
 80047ee:	07d6      	lsls	r6, r2, #31
 80047f0:	d427      	bmi.n	8004842 <__sflush_r+0xb2>
 80047f2:	2200      	movs	r2, #0
 80047f4:	6062      	str	r2, [r4, #4]
 80047f6:	04d9      	lsls	r1, r3, #19
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	d504      	bpl.n	8004808 <__sflush_r+0x78>
 80047fe:	1c42      	adds	r2, r0, #1
 8004800:	d101      	bne.n	8004806 <__sflush_r+0x76>
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	b903      	cbnz	r3, 8004808 <__sflush_r+0x78>
 8004806:	6560      	str	r0, [r4, #84]	@ 0x54
 8004808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800480a:	602f      	str	r7, [r5, #0]
 800480c:	b1b9      	cbz	r1, 800483e <__sflush_r+0xae>
 800480e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004812:	4299      	cmp	r1, r3
 8004814:	d002      	beq.n	800481c <__sflush_r+0x8c>
 8004816:	4628      	mov	r0, r5
 8004818:	f7ff fbea 	bl	8003ff0 <_free_r>
 800481c:	2300      	movs	r3, #0
 800481e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004820:	e00d      	b.n	800483e <__sflush_r+0xae>
 8004822:	2301      	movs	r3, #1
 8004824:	4628      	mov	r0, r5
 8004826:	47b0      	blx	r6
 8004828:	4602      	mov	r2, r0
 800482a:	1c50      	adds	r0, r2, #1
 800482c:	d1c9      	bne.n	80047c2 <__sflush_r+0x32>
 800482e:	682b      	ldr	r3, [r5, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0c6      	beq.n	80047c2 <__sflush_r+0x32>
 8004834:	2b1d      	cmp	r3, #29
 8004836:	d001      	beq.n	800483c <__sflush_r+0xac>
 8004838:	2b16      	cmp	r3, #22
 800483a:	d11e      	bne.n	800487a <__sflush_r+0xea>
 800483c:	602f      	str	r7, [r5, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	e022      	b.n	8004888 <__sflush_r+0xf8>
 8004842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004846:	b21b      	sxth	r3, r3
 8004848:	e01b      	b.n	8004882 <__sflush_r+0xf2>
 800484a:	690f      	ldr	r7, [r1, #16]
 800484c:	2f00      	cmp	r7, #0
 800484e:	d0f6      	beq.n	800483e <__sflush_r+0xae>
 8004850:	0793      	lsls	r3, r2, #30
 8004852:	680e      	ldr	r6, [r1, #0]
 8004854:	bf08      	it	eq
 8004856:	694b      	ldreq	r3, [r1, #20]
 8004858:	600f      	str	r7, [r1, #0]
 800485a:	bf18      	it	ne
 800485c:	2300      	movne	r3, #0
 800485e:	eba6 0807 	sub.w	r8, r6, r7
 8004862:	608b      	str	r3, [r1, #8]
 8004864:	f1b8 0f00 	cmp.w	r8, #0
 8004868:	dde9      	ble.n	800483e <__sflush_r+0xae>
 800486a:	6a21      	ldr	r1, [r4, #32]
 800486c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800486e:	4643      	mov	r3, r8
 8004870:	463a      	mov	r2, r7
 8004872:	4628      	mov	r0, r5
 8004874:	47b0      	blx	r6
 8004876:	2800      	cmp	r0, #0
 8004878:	dc08      	bgt.n	800488c <__sflush_r+0xfc>
 800487a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004882:	81a3      	strh	r3, [r4, #12]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800488c:	4407      	add	r7, r0
 800488e:	eba8 0800 	sub.w	r8, r8, r0
 8004892:	e7e7      	b.n	8004864 <__sflush_r+0xd4>
 8004894:	dfbffffe 	.word	0xdfbffffe

08004898 <_fflush_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	690b      	ldr	r3, [r1, #16]
 800489c:	4605      	mov	r5, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	b913      	cbnz	r3, 80048a8 <_fflush_r+0x10>
 80048a2:	2500      	movs	r5, #0
 80048a4:	4628      	mov	r0, r5
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	b118      	cbz	r0, 80048b2 <_fflush_r+0x1a>
 80048aa:	6a03      	ldr	r3, [r0, #32]
 80048ac:	b90b      	cbnz	r3, 80048b2 <_fflush_r+0x1a>
 80048ae:	f7ff f959 	bl	8003b64 <__sinit>
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f3      	beq.n	80048a2 <_fflush_r+0xa>
 80048ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048bc:	07d0      	lsls	r0, r2, #31
 80048be:	d404      	bmi.n	80048ca <_fflush_r+0x32>
 80048c0:	0599      	lsls	r1, r3, #22
 80048c2:	d402      	bmi.n	80048ca <_fflush_r+0x32>
 80048c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048c6:	f7ff fb72 	bl	8003fae <__retarget_lock_acquire_recursive>
 80048ca:	4628      	mov	r0, r5
 80048cc:	4621      	mov	r1, r4
 80048ce:	f7ff ff5f 	bl	8004790 <__sflush_r>
 80048d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048d4:	07da      	lsls	r2, r3, #31
 80048d6:	4605      	mov	r5, r0
 80048d8:	d4e4      	bmi.n	80048a4 <_fflush_r+0xc>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	059b      	lsls	r3, r3, #22
 80048de:	d4e1      	bmi.n	80048a4 <_fflush_r+0xc>
 80048e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048e2:	f7ff fb65 	bl	8003fb0 <__retarget_lock_release_recursive>
 80048e6:	e7dd      	b.n	80048a4 <_fflush_r+0xc>

080048e8 <fiprintf>:
 80048e8:	b40e      	push	{r1, r2, r3}
 80048ea:	b503      	push	{r0, r1, lr}
 80048ec:	4601      	mov	r1, r0
 80048ee:	ab03      	add	r3, sp, #12
 80048f0:	4805      	ldr	r0, [pc, #20]	@ (8004908 <fiprintf+0x20>)
 80048f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f6:	6800      	ldr	r0, [r0, #0]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	f7ff fca3 	bl	8004244 <_vfiprintf_r>
 80048fe:	b002      	add	sp, #8
 8004900:	f85d eb04 	ldr.w	lr, [sp], #4
 8004904:	b003      	add	sp, #12
 8004906:	4770      	bx	lr
 8004908:	20000020 	.word	0x20000020

0800490c <__swhatbuf_r>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	460c      	mov	r4, r1
 8004910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004914:	2900      	cmp	r1, #0
 8004916:	b096      	sub	sp, #88	@ 0x58
 8004918:	4615      	mov	r5, r2
 800491a:	461e      	mov	r6, r3
 800491c:	da0d      	bge.n	800493a <__swhatbuf_r+0x2e>
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	bf14      	ite	ne
 800492a:	2340      	movne	r3, #64	@ 0x40
 800492c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004930:	2000      	movs	r0, #0
 8004932:	6031      	str	r1, [r6, #0]
 8004934:	602b      	str	r3, [r5, #0]
 8004936:	b016      	add	sp, #88	@ 0x58
 8004938:	bd70      	pop	{r4, r5, r6, pc}
 800493a:	466a      	mov	r2, sp
 800493c:	f000 f848 	bl	80049d0 <_fstat_r>
 8004940:	2800      	cmp	r0, #0
 8004942:	dbec      	blt.n	800491e <__swhatbuf_r+0x12>
 8004944:	9901      	ldr	r1, [sp, #4]
 8004946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800494a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800494e:	4259      	negs	r1, r3
 8004950:	4159      	adcs	r1, r3
 8004952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004956:	e7eb      	b.n	8004930 <__swhatbuf_r+0x24>

08004958 <__smakebuf_r>:
 8004958:	898b      	ldrh	r3, [r1, #12]
 800495a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495c:	079d      	lsls	r5, r3, #30
 800495e:	4606      	mov	r6, r0
 8004960:	460c      	mov	r4, r1
 8004962:	d507      	bpl.n	8004974 <__smakebuf_r+0x1c>
 8004964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	2301      	movs	r3, #1
 800496e:	6163      	str	r3, [r4, #20]
 8004970:	b003      	add	sp, #12
 8004972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004974:	ab01      	add	r3, sp, #4
 8004976:	466a      	mov	r2, sp
 8004978:	f7ff ffc8 	bl	800490c <__swhatbuf_r>
 800497c:	9f00      	ldr	r7, [sp, #0]
 800497e:	4605      	mov	r5, r0
 8004980:	4639      	mov	r1, r7
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff fba8 	bl	80040d8 <_malloc_r>
 8004988:	b948      	cbnz	r0, 800499e <__smakebuf_r+0x46>
 800498a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800498e:	059a      	lsls	r2, r3, #22
 8004990:	d4ee      	bmi.n	8004970 <__smakebuf_r+0x18>
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	e7e2      	b.n	8004964 <__smakebuf_r+0xc>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	6020      	str	r0, [r4, #0]
 80049a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049ae:	b15b      	cbz	r3, 80049c8 <__smakebuf_r+0x70>
 80049b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 f81d 	bl	80049f4 <_isatty_r>
 80049ba:	b128      	cbz	r0, 80049c8 <__smakebuf_r+0x70>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	431d      	orrs	r5, r3
 80049cc:	81a5      	strh	r5, [r4, #12]
 80049ce:	e7cf      	b.n	8004970 <__smakebuf_r+0x18>

080049d0 <_fstat_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d07      	ldr	r5, [pc, #28]	@ (80049f0 <_fstat_r+0x20>)
 80049d4:	2300      	movs	r3, #0
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	f7fe fe34 	bl	800364a <_fstat>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d102      	bne.n	80049ec <_fstat_r+0x1c>
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	b103      	cbz	r3, 80049ec <_fstat_r+0x1c>
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	bd38      	pop	{r3, r4, r5, pc}
 80049ee:	bf00      	nop
 80049f0:	20000324 	.word	0x20000324

080049f4 <_isatty_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d06      	ldr	r5, [pc, #24]	@ (8004a10 <_isatty_r+0x1c>)
 80049f8:	2300      	movs	r3, #0
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	f7fe ff9a 	bl	8003938 <_isatty>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_isatty_r+0x1a>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_isatty_r+0x1a>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000324 	.word	0x20000324

08004a14 <_sbrk_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	@ (8004a30 <_sbrk_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc fa4a 	bl	8000eb8 <_sbrk>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_sbrk_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_sbrk_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	20000324 	.word	0x20000324

08004a34 <abort>:
 8004a34:	b508      	push	{r3, lr}
 8004a36:	2006      	movs	r0, #6
 8004a38:	f000 f82c 	bl	8004a94 <raise>
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f000 f84d 	bl	8004adc <_exit>

08004a42 <_raise_r>:
 8004a42:	291f      	cmp	r1, #31
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4605      	mov	r5, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	d904      	bls.n	8004a56 <_raise_r+0x14>
 8004a4c:	2316      	movs	r3, #22
 8004a4e:	6003      	str	r3, [r0, #0]
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004a58:	b112      	cbz	r2, 8004a60 <_raise_r+0x1e>
 8004a5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a5e:	b94b      	cbnz	r3, 8004a74 <_raise_r+0x32>
 8004a60:	4628      	mov	r0, r5
 8004a62:	f000 f831 	bl	8004ac8 <_getpid_r>
 8004a66:	4622      	mov	r2, r4
 8004a68:	4601      	mov	r1, r0
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a70:	f000 b818 	b.w	8004aa4 <_kill_r>
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d00a      	beq.n	8004a8e <_raise_r+0x4c>
 8004a78:	1c59      	adds	r1, r3, #1
 8004a7a:	d103      	bne.n	8004a84 <_raise_r+0x42>
 8004a7c:	2316      	movs	r3, #22
 8004a7e:	6003      	str	r3, [r0, #0]
 8004a80:	2001      	movs	r0, #1
 8004a82:	e7e7      	b.n	8004a54 <_raise_r+0x12>
 8004a84:	2100      	movs	r1, #0
 8004a86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4798      	blx	r3
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e7e0      	b.n	8004a54 <_raise_r+0x12>
	...

08004a94 <raise>:
 8004a94:	4b02      	ldr	r3, [pc, #8]	@ (8004aa0 <raise+0xc>)
 8004a96:	4601      	mov	r1, r0
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f7ff bfd2 	b.w	8004a42 <_raise_r>
 8004a9e:	bf00      	nop
 8004aa0:	20000020 	.word	0x20000020

08004aa4 <_kill_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d07      	ldr	r5, [pc, #28]	@ (8004ac4 <_kill_r+0x20>)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	602b      	str	r3, [r5, #0]
 8004ab2:	f000 f80b 	bl	8004acc <_kill>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d102      	bne.n	8004ac0 <_kill_r+0x1c>
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	b103      	cbz	r3, 8004ac0 <_kill_r+0x1c>
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	bd38      	pop	{r3, r4, r5, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000324 	.word	0x20000324

08004ac8 <_getpid_r>:
 8004ac8:	f7fe bd9c 	b.w	8003604 <_getpid>

08004acc <_kill>:
 8004acc:	4b02      	ldr	r3, [pc, #8]	@ (8004ad8 <_kill+0xc>)
 8004ace:	2258      	movs	r2, #88	@ 0x58
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	4770      	bx	lr
 8004ad8:	20000324 	.word	0x20000324

08004adc <_exit>:
 8004adc:	e7fe      	b.n	8004adc <_exit>
	...

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
