
projekt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004924  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004ac4  08004ac4  00005ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c60  08004c60  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c68  08004c68  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c68  08004c68  00005c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004c70  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  08004ce0  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08004ce0  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fc2  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0000f062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000107d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000770  00000000  00000000  00011178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164cb  00000000  00000000  000118e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a312  00000000  00000000  00027db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cae4  00000000  00000000  000320c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000beba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003624  00000000  00000000  000bebec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000c2210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004aac 	.word	0x08004aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004aac 	.word	0x08004aac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	zaczyna się od ustalenia w losowy sposób długości czasu świecenia diody na czas trwania
//	rundy, a kończy na prawidłowym odgadnięciu czasu świecenia diody.
//	Zmierzony czas wydrukować w konsoli i porównać do faktycznego czasu świecenia
//	diody.

	initialise_monitor_handles();
 8000584:	f003 f94a 	bl	800381c <initialise_monitor_handles>
	printf("Semihosting test. \n");
 8000588:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0x50>)
 800058a:	f003 fb6f 	bl	8003c6c <puts>
	srand(time(NULL));
 800058e:	2000      	movs	r0, #0
 8000590:	f003 fc54 	bl	8003e3c <time>
 8000594:	4602      	mov	r2, r0
 8000596:	460b      	mov	r3, r1
 8000598:	4613      	mov	r3, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f003 f9d0 	bl	8003940 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fce2 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f81a 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f96a 	bl	8000880 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005ac:	f000 f8f0 	bl	8000790 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005b0:	f000 f87e 	bl	80006b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start_IT(&htim4);
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <main+0x54>)
 80005b6:	f001 fcad 	bl	8001f14 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 80005ba:	2100      	movs	r1, #0
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <main+0x54>)
 80005be:	f001 fd65 	bl	800208c <HAL_TIM_OC_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <main+0x58>)
 80005c6:	f001 fe6b 	bl	80022a0 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x4a>
 80005ce:	bf00      	nop
 80005d0:	08004ac4 	.word	0x08004ac4
 80005d4:	200000d4 	.word	0x200000d4
 80005d8:	2000008c 	.word	0x2000008c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fc1e 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000650:	23c0      	movs	r3, #192	@ 0xc0
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 ffa3 	bl	80015ac <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 faf2 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2103      	movs	r1, #3
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa04 	bl	8001a9c <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800069a:	f000 fadb 	bl	8000c54 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	@ 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006e2:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006e4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80006f0:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006f2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80006f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_TIM2_Init+0xdc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000704:	4821      	ldr	r0, [pc, #132]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000706:	f001 fbb5 	bl	8001e74 <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000710:	f000 faa0 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4619      	mov	r1, r3
 8000720:	481a      	ldr	r0, [pc, #104]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000722:	f002 f8bf 	bl	80028a4 <HAL_TIM_ConfigClockSource>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800072c:	f000 fa92 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000730:	4816      	ldr	r0, [pc, #88]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000732:	f001 fd5b 	bl	80021ec <HAL_TIM_IC_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800073c:	f000 fa8a 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	480f      	ldr	r0, [pc, #60]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000750:	f002 fdc8 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800075a:	f000 fa7b 	bl	8000c54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800075e:	230a      	movs	r3, #10
 8000760:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_TIM2_Init+0xdc>)
 8000776:	f001 fff9 	bl	800276c <HAL_TIM_IC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000780:	f000 fa68 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000008c 	.word	0x2000008c

08000790 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	@ 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007c2:	4a2e      	ldr	r2, [pc, #184]	@ (800087c <MX_TIM4_Init+0xec>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80007c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007c8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 80007d4:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007d6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80007da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b25      	ldr	r3, [pc, #148]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007e8:	4823      	ldr	r0, [pc, #140]	@ (8000878 <MX_TIM4_Init+0xe8>)
 80007ea:	f001 fb43 	bl	8001e74 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007f4:	f000 fa2e 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000802:	4619      	mov	r1, r3
 8000804:	481c      	ldr	r0, [pc, #112]	@ (8000878 <MX_TIM4_Init+0xe8>)
 8000806:	f002 f84d 	bl	80028a4 <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000810:	f000 fa20 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000814:	4818      	ldr	r0, [pc, #96]	@ (8000878 <MX_TIM4_Init+0xe8>)
 8000816:	f001 fbdf 	bl	8001fd8 <HAL_TIM_OC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000820:	f000 fa18 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800082c:	f107 0320 	add.w	r3, r7, #32
 8000830:	4619      	mov	r1, r3
 8000832:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_TIM4_Init+0xe8>)
 8000834:	f002 fd56 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800083e:	f000 fa09 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000842:	2330      	movs	r3, #48	@ 0x30
 8000844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4807      	ldr	r0, [pc, #28]	@ (8000878 <MX_TIM4_Init+0xe8>)
 800085a:	f001 ff2b 	bl	80026b4 <HAL_TIM_OC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000864:	f000 f9f6 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <MX_TIM4_Init+0xe8>)
 800086a:	f000 fa8d 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 800086e:	bf00      	nop
 8000870:	3738      	adds	r7, #56	@ 0x38
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200000d4 	.word	0x200000d4
 800087c:	40000800 	.word	0x40000800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	4b9b      	ldr	r3, [pc, #620]	@ (8000b08 <MX_GPIO_Init+0x288>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a9a      	ldr	r2, [pc, #616]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008a0:	f043 0310 	orr.w	r3, r3, #16
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b98      	ldr	r3, [pc, #608]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0310 	and.w	r3, r3, #16
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	4b94      	ldr	r3, [pc, #592]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a93      	ldr	r2, [pc, #588]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b91      	ldr	r3, [pc, #580]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a8c      	ldr	r2, [pc, #560]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b8a      	ldr	r3, [pc, #552]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b86      	ldr	r3, [pc, #536]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a85      	ldr	r2, [pc, #532]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b83      	ldr	r3, [pc, #524]	@ (8000b08 <MX_GPIO_Init+0x288>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b08 <MX_GPIO_Init+0x288>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a7e      	ldr	r2, [pc, #504]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b7c      	ldr	r3, [pc, #496]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b78      	ldr	r3, [pc, #480]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a77      	ldr	r2, [pc, #476]	@ (8000b08 <MX_GPIO_Init+0x288>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b75      	ldr	r3, [pc, #468]	@ (8000b08 <MX_GPIO_Init+0x288>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4872      	ldr	r0, [pc, #456]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 8000944:	f000 fe18 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	4870      	ldr	r0, [pc, #448]	@ (8000b10 <MX_GPIO_Init+0x290>)
 800094e:	f000 fe13 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f242 0110 	movw	r1, #8208	@ 0x2010
 8000958:	486e      	ldr	r0, [pc, #440]	@ (8000b14 <MX_GPIO_Init+0x294>)
 800095a:	f000 fe0d 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095e:	2304      	movs	r3, #4
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4866      	ldr	r0, [pc, #408]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 8000972:	f000 fc7d 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000976:	2308      	movs	r3, #8
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	485f      	ldr	r0, [pc, #380]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 800098e:	f000 fc6f 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000992:	2332      	movs	r3, #50	@ 0x32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000996:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4859      	ldr	r0, [pc, #356]	@ (8000b0c <MX_GPIO_Init+0x28c>)
 80009a8:	f000 fc62 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4853      	ldr	r0, [pc, #332]	@ (8000b10 <MX_GPIO_Init+0x290>)
 80009c4:	f000 fc54 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009c8:	2308      	movs	r3, #8
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d8:	2305      	movs	r3, #5
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	484b      	ldr	r0, [pc, #300]	@ (8000b10 <MX_GPIO_Init+0x290>)
 80009e4:	f000 fc44 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009e8:	2310      	movs	r3, #16
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f8:	2306      	movs	r3, #6
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4845      	ldr	r0, [pc, #276]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000a04:	f000 fc34 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a08:	23e0      	movs	r3, #224	@ 0xe0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a18:	2305      	movs	r3, #5
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	483d      	ldr	r0, [pc, #244]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000a24:	f000 fc24 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a28:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4835      	ldr	r0, [pc, #212]	@ (8000b1c <MX_GPIO_Init+0x29c>)
 8000a46:	f000 fc13 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|Audio_RST_Pin;
 8000a4a:	f242 0310 	movw	r3, #8208	@ 0x2010
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	482c      	ldr	r0, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0x294>)
 8000a64:	f000 fc04 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a68:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4822      	ldr	r0, [pc, #136]	@ (8000b10 <MX_GPIO_Init+0x290>)
 8000a86:	f000 fbf3 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481e      	ldr	r0, [pc, #120]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000aa0:	f000 fbe6 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000aa4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <MX_GPIO_Init+0x298>)
 8000ac2:	f000 fbd5 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <MX_GPIO_Init+0x294>)
 8000ada:	f000 fbc9 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ade:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af0:	2304      	movs	r3, #4
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <MX_GPIO_Init+0x29c>)
 8000afc:	f000 fbb8 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	@ 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_TIM_PeriodElapsedCallback>:
#define WIN_TOLERANCE 100
uint32_t pulse_val;
uint32_t led_zapalony;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d117      	bne.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		led_zapalony = (rand() % (3000-500) + 500);
 8000b30:	f002 ff34 	bl	800399c <rand>
 8000b34:	4602      	mov	r2, r0
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b38:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3c:	1299      	asrs	r1, r3, #10
 8000b3e:	17d3      	asrs	r3, r2, #31
 8000b40:	1acb      	subs	r3, r1, r3
 8000b42:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000b46:	fb01 f303 	mul.w	r3, r1, r3
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
		pulse_val = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1 );
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5c:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b5e:	6013      	str	r3, [r2, #0]
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000d4 	.word	0x200000d4
 8000b6c:	68db8bad 	.word	0x68db8bad
 8000b70:	20000120 	.word	0x20000120
 8000b74:	2000011c 	.word	0x2000011c

08000b78 <HAL_TIM_IC_CaptureCallback>:


uint32_t moment_wcisniecia, moment_zwolnienia;
uint32_t numer_wyzwolenia_przerwania = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a2b      	ldr	r2, [pc, #172]	@ (8000c30 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d14f      	bne.n	8000c28 <HAL_TIM_IC_CaptureCallback+0xb0>
	{
		if(numer_wyzwolenia_przerwania == 0)
 8000b88:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10c      	bne.n	8000baa <HAL_TIM_IC_CaptureCallback+0x32>
		{
			moment_wcisniecia = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f001 ff4e 	bl	8002a34 <HAL_TIM_ReadCapturedValue>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a27      	ldr	r2, [pc, #156]	@ (8000c38 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000b9c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba4:	4825      	ldr	r0, [pc, #148]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000ba6:	f000 fce7 	bl	8001578 <HAL_GPIO_WritePin>
		}
		if(numer_wyzwolenia_przerwania == 1)
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10c      	bne.n	8000bcc <HAL_TIM_IC_CaptureCallback+0x54>
		{
			moment_zwolnienia = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f001 ff3d 	bl	8002a34 <HAL_TIM_ReadCapturedValue>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a20      	ldr	r2, [pc, #128]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000bbe:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc6:	481d      	ldr	r0, [pc, #116]	@ (8000c3c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000bc8:	f000 fcd6 	bl	8001578 <HAL_GPIO_WritePin>
		}
		numer_wyzwolenia_przerwania++;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000bd4:	6013      	str	r3, [r2, #0]
		if(numer_wyzwolenia_przerwania == 2)
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d124      	bne.n	8000c28 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			printf("Czas wcisniecia przycisku %d ms \n", moment_zwolnienia-moment_wcisniecia);
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000bec:	f002 ffd6 	bl	8003b9c <iprintf>
			numer_wyzwolenia_przerwania = 0;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]

			//sprawdzanie wyniku
			if(abs((int32_t)moment_zwolnienia-moment_wcisniecia) - (int32_t)led_zapalony)
 8000bf6:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bfb8      	it	lt
 8000c04:	425b      	neglt	r3, r3
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c08:	6812      	ldr	r2, [r2, #0]
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d006      	beq.n	8000c1c <HAL_TIM_IC_CaptureCallback+0xa4>
			{
				printf(" Gratulacje dioda swiecila sie %d sekund!",led_zapalony);
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4619      	mov	r1, r3
 8000c14:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000c16:	f002 ffc1 	bl	8003b9c <iprintf>
				printf("Nie udalo sie! dioda swiecila sie %d sekund!",led_zapalony);
			}
		}

	}
}
 8000c1a:	e005      	b.n	8000c28 <HAL_TIM_IC_CaptureCallback+0xb0>
				printf("Nie udalo sie! dioda swiecila sie %d sekund!",led_zapalony);
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000c24:	f002 ffba 	bl	8003b9c <iprintf>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000008c 	.word	0x2000008c
 8000c34:	2000012c 	.word	0x2000012c
 8000c38:	20000124 	.word	0x20000124
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	20000128 	.word	0x20000128
 8000c44:	08004ad8 	.word	0x08004ad8
 8000c48:	20000120 	.word	0x20000120
 8000c4c:	08004afc 	.word	0x08004afc
 8000c50:	08004b28 	.word	0x08004b28

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <Error_Handler+0x8>

08000c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f000 faa4 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cd0:	d134      	bne.n	8000d3c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a28      	ldr	r2, [pc, #160]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4816      	ldr	r0, [pc, #88]	@ (8000d80 <HAL_TIM_Base_MspInit+0xd0>)
 8000d26:	f000 faa3 	bl	8001270 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201c      	movs	r0, #28
 8000d30:	f000 fa67 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d34:	201c      	movs	r0, #28
 8000d36:	f000 fa80 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d3a:	e01a      	b.n	8000d72 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_TIM_Base_MspInit+0xd4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d115      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <HAL_TIM_Base_MspInit+0xcc>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	201e      	movs	r0, #30
 8000d68:	f000 fa4b 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d6c:	201e      	movs	r0, #30
 8000d6e:	f000 fa64 	bl	800123a <HAL_NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40000800 	.word	0x40000800

08000d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <HAL_TIM_MspPostInit+0x68>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11e      	bne.n	8000de8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <HAL_TIM_MspPostInit+0x70>)
 8000de4:	f000 fa44 	bl	8001270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40000800 	.word	0x40000800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e52:	f000 f8db 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <TIM2_IRQHandler+0x10>)
 8000e62:	f001 fb37 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000008c 	.word	0x2000008c

08000e70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <TIM4_IRQHandler+0x10>)
 8000e76:	f001 fb2d 	bl	80024d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000d4 	.word	0x200000d4

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f003 f836 	bl	8003f24 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20020000 	.word	0x20020000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	20000130 	.word	0x20000130
 8000eec:	20000330 	.word	0x20000330

08000ef0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 fff5 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb1b 	bl	8000580 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f58:	08004c70 	.word	0x08004c70
  ldr r2, =_sbss
 8000f5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f60:	20000330 	.word	0x20000330

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <HAL_Init+0x40>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_Init+0x40>)
 8000f7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	@ (8000fa8 <HAL_Init+0x40>)
 8000f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f92b 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fe60 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f943 	bl	8001256 <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe8:	f000 f90b 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000000 	.word	0x20000000
 8001004:	20000008 	.word	0x20000008
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008
 8001030:	20000134 	.word	0x20000134

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000134 	.word	0x20000134

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	@ (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff3e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff31 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	@ 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	e159      	b.n	8001540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8148 	bne.w	800153a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d130      	bne.n	8001324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f003 0201 	and.w	r2, r3, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b03      	cmp	r3, #3
 800132e:	d017      	beq.n	8001360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d123      	bne.n	80013b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	08da      	lsrs	r2, r3, #3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3208      	adds	r2, #8
 8001374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	220f      	movs	r2, #15
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	08da      	lsrs	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3208      	adds	r2, #8
 80013ae:	69b9      	ldr	r1, [r7, #24]
 80013b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a2 	beq.w	800153a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a56      	ldr	r2, [pc, #344]	@ (8001558 <HAL_GPIO_Init+0x2e8>)
 8001400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b54      	ldr	r3, [pc, #336]	@ (8001558 <HAL_GPIO_Init+0x2e8>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001412:	4a52      	ldr	r2, [pc, #328]	@ (800155c <HAL_GPIO_Init+0x2ec>)
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a49      	ldr	r2, [pc, #292]	@ (8001560 <HAL_GPIO_Init+0x2f0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x202>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a48      	ldr	r2, [pc, #288]	@ (8001564 <HAL_GPIO_Init+0x2f4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1fe>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a47      	ldr	r2, [pc, #284]	@ (8001568 <HAL_GPIO_Init+0x2f8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1fa>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a46      	ldr	r2, [pc, #280]	@ (800156c <HAL_GPIO_Init+0x2fc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1f6>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a45      	ldr	r2, [pc, #276]	@ (8001570 <HAL_GPIO_Init+0x300>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1f2>
 800145e:	2304      	movs	r3, #4
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001462:	2307      	movs	r3, #7
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x204>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x204>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	@ (800155c <HAL_GPIO_Init+0x2ec>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b38      	ldr	r3, [pc, #224]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a24      	ldr	r2, [pc, #144]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <HAL_GPIO_Init+0x304>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1a      	ldr	r2, [pc, #104]	@ (8001574 <HAL_GPIO_Init+0x304>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a0f      	ldr	r2, [pc, #60]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f aea2 	bls.w	800128c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e267      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d075      	beq.n	80016b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015ca:	4b88      	ldr	r3, [pc, #544]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d00c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b85      	ldr	r3, [pc, #532]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d112      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b82      	ldr	r3, [pc, #520]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015ee:	d10b      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4b7e      	ldr	r3, [pc, #504]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d05b      	beq.n	80016b4 <HAL_RCC_OscConfig+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d157      	bne.n	80016b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e242      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x74>
 8001612:	4b76      	ldr	r3, [pc, #472]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x98>
 800162a:	4b70      	ldr	r3, [pc, #448]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6f      	ldr	r2, [pc, #444]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6d      	ldr	r3, [pc, #436]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6c      	ldr	r2, [pc, #432]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001644:	4b69      	ldr	r3, [pc, #420]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a68      	ldr	r2, [pc, #416]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b66      	ldr	r3, [pc, #408]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a65      	ldr	r2, [pc, #404]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fce6 	bl	8001034 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fce2 	bl	8001034 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e207      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5b      	ldr	r3, [pc, #364]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xc0>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fcd2 	bl	8001034 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fcce 	bl	8001034 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1f3      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b51      	ldr	r3, [pc, #324]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0xe8>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016c2:	4b4a      	ldr	r3, [pc, #296]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b44      	ldr	r3, [pc, #272]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1c7      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3b      	ldr	r3, [pc, #236]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4937      	ldr	r1, [pc, #220]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_RCC_OscConfig+0x244>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fc87 	bl	8001034 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fc83 	bl	8001034 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1a8      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2b      	ldr	r3, [pc, #172]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4925      	ldr	r1, [pc, #148]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_RCC_OscConfig+0x244>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fc66 	bl	8001034 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fc62 	bl	8001034 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e187      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d036      	beq.n	8001804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fc46 	bl	8001034 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc42 	bl	8001034 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e167      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_RCC_OscConfig+0x240>)
 80017c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x200>
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fc2f 	bl	8001034 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	e00e      	b.n	80017f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fc2b 	bl	8001034 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d907      	bls.n	80017f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e150      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	42470000 	.word	0x42470000
 80017f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ea      	bne.n	80017da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8097 	beq.w	8001940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b81      	ldr	r3, [pc, #516]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b7d      	ldr	r3, [pc, #500]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b7a      	ldr	r3, [pc, #488]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b77      	ldr	r3, [pc, #476]	@ (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b74      	ldr	r3, [pc, #464]	@ (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a73      	ldr	r2, [pc, #460]	@ (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fbeb 	bl	8001034 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fbe7 	bl	8001034 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e10c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b6a      	ldr	r3, [pc, #424]	@ (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x2ea>
 8001888:	4b64      	ldr	r3, [pc, #400]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188c:	4a63      	ldr	r2, [pc, #396]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	@ 0x70
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x30c>
 800189e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018aa:	4b5c      	ldr	r3, [pc, #368]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 80018b8:	4b58      	ldr	r3, [pc, #352]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018bc:	4a57      	ldr	r2, [pc, #348]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c4:	4b55      	ldr	r3, [pc, #340]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c8:	4a54      	ldr	r2, [pc, #336]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d015      	beq.n	8001904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fbac 	bl	8001034 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff fba8 	bl	8001034 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0cb      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b49      	ldr	r3, [pc, #292]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ee      	beq.n	80018e0 <HAL_RCC_OscConfig+0x334>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fb96 	bl	8001034 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fb92 	bl	8001034 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0b5      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	4b3e      	ldr	r3, [pc, #248]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ee      	bne.n	800190c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b39      	ldr	r3, [pc, #228]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	4a38      	ldr	r2, [pc, #224]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a1 	beq.w	8001a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d05c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d141      	bne.n	80019e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b31      	ldr	r3, [pc, #196]	@ (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fb66 	bl	8001034 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fb62 	bl	8001034 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e087      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b27      	ldr	r3, [pc, #156]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	491b      	ldr	r1, [pc, #108]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb3b 	bl	8001034 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fb37 	bl	8001034 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e05c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x416>
 80019e0:	e054      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb24 	bl	8001034 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff fb20 	bl	8001034 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e045      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x444>
 8001a0e:	e03d      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e038      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <HAL_RCC_OscConfig+0x4ec>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d028      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d121      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cc      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b68      	ldr	r3, [pc, #416]	@ (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d90c      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b65      	ldr	r3, [pc, #404]	@ (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	@ (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a58      	ldr	r2, [pc, #352]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d044      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d119      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e067      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4934      	ldr	r1, [pc, #208]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fa52 	bl	8001034 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff fa4e 	bl	8001034 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e04f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2b      	ldr	r3, [pc, #172]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d20c      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	490a      	ldr	r1, [pc, #40]	@ (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f9b2 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08004b58 	.word	0x08004b58
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c6c:	b094      	sub	sp, #80	@ 0x50
 8001c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c80:	4b79      	ldr	r3, [pc, #484]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	f200 80e1 	bhi.w	8001e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x34>
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9a:	e0db      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b73      	ldr	r3, [pc, #460]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca0:	e0db      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca2:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca6:	e0d8      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d063      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	099b      	lsrs	r3, r3, #6
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cda:	4622      	mov	r2, r4
 8001cdc:	462b      	mov	r3, r5
 8001cde:	f04f 0000 	mov.w	r0, #0
 8001ce2:	f04f 0100 	mov.w	r1, #0
 8001ce6:	0159      	lsls	r1, r3, #5
 8001ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cec:	0150      	lsls	r0, r2, #5
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	1a51      	subs	r1, r2, r1
 8001cf6:	6139      	str	r1, [r7, #16]
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	018b      	lsls	r3, r1, #6
 8001d10:	4651      	mov	r1, sl
 8001d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d16:	4651      	mov	r1, sl
 8001d18:	018a      	lsls	r2, r1, #6
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d20:	4659      	mov	r1, fp
 8001d22:	eb63 0901 	sbc.w	r9, r3, r1
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	eb18 0303 	adds.w	r3, r8, r3
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	462b      	mov	r3, r5
 8001d48:	eb49 0303 	adc.w	r3, r9, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	024b      	lsls	r3, r1, #9
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d64:	4621      	mov	r1, r4
 8001d66:	024a      	lsls	r2, r1, #9
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d78:	f7fe fa8a 	bl	8000290 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d84:	e058      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4611      	mov	r1, r2
 8001d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da0:	4642      	mov	r2, r8
 8001da2:	464b      	mov	r3, r9
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0159      	lsls	r1, r3, #5
 8001dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db2:	0150      	lsls	r0, r2, #5
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4641      	mov	r1, r8
 8001dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	00eb      	lsls	r3, r5, #3
 8001dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dee:	00e2      	lsls	r2, r4, #3
 8001df0:	4614      	mov	r4, r2
 8001df2:	461d      	mov	r5, r3
 8001df4:	4643      	mov	r3, r8
 8001df6:	18e3      	adds	r3, r4, r3
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	eb45 0303 	adc.w	r3, r5, r3
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	028b      	lsls	r3, r1, #10
 8001e12:	4621      	mov	r1, r4
 8001e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e18:	4621      	mov	r1, r4
 8001e1a:	028a      	lsls	r2, r1, #10
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e22:	2200      	movs	r2, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	61fa      	str	r2, [r7, #28]
 8001e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e2c:	f7fe fa30 	bl	8000290 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3750      	adds	r7, #80	@ 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	007a1200 	.word	0x007a1200

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe ff08 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 fe20 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d001      	beq.n	8001f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e044      	b.n	8001fb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d018      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f56:	d013      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00e      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <HAL_TIM_Base_Start_IT+0xb8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x6c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f839 	bl	8002076 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 fd6e 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_TIM_OC_Start+0x24>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	e022      	b.n	80020f6 <HAL_TIM_OC_Start+0x6a>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d109      	bne.n	80020ca <HAL_TIM_OC_Start+0x3e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e015      	b.n	80020f6 <HAL_TIM_OC_Start+0x6a>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d109      	bne.n	80020e4 <HAL_TIM_OC_Start+0x58>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e008      	b.n	80020f6 <HAL_TIM_OC_Start+0x6a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e068      	b.n	80021d0 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <HAL_TIM_OC_Start+0x82>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800210c:	e013      	b.n	8002136 <HAL_TIM_OC_Start+0xaa>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d104      	bne.n	800211e <HAL_TIM_OC_Start+0x92>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800211c:	e00b      	b.n	8002136 <HAL_TIM_OC_Start+0xaa>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d104      	bne.n	800212e <HAL_TIM_OC_Start+0xa2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800212c:	e003      	b.n	8002136 <HAL_TIM_OC_Start+0xaa>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2201      	movs	r2, #1
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f001 f8aa 	bl	8003298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a23      	ldr	r2, [pc, #140]	@ (80021d8 <HAL_TIM_OC_Start+0x14c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d107      	bne.n	800215e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a1d      	ldr	r2, [pc, #116]	@ (80021d8 <HAL_TIM_OC_Start+0x14c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d018      	beq.n	800219a <HAL_TIM_OC_Start+0x10e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002170:	d013      	beq.n	800219a <HAL_TIM_OC_Start+0x10e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <HAL_TIM_OC_Start+0x150>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00e      	beq.n	800219a <HAL_TIM_OC_Start+0x10e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a17      	ldr	r2, [pc, #92]	@ (80021e0 <HAL_TIM_OC_Start+0x154>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_TIM_OC_Start+0x10e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <HAL_TIM_OC_Start+0x158>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_TIM_OC_Start+0x10e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a14      	ldr	r2, [pc, #80]	@ (80021e8 <HAL_TIM_OC_Start+0x15c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d111      	bne.n	80021be <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d010      	beq.n	80021ce <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021bc:	e007      	b.n	80021ce <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000

080021ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e041      	b.n	8002282 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f839 	bl	800228a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f000 fc64 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_TIM_IC_Start_IT+0x1e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e013      	b.n	80022e6 <HAL_TIM_IC_Start_IT+0x46>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_IC_Start_IT+0x2e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e00b      	b.n	80022e6 <HAL_TIM_IC_Start_IT+0x46>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d104      	bne.n	80022de <HAL_TIM_IC_Start_IT+0x3e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e003      	b.n	80022e6 <HAL_TIM_IC_Start_IT+0x46>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d104      	bne.n	80022f8 <HAL_TIM_IC_Start_IT+0x58>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e013      	b.n	8002320 <HAL_TIM_IC_Start_IT+0x80>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d104      	bne.n	8002308 <HAL_TIM_IC_Start_IT+0x68>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e00b      	b.n	8002320 <HAL_TIM_IC_Start_IT+0x80>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b08      	cmp	r3, #8
 800230c:	d104      	bne.n	8002318 <HAL_TIM_IC_Start_IT+0x78>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e003      	b.n	8002320 <HAL_TIM_IC_Start_IT+0x80>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800231e:	b2db      	uxtb	r3, r3
 8002320:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002322:	7bbb      	ldrb	r3, [r7, #14]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d102      	bne.n	800232e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002328:	7b7b      	ldrb	r3, [r7, #13]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0c2      	b.n	80024b8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <HAL_TIM_IC_Start_IT+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002340:	e013      	b.n	800236a <HAL_TIM_IC_Start_IT+0xca>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d104      	bne.n	8002352 <HAL_TIM_IC_Start_IT+0xb2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002350:	e00b      	b.n	800236a <HAL_TIM_IC_Start_IT+0xca>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d104      	bne.n	8002362 <HAL_TIM_IC_Start_IT+0xc2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002360:	e003      	b.n	800236a <HAL_TIM_IC_Start_IT+0xca>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <HAL_TIM_IC_Start_IT+0xda>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002378:	e013      	b.n	80023a2 <HAL_TIM_IC_Start_IT+0x102>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d104      	bne.n	800238a <HAL_TIM_IC_Start_IT+0xea>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002388:	e00b      	b.n	80023a2 <HAL_TIM_IC_Start_IT+0x102>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d104      	bne.n	800239a <HAL_TIM_IC_Start_IT+0xfa>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002398:	e003      	b.n	80023a2 <HAL_TIM_IC_Start_IT+0x102>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	d841      	bhi.n	800242c <HAL_TIM_IC_Start_IT+0x18c>
 80023a8:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <HAL_TIM_IC_Start_IT+0x110>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	0800242d 	.word	0x0800242d
 80023b8:	0800242d 	.word	0x0800242d
 80023bc:	0800242d 	.word	0x0800242d
 80023c0:	080023f7 	.word	0x080023f7
 80023c4:	0800242d 	.word	0x0800242d
 80023c8:	0800242d 	.word	0x0800242d
 80023cc:	0800242d 	.word	0x0800242d
 80023d0:	08002409 	.word	0x08002409
 80023d4:	0800242d 	.word	0x0800242d
 80023d8:	0800242d 	.word	0x0800242d
 80023dc:	0800242d 	.word	0x0800242d
 80023e0:	0800241b 	.word	0x0800241b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0202 	orr.w	r2, r2, #2
 80023f2:	60da      	str	r2, [r3, #12]
      break;
 80023f4:	e01d      	b.n	8002432 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0204 	orr.w	r2, r2, #4
 8002404:	60da      	str	r2, [r3, #12]
      break;
 8002406:	e014      	b.n	8002432 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0208 	orr.w	r2, r2, #8
 8002416:	60da      	str	r2, [r3, #12]
      break;
 8002418:	e00b      	b.n	8002432 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0210 	orr.w	r2, r2, #16
 8002428:	60da      	str	r2, [r3, #12]
      break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	bf00      	nop
  }

  if (status == HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d13e      	bne.n	80024b6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2201      	movs	r2, #1
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 ff29 	bl	8003298 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_TIM_IC_Start_IT+0x220>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d018      	beq.n	8002482 <HAL_TIM_IC_Start_IT+0x1e2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002458:	d013      	beq.n	8002482 <HAL_TIM_IC_Start_IT+0x1e2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a19      	ldr	r2, [pc, #100]	@ (80024c4 <HAL_TIM_IC_Start_IT+0x224>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_TIM_IC_Start_IT+0x1e2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_TIM_IC_Start_IT+0x228>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_TIM_IC_Start_IT+0x1e2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a16      	ldr	r2, [pc, #88]	@ (80024cc <HAL_TIM_IC_Start_IT+0x22c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_TIM_IC_Start_IT+0x1e2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <HAL_TIM_IC_Start_IT+0x230>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d111      	bne.n	80024a6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b06      	cmp	r3, #6
 8002492:	d010      	beq.n	80024b6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a4:	e007      	b.n	80024b6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40000c00 	.word	0x40000c00
 80024d0:	40014000 	.word	0x40014000

080024d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d020      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01b      	beq.n	8002538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0202 	mvn.w	r2, #2
 8002508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fb2a 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 fac8 	bl	8002abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 facf 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d020      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0204 	mvn.w	r2, #4
 8002554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fb04 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 faa2 	bl	8002abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 faa9 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0208 	mvn.w	r2, #8
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fade 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa7c 	bl	8002abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fa83 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0210 	mvn.w	r2, #16
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2208      	movs	r2, #8
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fab8 	bl	8000b78 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa56 	bl	8002abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fa5d 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fa70 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800265c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 feb8 	bl	80033d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa2e 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0220 	mvn.w	r2, #32
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fe8a 	bl	80033c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e048      	b.n	8002764 <HAL_TIM_OC_ConfigChannel+0xb0>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d839      	bhi.n	8002754 <HAL_TIM_OC_ConfigChannel+0xa0>
 80026e0:	a201      	add	r2, pc, #4	@ (adr r2, 80026e8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	0800271d 	.word	0x0800271d
 80026ec:	08002755 	.word	0x08002755
 80026f0:	08002755 	.word	0x08002755
 80026f4:	08002755 	.word	0x08002755
 80026f8:	0800272b 	.word	0x0800272b
 80026fc:	08002755 	.word	0x08002755
 8002700:	08002755 	.word	0x08002755
 8002704:	08002755 	.word	0x08002755
 8002708:	08002739 	.word	0x08002739
 800270c:	08002755 	.word	0x08002755
 8002710:	08002755 	.word	0x08002755
 8002714:	08002755 	.word	0x08002755
 8002718:	08002747 	.word	0x08002747
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa74 	bl	8002c10 <TIM_OC1_SetConfig>
      break;
 8002728:	e017      	b.n	800275a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fad3 	bl	8002cdc <TIM_OC2_SetConfig>
      break;
 8002736:	e010      	b.n	800275a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fb38 	bl	8002db4 <TIM_OC3_SetConfig>
      break;
 8002744:	e009      	b.n	800275a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fb9b 	bl	8002e88 <TIM_OC4_SetConfig>
      break;
 8002752:	e002      	b.n	800275a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
      break;
 8002758:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002762:	7dfb      	ldrb	r3, [r7, #23]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002786:	2302      	movs	r3, #2
 8002788:	e088      	b.n	800289c <HAL_TIM_IC_ConfigChannel+0x130>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80027a8:	f000 fbbe 	bl	8002f28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 020c 	bic.w	r2, r2, #12
 80027ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6999      	ldr	r1, [r3, #24]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
 80027ce:	e060      	b.n	8002892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d11c      	bne.n	8002810 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80027e6:	f000 fc36 	bl	8003056 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80027f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6999      	ldr	r1, [r3, #24]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	021a      	lsls	r2, r3, #8
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	619a      	str	r2, [r3, #24]
 800280e:	e040      	b.n	8002892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d11b      	bne.n	800284e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002826:	f000 fc83 	bl	8003130 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 020c 	bic.w	r2, r2, #12
 8002838:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69d9      	ldr	r1, [r3, #28]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	61da      	str	r2, [r3, #28]
 800284c:	e021      	b.n	8002892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d11c      	bne.n	800288e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002864:	f000 fca0 	bl	80031a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002876:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69d9      	ldr	r1, [r3, #28]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	021a      	lsls	r2, r3, #8
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
 800288c:	e001      	b.n	8002892 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800289a:	7dfb      	ldrb	r3, [r7, #23]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x1c>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0b4      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0x186>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f8:	d03e      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0xd4>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028fe:	f200 8087 	bhi.w	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002906:	f000 8086 	beq.w	8002a16 <HAL_TIM_ConfigClockSource+0x172>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800290e:	d87f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b70      	cmp	r3, #112	@ 0x70
 8002912:	d01a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xa6>
 8002914:	2b70      	cmp	r3, #112	@ 0x70
 8002916:	d87b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b60      	cmp	r3, #96	@ 0x60
 800291a:	d050      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x11a>
 800291c:	2b60      	cmp	r3, #96	@ 0x60
 800291e:	d877      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b50      	cmp	r3, #80	@ 0x50
 8002922:	d03c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xfa>
 8002924:	2b50      	cmp	r3, #80	@ 0x50
 8002926:	d873      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b40      	cmp	r3, #64	@ 0x40
 800292a:	d058      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x13a>
 800292c:	2b40      	cmp	r3, #64	@ 0x40
 800292e:	d86f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b30      	cmp	r3, #48	@ 0x30
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b30      	cmp	r3, #48	@ 0x30
 8002936:	d86b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d060      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d867      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d05a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	e062      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800295a:	f000 fc7d 	bl	8003258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800296c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	609a      	str	r2, [r3, #8]
      break;
 8002976:	e04f      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002988:	f000 fc66 	bl	8003258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800299a:	609a      	str	r2, [r3, #8]
      break;
 800299c:	e03c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 fb24 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2150      	movs	r1, #80	@ 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fc33 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 80029bc:	e02c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 fb80 	bl	80030d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2160      	movs	r1, #96	@ 0x60
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fc23 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 80029dc:	e01c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 fb04 	bl	8002ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2140      	movs	r1, #64	@ 0x40
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fc13 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 80029fc:	e00c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 fc0a 	bl	8003222 <TIM_ITRx_SetConfig>
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e000      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d831      	bhi.n	8002aac <HAL_TIM_ReadCapturedValue+0x78>
 8002a48:	a201      	add	r2, pc, #4	@ (adr r2, 8002a50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a85 	.word	0x08002a85
 8002a54:	08002aad 	.word	0x08002aad
 8002a58:	08002aad 	.word	0x08002aad
 8002a5c:	08002aad 	.word	0x08002aad
 8002a60:	08002a8f 	.word	0x08002a8f
 8002a64:	08002aad 	.word	0x08002aad
 8002a68:	08002aad 	.word	0x08002aad
 8002a6c:	08002aad 	.word	0x08002aad
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	08002aad 	.word	0x08002aad
 8002a78:	08002aad 	.word	0x08002aad
 8002a7c:	08002aad 	.word	0x08002aad
 8002a80:	08002aa3 	.word	0x08002aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	60fb      	str	r3, [r7, #12]

      break;
 8002a8c:	e00f      	b.n	8002aae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	60fb      	str	r3, [r7, #12]

      break;
 8002a96:	e00a      	b.n	8002aae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	60fb      	str	r3, [r7, #12]

      break;
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	60fb      	str	r3, [r7, #12]

      break;
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002aac:	bf00      	nop
  }

  return tmpreg;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00f      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b16:	d00b      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <TIM_Base_SetConfig+0x100>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a36      	ldr	r2, [pc, #216]	@ (8002bfc <TIM_Base_SetConfig+0x104>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <TIM_Base_SetConfig+0x108>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01b      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b50:	d017      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <TIM_Base_SetConfig+0x100>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <TIM_Base_SetConfig+0x104>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00f      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <TIM_Base_SetConfig+0x108>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	@ (8002c04 <TIM_Base_SetConfig+0x10c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <TIM_Base_SetConfig+0x110>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	@ (8002c0c <TIM_Base_SetConfig+0x114>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d108      	bne.n	8002b94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
  }
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40014400 	.word	0x40014400
 8002c0c:	40014800 	.word	0x40014800

08002c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f023 0201 	bic.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f023 0302 	bic.w	r3, r3, #2
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd8 <TIM_OC1_SetConfig+0xc8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0308 	bic.w	r3, r3, #8
 8002c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <TIM_OC1_SetConfig+0xc8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d111      	bne.n	8002cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	621a      	str	r2, [r3, #32]
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40010000 	.word	0x40010000

08002cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 0210 	bic.w	r2, r3, #16
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0320 	bic.w	r3, r3, #32
 8002d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a1e      	ldr	r2, [pc, #120]	@ (8002db0 <TIM_OC2_SetConfig+0xd4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10d      	bne.n	8002d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <TIM_OC2_SetConfig+0xd4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d113      	bne.n	8002d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000

08002db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <TIM_OC3_SetConfig+0xd0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10d      	bne.n	8002e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <TIM_OC3_SetConfig+0xd0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d113      	bne.n	8002e5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40010000 	.word	0x40010000

08002e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	031b      	lsls	r3, r3, #12
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a10      	ldr	r2, [pc, #64]	@ (8002f24 <TIM_OC4_SetConfig+0x9c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d109      	bne.n	8002efc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	019b      	lsls	r3, r3, #6
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40010000 	.word	0x40010000

08002f28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f023 0201 	bic.w	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a24      	ldr	r2, [pc, #144]	@ (8002fe4 <TIM_TI1_SetConfig+0xbc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <TIM_TI1_SetConfig+0x56>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5c:	d00f      	beq.n	8002f7e <TIM_TI1_SetConfig+0x56>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <TIM_TI1_SetConfig+0xc0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <TIM_TI1_SetConfig+0x56>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4a20      	ldr	r2, [pc, #128]	@ (8002fec <TIM_TI1_SetConfig+0xc4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <TIM_TI1_SetConfig+0x56>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff0 <TIM_TI1_SetConfig+0xc8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_TI1_SetConfig+0x56>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <TIM_TI1_SetConfig+0xcc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <TIM_TI1_SetConfig+0x5a>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <TIM_TI1_SetConfig+0x5c>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e003      	b.n	8002fa2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f023 030a 	bic.w	r3, r3, #10
 8002fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 030a 	and.w	r3, r3, #10
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40014000 	.word	0x40014000

08002ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0201 	bic.w	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 030a 	bic.w	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	031b      	lsls	r3, r3, #12
 800309a:	b29b      	uxth	r3, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0210 	bic.w	r2, r3, #16
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	031b      	lsls	r3, r3, #12
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800310c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f023 0303 	bic.w	r3, r3, #3
 800315c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800316c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	b2db      	uxtb	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003180:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	031b      	lsls	r3, r3, #12
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80031fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	031b      	lsls	r3, r3, #12
 8003200:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	f043 0307 	orr.w	r3, r3, #7
 8003244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	431a      	orrs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2201      	movs	r2, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e050      	b.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d013      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a18      	ldr	r2, [pc, #96]	@ (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a15      	ldr	r2, [pc, #84]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a13      	ldr	r2, [pc, #76]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10c      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4313      	orrs	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40014000 	.word	0x40014000

080033c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <findslot>:
 80033e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <findslot+0x2c>)
 80033ea:	b510      	push	{r4, lr}
 80033ec:	4604      	mov	r4, r0
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	b118      	cbz	r0, 80033fa <findslot+0x12>
 80033f2:	6a03      	ldr	r3, [r0, #32]
 80033f4:	b90b      	cbnz	r3, 80033fa <findslot+0x12>
 80033f6:	f000 fb9b 	bl	8003b30 <__sinit>
 80033fa:	2c13      	cmp	r4, #19
 80033fc:	d807      	bhi.n	800340e <findslot+0x26>
 80033fe:	4806      	ldr	r0, [pc, #24]	@ (8003418 <findslot+0x30>)
 8003400:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003404:	3201      	adds	r2, #1
 8003406:	d002      	beq.n	800340e <findslot+0x26>
 8003408:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800340c:	bd10      	pop	{r4, pc}
 800340e:	2000      	movs	r0, #0
 8003410:	e7fc      	b.n	800340c <findslot+0x24>
 8003412:	bf00      	nop
 8003414:	20000020 	.word	0x20000020
 8003418:	20000144 	.word	0x20000144

0800341c <error>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	f000 fd80 	bl	8003f24 <__errno>
 8003424:	2613      	movs	r6, #19
 8003426:	4605      	mov	r5, r0
 8003428:	2700      	movs	r7, #0
 800342a:	4630      	mov	r0, r6
 800342c:	4639      	mov	r1, r7
 800342e:	beab      	bkpt	0x00ab
 8003430:	4606      	mov	r6, r0
 8003432:	602e      	str	r6, [r5, #0]
 8003434:	4620      	mov	r0, r4
 8003436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003438 <checkerror>:
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d101      	bne.n	8003440 <checkerror+0x8>
 800343c:	f7ff bfee 	b.w	800341c <error>
 8003440:	4770      	bx	lr

08003442 <_swiread>:
 8003442:	b530      	push	{r4, r5, lr}
 8003444:	b085      	sub	sp, #20
 8003446:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800344a:	9203      	str	r2, [sp, #12]
 800344c:	2406      	movs	r4, #6
 800344e:	ad01      	add	r5, sp, #4
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	beab      	bkpt	0x00ab
 8003456:	4604      	mov	r4, r0
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ffed 	bl	8003438 <checkerror>
 800345e:	b005      	add	sp, #20
 8003460:	bd30      	pop	{r4, r5, pc}

08003462 <_read>:
 8003462:	b570      	push	{r4, r5, r6, lr}
 8003464:	460e      	mov	r6, r1
 8003466:	4614      	mov	r4, r2
 8003468:	f7ff ffbe 	bl	80033e8 <findslot>
 800346c:	4605      	mov	r5, r0
 800346e:	b930      	cbnz	r0, 800347e <_read+0x1c>
 8003470:	f000 fd58 	bl	8003f24 <__errno>
 8003474:	2309      	movs	r3, #9
 8003476:	6003      	str	r3, [r0, #0]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800347c:	bd70      	pop	{r4, r5, r6, pc}
 800347e:	6800      	ldr	r0, [r0, #0]
 8003480:	4622      	mov	r2, r4
 8003482:	4631      	mov	r1, r6
 8003484:	f7ff ffdd 	bl	8003442 <_swiread>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d0f5      	beq.n	8003478 <_read+0x16>
 800348c:	686b      	ldr	r3, [r5, #4]
 800348e:	1a20      	subs	r0, r4, r0
 8003490:	4403      	add	r3, r0
 8003492:	606b      	str	r3, [r5, #4]
 8003494:	e7f2      	b.n	800347c <_read+0x1a>

08003496 <_swilseek>:
 8003496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003498:	460c      	mov	r4, r1
 800349a:	4616      	mov	r6, r2
 800349c:	f7ff ffa4 	bl	80033e8 <findslot>
 80034a0:	4605      	mov	r5, r0
 80034a2:	b940      	cbnz	r0, 80034b6 <_swilseek+0x20>
 80034a4:	f000 fd3e 	bl	8003f24 <__errno>
 80034a8:	2309      	movs	r3, #9
 80034aa:	6003      	str	r3, [r0, #0]
 80034ac:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034b0:	4620      	mov	r0, r4
 80034b2:	b003      	add	sp, #12
 80034b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b6:	2e02      	cmp	r6, #2
 80034b8:	d903      	bls.n	80034c2 <_swilseek+0x2c>
 80034ba:	f000 fd33 	bl	8003f24 <__errno>
 80034be:	2316      	movs	r3, #22
 80034c0:	e7f3      	b.n	80034aa <_swilseek+0x14>
 80034c2:	2e01      	cmp	r6, #1
 80034c4:	d112      	bne.n	80034ec <_swilseek+0x56>
 80034c6:	6843      	ldr	r3, [r0, #4]
 80034c8:	18e4      	adds	r4, r4, r3
 80034ca:	d4f6      	bmi.n	80034ba <_swilseek+0x24>
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	260a      	movs	r6, #10
 80034d0:	e9cd 3400 	strd	r3, r4, [sp]
 80034d4:	466f      	mov	r7, sp
 80034d6:	4630      	mov	r0, r6
 80034d8:	4639      	mov	r1, r7
 80034da:	beab      	bkpt	0x00ab
 80034dc:	4606      	mov	r6, r0
 80034de:	4630      	mov	r0, r6
 80034e0:	f7ff ffaa 	bl	8003438 <checkerror>
 80034e4:	2800      	cmp	r0, #0
 80034e6:	dbe1      	blt.n	80034ac <_swilseek+0x16>
 80034e8:	606c      	str	r4, [r5, #4]
 80034ea:	e7e1      	b.n	80034b0 <_swilseek+0x1a>
 80034ec:	2e02      	cmp	r6, #2
 80034ee:	6803      	ldr	r3, [r0, #0]
 80034f0:	d1ec      	bne.n	80034cc <_swilseek+0x36>
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	260c      	movs	r6, #12
 80034f6:	466f      	mov	r7, sp
 80034f8:	4630      	mov	r0, r6
 80034fa:	4639      	mov	r1, r7
 80034fc:	beab      	bkpt	0x00ab
 80034fe:	4606      	mov	r6, r0
 8003500:	4630      	mov	r0, r6
 8003502:	f7ff ff99 	bl	8003438 <checkerror>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d0d0      	beq.n	80034ac <_swilseek+0x16>
 800350a:	4404      	add	r4, r0
 800350c:	e7de      	b.n	80034cc <_swilseek+0x36>

0800350e <_lseek>:
 800350e:	f7ff bfc2 	b.w	8003496 <_swilseek>

08003512 <_swiwrite>:
 8003512:	b530      	push	{r4, r5, lr}
 8003514:	b085      	sub	sp, #20
 8003516:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800351a:	9203      	str	r2, [sp, #12]
 800351c:	2405      	movs	r4, #5
 800351e:	ad01      	add	r5, sp, #4
 8003520:	4620      	mov	r0, r4
 8003522:	4629      	mov	r1, r5
 8003524:	beab      	bkpt	0x00ab
 8003526:	4604      	mov	r4, r0
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff ff85 	bl	8003438 <checkerror>
 800352e:	b005      	add	sp, #20
 8003530:	bd30      	pop	{r4, r5, pc}

08003532 <_write>:
 8003532:	b570      	push	{r4, r5, r6, lr}
 8003534:	460e      	mov	r6, r1
 8003536:	4615      	mov	r5, r2
 8003538:	f7ff ff56 	bl	80033e8 <findslot>
 800353c:	4604      	mov	r4, r0
 800353e:	b930      	cbnz	r0, 800354e <_write+0x1c>
 8003540:	f000 fcf0 	bl	8003f24 <__errno>
 8003544:	2309      	movs	r3, #9
 8003546:	6003      	str	r3, [r0, #0]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800354c:	bd70      	pop	{r4, r5, r6, pc}
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	462a      	mov	r2, r5
 8003552:	4631      	mov	r1, r6
 8003554:	f7ff ffdd 	bl	8003512 <_swiwrite>
 8003558:	1e03      	subs	r3, r0, #0
 800355a:	dbf5      	blt.n	8003548 <_write+0x16>
 800355c:	6862      	ldr	r2, [r4, #4]
 800355e:	1ae8      	subs	r0, r5, r3
 8003560:	4402      	add	r2, r0
 8003562:	42ab      	cmp	r3, r5
 8003564:	6062      	str	r2, [r4, #4]
 8003566:	d1f1      	bne.n	800354c <_write+0x1a>
 8003568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800356c:	2000      	movs	r0, #0
 800356e:	f7ff bf55 	b.w	800341c <error>

08003572 <_swiclose>:
 8003572:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003574:	2402      	movs	r4, #2
 8003576:	9001      	str	r0, [sp, #4]
 8003578:	ad01      	add	r5, sp, #4
 800357a:	4620      	mov	r0, r4
 800357c:	4629      	mov	r1, r5
 800357e:	beab      	bkpt	0x00ab
 8003580:	4604      	mov	r4, r0
 8003582:	4620      	mov	r0, r4
 8003584:	f7ff ff58 	bl	8003438 <checkerror>
 8003588:	b003      	add	sp, #12
 800358a:	bd30      	pop	{r4, r5, pc}

0800358c <_close>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4605      	mov	r5, r0
 8003590:	f7ff ff2a 	bl	80033e8 <findslot>
 8003594:	4604      	mov	r4, r0
 8003596:	b930      	cbnz	r0, 80035a6 <_close+0x1a>
 8003598:	f000 fcc4 	bl	8003f24 <__errno>
 800359c:	2309      	movs	r3, #9
 800359e:	6003      	str	r3, [r0, #0]
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
 80035a6:	3d01      	subs	r5, #1
 80035a8:	2d01      	cmp	r5, #1
 80035aa:	d809      	bhi.n	80035c0 <_close+0x34>
 80035ac:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <_close+0x40>)
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d104      	bne.n	80035c0 <_close+0x34>
 80035b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	2000      	movs	r0, #0
 80035be:	e7f1      	b.n	80035a4 <_close+0x18>
 80035c0:	6820      	ldr	r0, [r4, #0]
 80035c2:	f7ff ffd6 	bl	8003572 <_swiclose>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d0f5      	beq.n	80035b6 <_close+0x2a>
 80035ca:	e7eb      	b.n	80035a4 <_close+0x18>
 80035cc:	20000144 	.word	0x20000144

080035d0 <_getpid>:
 80035d0:	2001      	movs	r0, #1
 80035d2:	4770      	bx	lr

080035d4 <_swistat>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	460c      	mov	r4, r1
 80035d8:	f7ff ff06 	bl	80033e8 <findslot>
 80035dc:	4605      	mov	r5, r0
 80035de:	b930      	cbnz	r0, 80035ee <_swistat+0x1a>
 80035e0:	f000 fca0 	bl	8003f24 <__errno>
 80035e4:	2309      	movs	r3, #9
 80035e6:	6003      	str	r3, [r0, #0]
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
 80035ee:	6863      	ldr	r3, [r4, #4]
 80035f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80035fc:	260c      	movs	r6, #12
 80035fe:	4630      	mov	r0, r6
 8003600:	4629      	mov	r1, r5
 8003602:	beab      	bkpt	0x00ab
 8003604:	4605      	mov	r5, r0
 8003606:	4628      	mov	r0, r5
 8003608:	f7ff ff16 	bl	8003438 <checkerror>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d0eb      	beq.n	80035e8 <_swistat+0x14>
 8003610:	6120      	str	r0, [r4, #16]
 8003612:	2000      	movs	r0, #0
 8003614:	e7ea      	b.n	80035ec <_swistat+0x18>

08003616 <_fstat>:
 8003616:	460b      	mov	r3, r1
 8003618:	b510      	push	{r4, lr}
 800361a:	2100      	movs	r1, #0
 800361c:	4604      	mov	r4, r0
 800361e:	2258      	movs	r2, #88	@ 0x58
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fc03 	bl	8003e2c <memset>
 8003626:	4601      	mov	r1, r0
 8003628:	4620      	mov	r0, r4
 800362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800362e:	f7ff bfd1 	b.w	80035d4 <_swistat>

08003632 <_stat>:
 8003632:	b538      	push	{r3, r4, r5, lr}
 8003634:	460d      	mov	r5, r1
 8003636:	4604      	mov	r4, r0
 8003638:	2258      	movs	r2, #88	@ 0x58
 800363a:	2100      	movs	r1, #0
 800363c:	4628      	mov	r0, r5
 800363e:	f000 fbf5 	bl	8003e2c <memset>
 8003642:	4620      	mov	r0, r4
 8003644:	2100      	movs	r1, #0
 8003646:	f000 f811 	bl	800366c <_swiopen>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	4604      	mov	r4, r0
 800364e:	d00b      	beq.n	8003668 <_stat+0x36>
 8003650:	686b      	ldr	r3, [r5, #4]
 8003652:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003656:	606b      	str	r3, [r5, #4]
 8003658:	4629      	mov	r1, r5
 800365a:	f7ff ffbb 	bl	80035d4 <_swistat>
 800365e:	4605      	mov	r5, r0
 8003660:	4620      	mov	r0, r4
 8003662:	f7ff ff93 	bl	800358c <_close>
 8003666:	462c      	mov	r4, r5
 8003668:	4620      	mov	r0, r4
 800366a:	bd38      	pop	{r3, r4, r5, pc}

0800366c <_swiopen>:
 800366c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003670:	4f29      	ldr	r7, [pc, #164]	@ (8003718 <_swiopen+0xac>)
 8003672:	b096      	sub	sp, #88	@ 0x58
 8003674:	4682      	mov	sl, r0
 8003676:	460e      	mov	r6, r1
 8003678:	2400      	movs	r4, #0
 800367a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800367e:	3301      	adds	r3, #1
 8003680:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003684:	d00c      	beq.n	80036a0 <_swiopen+0x34>
 8003686:	3401      	adds	r4, #1
 8003688:	2c14      	cmp	r4, #20
 800368a:	d1f6      	bne.n	800367a <_swiopen+0xe>
 800368c:	f000 fc4a 	bl	8003f24 <__errno>
 8003690:	2318      	movs	r3, #24
 8003692:	6003      	str	r3, [r0, #0]
 8003694:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003698:	4620      	mov	r0, r4
 800369a:	b016      	add	sp, #88	@ 0x58
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80036a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80036a8:	46e9      	mov	r9, sp
 80036aa:	d109      	bne.n	80036c0 <_swiopen+0x54>
 80036ac:	4649      	mov	r1, r9
 80036ae:	4650      	mov	r0, sl
 80036b0:	f7ff ffbf 	bl	8003632 <_stat>
 80036b4:	3001      	adds	r0, #1
 80036b6:	d003      	beq.n	80036c0 <_swiopen+0x54>
 80036b8:	f000 fc34 	bl	8003f24 <__errno>
 80036bc:	2311      	movs	r3, #17
 80036be:	e7e8      	b.n	8003692 <_swiopen+0x26>
 80036c0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80036c4:	f240 6301 	movw	r3, #1537	@ 0x601
 80036c8:	07b2      	lsls	r2, r6, #30
 80036ca:	bf48      	it	mi
 80036cc:	f045 0502 	orrmi.w	r5, r5, #2
 80036d0:	421e      	tst	r6, r3
 80036d2:	bf18      	it	ne
 80036d4:	f045 0504 	orrne.w	r5, r5, #4
 80036d8:	0733      	lsls	r3, r6, #28
 80036da:	bf48      	it	mi
 80036dc:	f025 0504 	bicmi.w	r5, r5, #4
 80036e0:	4650      	mov	r0, sl
 80036e2:	bf48      	it	mi
 80036e4:	f045 0508 	orrmi.w	r5, r5, #8
 80036e8:	f8cd a000 	str.w	sl, [sp]
 80036ec:	f7fc fd78 	bl	80001e0 <strlen>
 80036f0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80036f4:	2501      	movs	r5, #1
 80036f6:	4628      	mov	r0, r5
 80036f8:	4649      	mov	r1, r9
 80036fa:	beab      	bkpt	0x00ab
 80036fc:	4605      	mov	r5, r0
 80036fe:	2d00      	cmp	r5, #0
 8003700:	db05      	blt.n	800370e <_swiopen+0xa2>
 8003702:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003706:	4447      	add	r7, r8
 8003708:	2300      	movs	r3, #0
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	e7c4      	b.n	8003698 <_swiopen+0x2c>
 800370e:	4628      	mov	r0, r5
 8003710:	f7ff fe84 	bl	800341c <error>
 8003714:	4604      	mov	r4, r0
 8003716:	e7bf      	b.n	8003698 <_swiopen+0x2c>
 8003718:	20000144 	.word	0x20000144

0800371c <_get_semihosting_exts>:
 800371c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003720:	4606      	mov	r6, r0
 8003722:	460f      	mov	r7, r1
 8003724:	4829      	ldr	r0, [pc, #164]	@ (80037cc <_get_semihosting_exts+0xb0>)
 8003726:	2100      	movs	r1, #0
 8003728:	4615      	mov	r5, r2
 800372a:	f7ff ff9f 	bl	800366c <_swiopen>
 800372e:	462a      	mov	r2, r5
 8003730:	4604      	mov	r4, r0
 8003732:	2100      	movs	r1, #0
 8003734:	4630      	mov	r0, r6
 8003736:	f000 fb79 	bl	8003e2c <memset>
 800373a:	1c63      	adds	r3, r4, #1
 800373c:	d014      	beq.n	8003768 <_get_semihosting_exts+0x4c>
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff fe52 	bl	80033e8 <findslot>
 8003744:	f04f 080c 	mov.w	r8, #12
 8003748:	4681      	mov	r9, r0
 800374a:	4640      	mov	r0, r8
 800374c:	4649      	mov	r1, r9
 800374e:	beab      	bkpt	0x00ab
 8003750:	4680      	mov	r8, r0
 8003752:	4640      	mov	r0, r8
 8003754:	f7ff fe70 	bl	8003438 <checkerror>
 8003758:	2803      	cmp	r0, #3
 800375a:	dd02      	ble.n	8003762 <_get_semihosting_exts+0x46>
 800375c:	1ec3      	subs	r3, r0, #3
 800375e:	42ab      	cmp	r3, r5
 8003760:	dc07      	bgt.n	8003772 <_get_semihosting_exts+0x56>
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff ff12 	bl	800358c <_close>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800376c:	b003      	add	sp, #12
 800376e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003772:	2204      	movs	r2, #4
 8003774:	eb0d 0102 	add.w	r1, sp, r2
 8003778:	4620      	mov	r0, r4
 800377a:	f7ff fe72 	bl	8003462 <_read>
 800377e:	2803      	cmp	r0, #3
 8003780:	ddef      	ble.n	8003762 <_get_semihosting_exts+0x46>
 8003782:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003786:	2b53      	cmp	r3, #83	@ 0x53
 8003788:	d1eb      	bne.n	8003762 <_get_semihosting_exts+0x46>
 800378a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800378e:	2b48      	cmp	r3, #72	@ 0x48
 8003790:	d1e7      	bne.n	8003762 <_get_semihosting_exts+0x46>
 8003792:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003796:	2b46      	cmp	r3, #70	@ 0x46
 8003798:	d1e3      	bne.n	8003762 <_get_semihosting_exts+0x46>
 800379a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800379e:	2b42      	cmp	r3, #66	@ 0x42
 80037a0:	d1df      	bne.n	8003762 <_get_semihosting_exts+0x46>
 80037a2:	2201      	movs	r2, #1
 80037a4:	4639      	mov	r1, r7
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff fe75 	bl	8003496 <_swilseek>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	dbd8      	blt.n	8003762 <_get_semihosting_exts+0x46>
 80037b0:	462a      	mov	r2, r5
 80037b2:	4631      	mov	r1, r6
 80037b4:	4620      	mov	r0, r4
 80037b6:	f7ff fe54 	bl	8003462 <_read>
 80037ba:	4605      	mov	r5, r0
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff fee5 	bl	800358c <_close>
 80037c2:	4628      	mov	r0, r5
 80037c4:	f7ff fe38 	bl	8003438 <checkerror>
 80037c8:	e7d0      	b.n	800376c <_get_semihosting_exts+0x50>
 80037ca:	bf00      	nop
 80037cc:	08004b68 	.word	0x08004b68

080037d0 <initialise_semihosting_exts>:
 80037d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037d2:	4d0a      	ldr	r5, [pc, #40]	@ (80037fc <initialise_semihosting_exts+0x2c>)
 80037d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003800 <initialise_semihosting_exts+0x30>)
 80037d6:	2100      	movs	r1, #0
 80037d8:	2201      	movs	r2, #1
 80037da:	a801      	add	r0, sp, #4
 80037dc:	6029      	str	r1, [r5, #0]
 80037de:	6022      	str	r2, [r4, #0]
 80037e0:	f7ff ff9c 	bl	800371c <_get_semihosting_exts>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	dd07      	ble.n	80037f8 <initialise_semihosting_exts+0x28>
 80037e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80037ec:	f003 0201 	and.w	r2, r3, #1
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	b003      	add	sp, #12
 80037fa:	bd30      	pop	{r4, r5, pc}
 80037fc:	20000010 	.word	0x20000010
 8003800:	2000000c 	.word	0x2000000c

08003804 <_has_ext_stdout_stderr>:
 8003804:	b510      	push	{r4, lr}
 8003806:	4c04      	ldr	r4, [pc, #16]	@ (8003818 <_has_ext_stdout_stderr+0x14>)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	da01      	bge.n	8003812 <_has_ext_stdout_stderr+0xe>
 800380e:	f7ff ffdf 	bl	80037d0 <initialise_semihosting_exts>
 8003812:	6820      	ldr	r0, [r4, #0]
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	2000000c 	.word	0x2000000c

0800381c <initialise_monitor_handles>:
 800381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003820:	b085      	sub	sp, #20
 8003822:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80038d4 <initialise_monitor_handles+0xb8>
 8003826:	f8cd 9004 	str.w	r9, [sp, #4]
 800382a:	2303      	movs	r3, #3
 800382c:	2400      	movs	r4, #0
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	af01      	add	r7, sp, #4
 8003832:	9402      	str	r4, [sp, #8]
 8003834:	2501      	movs	r5, #1
 8003836:	4628      	mov	r0, r5
 8003838:	4639      	mov	r1, r7
 800383a:	beab      	bkpt	0x00ab
 800383c:	4605      	mov	r5, r0
 800383e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80038d8 <initialise_monitor_handles+0xbc>
 8003842:	4623      	mov	r3, r4
 8003844:	4c20      	ldr	r4, [pc, #128]	@ (80038c8 <initialise_monitor_handles+0xac>)
 8003846:	f8c8 5000 	str.w	r5, [r8]
 800384a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800384e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003852:	3301      	adds	r3, #1
 8003854:	2b14      	cmp	r3, #20
 8003856:	d1fa      	bne.n	800384e <initialise_monitor_handles+0x32>
 8003858:	f7ff ffd4 	bl	8003804 <_has_ext_stdout_stderr>
 800385c:	4d1b      	ldr	r5, [pc, #108]	@ (80038cc <initialise_monitor_handles+0xb0>)
 800385e:	b1d0      	cbz	r0, 8003896 <initialise_monitor_handles+0x7a>
 8003860:	f04f 0a03 	mov.w	sl, #3
 8003864:	2304      	movs	r3, #4
 8003866:	f8cd 9004 	str.w	r9, [sp, #4]
 800386a:	2601      	movs	r6, #1
 800386c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003870:	9302      	str	r3, [sp, #8]
 8003872:	4630      	mov	r0, r6
 8003874:	4639      	mov	r1, r7
 8003876:	beab      	bkpt	0x00ab
 8003878:	4683      	mov	fp, r0
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <initialise_monitor_handles+0xb4>)
 800387c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003880:	f8c3 b000 	str.w	fp, [r3]
 8003884:	2308      	movs	r3, #8
 8003886:	f8cd a00c 	str.w	sl, [sp, #12]
 800388a:	9302      	str	r3, [sp, #8]
 800388c:	4630      	mov	r0, r6
 800388e:	4639      	mov	r1, r7
 8003890:	beab      	bkpt	0x00ab
 8003892:	4606      	mov	r6, r0
 8003894:	602e      	str	r6, [r5, #0]
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	bf02      	ittt	eq
 800389c:	4b0c      	ldreq	r3, [pc, #48]	@ (80038d0 <initialise_monitor_handles+0xb4>)
 800389e:	681b      	ldreq	r3, [r3, #0]
 80038a0:	602b      	streq	r3, [r5, #0]
 80038a2:	2600      	movs	r6, #0
 80038a4:	f8d8 3000 	ldr.w	r3, [r8]
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	6066      	str	r6, [r4, #4]
 80038ac:	f7ff ffaa 	bl	8003804 <_has_ext_stdout_stderr>
 80038b0:	b130      	cbz	r0, 80038c0 <initialise_monitor_handles+0xa4>
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <initialise_monitor_handles+0xb4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80038c0:	b005      	add	sp, #20
 80038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c6:	bf00      	nop
 80038c8:	20000144 	.word	0x20000144
 80038cc:	20000138 	.word	0x20000138
 80038d0:	2000013c 	.word	0x2000013c
 80038d4:	08004b7e 	.word	0x08004b7e
 80038d8:	20000140 	.word	0x20000140

080038dc <_gettimeofday>:
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	460d      	mov	r5, r1
 80038e0:	4604      	mov	r4, r0
 80038e2:	b148      	cbz	r0, 80038f8 <_gettimeofday+0x1c>
 80038e4:	2700      	movs	r7, #0
 80038e6:	2611      	movs	r6, #17
 80038e8:	4630      	mov	r0, r6
 80038ea:	4639      	mov	r1, r7
 80038ec:	beab      	bkpt	0x00ab
 80038ee:	4606      	mov	r6, r0
 80038f0:	17f3      	asrs	r3, r6, #31
 80038f2:	e9c4 6300 	strd	r6, r3, [r4]
 80038f6:	60a7      	str	r7, [r4, #8]
 80038f8:	b115      	cbz	r5, 8003900 <_gettimeofday+0x24>
 80038fa:	2300      	movs	r3, #0
 80038fc:	e9c5 3300 	strd	r3, r3, [r5]
 8003900:	2000      	movs	r0, #0
 8003902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003904 <_isatty>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	f7ff fd6f 	bl	80033e8 <findslot>
 800390a:	2409      	movs	r4, #9
 800390c:	4605      	mov	r5, r0
 800390e:	b920      	cbnz	r0, 800391a <_isatty+0x16>
 8003910:	f000 fb08 	bl	8003f24 <__errno>
 8003914:	6004      	str	r4, [r0, #0]
 8003916:	2000      	movs	r0, #0
 8003918:	bd70      	pop	{r4, r5, r6, pc}
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	beab      	bkpt	0x00ab
 8003920:	4604      	mov	r4, r0
 8003922:	2c01      	cmp	r4, #1
 8003924:	4620      	mov	r0, r4
 8003926:	d0f7      	beq.n	8003918 <_isatty+0x14>
 8003928:	f000 fafc 	bl	8003f24 <__errno>
 800392c:	2513      	movs	r5, #19
 800392e:	4604      	mov	r4, r0
 8003930:	2600      	movs	r6, #0
 8003932:	4628      	mov	r0, r5
 8003934:	4631      	mov	r1, r6
 8003936:	beab      	bkpt	0x00ab
 8003938:	4605      	mov	r5, r0
 800393a:	6025      	str	r5, [r4, #0]
 800393c:	e7eb      	b.n	8003916 <_isatty+0x12>
	...

08003940 <srand>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <srand+0x44>)
 8003944:	681d      	ldr	r5, [r3, #0]
 8003946:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003948:	4604      	mov	r4, r0
 800394a:	b9b3      	cbnz	r3, 800397a <srand+0x3a>
 800394c:	2018      	movs	r0, #24
 800394e:	f000 fb7f 	bl	8004050 <malloc>
 8003952:	4602      	mov	r2, r0
 8003954:	6328      	str	r0, [r5, #48]	@ 0x30
 8003956:	b920      	cbnz	r0, 8003962 <srand+0x22>
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <srand+0x48>)
 800395a:	480c      	ldr	r0, [pc, #48]	@ (800398c <srand+0x4c>)
 800395c:	2146      	movs	r1, #70	@ 0x46
 800395e:	f000 fb0f 	bl	8003f80 <__assert_func>
 8003962:	490b      	ldr	r1, [pc, #44]	@ (8003990 <srand+0x50>)
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <srand+0x54>)
 8003966:	e9c0 1300 	strd	r1, r3, [r0]
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <srand+0x58>)
 800396c:	6083      	str	r3, [r0, #8]
 800396e:	230b      	movs	r3, #11
 8003970:	8183      	strh	r3, [r0, #12]
 8003972:	2100      	movs	r1, #0
 8003974:	2001      	movs	r0, #1
 8003976:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800397a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800397c:	2200      	movs	r2, #0
 800397e:	611c      	str	r4, [r3, #16]
 8003980:	615a      	str	r2, [r3, #20]
 8003982:	bd38      	pop	{r3, r4, r5, pc}
 8003984:	20000020 	.word	0x20000020
 8003988:	08004b82 	.word	0x08004b82
 800398c:	08004b99 	.word	0x08004b99
 8003990:	abcd330e 	.word	0xabcd330e
 8003994:	e66d1234 	.word	0xe66d1234
 8003998:	0005deec 	.word	0x0005deec

0800399c <rand>:
 800399c:	4b16      	ldr	r3, [pc, #88]	@ (80039f8 <rand+0x5c>)
 800399e:	b510      	push	{r4, lr}
 80039a0:	681c      	ldr	r4, [r3, #0]
 80039a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80039a4:	b9b3      	cbnz	r3, 80039d4 <rand+0x38>
 80039a6:	2018      	movs	r0, #24
 80039a8:	f000 fb52 	bl	8004050 <malloc>
 80039ac:	4602      	mov	r2, r0
 80039ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80039b0:	b920      	cbnz	r0, 80039bc <rand+0x20>
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <rand+0x60>)
 80039b4:	4812      	ldr	r0, [pc, #72]	@ (8003a00 <rand+0x64>)
 80039b6:	2152      	movs	r1, #82	@ 0x52
 80039b8:	f000 fae2 	bl	8003f80 <__assert_func>
 80039bc:	4911      	ldr	r1, [pc, #68]	@ (8003a04 <rand+0x68>)
 80039be:	4b12      	ldr	r3, [pc, #72]	@ (8003a08 <rand+0x6c>)
 80039c0:	e9c0 1300 	strd	r1, r3, [r0]
 80039c4:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <rand+0x70>)
 80039c6:	6083      	str	r3, [r0, #8]
 80039c8:	230b      	movs	r3, #11
 80039ca:	8183      	strh	r3, [r0, #12]
 80039cc:	2100      	movs	r1, #0
 80039ce:	2001      	movs	r0, #1
 80039d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80039d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80039d6:	480e      	ldr	r0, [pc, #56]	@ (8003a10 <rand+0x74>)
 80039d8:	690b      	ldr	r3, [r1, #16]
 80039da:	694c      	ldr	r4, [r1, #20]
 80039dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a14 <rand+0x78>)
 80039de:	4358      	muls	r0, r3
 80039e0:	fb02 0004 	mla	r0, r2, r4, r0
 80039e4:	fba3 3202 	umull	r3, r2, r3, r2
 80039e8:	3301      	adds	r3, #1
 80039ea:	eb40 0002 	adc.w	r0, r0, r2
 80039ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80039f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80039f6:	bd10      	pop	{r4, pc}
 80039f8:	20000020 	.word	0x20000020
 80039fc:	08004b82 	.word	0x08004b82
 8003a00:	08004b99 	.word	0x08004b99
 8003a04:	abcd330e 	.word	0xabcd330e
 8003a08:	e66d1234 	.word	0xe66d1234
 8003a0c:	0005deec 	.word	0x0005deec
 8003a10:	5851f42d 	.word	0x5851f42d
 8003a14:	4c957f2d 	.word	0x4c957f2d

08003a18 <std>:
 8003a18:	2300      	movs	r3, #0
 8003a1a:	b510      	push	{r4, lr}
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a26:	6083      	str	r3, [r0, #8]
 8003a28:	8181      	strh	r1, [r0, #12]
 8003a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a2c:	81c2      	strh	r2, [r0, #14]
 8003a2e:	6183      	str	r3, [r0, #24]
 8003a30:	4619      	mov	r1, r3
 8003a32:	2208      	movs	r2, #8
 8003a34:	305c      	adds	r0, #92	@ 0x5c
 8003a36:	f000 f9f9 	bl	8003e2c <memset>
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <std+0x58>)
 8003a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <std+0x5c>)
 8003a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a42:	4b0d      	ldr	r3, [pc, #52]	@ (8003a78 <std+0x60>)
 8003a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <std+0x64>)
 8003a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <std+0x68>)
 8003a4c:	6224      	str	r4, [r4, #32]
 8003a4e:	429c      	cmp	r4, r3
 8003a50:	d006      	beq.n	8003a60 <std+0x48>
 8003a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a56:	4294      	cmp	r4, r2
 8003a58:	d002      	beq.n	8003a60 <std+0x48>
 8003a5a:	33d0      	adds	r3, #208	@ 0xd0
 8003a5c:	429c      	cmp	r4, r3
 8003a5e:	d105      	bne.n	8003a6c <std+0x54>
 8003a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a68:	f000 ba86 	b.w	8003f78 <__retarget_lock_init_recursive>
 8003a6c:	bd10      	pop	{r4, pc}
 8003a6e:	bf00      	nop
 8003a70:	08003c7d 	.word	0x08003c7d
 8003a74:	08003c9f 	.word	0x08003c9f
 8003a78:	08003cd7 	.word	0x08003cd7
 8003a7c:	08003cfb 	.word	0x08003cfb
 8003a80:	200001e4 	.word	0x200001e4

08003a84 <stdio_exit_handler>:
 8003a84:	4a02      	ldr	r2, [pc, #8]	@ (8003a90 <stdio_exit_handler+0xc>)
 8003a86:	4903      	ldr	r1, [pc, #12]	@ (8003a94 <stdio_exit_handler+0x10>)
 8003a88:	4803      	ldr	r0, [pc, #12]	@ (8003a98 <stdio_exit_handler+0x14>)
 8003a8a:	f000 b869 	b.w	8003b60 <_fwalk_sglue>
 8003a8e:	bf00      	nop
 8003a90:	20000014 	.word	0x20000014
 8003a94:	08004865 	.word	0x08004865
 8003a98:	20000024 	.word	0x20000024

08003a9c <cleanup_stdio>:
 8003a9c:	6841      	ldr	r1, [r0, #4]
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad0 <cleanup_stdio+0x34>)
 8003aa0:	4299      	cmp	r1, r3
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	d001      	beq.n	8003aac <cleanup_stdio+0x10>
 8003aa8:	f000 fedc 	bl	8004864 <_fflush_r>
 8003aac:	68a1      	ldr	r1, [r4, #8]
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <cleanup_stdio+0x38>)
 8003ab0:	4299      	cmp	r1, r3
 8003ab2:	d002      	beq.n	8003aba <cleanup_stdio+0x1e>
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f000 fed5 	bl	8004864 <_fflush_r>
 8003aba:	68e1      	ldr	r1, [r4, #12]
 8003abc:	4b06      	ldr	r3, [pc, #24]	@ (8003ad8 <cleanup_stdio+0x3c>)
 8003abe:	4299      	cmp	r1, r3
 8003ac0:	d004      	beq.n	8003acc <cleanup_stdio+0x30>
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac8:	f000 becc 	b.w	8004864 <_fflush_r>
 8003acc:	bd10      	pop	{r4, pc}
 8003ace:	bf00      	nop
 8003ad0:	200001e4 	.word	0x200001e4
 8003ad4:	2000024c 	.word	0x2000024c
 8003ad8:	200002b4 	.word	0x200002b4

08003adc <global_stdio_init.part.0>:
 8003adc:	b510      	push	{r4, lr}
 8003ade:	4b0b      	ldr	r3, [pc, #44]	@ (8003b0c <global_stdio_init.part.0+0x30>)
 8003ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8003b10 <global_stdio_init.part.0+0x34>)
 8003ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b14 <global_stdio_init.part.0+0x38>)
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2104      	movs	r1, #4
 8003aec:	f7ff ff94 	bl	8003a18 <std>
 8003af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003af4:	2201      	movs	r2, #1
 8003af6:	2109      	movs	r1, #9
 8003af8:	f7ff ff8e 	bl	8003a18 <std>
 8003afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b00:	2202      	movs	r2, #2
 8003b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b06:	2112      	movs	r1, #18
 8003b08:	f7ff bf86 	b.w	8003a18 <std>
 8003b0c:	2000031c 	.word	0x2000031c
 8003b10:	200001e4 	.word	0x200001e4
 8003b14:	08003a85 	.word	0x08003a85

08003b18 <__sfp_lock_acquire>:
 8003b18:	4801      	ldr	r0, [pc, #4]	@ (8003b20 <__sfp_lock_acquire+0x8>)
 8003b1a:	f000 ba2e 	b.w	8003f7a <__retarget_lock_acquire_recursive>
 8003b1e:	bf00      	nop
 8003b20:	20000325 	.word	0x20000325

08003b24 <__sfp_lock_release>:
 8003b24:	4801      	ldr	r0, [pc, #4]	@ (8003b2c <__sfp_lock_release+0x8>)
 8003b26:	f000 ba29 	b.w	8003f7c <__retarget_lock_release_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000325 	.word	0x20000325

08003b30 <__sinit>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	4604      	mov	r4, r0
 8003b34:	f7ff fff0 	bl	8003b18 <__sfp_lock_acquire>
 8003b38:	6a23      	ldr	r3, [r4, #32]
 8003b3a:	b11b      	cbz	r3, 8003b44 <__sinit+0x14>
 8003b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b40:	f7ff bff0 	b.w	8003b24 <__sfp_lock_release>
 8003b44:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <__sinit+0x28>)
 8003b46:	6223      	str	r3, [r4, #32]
 8003b48:	4b04      	ldr	r3, [pc, #16]	@ (8003b5c <__sinit+0x2c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f5      	bne.n	8003b3c <__sinit+0xc>
 8003b50:	f7ff ffc4 	bl	8003adc <global_stdio_init.part.0>
 8003b54:	e7f2      	b.n	8003b3c <__sinit+0xc>
 8003b56:	bf00      	nop
 8003b58:	08003a9d 	.word	0x08003a9d
 8003b5c:	2000031c 	.word	0x2000031c

08003b60 <_fwalk_sglue>:
 8003b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b64:	4607      	mov	r7, r0
 8003b66:	4688      	mov	r8, r1
 8003b68:	4614      	mov	r4, r2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b70:	f1b9 0901 	subs.w	r9, r9, #1
 8003b74:	d505      	bpl.n	8003b82 <_fwalk_sglue+0x22>
 8003b76:	6824      	ldr	r4, [r4, #0]
 8003b78:	2c00      	cmp	r4, #0
 8003b7a:	d1f7      	bne.n	8003b6c <_fwalk_sglue+0xc>
 8003b7c:	4630      	mov	r0, r6
 8003b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b82:	89ab      	ldrh	r3, [r5, #12]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d907      	bls.n	8003b98 <_fwalk_sglue+0x38>
 8003b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	d003      	beq.n	8003b98 <_fwalk_sglue+0x38>
 8003b90:	4629      	mov	r1, r5
 8003b92:	4638      	mov	r0, r7
 8003b94:	47c0      	blx	r8
 8003b96:	4306      	orrs	r6, r0
 8003b98:	3568      	adds	r5, #104	@ 0x68
 8003b9a:	e7e9      	b.n	8003b70 <_fwalk_sglue+0x10>

08003b9c <iprintf>:
 8003b9c:	b40f      	push	{r0, r1, r2, r3}
 8003b9e:	b507      	push	{r0, r1, r2, lr}
 8003ba0:	4906      	ldr	r1, [pc, #24]	@ (8003bbc <iprintf+0x20>)
 8003ba2:	ab04      	add	r3, sp, #16
 8003ba4:	6808      	ldr	r0, [r1, #0]
 8003ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003baa:	6881      	ldr	r1, [r0, #8]
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	f000 fb2f 	bl	8004210 <_vfiprintf_r>
 8003bb2:	b003      	add	sp, #12
 8003bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bb8:	b004      	add	sp, #16
 8003bba:	4770      	bx	lr
 8003bbc:	20000020 	.word	0x20000020

08003bc0 <_puts_r>:
 8003bc0:	6a03      	ldr	r3, [r0, #32]
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	6884      	ldr	r4, [r0, #8]
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	460e      	mov	r6, r1
 8003bca:	b90b      	cbnz	r3, 8003bd0 <_puts_r+0x10>
 8003bcc:	f7ff ffb0 	bl	8003b30 <__sinit>
 8003bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bd2:	07db      	lsls	r3, r3, #31
 8003bd4:	d405      	bmi.n	8003be2 <_puts_r+0x22>
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	0598      	lsls	r0, r3, #22
 8003bda:	d402      	bmi.n	8003be2 <_puts_r+0x22>
 8003bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bde:	f000 f9cc 	bl	8003f7a <__retarget_lock_acquire_recursive>
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	0719      	lsls	r1, r3, #28
 8003be6:	d502      	bpl.n	8003bee <_puts_r+0x2e>
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d135      	bne.n	8003c5a <_puts_r+0x9a>
 8003bee:	4621      	mov	r1, r4
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	f000 f8c5 	bl	8003d80 <__swsetup_r>
 8003bf6:	b380      	cbz	r0, 8003c5a <_puts_r+0x9a>
 8003bf8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003bfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bfe:	07da      	lsls	r2, r3, #31
 8003c00:	d405      	bmi.n	8003c0e <_puts_r+0x4e>
 8003c02:	89a3      	ldrh	r3, [r4, #12]
 8003c04:	059b      	lsls	r3, r3, #22
 8003c06:	d402      	bmi.n	8003c0e <_puts_r+0x4e>
 8003c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c0a:	f000 f9b7 	bl	8003f7c <__retarget_lock_release_recursive>
 8003c0e:	4628      	mov	r0, r5
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da04      	bge.n	8003c20 <_puts_r+0x60>
 8003c16:	69a2      	ldr	r2, [r4, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	dc17      	bgt.n	8003c4c <_puts_r+0x8c>
 8003c1c:	290a      	cmp	r1, #10
 8003c1e:	d015      	beq.n	8003c4c <_puts_r+0x8c>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	6022      	str	r2, [r4, #0]
 8003c26:	7019      	strb	r1, [r3, #0]
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	2900      	cmp	r1, #0
 8003c34:	d1ed      	bne.n	8003c12 <_puts_r+0x52>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da11      	bge.n	8003c5e <_puts_r+0x9e>
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	210a      	movs	r1, #10
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f85f 	bl	8003d02 <__swbuf_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d0d7      	beq.n	8003bf8 <_puts_r+0x38>
 8003c48:	250a      	movs	r5, #10
 8003c4a:	e7d7      	b.n	8003bfc <_puts_r+0x3c>
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 f857 	bl	8003d02 <__swbuf_r>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d1e7      	bne.n	8003c28 <_puts_r+0x68>
 8003c58:	e7ce      	b.n	8003bf8 <_puts_r+0x38>
 8003c5a:	3e01      	subs	r6, #1
 8003c5c:	e7e4      	b.n	8003c28 <_puts_r+0x68>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	6022      	str	r2, [r4, #0]
 8003c64:	220a      	movs	r2, #10
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e7ee      	b.n	8003c48 <_puts_r+0x88>
	...

08003c6c <puts>:
 8003c6c:	4b02      	ldr	r3, [pc, #8]	@ (8003c78 <puts+0xc>)
 8003c6e:	4601      	mov	r1, r0
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f7ff bfa5 	b.w	8003bc0 <_puts_r>
 8003c76:	bf00      	nop
 8003c78:	20000020 	.word	0x20000020

08003c7c <__sread>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	460c      	mov	r4, r1
 8003c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c84:	f000 f92a 	bl	8003edc <_read_r>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	bfab      	itete	ge
 8003c8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c90:	181b      	addge	r3, r3, r0
 8003c92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c96:	bfac      	ite	ge
 8003c98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c9a:	81a3      	strhlt	r3, [r4, #12]
 8003c9c:	bd10      	pop	{r4, pc}

08003c9e <__swrite>:
 8003c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	898b      	ldrh	r3, [r1, #12]
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	4605      	mov	r5, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	4616      	mov	r6, r2
 8003cae:	d505      	bpl.n	8003cbc <__swrite+0x1e>
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f000 f8fe 	bl	8003eb8 <_lseek_r>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	4632      	mov	r2, r6
 8003cca:	463b      	mov	r3, r7
 8003ccc:	4628      	mov	r0, r5
 8003cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	f000 b915 	b.w	8003f00 <_write_r>

08003cd6 <__sseek>:
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	460c      	mov	r4, r1
 8003cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cde:	f000 f8eb 	bl	8003eb8 <_lseek_r>
 8003ce2:	1c43      	adds	r3, r0, #1
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	bf15      	itete	ne
 8003ce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003cee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cf2:	81a3      	strheq	r3, [r4, #12]
 8003cf4:	bf18      	it	ne
 8003cf6:	81a3      	strhne	r3, [r4, #12]
 8003cf8:	bd10      	pop	{r4, pc}

08003cfa <__sclose>:
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 b8b9 	b.w	8003e74 <_close_r>

08003d02 <__swbuf_r>:
 8003d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d04:	460e      	mov	r6, r1
 8003d06:	4614      	mov	r4, r2
 8003d08:	4605      	mov	r5, r0
 8003d0a:	b118      	cbz	r0, 8003d14 <__swbuf_r+0x12>
 8003d0c:	6a03      	ldr	r3, [r0, #32]
 8003d0e:	b90b      	cbnz	r3, 8003d14 <__swbuf_r+0x12>
 8003d10:	f7ff ff0e 	bl	8003b30 <__sinit>
 8003d14:	69a3      	ldr	r3, [r4, #24]
 8003d16:	60a3      	str	r3, [r4, #8]
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	071a      	lsls	r2, r3, #28
 8003d1c:	d501      	bpl.n	8003d22 <__swbuf_r+0x20>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	b943      	cbnz	r3, 8003d34 <__swbuf_r+0x32>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f82b 	bl	8003d80 <__swsetup_r>
 8003d2a:	b118      	cbz	r0, 8003d34 <__swbuf_r+0x32>
 8003d2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003d30:	4638      	mov	r0, r7
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	6922      	ldr	r2, [r4, #16]
 8003d38:	1a98      	subs	r0, r3, r2
 8003d3a:	6963      	ldr	r3, [r4, #20]
 8003d3c:	b2f6      	uxtb	r6, r6
 8003d3e:	4283      	cmp	r3, r0
 8003d40:	4637      	mov	r7, r6
 8003d42:	dc05      	bgt.n	8003d50 <__swbuf_r+0x4e>
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 fd8c 	bl	8004864 <_fflush_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d1ed      	bne.n	8003d2c <__swbuf_r+0x2a>
 8003d50:	68a3      	ldr	r3, [r4, #8]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	60a3      	str	r3, [r4, #8]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	6022      	str	r2, [r4, #0]
 8003d5c:	701e      	strb	r6, [r3, #0]
 8003d5e:	6962      	ldr	r2, [r4, #20]
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d004      	beq.n	8003d70 <__swbuf_r+0x6e>
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	07db      	lsls	r3, r3, #31
 8003d6a:	d5e1      	bpl.n	8003d30 <__swbuf_r+0x2e>
 8003d6c:	2e0a      	cmp	r6, #10
 8003d6e:	d1df      	bne.n	8003d30 <__swbuf_r+0x2e>
 8003d70:	4621      	mov	r1, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 fd76 	bl	8004864 <_fflush_r>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d0d9      	beq.n	8003d30 <__swbuf_r+0x2e>
 8003d7c:	e7d6      	b.n	8003d2c <__swbuf_r+0x2a>
	...

08003d80 <__swsetup_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4b29      	ldr	r3, [pc, #164]	@ (8003e28 <__swsetup_r+0xa8>)
 8003d84:	4605      	mov	r5, r0
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	460c      	mov	r4, r1
 8003d8a:	b118      	cbz	r0, 8003d94 <__swsetup_r+0x14>
 8003d8c:	6a03      	ldr	r3, [r0, #32]
 8003d8e:	b90b      	cbnz	r3, 8003d94 <__swsetup_r+0x14>
 8003d90:	f7ff fece 	bl	8003b30 <__sinit>
 8003d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d98:	0719      	lsls	r1, r3, #28
 8003d9a:	d422      	bmi.n	8003de2 <__swsetup_r+0x62>
 8003d9c:	06da      	lsls	r2, r3, #27
 8003d9e:	d407      	bmi.n	8003db0 <__swsetup_r+0x30>
 8003da0:	2209      	movs	r2, #9
 8003da2:	602a      	str	r2, [r5, #0]
 8003da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dae:	e033      	b.n	8003e18 <__swsetup_r+0x98>
 8003db0:	0758      	lsls	r0, r3, #29
 8003db2:	d512      	bpl.n	8003dda <__swsetup_r+0x5a>
 8003db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003db6:	b141      	cbz	r1, 8003dca <__swsetup_r+0x4a>
 8003db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003dbc:	4299      	cmp	r1, r3
 8003dbe:	d002      	beq.n	8003dc6 <__swsetup_r+0x46>
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f8fb 	bl	8003fbc <_free_r>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003dd0:	81a3      	strh	r3, [r4, #12]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	b94b      	cbnz	r3, 8003dfa <__swsetup_r+0x7a>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df0:	d003      	beq.n	8003dfa <__swsetup_r+0x7a>
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fd95 	bl	8004924 <__smakebuf_r>
 8003dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfe:	f013 0201 	ands.w	r2, r3, #1
 8003e02:	d00a      	beq.n	8003e1a <__swsetup_r+0x9a>
 8003e04:	2200      	movs	r2, #0
 8003e06:	60a2      	str	r2, [r4, #8]
 8003e08:	6962      	ldr	r2, [r4, #20]
 8003e0a:	4252      	negs	r2, r2
 8003e0c:	61a2      	str	r2, [r4, #24]
 8003e0e:	6922      	ldr	r2, [r4, #16]
 8003e10:	b942      	cbnz	r2, 8003e24 <__swsetup_r+0xa4>
 8003e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e16:	d1c5      	bne.n	8003da4 <__swsetup_r+0x24>
 8003e18:	bd38      	pop	{r3, r4, r5, pc}
 8003e1a:	0799      	lsls	r1, r3, #30
 8003e1c:	bf58      	it	pl
 8003e1e:	6962      	ldrpl	r2, [r4, #20]
 8003e20:	60a2      	str	r2, [r4, #8]
 8003e22:	e7f4      	b.n	8003e0e <__swsetup_r+0x8e>
 8003e24:	2000      	movs	r0, #0
 8003e26:	e7f7      	b.n	8003e18 <__swsetup_r+0x98>
 8003e28:	20000020 	.word	0x20000020

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <time>:
 8003e3c:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <time+0x34>)
 8003e40:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8003e44:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003e48:	4669      	mov	r1, sp
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	e9cd 6700 	strd	r6, r7, [sp]
 8003e54:	f000 f81e 	bl	8003e94 <_gettimeofday_r>
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	bfb8      	it	lt
 8003e5c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8003e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e64:	b10c      	cbz	r4, 8003e6a <time+0x2e>
 8003e66:	e9c4 0100 	strd	r0, r1, [r4]
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bdd0      	pop	{r4, r6, r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000020 	.word	0x20000020

08003e74 <_close_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d06      	ldr	r5, [pc, #24]	@ (8003e90 <_close_r+0x1c>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7ff fb84 	bl	800358c <_close>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_close_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_close_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	20000320 	.word	0x20000320

08003e94 <_gettimeofday_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d07      	ldr	r5, [pc, #28]	@ (8003eb4 <_gettimeofday_r+0x20>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	f7ff fd1b 	bl	80038dc <_gettimeofday>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	d102      	bne.n	8003eb0 <_gettimeofday_r+0x1c>
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	b103      	cbz	r3, 8003eb0 <_gettimeofday_r+0x1c>
 8003eae:	6023      	str	r3, [r4, #0]
 8003eb0:	bd38      	pop	{r3, r4, r5, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000320 	.word	0x20000320

08003eb8 <_lseek_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d07      	ldr	r5, [pc, #28]	@ (8003ed8 <_lseek_r+0x20>)
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	4608      	mov	r0, r1
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	602a      	str	r2, [r5, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7ff fb21 	bl	800350e <_lseek>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_lseek_r+0x1e>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_lseek_r+0x1e>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	20000320 	.word	0x20000320

08003edc <_read_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4d07      	ldr	r5, [pc, #28]	@ (8003efc <_read_r+0x20>)
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4608      	mov	r0, r1
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	602a      	str	r2, [r5, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f7ff fab9 	bl	8003462 <_read>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_read_r+0x1e>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_read_r+0x1e>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	20000320 	.word	0x20000320

08003f00 <_write_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4d07      	ldr	r5, [pc, #28]	@ (8003f20 <_write_r+0x20>)
 8003f04:	4604      	mov	r4, r0
 8003f06:	4608      	mov	r0, r1
 8003f08:	4611      	mov	r1, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	602a      	str	r2, [r5, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7ff fb0f 	bl	8003532 <_write>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_write_r+0x1e>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_write_r+0x1e>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000320 	.word	0x20000320

08003f24 <__errno>:
 8003f24:	4b01      	ldr	r3, [pc, #4]	@ (8003f2c <__errno+0x8>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000020 	.word	0x20000020

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4d0d      	ldr	r5, [pc, #52]	@ (8003f68 <__libc_init_array+0x38>)
 8003f34:	4c0d      	ldr	r4, [pc, #52]	@ (8003f6c <__libc_init_array+0x3c>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	4d0b      	ldr	r5, [pc, #44]	@ (8003f70 <__libc_init_array+0x40>)
 8003f42:	4c0c      	ldr	r4, [pc, #48]	@ (8003f74 <__libc_init_array+0x44>)
 8003f44:	f000 fdb2 	bl	8004aac <_init>
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	08004c68 	.word	0x08004c68
 8003f6c:	08004c68 	.word	0x08004c68
 8003f70:	08004c68 	.word	0x08004c68
 8003f74:	08004c6c 	.word	0x08004c6c

08003f78 <__retarget_lock_init_recursive>:
 8003f78:	4770      	bx	lr

08003f7a <__retarget_lock_acquire_recursive>:
 8003f7a:	4770      	bx	lr

08003f7c <__retarget_lock_release_recursive>:
 8003f7c:	4770      	bx	lr
	...

08003f80 <__assert_func>:
 8003f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f82:	4614      	mov	r4, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <__assert_func+0x2c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	68d8      	ldr	r0, [r3, #12]
 8003f8e:	b954      	cbnz	r4, 8003fa6 <__assert_func+0x26>
 8003f90:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <__assert_func+0x30>)
 8003f92:	461c      	mov	r4, r3
 8003f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f98:	9100      	str	r1, [sp, #0]
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	4905      	ldr	r1, [pc, #20]	@ (8003fb4 <__assert_func+0x34>)
 8003f9e:	f000 fc89 	bl	80048b4 <fiprintf>
 8003fa2:	f000 fd2d 	bl	8004a00 <abort>
 8003fa6:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <__assert_func+0x38>)
 8003fa8:	e7f4      	b.n	8003f94 <__assert_func+0x14>
 8003faa:	bf00      	nop
 8003fac:	20000020 	.word	0x20000020
 8003fb0:	08004c2c 	.word	0x08004c2c
 8003fb4:	08004bfe 	.word	0x08004bfe
 8003fb8:	08004bf1 	.word	0x08004bf1

08003fbc <_free_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	d041      	beq.n	8004048 <_free_r+0x8c>
 8003fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc8:	1f0c      	subs	r4, r1, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bfb8      	it	lt
 8003fce:	18e4      	addlt	r4, r4, r3
 8003fd0:	f000 f8e8 	bl	80041a4 <__malloc_lock>
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800404c <_free_r+0x90>)
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	b933      	cbnz	r3, 8003fe8 <_free_r+0x2c>
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	6014      	str	r4, [r2, #0]
 8003fde:	4628      	mov	r0, r5
 8003fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fe4:	f000 b8e4 	b.w	80041b0 <__malloc_unlock>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d908      	bls.n	8003ffe <_free_r+0x42>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	1821      	adds	r1, r4, r0
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	bf01      	itttt	eq
 8003ff4:	6819      	ldreq	r1, [r3, #0]
 8003ff6:	685b      	ldreq	r3, [r3, #4]
 8003ff8:	1809      	addeq	r1, r1, r0
 8003ffa:	6021      	streq	r1, [r4, #0]
 8003ffc:	e7ed      	b.n	8003fda <_free_r+0x1e>
 8003ffe:	461a      	mov	r2, r3
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b10b      	cbz	r3, 8004008 <_free_r+0x4c>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d9fa      	bls.n	8003ffe <_free_r+0x42>
 8004008:	6811      	ldr	r1, [r2, #0]
 800400a:	1850      	adds	r0, r2, r1
 800400c:	42a0      	cmp	r0, r4
 800400e:	d10b      	bne.n	8004028 <_free_r+0x6c>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	4401      	add	r1, r0
 8004014:	1850      	adds	r0, r2, r1
 8004016:	4283      	cmp	r3, r0
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	d1e0      	bne.n	8003fde <_free_r+0x22>
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	4408      	add	r0, r1
 8004024:	6010      	str	r0, [r2, #0]
 8004026:	e7da      	b.n	8003fde <_free_r+0x22>
 8004028:	d902      	bls.n	8004030 <_free_r+0x74>
 800402a:	230c      	movs	r3, #12
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	e7d6      	b.n	8003fde <_free_r+0x22>
 8004030:	6820      	ldr	r0, [r4, #0]
 8004032:	1821      	adds	r1, r4, r0
 8004034:	428b      	cmp	r3, r1
 8004036:	bf04      	itt	eq
 8004038:	6819      	ldreq	r1, [r3, #0]
 800403a:	685b      	ldreq	r3, [r3, #4]
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	bf04      	itt	eq
 8004040:	1809      	addeq	r1, r1, r0
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	6054      	str	r4, [r2, #4]
 8004046:	e7ca      	b.n	8003fde <_free_r+0x22>
 8004048:	bd38      	pop	{r3, r4, r5, pc}
 800404a:	bf00      	nop
 800404c:	2000032c 	.word	0x2000032c

08004050 <malloc>:
 8004050:	4b02      	ldr	r3, [pc, #8]	@ (800405c <malloc+0xc>)
 8004052:	4601      	mov	r1, r0
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	f000 b825 	b.w	80040a4 <_malloc_r>
 800405a:	bf00      	nop
 800405c:	20000020 	.word	0x20000020

08004060 <sbrk_aligned>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4e0f      	ldr	r6, [pc, #60]	@ (80040a0 <sbrk_aligned+0x40>)
 8004064:	460c      	mov	r4, r1
 8004066:	6831      	ldr	r1, [r6, #0]
 8004068:	4605      	mov	r5, r0
 800406a:	b911      	cbnz	r1, 8004072 <sbrk_aligned+0x12>
 800406c:	f000 fcb8 	bl	80049e0 <_sbrk_r>
 8004070:	6030      	str	r0, [r6, #0]
 8004072:	4621      	mov	r1, r4
 8004074:	4628      	mov	r0, r5
 8004076:	f000 fcb3 	bl	80049e0 <_sbrk_r>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d103      	bne.n	8004086 <sbrk_aligned+0x26>
 800407e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004082:	4620      	mov	r0, r4
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	1cc4      	adds	r4, r0, #3
 8004088:	f024 0403 	bic.w	r4, r4, #3
 800408c:	42a0      	cmp	r0, r4
 800408e:	d0f8      	beq.n	8004082 <sbrk_aligned+0x22>
 8004090:	1a21      	subs	r1, r4, r0
 8004092:	4628      	mov	r0, r5
 8004094:	f000 fca4 	bl	80049e0 <_sbrk_r>
 8004098:	3001      	adds	r0, #1
 800409a:	d1f2      	bne.n	8004082 <sbrk_aligned+0x22>
 800409c:	e7ef      	b.n	800407e <sbrk_aligned+0x1e>
 800409e:	bf00      	nop
 80040a0:	20000328 	.word	0x20000328

080040a4 <_malloc_r>:
 80040a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a8:	1ccd      	adds	r5, r1, #3
 80040aa:	f025 0503 	bic.w	r5, r5, #3
 80040ae:	3508      	adds	r5, #8
 80040b0:	2d0c      	cmp	r5, #12
 80040b2:	bf38      	it	cc
 80040b4:	250c      	movcc	r5, #12
 80040b6:	2d00      	cmp	r5, #0
 80040b8:	4606      	mov	r6, r0
 80040ba:	db01      	blt.n	80040c0 <_malloc_r+0x1c>
 80040bc:	42a9      	cmp	r1, r5
 80040be:	d904      	bls.n	80040ca <_malloc_r+0x26>
 80040c0:	230c      	movs	r3, #12
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	2000      	movs	r0, #0
 80040c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80041a0 <_malloc_r+0xfc>
 80040ce:	f000 f869 	bl	80041a4 <__malloc_lock>
 80040d2:	f8d8 3000 	ldr.w	r3, [r8]
 80040d6:	461c      	mov	r4, r3
 80040d8:	bb44      	cbnz	r4, 800412c <_malloc_r+0x88>
 80040da:	4629      	mov	r1, r5
 80040dc:	4630      	mov	r0, r6
 80040de:	f7ff ffbf 	bl	8004060 <sbrk_aligned>
 80040e2:	1c43      	adds	r3, r0, #1
 80040e4:	4604      	mov	r4, r0
 80040e6:	d158      	bne.n	800419a <_malloc_r+0xf6>
 80040e8:	f8d8 4000 	ldr.w	r4, [r8]
 80040ec:	4627      	mov	r7, r4
 80040ee:	2f00      	cmp	r7, #0
 80040f0:	d143      	bne.n	800417a <_malloc_r+0xd6>
 80040f2:	2c00      	cmp	r4, #0
 80040f4:	d04b      	beq.n	800418e <_malloc_r+0xea>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	4639      	mov	r1, r7
 80040fa:	4630      	mov	r0, r6
 80040fc:	eb04 0903 	add.w	r9, r4, r3
 8004100:	f000 fc6e 	bl	80049e0 <_sbrk_r>
 8004104:	4581      	cmp	r9, r0
 8004106:	d142      	bne.n	800418e <_malloc_r+0xea>
 8004108:	6821      	ldr	r1, [r4, #0]
 800410a:	1a6d      	subs	r5, r5, r1
 800410c:	4629      	mov	r1, r5
 800410e:	4630      	mov	r0, r6
 8004110:	f7ff ffa6 	bl	8004060 <sbrk_aligned>
 8004114:	3001      	adds	r0, #1
 8004116:	d03a      	beq.n	800418e <_malloc_r+0xea>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	442b      	add	r3, r5
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	f8d8 3000 	ldr.w	r3, [r8]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	bb62      	cbnz	r2, 8004180 <_malloc_r+0xdc>
 8004126:	f8c8 7000 	str.w	r7, [r8]
 800412a:	e00f      	b.n	800414c <_malloc_r+0xa8>
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	1b52      	subs	r2, r2, r5
 8004130:	d420      	bmi.n	8004174 <_malloc_r+0xd0>
 8004132:	2a0b      	cmp	r2, #11
 8004134:	d917      	bls.n	8004166 <_malloc_r+0xc2>
 8004136:	1961      	adds	r1, r4, r5
 8004138:	42a3      	cmp	r3, r4
 800413a:	6025      	str	r5, [r4, #0]
 800413c:	bf18      	it	ne
 800413e:	6059      	strne	r1, [r3, #4]
 8004140:	6863      	ldr	r3, [r4, #4]
 8004142:	bf08      	it	eq
 8004144:	f8c8 1000 	streq.w	r1, [r8]
 8004148:	5162      	str	r2, [r4, r5]
 800414a:	604b      	str	r3, [r1, #4]
 800414c:	4630      	mov	r0, r6
 800414e:	f000 f82f 	bl	80041b0 <__malloc_unlock>
 8004152:	f104 000b 	add.w	r0, r4, #11
 8004156:	1d23      	adds	r3, r4, #4
 8004158:	f020 0007 	bic.w	r0, r0, #7
 800415c:	1ac2      	subs	r2, r0, r3
 800415e:	bf1c      	itt	ne
 8004160:	1a1b      	subne	r3, r3, r0
 8004162:	50a3      	strne	r3, [r4, r2]
 8004164:	e7af      	b.n	80040c6 <_malloc_r+0x22>
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	42a3      	cmp	r3, r4
 800416a:	bf0c      	ite	eq
 800416c:	f8c8 2000 	streq.w	r2, [r8]
 8004170:	605a      	strne	r2, [r3, #4]
 8004172:	e7eb      	b.n	800414c <_malloc_r+0xa8>
 8004174:	4623      	mov	r3, r4
 8004176:	6864      	ldr	r4, [r4, #4]
 8004178:	e7ae      	b.n	80040d8 <_malloc_r+0x34>
 800417a:	463c      	mov	r4, r7
 800417c:	687f      	ldr	r7, [r7, #4]
 800417e:	e7b6      	b.n	80040ee <_malloc_r+0x4a>
 8004180:	461a      	mov	r2, r3
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	42a3      	cmp	r3, r4
 8004186:	d1fb      	bne.n	8004180 <_malloc_r+0xdc>
 8004188:	2300      	movs	r3, #0
 800418a:	6053      	str	r3, [r2, #4]
 800418c:	e7de      	b.n	800414c <_malloc_r+0xa8>
 800418e:	230c      	movs	r3, #12
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	4630      	mov	r0, r6
 8004194:	f000 f80c 	bl	80041b0 <__malloc_unlock>
 8004198:	e794      	b.n	80040c4 <_malloc_r+0x20>
 800419a:	6005      	str	r5, [r0, #0]
 800419c:	e7d6      	b.n	800414c <_malloc_r+0xa8>
 800419e:	bf00      	nop
 80041a0:	2000032c 	.word	0x2000032c

080041a4 <__malloc_lock>:
 80041a4:	4801      	ldr	r0, [pc, #4]	@ (80041ac <__malloc_lock+0x8>)
 80041a6:	f7ff bee8 	b.w	8003f7a <__retarget_lock_acquire_recursive>
 80041aa:	bf00      	nop
 80041ac:	20000324 	.word	0x20000324

080041b0 <__malloc_unlock>:
 80041b0:	4801      	ldr	r0, [pc, #4]	@ (80041b8 <__malloc_unlock+0x8>)
 80041b2:	f7ff bee3 	b.w	8003f7c <__retarget_lock_release_recursive>
 80041b6:	bf00      	nop
 80041b8:	20000324 	.word	0x20000324

080041bc <__sfputc_r>:
 80041bc:	6893      	ldr	r3, [r2, #8]
 80041be:	3b01      	subs	r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	b410      	push	{r4}
 80041c4:	6093      	str	r3, [r2, #8]
 80041c6:	da08      	bge.n	80041da <__sfputc_r+0x1e>
 80041c8:	6994      	ldr	r4, [r2, #24]
 80041ca:	42a3      	cmp	r3, r4
 80041cc:	db01      	blt.n	80041d2 <__sfputc_r+0x16>
 80041ce:	290a      	cmp	r1, #10
 80041d0:	d103      	bne.n	80041da <__sfputc_r+0x1e>
 80041d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d6:	f7ff bd94 	b.w	8003d02 <__swbuf_r>
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	1c58      	adds	r0, r3, #1
 80041de:	6010      	str	r0, [r2, #0]
 80041e0:	7019      	strb	r1, [r3, #0]
 80041e2:	4608      	mov	r0, r1
 80041e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <__sfputs_r>:
 80041ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ec:	4606      	mov	r6, r0
 80041ee:	460f      	mov	r7, r1
 80041f0:	4614      	mov	r4, r2
 80041f2:	18d5      	adds	r5, r2, r3
 80041f4:	42ac      	cmp	r4, r5
 80041f6:	d101      	bne.n	80041fc <__sfputs_r+0x12>
 80041f8:	2000      	movs	r0, #0
 80041fa:	e007      	b.n	800420c <__sfputs_r+0x22>
 80041fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004200:	463a      	mov	r2, r7
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff ffda 	bl	80041bc <__sfputc_r>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d1f3      	bne.n	80041f4 <__sfputs_r+0xa>
 800420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004210 <_vfiprintf_r>:
 8004210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004214:	460d      	mov	r5, r1
 8004216:	b09d      	sub	sp, #116	@ 0x74
 8004218:	4614      	mov	r4, r2
 800421a:	4698      	mov	r8, r3
 800421c:	4606      	mov	r6, r0
 800421e:	b118      	cbz	r0, 8004228 <_vfiprintf_r+0x18>
 8004220:	6a03      	ldr	r3, [r0, #32]
 8004222:	b90b      	cbnz	r3, 8004228 <_vfiprintf_r+0x18>
 8004224:	f7ff fc84 	bl	8003b30 <__sinit>
 8004228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800422a:	07d9      	lsls	r1, r3, #31
 800422c:	d405      	bmi.n	800423a <_vfiprintf_r+0x2a>
 800422e:	89ab      	ldrh	r3, [r5, #12]
 8004230:	059a      	lsls	r2, r3, #22
 8004232:	d402      	bmi.n	800423a <_vfiprintf_r+0x2a>
 8004234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004236:	f7ff fea0 	bl	8003f7a <__retarget_lock_acquire_recursive>
 800423a:	89ab      	ldrh	r3, [r5, #12]
 800423c:	071b      	lsls	r3, r3, #28
 800423e:	d501      	bpl.n	8004244 <_vfiprintf_r+0x34>
 8004240:	692b      	ldr	r3, [r5, #16]
 8004242:	b99b      	cbnz	r3, 800426c <_vfiprintf_r+0x5c>
 8004244:	4629      	mov	r1, r5
 8004246:	4630      	mov	r0, r6
 8004248:	f7ff fd9a 	bl	8003d80 <__swsetup_r>
 800424c:	b170      	cbz	r0, 800426c <_vfiprintf_r+0x5c>
 800424e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004250:	07dc      	lsls	r4, r3, #31
 8004252:	d504      	bpl.n	800425e <_vfiprintf_r+0x4e>
 8004254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004258:	b01d      	add	sp, #116	@ 0x74
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	89ab      	ldrh	r3, [r5, #12]
 8004260:	0598      	lsls	r0, r3, #22
 8004262:	d4f7      	bmi.n	8004254 <_vfiprintf_r+0x44>
 8004264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004266:	f7ff fe89 	bl	8003f7c <__retarget_lock_release_recursive>
 800426a:	e7f3      	b.n	8004254 <_vfiprintf_r+0x44>
 800426c:	2300      	movs	r3, #0
 800426e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004270:	2320      	movs	r3, #32
 8004272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004276:	f8cd 800c 	str.w	r8, [sp, #12]
 800427a:	2330      	movs	r3, #48	@ 0x30
 800427c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800442c <_vfiprintf_r+0x21c>
 8004280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004284:	f04f 0901 	mov.w	r9, #1
 8004288:	4623      	mov	r3, r4
 800428a:	469a      	mov	sl, r3
 800428c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004290:	b10a      	cbz	r2, 8004296 <_vfiprintf_r+0x86>
 8004292:	2a25      	cmp	r2, #37	@ 0x25
 8004294:	d1f9      	bne.n	800428a <_vfiprintf_r+0x7a>
 8004296:	ebba 0b04 	subs.w	fp, sl, r4
 800429a:	d00b      	beq.n	80042b4 <_vfiprintf_r+0xa4>
 800429c:	465b      	mov	r3, fp
 800429e:	4622      	mov	r2, r4
 80042a0:	4629      	mov	r1, r5
 80042a2:	4630      	mov	r0, r6
 80042a4:	f7ff ffa1 	bl	80041ea <__sfputs_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	f000 80a7 	beq.w	80043fc <_vfiprintf_r+0x1ec>
 80042ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042b0:	445a      	add	r2, fp
 80042b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80042b4:	f89a 3000 	ldrb.w	r3, [sl]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 809f 	beq.w	80043fc <_vfiprintf_r+0x1ec>
 80042be:	2300      	movs	r3, #0
 80042c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c8:	f10a 0a01 	add.w	sl, sl, #1
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	9307      	str	r3, [sp, #28]
 80042d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80042d6:	4654      	mov	r4, sl
 80042d8:	2205      	movs	r2, #5
 80042da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042de:	4853      	ldr	r0, [pc, #332]	@ (800442c <_vfiprintf_r+0x21c>)
 80042e0:	f7fb ff86 	bl	80001f0 <memchr>
 80042e4:	9a04      	ldr	r2, [sp, #16]
 80042e6:	b9d8      	cbnz	r0, 8004320 <_vfiprintf_r+0x110>
 80042e8:	06d1      	lsls	r1, r2, #27
 80042ea:	bf44      	itt	mi
 80042ec:	2320      	movmi	r3, #32
 80042ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042f2:	0713      	lsls	r3, r2, #28
 80042f4:	bf44      	itt	mi
 80042f6:	232b      	movmi	r3, #43	@ 0x2b
 80042f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004300:	2b2a      	cmp	r3, #42	@ 0x2a
 8004302:	d015      	beq.n	8004330 <_vfiprintf_r+0x120>
 8004304:	9a07      	ldr	r2, [sp, #28]
 8004306:	4654      	mov	r4, sl
 8004308:	2000      	movs	r0, #0
 800430a:	f04f 0c0a 	mov.w	ip, #10
 800430e:	4621      	mov	r1, r4
 8004310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004314:	3b30      	subs	r3, #48	@ 0x30
 8004316:	2b09      	cmp	r3, #9
 8004318:	d94b      	bls.n	80043b2 <_vfiprintf_r+0x1a2>
 800431a:	b1b0      	cbz	r0, 800434a <_vfiprintf_r+0x13a>
 800431c:	9207      	str	r2, [sp, #28]
 800431e:	e014      	b.n	800434a <_vfiprintf_r+0x13a>
 8004320:	eba0 0308 	sub.w	r3, r0, r8
 8004324:	fa09 f303 	lsl.w	r3, r9, r3
 8004328:	4313      	orrs	r3, r2
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	46a2      	mov	sl, r4
 800432e:	e7d2      	b.n	80042d6 <_vfiprintf_r+0xc6>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	1d19      	adds	r1, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	9103      	str	r1, [sp, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	bfbb      	ittet	lt
 800433c:	425b      	neglt	r3, r3
 800433e:	f042 0202 	orrlt.w	r2, r2, #2
 8004342:	9307      	strge	r3, [sp, #28]
 8004344:	9307      	strlt	r3, [sp, #28]
 8004346:	bfb8      	it	lt
 8004348:	9204      	strlt	r2, [sp, #16]
 800434a:	7823      	ldrb	r3, [r4, #0]
 800434c:	2b2e      	cmp	r3, #46	@ 0x2e
 800434e:	d10a      	bne.n	8004366 <_vfiprintf_r+0x156>
 8004350:	7863      	ldrb	r3, [r4, #1]
 8004352:	2b2a      	cmp	r3, #42	@ 0x2a
 8004354:	d132      	bne.n	80043bc <_vfiprintf_r+0x1ac>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	1d1a      	adds	r2, r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	9203      	str	r2, [sp, #12]
 800435e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004362:	3402      	adds	r4, #2
 8004364:	9305      	str	r3, [sp, #20]
 8004366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800443c <_vfiprintf_r+0x22c>
 800436a:	7821      	ldrb	r1, [r4, #0]
 800436c:	2203      	movs	r2, #3
 800436e:	4650      	mov	r0, sl
 8004370:	f7fb ff3e 	bl	80001f0 <memchr>
 8004374:	b138      	cbz	r0, 8004386 <_vfiprintf_r+0x176>
 8004376:	9b04      	ldr	r3, [sp, #16]
 8004378:	eba0 000a 	sub.w	r0, r0, sl
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	4082      	lsls	r2, r0
 8004380:	4313      	orrs	r3, r2
 8004382:	3401      	adds	r4, #1
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438a:	4829      	ldr	r0, [pc, #164]	@ (8004430 <_vfiprintf_r+0x220>)
 800438c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004390:	2206      	movs	r2, #6
 8004392:	f7fb ff2d 	bl	80001f0 <memchr>
 8004396:	2800      	cmp	r0, #0
 8004398:	d03f      	beq.n	800441a <_vfiprintf_r+0x20a>
 800439a:	4b26      	ldr	r3, [pc, #152]	@ (8004434 <_vfiprintf_r+0x224>)
 800439c:	bb1b      	cbnz	r3, 80043e6 <_vfiprintf_r+0x1d6>
 800439e:	9b03      	ldr	r3, [sp, #12]
 80043a0:	3307      	adds	r3, #7
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	3308      	adds	r3, #8
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ac:	443b      	add	r3, r7
 80043ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80043b0:	e76a      	b.n	8004288 <_vfiprintf_r+0x78>
 80043b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b6:	460c      	mov	r4, r1
 80043b8:	2001      	movs	r0, #1
 80043ba:	e7a8      	b.n	800430e <_vfiprintf_r+0xfe>
 80043bc:	2300      	movs	r3, #0
 80043be:	3401      	adds	r4, #1
 80043c0:	9305      	str	r3, [sp, #20]
 80043c2:	4619      	mov	r1, r3
 80043c4:	f04f 0c0a 	mov.w	ip, #10
 80043c8:	4620      	mov	r0, r4
 80043ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ce:	3a30      	subs	r2, #48	@ 0x30
 80043d0:	2a09      	cmp	r2, #9
 80043d2:	d903      	bls.n	80043dc <_vfiprintf_r+0x1cc>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0c6      	beq.n	8004366 <_vfiprintf_r+0x156>
 80043d8:	9105      	str	r1, [sp, #20]
 80043da:	e7c4      	b.n	8004366 <_vfiprintf_r+0x156>
 80043dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e0:	4604      	mov	r4, r0
 80043e2:	2301      	movs	r3, #1
 80043e4:	e7f0      	b.n	80043c8 <_vfiprintf_r+0x1b8>
 80043e6:	ab03      	add	r3, sp, #12
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	462a      	mov	r2, r5
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <_vfiprintf_r+0x228>)
 80043ee:	a904      	add	r1, sp, #16
 80043f0:	4630      	mov	r0, r6
 80043f2:	f3af 8000 	nop.w
 80043f6:	4607      	mov	r7, r0
 80043f8:	1c78      	adds	r0, r7, #1
 80043fa:	d1d6      	bne.n	80043aa <_vfiprintf_r+0x19a>
 80043fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043fe:	07d9      	lsls	r1, r3, #31
 8004400:	d405      	bmi.n	800440e <_vfiprintf_r+0x1fe>
 8004402:	89ab      	ldrh	r3, [r5, #12]
 8004404:	059a      	lsls	r2, r3, #22
 8004406:	d402      	bmi.n	800440e <_vfiprintf_r+0x1fe>
 8004408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800440a:	f7ff fdb7 	bl	8003f7c <__retarget_lock_release_recursive>
 800440e:	89ab      	ldrh	r3, [r5, #12]
 8004410:	065b      	lsls	r3, r3, #25
 8004412:	f53f af1f 	bmi.w	8004254 <_vfiprintf_r+0x44>
 8004416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004418:	e71e      	b.n	8004258 <_vfiprintf_r+0x48>
 800441a:	ab03      	add	r3, sp, #12
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	462a      	mov	r2, r5
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <_vfiprintf_r+0x228>)
 8004422:	a904      	add	r1, sp, #16
 8004424:	4630      	mov	r0, r6
 8004426:	f000 f879 	bl	800451c <_printf_i>
 800442a:	e7e4      	b.n	80043f6 <_vfiprintf_r+0x1e6>
 800442c:	08004c2d 	.word	0x08004c2d
 8004430:	08004c37 	.word	0x08004c37
 8004434:	00000000 	.word	0x00000000
 8004438:	080041eb 	.word	0x080041eb
 800443c:	08004c33 	.word	0x08004c33

08004440 <_printf_common>:
 8004440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	4616      	mov	r6, r2
 8004446:	4698      	mov	r8, r3
 8004448:	688a      	ldr	r2, [r1, #8]
 800444a:	690b      	ldr	r3, [r1, #16]
 800444c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004450:	4293      	cmp	r3, r2
 8004452:	bfb8      	it	lt
 8004454:	4613      	movlt	r3, r2
 8004456:	6033      	str	r3, [r6, #0]
 8004458:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800445c:	4607      	mov	r7, r0
 800445e:	460c      	mov	r4, r1
 8004460:	b10a      	cbz	r2, 8004466 <_printf_common+0x26>
 8004462:	3301      	adds	r3, #1
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	0699      	lsls	r1, r3, #26
 800446a:	bf42      	ittt	mi
 800446c:	6833      	ldrmi	r3, [r6, #0]
 800446e:	3302      	addmi	r3, #2
 8004470:	6033      	strmi	r3, [r6, #0]
 8004472:	6825      	ldr	r5, [r4, #0]
 8004474:	f015 0506 	ands.w	r5, r5, #6
 8004478:	d106      	bne.n	8004488 <_printf_common+0x48>
 800447a:	f104 0a19 	add.w	sl, r4, #25
 800447e:	68e3      	ldr	r3, [r4, #12]
 8004480:	6832      	ldr	r2, [r6, #0]
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	42ab      	cmp	r3, r5
 8004486:	dc26      	bgt.n	80044d6 <_printf_common+0x96>
 8004488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	3b00      	subs	r3, #0
 8004490:	bf18      	it	ne
 8004492:	2301      	movne	r3, #1
 8004494:	0692      	lsls	r2, r2, #26
 8004496:	d42b      	bmi.n	80044f0 <_printf_common+0xb0>
 8004498:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800449c:	4641      	mov	r1, r8
 800449e:	4638      	mov	r0, r7
 80044a0:	47c8      	blx	r9
 80044a2:	3001      	adds	r0, #1
 80044a4:	d01e      	beq.n	80044e4 <_printf_common+0xa4>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	6922      	ldr	r2, [r4, #16]
 80044aa:	f003 0306 	and.w	r3, r3, #6
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	bf02      	ittt	eq
 80044b2:	68e5      	ldreq	r5, [r4, #12]
 80044b4:	6833      	ldreq	r3, [r6, #0]
 80044b6:	1aed      	subeq	r5, r5, r3
 80044b8:	68a3      	ldr	r3, [r4, #8]
 80044ba:	bf0c      	ite	eq
 80044bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c0:	2500      	movne	r5, #0
 80044c2:	4293      	cmp	r3, r2
 80044c4:	bfc4      	itt	gt
 80044c6:	1a9b      	subgt	r3, r3, r2
 80044c8:	18ed      	addgt	r5, r5, r3
 80044ca:	2600      	movs	r6, #0
 80044cc:	341a      	adds	r4, #26
 80044ce:	42b5      	cmp	r5, r6
 80044d0:	d11a      	bne.n	8004508 <_printf_common+0xc8>
 80044d2:	2000      	movs	r0, #0
 80044d4:	e008      	b.n	80044e8 <_printf_common+0xa8>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4652      	mov	r2, sl
 80044da:	4641      	mov	r1, r8
 80044dc:	4638      	mov	r0, r7
 80044de:	47c8      	blx	r9
 80044e0:	3001      	adds	r0, #1
 80044e2:	d103      	bne.n	80044ec <_printf_common+0xac>
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ec:	3501      	adds	r5, #1
 80044ee:	e7c6      	b.n	800447e <_printf_common+0x3e>
 80044f0:	18e1      	adds	r1, r4, r3
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	2030      	movs	r0, #48	@ 0x30
 80044f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044fa:	4422      	add	r2, r4
 80044fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004504:	3302      	adds	r3, #2
 8004506:	e7c7      	b.n	8004498 <_printf_common+0x58>
 8004508:	2301      	movs	r3, #1
 800450a:	4622      	mov	r2, r4
 800450c:	4641      	mov	r1, r8
 800450e:	4638      	mov	r0, r7
 8004510:	47c8      	blx	r9
 8004512:	3001      	adds	r0, #1
 8004514:	d0e6      	beq.n	80044e4 <_printf_common+0xa4>
 8004516:	3601      	adds	r6, #1
 8004518:	e7d9      	b.n	80044ce <_printf_common+0x8e>
	...

0800451c <_printf_i>:
 800451c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	7e0f      	ldrb	r7, [r1, #24]
 8004522:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004524:	2f78      	cmp	r7, #120	@ 0x78
 8004526:	4691      	mov	r9, r2
 8004528:	4680      	mov	r8, r0
 800452a:	460c      	mov	r4, r1
 800452c:	469a      	mov	sl, r3
 800452e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004532:	d807      	bhi.n	8004544 <_printf_i+0x28>
 8004534:	2f62      	cmp	r7, #98	@ 0x62
 8004536:	d80a      	bhi.n	800454e <_printf_i+0x32>
 8004538:	2f00      	cmp	r7, #0
 800453a:	f000 80d2 	beq.w	80046e2 <_printf_i+0x1c6>
 800453e:	2f58      	cmp	r7, #88	@ 0x58
 8004540:	f000 80b9 	beq.w	80046b6 <_printf_i+0x19a>
 8004544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800454c:	e03a      	b.n	80045c4 <_printf_i+0xa8>
 800454e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004552:	2b15      	cmp	r3, #21
 8004554:	d8f6      	bhi.n	8004544 <_printf_i+0x28>
 8004556:	a101      	add	r1, pc, #4	@ (adr r1, 800455c <_printf_i+0x40>)
 8004558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800455c:	080045b5 	.word	0x080045b5
 8004560:	080045c9 	.word	0x080045c9
 8004564:	08004545 	.word	0x08004545
 8004568:	08004545 	.word	0x08004545
 800456c:	08004545 	.word	0x08004545
 8004570:	08004545 	.word	0x08004545
 8004574:	080045c9 	.word	0x080045c9
 8004578:	08004545 	.word	0x08004545
 800457c:	08004545 	.word	0x08004545
 8004580:	08004545 	.word	0x08004545
 8004584:	08004545 	.word	0x08004545
 8004588:	080046c9 	.word	0x080046c9
 800458c:	080045f3 	.word	0x080045f3
 8004590:	08004683 	.word	0x08004683
 8004594:	08004545 	.word	0x08004545
 8004598:	08004545 	.word	0x08004545
 800459c:	080046eb 	.word	0x080046eb
 80045a0:	08004545 	.word	0x08004545
 80045a4:	080045f3 	.word	0x080045f3
 80045a8:	08004545 	.word	0x08004545
 80045ac:	08004545 	.word	0x08004545
 80045b0:	0800468b 	.word	0x0800468b
 80045b4:	6833      	ldr	r3, [r6, #0]
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6032      	str	r2, [r6, #0]
 80045bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045c4:	2301      	movs	r3, #1
 80045c6:	e09d      	b.n	8004704 <_printf_i+0x1e8>
 80045c8:	6833      	ldr	r3, [r6, #0]
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	1d19      	adds	r1, r3, #4
 80045ce:	6031      	str	r1, [r6, #0]
 80045d0:	0606      	lsls	r6, r0, #24
 80045d2:	d501      	bpl.n	80045d8 <_printf_i+0xbc>
 80045d4:	681d      	ldr	r5, [r3, #0]
 80045d6:	e003      	b.n	80045e0 <_printf_i+0xc4>
 80045d8:	0645      	lsls	r5, r0, #25
 80045da:	d5fb      	bpl.n	80045d4 <_printf_i+0xb8>
 80045dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045e0:	2d00      	cmp	r5, #0
 80045e2:	da03      	bge.n	80045ec <_printf_i+0xd0>
 80045e4:	232d      	movs	r3, #45	@ 0x2d
 80045e6:	426d      	negs	r5, r5
 80045e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045ec:	4859      	ldr	r0, [pc, #356]	@ (8004754 <_printf_i+0x238>)
 80045ee:	230a      	movs	r3, #10
 80045f0:	e011      	b.n	8004616 <_printf_i+0xfa>
 80045f2:	6821      	ldr	r1, [r4, #0]
 80045f4:	6833      	ldr	r3, [r6, #0]
 80045f6:	0608      	lsls	r0, r1, #24
 80045f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80045fc:	d402      	bmi.n	8004604 <_printf_i+0xe8>
 80045fe:	0649      	lsls	r1, r1, #25
 8004600:	bf48      	it	mi
 8004602:	b2ad      	uxthmi	r5, r5
 8004604:	2f6f      	cmp	r7, #111	@ 0x6f
 8004606:	4853      	ldr	r0, [pc, #332]	@ (8004754 <_printf_i+0x238>)
 8004608:	6033      	str	r3, [r6, #0]
 800460a:	bf14      	ite	ne
 800460c:	230a      	movne	r3, #10
 800460e:	2308      	moveq	r3, #8
 8004610:	2100      	movs	r1, #0
 8004612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004616:	6866      	ldr	r6, [r4, #4]
 8004618:	60a6      	str	r6, [r4, #8]
 800461a:	2e00      	cmp	r6, #0
 800461c:	bfa2      	ittt	ge
 800461e:	6821      	ldrge	r1, [r4, #0]
 8004620:	f021 0104 	bicge.w	r1, r1, #4
 8004624:	6021      	strge	r1, [r4, #0]
 8004626:	b90d      	cbnz	r5, 800462c <_printf_i+0x110>
 8004628:	2e00      	cmp	r6, #0
 800462a:	d04b      	beq.n	80046c4 <_printf_i+0x1a8>
 800462c:	4616      	mov	r6, r2
 800462e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004632:	fb03 5711 	mls	r7, r3, r1, r5
 8004636:	5dc7      	ldrb	r7, [r0, r7]
 8004638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800463c:	462f      	mov	r7, r5
 800463e:	42bb      	cmp	r3, r7
 8004640:	460d      	mov	r5, r1
 8004642:	d9f4      	bls.n	800462e <_printf_i+0x112>
 8004644:	2b08      	cmp	r3, #8
 8004646:	d10b      	bne.n	8004660 <_printf_i+0x144>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	07df      	lsls	r7, r3, #31
 800464c:	d508      	bpl.n	8004660 <_printf_i+0x144>
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	6861      	ldr	r1, [r4, #4]
 8004652:	4299      	cmp	r1, r3
 8004654:	bfde      	ittt	le
 8004656:	2330      	movle	r3, #48	@ 0x30
 8004658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800465c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004660:	1b92      	subs	r2, r2, r6
 8004662:	6122      	str	r2, [r4, #16]
 8004664:	f8cd a000 	str.w	sl, [sp]
 8004668:	464b      	mov	r3, r9
 800466a:	aa03      	add	r2, sp, #12
 800466c:	4621      	mov	r1, r4
 800466e:	4640      	mov	r0, r8
 8004670:	f7ff fee6 	bl	8004440 <_printf_common>
 8004674:	3001      	adds	r0, #1
 8004676:	d14a      	bne.n	800470e <_printf_i+0x1f2>
 8004678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800467c:	b004      	add	sp, #16
 800467e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	f043 0320 	orr.w	r3, r3, #32
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	4833      	ldr	r0, [pc, #204]	@ (8004758 <_printf_i+0x23c>)
 800468c:	2778      	movs	r7, #120	@ 0x78
 800468e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	6831      	ldr	r1, [r6, #0]
 8004696:	061f      	lsls	r7, r3, #24
 8004698:	f851 5b04 	ldr.w	r5, [r1], #4
 800469c:	d402      	bmi.n	80046a4 <_printf_i+0x188>
 800469e:	065f      	lsls	r7, r3, #25
 80046a0:	bf48      	it	mi
 80046a2:	b2ad      	uxthmi	r5, r5
 80046a4:	6031      	str	r1, [r6, #0]
 80046a6:	07d9      	lsls	r1, r3, #31
 80046a8:	bf44      	itt	mi
 80046aa:	f043 0320 	orrmi.w	r3, r3, #32
 80046ae:	6023      	strmi	r3, [r4, #0]
 80046b0:	b11d      	cbz	r5, 80046ba <_printf_i+0x19e>
 80046b2:	2310      	movs	r3, #16
 80046b4:	e7ac      	b.n	8004610 <_printf_i+0xf4>
 80046b6:	4827      	ldr	r0, [pc, #156]	@ (8004754 <_printf_i+0x238>)
 80046b8:	e7e9      	b.n	800468e <_printf_i+0x172>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f023 0320 	bic.w	r3, r3, #32
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	e7f6      	b.n	80046b2 <_printf_i+0x196>
 80046c4:	4616      	mov	r6, r2
 80046c6:	e7bd      	b.n	8004644 <_printf_i+0x128>
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	6825      	ldr	r5, [r4, #0]
 80046cc:	6961      	ldr	r1, [r4, #20]
 80046ce:	1d18      	adds	r0, r3, #4
 80046d0:	6030      	str	r0, [r6, #0]
 80046d2:	062e      	lsls	r6, r5, #24
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	d501      	bpl.n	80046dc <_printf_i+0x1c0>
 80046d8:	6019      	str	r1, [r3, #0]
 80046da:	e002      	b.n	80046e2 <_printf_i+0x1c6>
 80046dc:	0668      	lsls	r0, r5, #25
 80046de:	d5fb      	bpl.n	80046d8 <_printf_i+0x1bc>
 80046e0:	8019      	strh	r1, [r3, #0]
 80046e2:	2300      	movs	r3, #0
 80046e4:	6123      	str	r3, [r4, #16]
 80046e6:	4616      	mov	r6, r2
 80046e8:	e7bc      	b.n	8004664 <_printf_i+0x148>
 80046ea:	6833      	ldr	r3, [r6, #0]
 80046ec:	1d1a      	adds	r2, r3, #4
 80046ee:	6032      	str	r2, [r6, #0]
 80046f0:	681e      	ldr	r6, [r3, #0]
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	2100      	movs	r1, #0
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7fb fd7a 	bl	80001f0 <memchr>
 80046fc:	b108      	cbz	r0, 8004702 <_printf_i+0x1e6>
 80046fe:	1b80      	subs	r0, r0, r6
 8004700:	6060      	str	r0, [r4, #4]
 8004702:	6863      	ldr	r3, [r4, #4]
 8004704:	6123      	str	r3, [r4, #16]
 8004706:	2300      	movs	r3, #0
 8004708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800470c:	e7aa      	b.n	8004664 <_printf_i+0x148>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	4632      	mov	r2, r6
 8004712:	4649      	mov	r1, r9
 8004714:	4640      	mov	r0, r8
 8004716:	47d0      	blx	sl
 8004718:	3001      	adds	r0, #1
 800471a:	d0ad      	beq.n	8004678 <_printf_i+0x15c>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	079b      	lsls	r3, r3, #30
 8004720:	d413      	bmi.n	800474a <_printf_i+0x22e>
 8004722:	68e0      	ldr	r0, [r4, #12]
 8004724:	9b03      	ldr	r3, [sp, #12]
 8004726:	4298      	cmp	r0, r3
 8004728:	bfb8      	it	lt
 800472a:	4618      	movlt	r0, r3
 800472c:	e7a6      	b.n	800467c <_printf_i+0x160>
 800472e:	2301      	movs	r3, #1
 8004730:	4632      	mov	r2, r6
 8004732:	4649      	mov	r1, r9
 8004734:	4640      	mov	r0, r8
 8004736:	47d0      	blx	sl
 8004738:	3001      	adds	r0, #1
 800473a:	d09d      	beq.n	8004678 <_printf_i+0x15c>
 800473c:	3501      	adds	r5, #1
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	9903      	ldr	r1, [sp, #12]
 8004742:	1a5b      	subs	r3, r3, r1
 8004744:	42ab      	cmp	r3, r5
 8004746:	dcf2      	bgt.n	800472e <_printf_i+0x212>
 8004748:	e7eb      	b.n	8004722 <_printf_i+0x206>
 800474a:	2500      	movs	r5, #0
 800474c:	f104 0619 	add.w	r6, r4, #25
 8004750:	e7f5      	b.n	800473e <_printf_i+0x222>
 8004752:	bf00      	nop
 8004754:	08004c3e 	.word	0x08004c3e
 8004758:	08004c4f 	.word	0x08004c4f

0800475c <__sflush_r>:
 800475c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004764:	0716      	lsls	r6, r2, #28
 8004766:	4605      	mov	r5, r0
 8004768:	460c      	mov	r4, r1
 800476a:	d454      	bmi.n	8004816 <__sflush_r+0xba>
 800476c:	684b      	ldr	r3, [r1, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	dc02      	bgt.n	8004778 <__sflush_r+0x1c>
 8004772:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	dd48      	ble.n	800480a <__sflush_r+0xae>
 8004778:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800477a:	2e00      	cmp	r6, #0
 800477c:	d045      	beq.n	800480a <__sflush_r+0xae>
 800477e:	2300      	movs	r3, #0
 8004780:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004784:	682f      	ldr	r7, [r5, #0]
 8004786:	6a21      	ldr	r1, [r4, #32]
 8004788:	602b      	str	r3, [r5, #0]
 800478a:	d030      	beq.n	80047ee <__sflush_r+0x92>
 800478c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	0759      	lsls	r1, r3, #29
 8004792:	d505      	bpl.n	80047a0 <__sflush_r+0x44>
 8004794:	6863      	ldr	r3, [r4, #4]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800479a:	b10b      	cbz	r3, 80047a0 <__sflush_r+0x44>
 800479c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800479e:	1ad2      	subs	r2, r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047a4:	6a21      	ldr	r1, [r4, #32]
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b0      	blx	r6
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	d106      	bne.n	80047be <__sflush_r+0x62>
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	291d      	cmp	r1, #29
 80047b4:	d82b      	bhi.n	800480e <__sflush_r+0xb2>
 80047b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004860 <__sflush_r+0x104>)
 80047b8:	410a      	asrs	r2, r1
 80047ba:	07d6      	lsls	r6, r2, #31
 80047bc:	d427      	bmi.n	800480e <__sflush_r+0xb2>
 80047be:	2200      	movs	r2, #0
 80047c0:	6062      	str	r2, [r4, #4]
 80047c2:	04d9      	lsls	r1, r3, #19
 80047c4:	6922      	ldr	r2, [r4, #16]
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	d504      	bpl.n	80047d4 <__sflush_r+0x78>
 80047ca:	1c42      	adds	r2, r0, #1
 80047cc:	d101      	bne.n	80047d2 <__sflush_r+0x76>
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	b903      	cbnz	r3, 80047d4 <__sflush_r+0x78>
 80047d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80047d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047d6:	602f      	str	r7, [r5, #0]
 80047d8:	b1b9      	cbz	r1, 800480a <__sflush_r+0xae>
 80047da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047de:	4299      	cmp	r1, r3
 80047e0:	d002      	beq.n	80047e8 <__sflush_r+0x8c>
 80047e2:	4628      	mov	r0, r5
 80047e4:	f7ff fbea 	bl	8003fbc <_free_r>
 80047e8:	2300      	movs	r3, #0
 80047ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ec:	e00d      	b.n	800480a <__sflush_r+0xae>
 80047ee:	2301      	movs	r3, #1
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b0      	blx	r6
 80047f4:	4602      	mov	r2, r0
 80047f6:	1c50      	adds	r0, r2, #1
 80047f8:	d1c9      	bne.n	800478e <__sflush_r+0x32>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0c6      	beq.n	800478e <__sflush_r+0x32>
 8004800:	2b1d      	cmp	r3, #29
 8004802:	d001      	beq.n	8004808 <__sflush_r+0xac>
 8004804:	2b16      	cmp	r3, #22
 8004806:	d11e      	bne.n	8004846 <__sflush_r+0xea>
 8004808:	602f      	str	r7, [r5, #0]
 800480a:	2000      	movs	r0, #0
 800480c:	e022      	b.n	8004854 <__sflush_r+0xf8>
 800480e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004812:	b21b      	sxth	r3, r3
 8004814:	e01b      	b.n	800484e <__sflush_r+0xf2>
 8004816:	690f      	ldr	r7, [r1, #16]
 8004818:	2f00      	cmp	r7, #0
 800481a:	d0f6      	beq.n	800480a <__sflush_r+0xae>
 800481c:	0793      	lsls	r3, r2, #30
 800481e:	680e      	ldr	r6, [r1, #0]
 8004820:	bf08      	it	eq
 8004822:	694b      	ldreq	r3, [r1, #20]
 8004824:	600f      	str	r7, [r1, #0]
 8004826:	bf18      	it	ne
 8004828:	2300      	movne	r3, #0
 800482a:	eba6 0807 	sub.w	r8, r6, r7
 800482e:	608b      	str	r3, [r1, #8]
 8004830:	f1b8 0f00 	cmp.w	r8, #0
 8004834:	dde9      	ble.n	800480a <__sflush_r+0xae>
 8004836:	6a21      	ldr	r1, [r4, #32]
 8004838:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800483a:	4643      	mov	r3, r8
 800483c:	463a      	mov	r2, r7
 800483e:	4628      	mov	r0, r5
 8004840:	47b0      	blx	r6
 8004842:	2800      	cmp	r0, #0
 8004844:	dc08      	bgt.n	8004858 <__sflush_r+0xfc>
 8004846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800484a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004858:	4407      	add	r7, r0
 800485a:	eba8 0800 	sub.w	r8, r8, r0
 800485e:	e7e7      	b.n	8004830 <__sflush_r+0xd4>
 8004860:	dfbffffe 	.word	0xdfbffffe

08004864 <_fflush_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	690b      	ldr	r3, [r1, #16]
 8004868:	4605      	mov	r5, r0
 800486a:	460c      	mov	r4, r1
 800486c:	b913      	cbnz	r3, 8004874 <_fflush_r+0x10>
 800486e:	2500      	movs	r5, #0
 8004870:	4628      	mov	r0, r5
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	b118      	cbz	r0, 800487e <_fflush_r+0x1a>
 8004876:	6a03      	ldr	r3, [r0, #32]
 8004878:	b90b      	cbnz	r3, 800487e <_fflush_r+0x1a>
 800487a:	f7ff f959 	bl	8003b30 <__sinit>
 800487e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f3      	beq.n	800486e <_fflush_r+0xa>
 8004886:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004888:	07d0      	lsls	r0, r2, #31
 800488a:	d404      	bmi.n	8004896 <_fflush_r+0x32>
 800488c:	0599      	lsls	r1, r3, #22
 800488e:	d402      	bmi.n	8004896 <_fflush_r+0x32>
 8004890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004892:	f7ff fb72 	bl	8003f7a <__retarget_lock_acquire_recursive>
 8004896:	4628      	mov	r0, r5
 8004898:	4621      	mov	r1, r4
 800489a:	f7ff ff5f 	bl	800475c <__sflush_r>
 800489e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048a0:	07da      	lsls	r2, r3, #31
 80048a2:	4605      	mov	r5, r0
 80048a4:	d4e4      	bmi.n	8004870 <_fflush_r+0xc>
 80048a6:	89a3      	ldrh	r3, [r4, #12]
 80048a8:	059b      	lsls	r3, r3, #22
 80048aa:	d4e1      	bmi.n	8004870 <_fflush_r+0xc>
 80048ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048ae:	f7ff fb65 	bl	8003f7c <__retarget_lock_release_recursive>
 80048b2:	e7dd      	b.n	8004870 <_fflush_r+0xc>

080048b4 <fiprintf>:
 80048b4:	b40e      	push	{r1, r2, r3}
 80048b6:	b503      	push	{r0, r1, lr}
 80048b8:	4601      	mov	r1, r0
 80048ba:	ab03      	add	r3, sp, #12
 80048bc:	4805      	ldr	r0, [pc, #20]	@ (80048d4 <fiprintf+0x20>)
 80048be:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c2:	6800      	ldr	r0, [r0, #0]
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	f7ff fca3 	bl	8004210 <_vfiprintf_r>
 80048ca:	b002      	add	sp, #8
 80048cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d0:	b003      	add	sp, #12
 80048d2:	4770      	bx	lr
 80048d4:	20000020 	.word	0x20000020

080048d8 <__swhatbuf_r>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	460c      	mov	r4, r1
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	2900      	cmp	r1, #0
 80048e2:	b096      	sub	sp, #88	@ 0x58
 80048e4:	4615      	mov	r5, r2
 80048e6:	461e      	mov	r6, r3
 80048e8:	da0d      	bge.n	8004906 <__swhatbuf_r+0x2e>
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2340      	movne	r3, #64	@ 0x40
 80048f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048fc:	2000      	movs	r0, #0
 80048fe:	6031      	str	r1, [r6, #0]
 8004900:	602b      	str	r3, [r5, #0]
 8004902:	b016      	add	sp, #88	@ 0x58
 8004904:	bd70      	pop	{r4, r5, r6, pc}
 8004906:	466a      	mov	r2, sp
 8004908:	f000 f848 	bl	800499c <_fstat_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	dbec      	blt.n	80048ea <__swhatbuf_r+0x12>
 8004910:	9901      	ldr	r1, [sp, #4]
 8004912:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004916:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800491a:	4259      	negs	r1, r3
 800491c:	4159      	adcs	r1, r3
 800491e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004922:	e7eb      	b.n	80048fc <__swhatbuf_r+0x24>

08004924 <__smakebuf_r>:
 8004924:	898b      	ldrh	r3, [r1, #12]
 8004926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004928:	079d      	lsls	r5, r3, #30
 800492a:	4606      	mov	r6, r0
 800492c:	460c      	mov	r4, r1
 800492e:	d507      	bpl.n	8004940 <__smakebuf_r+0x1c>
 8004930:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	6123      	str	r3, [r4, #16]
 8004938:	2301      	movs	r3, #1
 800493a:	6163      	str	r3, [r4, #20]
 800493c:	b003      	add	sp, #12
 800493e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004940:	ab01      	add	r3, sp, #4
 8004942:	466a      	mov	r2, sp
 8004944:	f7ff ffc8 	bl	80048d8 <__swhatbuf_r>
 8004948:	9f00      	ldr	r7, [sp, #0]
 800494a:	4605      	mov	r5, r0
 800494c:	4639      	mov	r1, r7
 800494e:	4630      	mov	r0, r6
 8004950:	f7ff fba8 	bl	80040a4 <_malloc_r>
 8004954:	b948      	cbnz	r0, 800496a <__smakebuf_r+0x46>
 8004956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495a:	059a      	lsls	r2, r3, #22
 800495c:	d4ee      	bmi.n	800493c <__smakebuf_r+0x18>
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	f043 0302 	orr.w	r3, r3, #2
 8004966:	81a3      	strh	r3, [r4, #12]
 8004968:	e7e2      	b.n	8004930 <__smakebuf_r+0xc>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	6020      	str	r0, [r4, #0]
 800496e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	9b01      	ldr	r3, [sp, #4]
 8004976:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800497a:	b15b      	cbz	r3, 8004994 <__smakebuf_r+0x70>
 800497c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004980:	4630      	mov	r0, r6
 8004982:	f000 f81d 	bl	80049c0 <_isatty_r>
 8004986:	b128      	cbz	r0, 8004994 <__smakebuf_r+0x70>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	431d      	orrs	r5, r3
 8004998:	81a5      	strh	r5, [r4, #12]
 800499a:	e7cf      	b.n	800493c <__smakebuf_r+0x18>

0800499c <_fstat_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d07      	ldr	r5, [pc, #28]	@ (80049bc <_fstat_r+0x20>)
 80049a0:	2300      	movs	r3, #0
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	f7fe fe34 	bl	8003616 <_fstat>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	d102      	bne.n	80049b8 <_fstat_r+0x1c>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	b103      	cbz	r3, 80049b8 <_fstat_r+0x1c>
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
 80049ba:	bf00      	nop
 80049bc:	20000320 	.word	0x20000320

080049c0 <_isatty_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d06      	ldr	r5, [pc, #24]	@ (80049dc <_isatty_r+0x1c>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fe ff9a 	bl	8003904 <_isatty>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_isatty_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_isatty_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	20000320 	.word	0x20000320

080049e0 <_sbrk_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d06      	ldr	r5, [pc, #24]	@ (80049fc <_sbrk_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc fa4a 	bl	8000e84 <_sbrk>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_sbrk_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_sbrk_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000320 	.word	0x20000320

08004a00 <abort>:
 8004a00:	b508      	push	{r3, lr}
 8004a02:	2006      	movs	r0, #6
 8004a04:	f000 f82c 	bl	8004a60 <raise>
 8004a08:	2001      	movs	r0, #1
 8004a0a:	f000 f84d 	bl	8004aa8 <_exit>

08004a0e <_raise_r>:
 8004a0e:	291f      	cmp	r1, #31
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	d904      	bls.n	8004a22 <_raise_r+0x14>
 8004a18:	2316      	movs	r3, #22
 8004a1a:	6003      	str	r3, [r0, #0]
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a20:	bd38      	pop	{r3, r4, r5, pc}
 8004a22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004a24:	b112      	cbz	r2, 8004a2c <_raise_r+0x1e>
 8004a26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004a2a:	b94b      	cbnz	r3, 8004a40 <_raise_r+0x32>
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f831 	bl	8004a94 <_getpid_r>
 8004a32:	4622      	mov	r2, r4
 8004a34:	4601      	mov	r1, r0
 8004a36:	4628      	mov	r0, r5
 8004a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a3c:	f000 b818 	b.w	8004a70 <_kill_r>
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d00a      	beq.n	8004a5a <_raise_r+0x4c>
 8004a44:	1c59      	adds	r1, r3, #1
 8004a46:	d103      	bne.n	8004a50 <_raise_r+0x42>
 8004a48:	2316      	movs	r3, #22
 8004a4a:	6003      	str	r3, [r0, #0]
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	e7e7      	b.n	8004a20 <_raise_r+0x12>
 8004a50:	2100      	movs	r1, #0
 8004a52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004a56:	4620      	mov	r0, r4
 8004a58:	4798      	blx	r3
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e7e0      	b.n	8004a20 <_raise_r+0x12>
	...

08004a60 <raise>:
 8004a60:	4b02      	ldr	r3, [pc, #8]	@ (8004a6c <raise+0xc>)
 8004a62:	4601      	mov	r1, r0
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	f7ff bfd2 	b.w	8004a0e <_raise_r>
 8004a6a:	bf00      	nop
 8004a6c:	20000020 	.word	0x20000020

08004a70 <_kill_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4d07      	ldr	r5, [pc, #28]	@ (8004a90 <_kill_r+0x20>)
 8004a74:	2300      	movs	r3, #0
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	f000 f80b 	bl	8004a98 <_kill>
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	d102      	bne.n	8004a8c <_kill_r+0x1c>
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	b103      	cbz	r3, 8004a8c <_kill_r+0x1c>
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000320 	.word	0x20000320

08004a94 <_getpid_r>:
 8004a94:	f7fe bd9c 	b.w	80035d0 <_getpid>

08004a98 <_kill>:
 8004a98:	4b02      	ldr	r3, [pc, #8]	@ (8004aa4 <_kill+0xc>)
 8004a9a:	2258      	movs	r2, #88	@ 0x58
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aa2:	4770      	bx	lr
 8004aa4:	20000320 	.word	0x20000320

08004aa8 <_exit>:
 8004aa8:	e7fe      	b.n	8004aa8 <_exit>
	...

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
