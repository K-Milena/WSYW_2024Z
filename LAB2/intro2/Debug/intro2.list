
intro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005078  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005218  08005218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052ac  080052ac  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080052b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  08005324  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005324  00007334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ffb  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0001009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00011808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000777  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160fd  00000000  00000000  0001292f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8e9  00000000  00000000  00028a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfbf  00000000  00000000  00033315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf2d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  000bf318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c2740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005200 	.word	0x08005200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005200 	.word	0x08005200

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000b90:	f003 fb88 	bl	80042a4 <initialise_monitor_handles>
printf("test");
 8000b94:	480e      	ldr	r0, [pc, #56]	@ (8000bd0 <main+0x44>)
 8000b96:	f003 fcc5 	bl	8004524 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 fd01 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f81d 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 f981 	bl	8000ea8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000ba6:	f000 f8f3 	bl	8000d90 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000baa:	f000 f881 	bl	8000cb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Base_Start_IT(&htim4);
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <main+0x48>)
 8000bb0:	f001 fce6 	bl	8002580 <HAL_TIM_Base_Start_IT>
  	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4807      	ldr	r0, [pc, #28]	@ (8000bd4 <main+0x48>)
 8000bb8:	f001 fd9e 	bl	80026f8 <HAL_TIM_OC_Start>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <main+0x48>)
 8000bc0:	f001 fea4 	bl	800290c <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <main+0x4c>)
 8000bc8:	f001 fff8 	bl	8002bbc <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <main+0x40>
 8000bd0:	08005218 	.word	0x08005218
 8000bd4:	200000d4 	.word	0x200000d4
 8000bd8:	2000008c 	.word	0x2000008c

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b094      	sub	sp, #80	@ 0x50
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	2230      	movs	r2, #48	@ 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fcef 	bl	80045ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b28      	ldr	r3, [pc, #160]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c40:	2310      	movs	r3, #16
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c44:	2302      	movs	r3, #2
 8000c46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c50:	23c0      	movs	r3, #192	@ 0xc0
 8000c52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c54:	2304      	movs	r3, #4
 8000c56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 ffd9 	bl	8001c18 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c6c:	f000 fb0e 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2103      	movs	r1, #3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fa3a 	bl	8002108 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c9a:	f000 faf7 	bl	800128c <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3750      	adds	r7, #80	@ 0x50
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000cdc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000ce4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ce8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000cf2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d04:	4821      	ldr	r0, [pc, #132]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000d06:	f001 fbeb 	bl	80024e0 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000d10:	f000 fabc 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d18:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000d22:	f002 fb0f 	bl	8003344 <HAL_TIM_ConfigClockSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d2c:	f000 faae 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d30:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000d32:	f001 fee9 	bl	8002b08 <HAL_TIM_IC_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d3c:	f000 faa6 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480f      	ldr	r0, [pc, #60]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000d50:	f003 f80e 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000d5a:	f000 fa97 	bl	800128c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d5e:	230a      	movs	r3, #10
 8000d60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d62:	2301      	movs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_TIM2_Init+0xdc>)
 8000d76:	f002 f987 	bl	8003088 <HAL_TIM_IC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000d80:	f000 fa84 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	@ 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000008c 	.word	0x2000008c

08000d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	@ 0x38
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000dc2:	4a38      	ldr	r2, [pc, #224]	@ (8000ea4 <MX_TIM4_Init+0x114>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 8000dc6:	4b36      	ldr	r3, [pc, #216]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000dc8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000dcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b34      	ldr	r3, [pc, #208]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000dd4:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000dd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b30      	ldr	r3, [pc, #192]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000de8:	482d      	ldr	r0, [pc, #180]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000dea:	f001 fb79 	bl	80024e0 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000df4:	f000 fa4a 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4826      	ldr	r0, [pc, #152]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e06:	f002 fa9d 	bl	8003344 <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e10:	f000 fa3c 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000e14:	4822      	ldr	r0, [pc, #136]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e16:	f001 fc15 	bl	8002644 <HAL_TIM_OC_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e20:	f000 fa34 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e24:	481e      	ldr	r0, [pc, #120]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e26:	f001 fd17 	bl	8002858 <HAL_TIM_PWM_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8000e30:	f000 fa2c 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4619      	mov	r1, r3
 8000e42:	4817      	ldr	r0, [pc, #92]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e44:	f002 ff94 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000e4e:	f000 fa1d 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000e52:	2310      	movs	r3, #16
 8000e54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8000e56:	23fa      	movs	r3, #250	@ 0xfa
 8000e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	4619      	mov	r1, r3
 8000e68:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e6a:	f002 f8b1 	bl	8002fd0 <HAL_TIM_OC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8000e74:	f000 fa0a 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e78:	2360      	movs	r3, #96	@ 0x60
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2208      	movs	r2, #8
 8000e80:	4619      	mov	r1, r3
 8000e82:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e84:	f002 f99c 	bl	80031c0 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000e8e:	f000 f9fd 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e92:	4803      	ldr	r0, [pc, #12]	@ (8000ea0 <MX_TIM4_Init+0x110>)
 8000e94:	f000 fa94 	bl	80013c0 <HAL_TIM_MspPostInit>

}
 8000e98:	bf00      	nop
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200000d4 	.word	0x200000d4
 8000ea4:	40000800 	.word	0x40000800

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	@ 0x30
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b9b      	ldr	r3, [pc, #620]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a9a      	ldr	r2, [pc, #616]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b98      	ldr	r3, [pc, #608]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b94      	ldr	r3, [pc, #592]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a93      	ldr	r2, [pc, #588]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b91      	ldr	r3, [pc, #580]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b8d      	ldr	r3, [pc, #564]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a8c      	ldr	r2, [pc, #560]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b8a      	ldr	r3, [pc, #552]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b86      	ldr	r3, [pc, #536]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a85      	ldr	r2, [pc, #532]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b83      	ldr	r3, [pc, #524]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b7f      	ldr	r3, [pc, #508]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a7e      	ldr	r2, [pc, #504]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b78      	ldr	r3, [pc, #480]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a77      	ldr	r2, [pc, #476]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b75      	ldr	r3, [pc, #468]	@ (8001130 <MX_GPIO_Init+0x288>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4872      	ldr	r0, [pc, #456]	@ (8001134 <MX_GPIO_Init+0x28c>)
 8000f6c:	f000 fe20 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4870      	ldr	r0, [pc, #448]	@ (8001138 <MX_GPIO_Init+0x290>)
 8000f76:	f000 fe1b 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f24a 0110 	movw	r1, #40976	@ 0xa010
 8000f80:	486e      	ldr	r0, [pc, #440]	@ (800113c <MX_GPIO_Init+0x294>)
 8000f82:	f000 fe15 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f86:	2304      	movs	r3, #4
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4866      	ldr	r0, [pc, #408]	@ (8001134 <MX_GPIO_Init+0x28c>)
 8000f9a:	f000 fc85 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	485f      	ldr	r0, [pc, #380]	@ (8001134 <MX_GPIO_Init+0x28c>)
 8000fb6:	f000 fc77 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000fba:	2332      	movs	r3, #50	@ 0x32
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fbe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4859      	ldr	r0, [pc, #356]	@ (8001134 <MX_GPIO_Init+0x28c>)
 8000fd0:	f000 fc6a 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4853      	ldr	r0, [pc, #332]	@ (8001138 <MX_GPIO_Init+0x290>)
 8000fec:	f000 fc5c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001000:	2305      	movs	r3, #5
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	484b      	ldr	r0, [pc, #300]	@ (8001138 <MX_GPIO_Init+0x290>)
 800100c:	f000 fc4c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001010:	2310      	movs	r3, #16
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001020:	2306      	movs	r3, #6
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4845      	ldr	r0, [pc, #276]	@ (8001140 <MX_GPIO_Init+0x298>)
 800102c:	f000 fc3c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001030:	23e0      	movs	r3, #224	@ 0xe0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001040:	2305      	movs	r3, #5
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	483d      	ldr	r0, [pc, #244]	@ (8001140 <MX_GPIO_Init+0x298>)
 800104c:	f000 fc2c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001050:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001062:	2305      	movs	r3, #5
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4835      	ldr	r0, [pc, #212]	@ (8001144 <MX_GPIO_Init+0x29c>)
 800106e:	f000 fc1b 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD6_Pin|Audio_RST_Pin;
 8001072:	f24a 0310 	movw	r3, #40976	@ 0xa010
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	482c      	ldr	r0, [pc, #176]	@ (800113c <MX_GPIO_Init+0x294>)
 800108c:	f000 fc0c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001090:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a2:	2306      	movs	r3, #6
 80010a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4822      	ldr	r0, [pc, #136]	@ (8001138 <MX_GPIO_Init+0x290>)
 80010ae:	f000 fbfb 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	481e      	ldr	r0, [pc, #120]	@ (8001140 <MX_GPIO_Init+0x298>)
 80010c8:	f000 fbee 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010de:	230a      	movs	r3, #10
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4815      	ldr	r0, [pc, #84]	@ (8001140 <MX_GPIO_Init+0x298>)
 80010ea:	f000 fbdd 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010ee:	2320      	movs	r3, #32
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	480e      	ldr	r0, [pc, #56]	@ (800113c <MX_GPIO_Init+0x294>)
 8001102:	f000 fbd1 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001106:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110c:	2312      	movs	r3, #18
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001118:	2304      	movs	r3, #4
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4808      	ldr	r0, [pc, #32]	@ (8001144 <MX_GPIO_Init+0x29c>)
 8001124:	f000 fbc0 	bl	80018a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001128:	bf00      	nop
 800112a:	3730      	adds	r7, #48	@ 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40021000 	.word	0x40021000
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400

08001148 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
		if(htim = &htim4)
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001152:	607b      	str	r3, [r7, #4]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001154:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800115a:	f000 fd42 	bl	8001be2 <HAL_GPIO_TogglePin>
	}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000d4 	.word	0x200000d4
 800116c:	40020c00 	.word	0x40020c00

08001170 <HAL_TIM_PWM_PulseFinishedCallback>:
	uint32_t pulse_val;
	uint32_t increment, autoreload;
	void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
		if(htim == &htim4)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d131      	bne.n	80011e4 <HAL_TIM_PWM_PulseFinishedCallback+0x74>
		{

			autoreload = __HAL_TIM_GET_AUTORELOAD(&htim4);
 8001180:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001186:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8001188:	6013      	str	r3, [r2, #0]
			increment = autoreload * 0.01;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff faea 	bl	8000768 <__aeabi_ui2d>
 8001194:	a316      	add	r3, pc, #88	@ (adr r3, 80011f0 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff f879 	bl	8000290 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fb59 	bl	800085c <__aeabi_d2uiz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80011ae:	6013      	str	r3, [r2, #0]


			pulse_val = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_3);
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011b6:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80011b8:	6013      	str	r3, [r2, #0]
			pulse_val = pulse_val + increment;
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80011c6:	6013      	str	r3, [r2, #0]
			if(pulse_val>autoreload)
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d902      	bls.n	80011da <HAL_TIM_PWM_PulseFinishedCallback+0x6a>
				pulse_val=0;
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pulse_val);
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f3af 8000 	nop.w
 80011f0:	47ae147b 	.word	0x47ae147b
 80011f4:	3f847ae1 	.word	0x3f847ae1
 80011f8:	200000d4 	.word	0x200000d4
 80011fc:	20000124 	.word	0x20000124
 8001200:	20000120 	.word	0x20000120
 8001204:	2000011c 	.word	0x2000011c

08001208 <HAL_TIM_IC_CaptureCallback>:

	uint32_t moment_wcisniecia, moment_zwolnienia;
	uint32_t numer_wyzwolenia_przerwania = 0;
	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
		if(htim == &htim2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d12a      	bne.n	800126e <HAL_TIM_IC_CaptureCallback+0x66>
		{
			if(numer_wyzwolenia_przerwania == 0)
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x74>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <HAL_TIM_IC_CaptureCallback+0x26>
			{
				moment_wcisniecia = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f002 f956 	bl	80034d4 <HAL_TIM_ReadCapturedValue>
 8001228:	4603      	mov	r3, r0
 800122a:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x78>)
 800122c:	6013      	str	r3, [r2, #0]
			}
			if(numer_wyzwolenia_przerwania == 1)
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x74>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d106      	bne.n	8001244 <HAL_TIM_IC_CaptureCallback+0x3c>
			{
				moment_zwolnienia = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f002 f94b 	bl	80034d4 <HAL_TIM_ReadCapturedValue>
 800123e:	4603      	mov	r3, r0
 8001240:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001242:	6013      	str	r3, [r2, #0]
			}
			numer_wyzwolenia_przerwania++;
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x74>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x74>)
 800124c:	6013      	str	r3, [r2, #0]
			if(numer_wyzwolenia_przerwania == 2)
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x74>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d10b      	bne.n	800126e <HAL_TIM_IC_CaptureCallback+0x66>
			{
				printf("Czas wcisniecia przycisku; %d ms \n", moment_zwolnienia - moment_wcisniecia);
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_TIM_IC_CaptureCallback+0x78>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4619      	mov	r1, r3
 8001262:	4809      	ldr	r0, [pc, #36]	@ (8001288 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001264:	f003 f95e 	bl	8004524 <iprintf>
				numer_wyzwolenia_przerwania = 0;
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
			}

		}
	}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000008c 	.word	0x2000008c
 800127c:	20000130 	.word	0x20000130
 8001280:	20000128 	.word	0x20000128
 8001284:	2000012c 	.word	0x2000012c
 8001288:	08005220 	.word	0x08005220

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012d6:	2007      	movs	r0, #7
 80012d8:	f000 faa4 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001308:	d134      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a28      	ldr	r2, [pc, #160]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4816      	ldr	r0, [pc, #88]	@ (80013b8 <HAL_TIM_Base_MspInit+0xd0>)
 800135e:	f000 faa3 	bl	80018a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201c      	movs	r0, #28
 8001368:	f000 fa67 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800136c:	201c      	movs	r0, #28
 800136e:	f000 fa80 	bl	8001872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001372:	e01a      	b.n	80013aa <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_TIM_Base_MspInit+0xd4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d115      	bne.n	80013aa <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201e      	movs	r0, #30
 80013a0:	f000 fa4b 	bl	800183a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013a4:	201e      	movs	r0, #30
 80013a6:	f000 fa64 	bl	8001872 <HAL_NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40000800 	.word	0x40000800

080013c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <HAL_TIM_MspPostInit+0x68>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d11e      	bne.n	8001420 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_TIM_MspPostInit+0x6c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <HAL_TIM_MspPostInit+0x6c>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_TIM_MspPostInit+0x6c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80013fe:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001402:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_TIM_MspPostInit+0x70>)
 800141c:	f000 fa44 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40000800 	.word	0x40000800
 800142c:	40023800 	.word	0x40023800
 8001430:	40020c00 	.word	0x40020c00

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 f8db 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001498:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <TIM2_IRQHandler+0x10>)
 800149a:	f001 fca9 	bl	8002df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000008c 	.word	0x2000008c

080014a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <TIM4_IRQHandler+0x10>)
 80014ae:	f001 fc9f 	bl	8002df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000d4 	.word	0x200000d4

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f003 f8be 	bl	800466c <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20020000 	.word	0x20020000
 800151c:	00000400 	.word	0x00000400
 8001520:	20000134 	.word	0x20000134
 8001524:	20000338 	.word	0x20000338

08001528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001550:	f7ff ffea 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001556:	490d      	ldr	r1, [pc, #52]	@ (800158c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800156c:	4c0a      	ldr	r4, [pc, #40]	@ (8001598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f003 f87d 	bl	8004678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157e:	f7ff fb05 	bl	8000b8c <main>
  bx  lr    
 8001582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001590:	080052b4 	.word	0x080052b4
  ldr r2, =_sbss
 8001594:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001598:	20000334 	.word	0x20000334

0800159c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <HAL_Init+0x40>)
 80015aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_Init+0x40>)
 80015b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x40>)
 80015c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 f92b 	bl	8001824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fe60 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023c00 	.word	0x40023c00

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f943 	bl	800188e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 f90b 	bl	800183a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000000 	.word	0x20000000
 800163c:	20000008 	.word	0x20000008
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x20>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x24>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <HAL_IncTick+0x24>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008
 8001668:	20000138 	.word	0x20000138

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b03      	ldr	r3, [pc, #12]	@ (8001680 <HAL_GetTick+0x14>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000138 	.word	0x20000138

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	@ (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4907      	ldr	r1, [pc, #28]	@ (8001720 <__NVIC_EnableIRQ+0x38>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	@ (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	@ (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f0:	d301      	bcc.n	80017f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00f      	b.n	8001816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <SysTick_Config+0x40>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fe:	210f      	movs	r1, #15
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f7ff ff8e 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <SysTick_Config+0x40>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <SysTick_Config+0x40>)
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	e000e010 	.word	0xe000e010

08001824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff29 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184c:	f7ff ff3e 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7ff ff8e 	bl	8001778 <NVIC_EncodePriority>
 800185c:	4602      	mov	r2, r0
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <__NVIC_SetPriority>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff31 	bl	80016e8 <__NVIC_EnableIRQ>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffa2 	bl	80017e0 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e159      	b.n	8001b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8148 	bne.w	8001b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d005      	beq.n	80018fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d130      	bne.n	800195c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001930:	2201      	movs	r2, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 0201 	and.w	r2, r3, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b03      	cmp	r3, #3
 8001966:	d017      	beq.n	8001998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a2 	beq.w	8001b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b57      	ldr	r3, [pc, #348]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3e:	4b54      	ldr	r3, [pc, #336]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4a:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a49      	ldr	r2, [pc, #292]	@ (8001b98 <HAL_GPIO_Init+0x2f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x202>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a48      	ldr	r2, [pc, #288]	@ (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x1fe>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a47      	ldr	r2, [pc, #284]	@ (8001ba0 <HAL_GPIO_Init+0x2f8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a46      	ldr	r2, [pc, #280]	@ (8001ba4 <HAL_GPIO_Init+0x2fc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x1f6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a45      	ldr	r2, [pc, #276]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x1f2>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x204>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1a      	ldr	r2, [pc, #104]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_GPIO_Init+0x304>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f aea2 	bls.w	80018c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e267      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d075      	beq.n	8001d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c36:	4b88      	ldr	r3, [pc, #544]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4b85      	ldr	r3, [pc, #532]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b82      	ldr	r3, [pc, #520]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d05b      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d157      	bne.n	8001d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e242      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_OscConfig+0x74>
 8001c7e:	4b76      	ldr	r3, [pc, #472]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a75      	ldr	r2, [pc, #468]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x98>
 8001c96:	4b70      	ldr	r3, [pc, #448]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6f      	ldr	r2, [pc, #444]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
 8001cb0:	4b69      	ldr	r3, [pc, #420]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a68      	ldr	r2, [pc, #416]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b66      	ldr	r3, [pc, #408]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a65      	ldr	r2, [pc, #404]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fccc 	bl	800166c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fcc8 	bl	800166c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e207      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b5b      	ldr	r3, [pc, #364]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7ff fcb8 	bl	800166c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fcb4 	bl	800166c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	@ 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1f3      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b51      	ldr	r3, [pc, #324]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0xe8>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b44      	ldr	r3, [pc, #272]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	4b41      	ldr	r3, [pc, #260]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x152>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1c7      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4937      	ldr	r1, [pc, #220]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	e03a      	b.n	8001df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <HAL_RCC_OscConfig+0x244>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fc6d 	bl	800166c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fc69 	bl	800166c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1a8      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4925      	ldr	r1, [pc, #148]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <HAL_RCC_OscConfig+0x244>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fc4c 	bl	800166c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc48 	bl	800166c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e187      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d036      	beq.n	8001e70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d016      	beq.n	8001e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_RCC_OscConfig+0x248>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e10:	f7ff fc2c 	bl	800166c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fc28 	bl	800166c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e167      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x200>
 8001e36:	e01b      	b.n	8001e70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <HAL_RCC_OscConfig+0x248>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fc15 	bl	800166c <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	e00e      	b.n	8001e64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fc11 	bl	800166c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d907      	bls.n	8001e64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e150      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	42470000 	.word	0x42470000
 8001e60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b88      	ldr	r3, [pc, #544]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ea      	bne.n	8001e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8097 	beq.w	8001fac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b81      	ldr	r3, [pc, #516]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b7d      	ldr	r3, [pc, #500]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4a7c      	ldr	r2, [pc, #496]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b77      	ldr	r3, [pc, #476]	@ (800208c <HAL_RCC_OscConfig+0x474>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4b74      	ldr	r3, [pc, #464]	@ (800208c <HAL_RCC_OscConfig+0x474>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a73      	ldr	r2, [pc, #460]	@ (800208c <HAL_RCC_OscConfig+0x474>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fbd1 	bl	800166c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ece:	f7ff fbcd 	bl	800166c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e10c      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800208c <HAL_RCC_OscConfig+0x474>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2ea>
 8001ef4:	4b64      	ldr	r3, [pc, #400]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef8:	4a63      	ldr	r2, [pc, #396]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f00:	e01c      	b.n	8001f3c <HAL_RCC_OscConfig+0x324>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x30c>
 8001f0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f16:	4b5c      	ldr	r3, [pc, #368]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0x324>
 8001f24:	4b58      	ldr	r3, [pc, #352]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f28:	4a57      	ldr	r2, [pc, #348]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f30:	4b55      	ldr	r3, [pc, #340]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	4a54      	ldr	r2, [pc, #336]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d015      	beq.n	8001f70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff fb92 	bl	800166c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fb8e 	bl	800166c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0cb      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f62:	4b49      	ldr	r3, [pc, #292]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0ee      	beq.n	8001f4c <HAL_RCC_OscConfig+0x334>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7ff fb7c 	bl	800166c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff fb78 	bl	800166c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e0b5      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1ee      	bne.n	8001f78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa0:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	4a38      	ldr	r2, [pc, #224]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 80a1 	beq.w	80020f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d05c      	beq.n	800207c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d141      	bne.n	800204e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_RCC_OscConfig+0x478>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fb4c 	bl	800166c <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff fb48 	bl	800166c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e087      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	019b      	lsls	r3, r3, #6
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	041b      	lsls	r3, r3, #16
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	061b      	lsls	r3, r3, #24
 800201a:	491b      	ldr	r1, [pc, #108]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <HAL_RCC_OscConfig+0x478>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7ff fb21 	bl	800166c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff fb1d 	bl	800166c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e05c      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x416>
 800204c:	e054      	b.n	80020f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_RCC_OscConfig+0x478>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fb0a 	bl	800166c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fb06 	bl	800166c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e045      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_RCC_OscConfig+0x470>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x444>
 800207a:	e03d      	b.n	80020f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d107      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e038      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000
 8002090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002094:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <HAL_RCC_OscConfig+0x4ec>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d028      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d121      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d11a      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d111      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	3b01      	subs	r3, #1
 80020de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0cc      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b68      	ldr	r3, [pc, #416]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d90c      	bls.n	8002144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b65      	ldr	r3, [pc, #404]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b63      	ldr	r3, [pc, #396]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0b8      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d020      	beq.n	8002192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800215c:	4b59      	ldr	r3, [pc, #356]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	4a58      	ldr	r2, [pc, #352]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002166:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002174:	4b53      	ldr	r3, [pc, #332]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800217e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b50      	ldr	r3, [pc, #320]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	494d      	ldr	r1, [pc, #308]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d044      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b47      	ldr	r3, [pc, #284]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e07f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b3f      	ldr	r3, [pc, #252]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e067      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b37      	ldr	r3, [pc, #220]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4934      	ldr	r1, [pc, #208]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7ff fa38 	bl	800166c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7ff fa34 	bl	800166c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e04f      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d20c      	bcs.n	8002250 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b22      	ldr	r3, [pc, #136]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b20      	ldr	r3, [pc, #128]	@ (80022c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e032      	b.n	80022b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b19      	ldr	r3, [pc, #100]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4916      	ldr	r1, [pc, #88]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227a:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	490e      	ldr	r1, [pc, #56]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800228e:	f000 f821 	bl	80022d4 <HAL_RCC_GetSysClockFreq>
 8002292:	4602      	mov	r2, r0
 8002294:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	490a      	ldr	r1, [pc, #40]	@ (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	5ccb      	ldrb	r3, [r1, r3]
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f998 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023c00 	.word	0x40023c00
 80022c4:	40023800 	.word	0x40023800
 80022c8:	08005244 	.word	0x08005244
 80022cc:	20000000 	.word	0x20000000
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d8:	b094      	sub	sp, #80	@ 0x50
 80022da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ec:	4b79      	ldr	r3, [pc, #484]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d00d      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x40>
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	f200 80e1 	bhi.w	80024c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x34>
 8002302:	2b04      	cmp	r3, #4
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x3a>
 8002306:	e0db      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b73      	ldr	r3, [pc, #460]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800230a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800230c:	e0db      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b73      	ldr	r3, [pc, #460]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002312:	e0d8      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002314:	4b6f      	ldr	r3, [pc, #444]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800231c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231e:	4b6d      	ldr	r3, [pc, #436]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d063      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232a:	4b6a      	ldr	r3, [pc, #424]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	2200      	movs	r2, #0
 8002332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002334:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	633b      	str	r3, [r7, #48]	@ 0x30
 800233e:	2300      	movs	r3, #0
 8002340:	637b      	str	r3, [r7, #52]	@ 0x34
 8002342:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002346:	4622      	mov	r2, r4
 8002348:	462b      	mov	r3, r5
 800234a:	f04f 0000 	mov.w	r0, #0
 800234e:	f04f 0100 	mov.w	r1, #0
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002358:	0150      	lsls	r0, r2, #5
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4621      	mov	r1, r4
 8002360:	1a51      	subs	r1, r2, r1
 8002362:	6139      	str	r1, [r7, #16]
 8002364:	4629      	mov	r1, r5
 8002366:	eb63 0301 	sbc.w	r3, r3, r1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002378:	4659      	mov	r1, fp
 800237a:	018b      	lsls	r3, r1, #6
 800237c:	4651      	mov	r1, sl
 800237e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002382:	4651      	mov	r1, sl
 8002384:	018a      	lsls	r2, r1, #6
 8002386:	4651      	mov	r1, sl
 8002388:	ebb2 0801 	subs.w	r8, r2, r1
 800238c:	4659      	mov	r1, fp
 800238e:	eb63 0901 	sbc.w	r9, r3, r1
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800239e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023a6:	4690      	mov	r8, r2
 80023a8:	4699      	mov	r9, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	eb18 0303 	adds.w	r3, r8, r3
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	462b      	mov	r3, r5
 80023b4:	eb49 0303 	adc.w	r3, r9, r3
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023c6:	4629      	mov	r1, r5
 80023c8:	024b      	lsls	r3, r1, #9
 80023ca:	4621      	mov	r1, r4
 80023cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d0:	4621      	mov	r1, r4
 80023d2:	024a      	lsls	r2, r1, #9
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023da:	2200      	movs	r2, #0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023e4:	f7fe fa5a 	bl	800089c <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4613      	mov	r3, r2
 80023ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f0:	e058      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4b38      	ldr	r3, [pc, #224]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	2200      	movs	r2, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	4611      	mov	r1, r2
 80023fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
 8002408:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800240c:	4642      	mov	r2, r8
 800240e:	464b      	mov	r3, r9
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	f04f 0100 	mov.w	r1, #0
 8002418:	0159      	lsls	r1, r3, #5
 800241a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241e:	0150      	lsls	r0, r2, #5
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4641      	mov	r1, r8
 8002426:	ebb2 0a01 	subs.w	sl, r2, r1
 800242a:	4649      	mov	r1, r9
 800242c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800243c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002440:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002444:	ebb2 040a 	subs.w	r4, r2, sl
 8002448:	eb63 050b 	sbc.w	r5, r3, fp
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	00eb      	lsls	r3, r5, #3
 8002456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245a:	00e2      	lsls	r2, r4, #3
 800245c:	4614      	mov	r4, r2
 800245e:	461d      	mov	r5, r3
 8002460:	4643      	mov	r3, r8
 8002462:	18e3      	adds	r3, r4, r3
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	464b      	mov	r3, r9
 8002468:	eb45 0303 	adc.w	r3, r5, r3
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247a:	4629      	mov	r1, r5
 800247c:	028b      	lsls	r3, r1, #10
 800247e:	4621      	mov	r1, r4
 8002480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002484:	4621      	mov	r1, r4
 8002486:	028a      	lsls	r2, r1, #10
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800248e:	2200      	movs	r2, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	61fa      	str	r2, [r7, #28]
 8002494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002498:	f7fe fa00 	bl	800089c <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80024c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3750      	adds	r7, #80	@ 0x50
 80024cc:	46bd      	mov	sp, r7
 80024ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	007a1200 	.word	0x007a1200

080024e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e041      	b.n	8002576 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe feee 	bl	80012e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f001 f830 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	d001      	beq.n	8002598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e044      	b.n	8002622 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_TIM_Base_Start_IT+0xb0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d018      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x6c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c2:	d013      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x6c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002634 <HAL_TIM_Base_Start_IT+0xb4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00e      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x6c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a19      	ldr	r2, [pc, #100]	@ (8002638 <HAL_TIM_Base_Start_IT+0xb8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d009      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x6c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a17      	ldr	r2, [pc, #92]	@ (800263c <HAL_TIM_Base_Start_IT+0xbc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d004      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x6c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a16      	ldr	r2, [pc, #88]	@ (8002640 <HAL_TIM_Base_Start_IT+0xc0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d111      	bne.n	8002610 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d010      	beq.n	8002620 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260e:	e007      	b.n	8002620 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40010000 	.word	0x40010000
 8002634:	40000400 	.word	0x40000400
 8002638:	40000800 	.word	0x40000800
 800263c:	40000c00 	.word	0x40000c00
 8002640:	40014000 	.word	0x40014000

08002644 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e041      	b.n	80026da <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f839 	bl	80026e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f000 ff7e 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_TIM_OC_Start+0x24>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e022      	b.n	8002762 <HAL_TIM_OC_Start+0x6a>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d109      	bne.n	8002736 <HAL_TIM_OC_Start+0x3e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e015      	b.n	8002762 <HAL_TIM_OC_Start+0x6a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d109      	bne.n	8002750 <HAL_TIM_OC_Start+0x58>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e008      	b.n	8002762 <HAL_TIM_OC_Start+0x6a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e068      	b.n	800283c <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_TIM_OC_Start+0x82>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002778:	e013      	b.n	80027a2 <HAL_TIM_OC_Start+0xaa>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d104      	bne.n	800278a <HAL_TIM_OC_Start+0x92>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002788:	e00b      	b.n	80027a2 <HAL_TIM_OC_Start+0xaa>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d104      	bne.n	800279a <HAL_TIM_OC_Start+0xa2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002798:	e003      	b.n	80027a2 <HAL_TIM_OC_Start+0xaa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 faba 	bl	8003d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a23      	ldr	r2, [pc, #140]	@ (8002844 <HAL_TIM_OC_Start+0x14c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_TIM_OC_Start+0x14c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d018      	beq.n	8002806 <HAL_TIM_OC_Start+0x10e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027dc:	d013      	beq.n	8002806 <HAL_TIM_OC_Start+0x10e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a19      	ldr	r2, [pc, #100]	@ (8002848 <HAL_TIM_OC_Start+0x150>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_TIM_OC_Start+0x10e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a17      	ldr	r2, [pc, #92]	@ (800284c <HAL_TIM_OC_Start+0x154>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_TIM_OC_Start+0x10e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a16      	ldr	r2, [pc, #88]	@ (8002850 <HAL_TIM_OC_Start+0x158>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_TIM_OC_Start+0x10e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <HAL_TIM_OC_Start+0x15c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d111      	bne.n	800282a <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d010      	beq.n	800283a <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	e007      	b.n	800283a <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40010000 	.word	0x40010000
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	40014000 	.word	0x40014000

08002858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e041      	b.n	80028ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f839 	bl	80028f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f000 fe74 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_TIM_PWM_Start_IT+0x28>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e022      	b.n	800297a <HAL_TIM_PWM_Start_IT+0x6e>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d109      	bne.n	800294e <HAL_TIM_PWM_Start_IT+0x42>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e015      	b.n	800297a <HAL_TIM_PWM_Start_IT+0x6e>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d109      	bne.n	8002968 <HAL_TIM_PWM_Start_IT+0x5c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e008      	b.n	800297a <HAL_TIM_PWM_Start_IT+0x6e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0b3      	b.n	8002aea <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start_IT+0x86>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002990:	e013      	b.n	80029ba <HAL_TIM_PWM_Start_IT+0xae>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start_IT+0x96>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029a0:	e00b      	b.n	80029ba <HAL_TIM_PWM_Start_IT+0xae>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start_IT+0xa6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b0:	e003      	b.n	80029ba <HAL_TIM_PWM_Start_IT+0xae>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d841      	bhi.n	8002a44 <HAL_TIM_PWM_Start_IT+0x138>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029fd 	.word	0x080029fd
 80029cc:	08002a45 	.word	0x08002a45
 80029d0:	08002a45 	.word	0x08002a45
 80029d4:	08002a45 	.word	0x08002a45
 80029d8:	08002a0f 	.word	0x08002a0f
 80029dc:	08002a45 	.word	0x08002a45
 80029e0:	08002a45 	.word	0x08002a45
 80029e4:	08002a45 	.word	0x08002a45
 80029e8:	08002a21 	.word	0x08002a21
 80029ec:	08002a45 	.word	0x08002a45
 80029f0:	08002a45 	.word	0x08002a45
 80029f4:	08002a45 	.word	0x08002a45
 80029f8:	08002a33 	.word	0x08002a33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0202 	orr.w	r2, r2, #2
 8002a0a:	60da      	str	r2, [r3, #12]
      break;
 8002a0c:	e01d      	b.n	8002a4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0204 	orr.w	r2, r2, #4
 8002a1c:	60da      	str	r2, [r3, #12]
      break;
 8002a1e:	e014      	b.n	8002a4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	60da      	str	r2, [r3, #12]
      break;
 8002a30:	e00b      	b.n	8002a4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0210 	orr.w	r2, r2, #16
 8002a40:	60da      	str	r2, [r3, #12]
      break;
 8002a42:	e002      	b.n	8002a4a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d14b      	bne.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f963 	bl	8003d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a24      	ldr	r2, [pc, #144]	@ (8002af4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d107      	bne.n	8002a78 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a76:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d018      	beq.n	8002ab4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8a:	d013      	beq.n	8002ab4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a16      	ldr	r2, [pc, #88]	@ (8002b00 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d010      	beq.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	e007      	b.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	40000c00 	.word	0x40000c00
 8002b04:	40014000 	.word	0x40014000

08002b08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e041      	b.n	8002b9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f839 	bl	8002ba6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fd1c 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_IC_Start_IT+0x1e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e013      	b.n	8002c02 <HAL_TIM_IC_Start_IT+0x46>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d104      	bne.n	8002bea <HAL_TIM_IC_Start_IT+0x2e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	e00b      	b.n	8002c02 <HAL_TIM_IC_Start_IT+0x46>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d104      	bne.n	8002bfa <HAL_TIM_IC_Start_IT+0x3e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	e003      	b.n	8002c02 <HAL_TIM_IC_Start_IT+0x46>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <HAL_TIM_IC_Start_IT+0x58>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e013      	b.n	8002c3c <HAL_TIM_IC_Start_IT+0x80>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d104      	bne.n	8002c24 <HAL_TIM_IC_Start_IT+0x68>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e00b      	b.n	8002c3c <HAL_TIM_IC_Start_IT+0x80>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d104      	bne.n	8002c34 <HAL_TIM_IC_Start_IT+0x78>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e003      	b.n	8002c3c <HAL_TIM_IC_Start_IT+0x80>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c3e:	7bbb      	ldrb	r3, [r7, #14]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c44:	7b7b      	ldrb	r3, [r7, #13]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0c2      	b.n	8002dd4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_IC_Start_IT+0xa2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c5c:	e013      	b.n	8002c86 <HAL_TIM_IC_Start_IT+0xca>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_IC_Start_IT+0xb2>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c6c:	e00b      	b.n	8002c86 <HAL_TIM_IC_Start_IT+0xca>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_IC_Start_IT+0xc2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c7c:	e003      	b.n	8002c86 <HAL_TIM_IC_Start_IT+0xca>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_IC_Start_IT+0xda>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c94:	e013      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x102>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_IC_Start_IT+0xea>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca4:	e00b      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x102>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d104      	bne.n	8002cb6 <HAL_TIM_IC_Start_IT+0xfa>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb4:	e003      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x102>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d841      	bhi.n	8002d48 <HAL_TIM_IC_Start_IT+0x18c>
 8002cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ccc <HAL_TIM_IC_Start_IT+0x110>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002d01 	.word	0x08002d01
 8002cd0:	08002d49 	.word	0x08002d49
 8002cd4:	08002d49 	.word	0x08002d49
 8002cd8:	08002d49 	.word	0x08002d49
 8002cdc:	08002d13 	.word	0x08002d13
 8002ce0:	08002d49 	.word	0x08002d49
 8002ce4:	08002d49 	.word	0x08002d49
 8002ce8:	08002d49 	.word	0x08002d49
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d49 	.word	0x08002d49
 8002cf4:	08002d49 	.word	0x08002d49
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d37 	.word	0x08002d37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0202 	orr.w	r2, r2, #2
 8002d0e:	60da      	str	r2, [r3, #12]
      break;
 8002d10:	e01d      	b.n	8002d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0204 	orr.w	r2, r2, #4
 8002d20:	60da      	str	r2, [r3, #12]
      break;
 8002d22:	e014      	b.n	8002d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	60da      	str	r2, [r3, #12]
      break;
 8002d34:	e00b      	b.n	8002d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0210 	orr.w	r2, r2, #16
 8002d44:	60da      	str	r2, [r3, #12]
      break;
 8002d46:	e002      	b.n	8002d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d13e      	bne.n	8002dd2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	6839      	ldr	r1, [r7, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 ffe1 	bl	8003d24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1d      	ldr	r2, [pc, #116]	@ (8002ddc <HAL_TIM_IC_Start_IT+0x220>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d74:	d013      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	@ (8002de0 <HAL_TIM_IC_Start_IT+0x224>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_TIM_IC_Start_IT+0x228>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a14      	ldr	r2, [pc, #80]	@ (8002dec <HAL_TIM_IC_Start_IT+0x230>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d010      	beq.n	8002dd2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	e007      	b.n	8002dd2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00
 8002dec:	40014000 	.word	0x40014000

08002df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d020      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01b      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0202 	mvn.w	r2, #2
 8002e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe f9e4 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fb8a 	bl	800355c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7fe f991 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d020      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0204 	mvn.w	r2, #4
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f9be 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fb64 	bl	800355c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe f96b 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d020      	beq.n	8002eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01b      	beq.n	8002eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0208 	mvn.w	r2, #8
 8002ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe f998 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 8002ed8:	e005      	b.n	8002ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fb3e 	bl	800355c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe f945 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d020      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0210 	mvn.w	r2, #16
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe f972 	bl	8001208 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fb18 	bl	800355c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7fe f91f 	bl	8001170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0201 	mvn.w	r2, #1
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f8f6 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d007      	beq.n	8002f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 ff70 	bl	8003e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00c      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fae6 	bl	8003570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00c      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0220 	mvn.w	r2, #32
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 ff42 	bl	8003e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_OC_ConfigChannel+0x1e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e048      	b.n	8003080 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d839      	bhi.n	8003070 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	08003071 	.word	0x08003071
 800300c:	08003071 	.word	0x08003071
 8003010:	08003071 	.word	0x08003071
 8003014:	08003047 	.word	0x08003047
 8003018:	08003071 	.word	0x08003071
 800301c:	08003071 	.word	0x08003071
 8003020:	08003071 	.word	0x08003071
 8003024:	08003055 	.word	0x08003055
 8003028:	08003071 	.word	0x08003071
 800302c:	08003071 	.word	0x08003071
 8003030:	08003071 	.word	0x08003071
 8003034:	08003063 	.word	0x08003063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fb2c 	bl	800369c <TIM_OC1_SetConfig>
      break;
 8003044:	e017      	b.n	8003076 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fb8b 	bl	8003768 <TIM_OC2_SetConfig>
      break;
 8003052:	e010      	b.n	8003076 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fbf0 	bl	8003840 <TIM_OC3_SetConfig>
      break;
 8003060:	e009      	b.n	8003076 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fc53 	bl	8003914 <TIM_OC4_SetConfig>
      break;
 800306e:	e002      	b.n	8003076 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e088      	b.n	80031b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80030c4:	f000 fc76 	bl	80039b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 020c 	bic.w	r2, r2, #12
 80030d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	619a      	str	r2, [r3, #24]
 80030ea:	e060      	b.n	80031ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d11c      	bne.n	800312c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003102:	f000 fcee 	bl	8003ae2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003114:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6999      	ldr	r1, [r3, #24]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	021a      	lsls	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	619a      	str	r2, [r3, #24]
 800312a:	e040      	b.n	80031ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d11b      	bne.n	800316a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003142:	f000 fd3b 	bl	8003bbc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69da      	ldr	r2, [r3, #28]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 020c 	bic.w	r2, r2, #12
 8003154:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69d9      	ldr	r1, [r3, #28]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	61da      	str	r2, [r3, #28]
 8003168:	e021      	b.n	80031ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0c      	cmp	r3, #12
 800316e:	d11c      	bne.n	80031aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003180:	f000 fd58 	bl	8003c34 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003192:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69d9      	ldr	r1, [r3, #28]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
 80031a8:	e001      	b.n	80031ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0ae      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	f200 809f 	bhi.w	800332c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031ee:	a201      	add	r2, pc, #4	@ (adr r2, 80031f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003229 	.word	0x08003229
 80031f8:	0800332d 	.word	0x0800332d
 80031fc:	0800332d 	.word	0x0800332d
 8003200:	0800332d 	.word	0x0800332d
 8003204:	08003269 	.word	0x08003269
 8003208:	0800332d 	.word	0x0800332d
 800320c:	0800332d 	.word	0x0800332d
 8003210:	0800332d 	.word	0x0800332d
 8003214:	080032ab 	.word	0x080032ab
 8003218:	0800332d 	.word	0x0800332d
 800321c:	0800332d 	.word	0x0800332d
 8003220:	0800332d 	.word	0x0800332d
 8003224:	080032eb 	.word	0x080032eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fa34 	bl	800369c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0208 	orr.w	r2, r2, #8
 8003242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0204 	bic.w	r2, r2, #4
 8003252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	619a      	str	r2, [r3, #24]
      break;
 8003266:	e064      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fa7a 	bl	8003768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6999      	ldr	r1, [r3, #24]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	021a      	lsls	r2, r3, #8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	619a      	str	r2, [r3, #24]
      break;
 80032a8:	e043      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68b9      	ldr	r1, [r7, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fac5 	bl	8003840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0208 	orr.w	r2, r2, #8
 80032c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0204 	bic.w	r2, r2, #4
 80032d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	61da      	str	r2, [r3, #28]
      break;
 80032e8:	e023      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fb0f 	bl	8003914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69d9      	ldr	r1, [r3, #28]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	021a      	lsls	r2, r3, #8
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	61da      	str	r2, [r3, #28]
      break;
 800332a:	e002      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	75fb      	strb	r3, [r7, #23]
      break;
 8003330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIM_ConfigClockSource+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e0b4      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x186>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800337e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003398:	d03e      	beq.n	8003418 <HAL_TIM_ConfigClockSource+0xd4>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339e:	f200 8087 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	f000 8086 	beq.w	80034b6 <HAL_TIM_ConfigClockSource+0x172>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	d87f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b70      	cmp	r3, #112	@ 0x70
 80033b2:	d01a      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0xa6>
 80033b4:	2b70      	cmp	r3, #112	@ 0x70
 80033b6:	d87b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b60      	cmp	r3, #96	@ 0x60
 80033ba:	d050      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x11a>
 80033bc:	2b60      	cmp	r3, #96	@ 0x60
 80033be:	d877      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b50      	cmp	r3, #80	@ 0x50
 80033c2:	d03c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0xfa>
 80033c4:	2b50      	cmp	r3, #80	@ 0x50
 80033c6:	d873      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d058      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x13a>
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d86f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b30      	cmp	r3, #48	@ 0x30
 80033d2:	d064      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033d4:	2b30      	cmp	r3, #48	@ 0x30
 80033d6:	d86b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d060      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d867      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05c      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d05a      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033e8:	e062      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	f000 fc73 	bl	8003ce4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800340c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
      break;
 8003416:	e04f      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003428:	f000 fc5c 	bl	8003ce4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800343a:	609a      	str	r2, [r3, #8]
      break;
 800343c:	e03c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344a:	461a      	mov	r2, r3
 800344c:	f000 fb1a 	bl	8003a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2150      	movs	r1, #80	@ 0x50
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fc29 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800345c:	e02c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fb76 	bl	8003b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2160      	movs	r1, #96	@ 0x60
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fc19 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800347c:	e01c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fafa 	bl	8003a84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2140      	movs	r1, #64	@ 0x40
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fc09 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800349c:	e00c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f000 fc00 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 80034ae:	e003      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e000      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d831      	bhi.n	800354c <HAL_TIM_ReadCapturedValue+0x78>
 80034e8:	a201      	add	r2, pc, #4	@ (adr r2, 80034f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003525 	.word	0x08003525
 80034f4:	0800354d 	.word	0x0800354d
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	0800354d 	.word	0x0800354d
 8003500:	0800352f 	.word	0x0800352f
 8003504:	0800354d 	.word	0x0800354d
 8003508:	0800354d 	.word	0x0800354d
 800350c:	0800354d 	.word	0x0800354d
 8003510:	08003539 	.word	0x08003539
 8003514:	0800354d 	.word	0x0800354d
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800354d 	.word	0x0800354d
 8003520:	08003543 	.word	0x08003543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	60fb      	str	r3, [r7, #12]

      break;
 800352c:	e00f      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	60fb      	str	r3, [r7, #12]

      break;
 8003536:	e00a      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353e:	60fb      	str	r3, [r7, #12]

      break;
 8003540:	e005      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	60fb      	str	r3, [r7, #12]

      break;
 800354a:	e000      	b.n	800354e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800354c:	bf00      	nop
  }

  return tmpreg;
 800354e:	68fb      	ldr	r3, [r7, #12]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3a      	ldr	r2, [pc, #232]	@ (8003680 <TIM_Base_SetConfig+0xfc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a37      	ldr	r2, [pc, #220]	@ (8003684 <TIM_Base_SetConfig+0x100>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a36      	ldr	r2, [pc, #216]	@ (8003688 <TIM_Base_SetConfig+0x104>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x38>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a35      	ldr	r2, [pc, #212]	@ (800368c <TIM_Base_SetConfig+0x108>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003680 <TIM_Base_SetConfig+0xfc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01b      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035dc:	d017      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a28      	ldr	r2, [pc, #160]	@ (8003684 <TIM_Base_SetConfig+0x100>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a27      	ldr	r2, [pc, #156]	@ (8003688 <TIM_Base_SetConfig+0x104>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00f      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a26      	ldr	r2, [pc, #152]	@ (800368c <TIM_Base_SetConfig+0x108>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a25      	ldr	r2, [pc, #148]	@ (8003690 <TIM_Base_SetConfig+0x10c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a24      	ldr	r2, [pc, #144]	@ (8003694 <TIM_Base_SetConfig+0x110>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <TIM_Base_SetConfig+0x114>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d108      	bne.n	8003620 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0e      	ldr	r2, [pc, #56]	@ (8003680 <TIM_Base_SetConfig+0xfc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
  }
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40010000 	.word	0x40010000
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800

0800369c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 0201 	bic.w	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f023 0302 	bic.w	r3, r3, #2
 80036e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003764 <TIM_OC1_SetConfig+0xc8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10c      	bne.n	8003712 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0308 	bic.w	r3, r3, #8
 80036fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <TIM_OC1_SetConfig+0xc8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d111      	bne.n	800373e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40010000 	.word	0x40010000

08003768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0210 	bic.w	r2, r3, #16
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800379e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0320 	bic.w	r3, r3, #32
 80037b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1e      	ldr	r2, [pc, #120]	@ (800383c <TIM_OC2_SetConfig+0xd4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10d      	bne.n	80037e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a15      	ldr	r2, [pc, #84]	@ (800383c <TIM_OC2_SetConfig+0xd4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d113      	bne.n	8003814 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000

08003840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <TIM_OC3_SetConfig+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d10d      	bne.n	80038ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <TIM_OC3_SetConfig+0xd0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d113      	bne.n	80038ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	621a      	str	r2, [r3, #32]
}
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40010000 	.word	0x40010000

08003914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800394a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800395e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	031b      	lsls	r3, r3, #12
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a10      	ldr	r2, [pc, #64]	@ (80039b0 <TIM_OC4_SetConfig+0x9c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d109      	bne.n	8003988 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800397a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	019b      	lsls	r3, r3, #6
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000

080039b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f023 0201 	bic.w	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a24      	ldr	r2, [pc, #144]	@ (8003a70 <TIM_TI1_SetConfig+0xbc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <TIM_TI1_SetConfig+0x56>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e8:	d00f      	beq.n	8003a0a <TIM_TI1_SetConfig+0x56>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a21      	ldr	r2, [pc, #132]	@ (8003a74 <TIM_TI1_SetConfig+0xc0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_TI1_SetConfig+0x56>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a20      	ldr	r2, [pc, #128]	@ (8003a78 <TIM_TI1_SetConfig+0xc4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_TI1_SetConfig+0x56>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <TIM_TI1_SetConfig+0xc8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_TI1_SetConfig+0x56>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <TIM_TI1_SetConfig+0xcc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <TIM_TI1_SetConfig+0x5a>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <TIM_TI1_SetConfig+0x5c>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e003      	b.n	8003a2e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f023 030a 	bic.w	r3, r3, #10
 8003a48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f003 030a 	and.w	r3, r3, #10
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40014000 	.word	0x40014000

08003a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 030a 	bic.w	r3, r3, #10
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b087      	sub	sp, #28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
 8003aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0210 	bic.w	r2, r3, #16
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	031b      	lsls	r3, r3, #12
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0210 	bic.w	r2, r3, #16
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	031b      	lsls	r3, r3, #12
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f023 0303 	bic.w	r3, r3, #3
 8003be8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bf8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	031b      	lsls	r3, r3, #12
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003c86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	031b      	lsls	r3, r3, #12
 8003c8c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 0307 	orr.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e050      	b.n	8003e2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd4:	d013      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a18      	ldr	r2, [pc, #96]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a15      	ldr	r2, [pc, #84]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a13      	ldr	r2, [pc, #76]	@ (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10c      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40014000 	.word	0x40014000

08003e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <findslot>:
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <findslot+0x2c>)
 8003e76:	b510      	push	{r4, lr}
 8003e78:	4604      	mov	r4, r0
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	b118      	cbz	r0, 8003e86 <findslot+0x12>
 8003e7e:	6a03      	ldr	r3, [r0, #32]
 8003e80:	b90b      	cbnz	r3, 8003e86 <findslot+0x12>
 8003e82:	f000 fb19 	bl	80044b8 <__sinit>
 8003e86:	2c13      	cmp	r4, #19
 8003e88:	d807      	bhi.n	8003e9a <findslot+0x26>
 8003e8a:	4806      	ldr	r0, [pc, #24]	@ (8003ea4 <findslot+0x30>)
 8003e8c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003e90:	3201      	adds	r2, #1
 8003e92:	d002      	beq.n	8003e9a <findslot+0x26>
 8003e94:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003e98:	bd10      	pop	{r4, pc}
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e7fc      	b.n	8003e98 <findslot+0x24>
 8003e9e:	bf00      	nop
 8003ea0:	20000020 	.word	0x20000020
 8003ea4:	20000148 	.word	0x20000148

08003ea8 <error>:
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	4604      	mov	r4, r0
 8003eac:	f000 fbde 	bl	800466c <__errno>
 8003eb0:	2613      	movs	r6, #19
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	2700      	movs	r7, #0
 8003eb6:	4630      	mov	r0, r6
 8003eb8:	4639      	mov	r1, r7
 8003eba:	beab      	bkpt	0x00ab
 8003ebc:	4606      	mov	r6, r0
 8003ebe:	602e      	str	r6, [r5, #0]
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ec4 <checkerror>:
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d101      	bne.n	8003ecc <checkerror+0x8>
 8003ec8:	f7ff bfee 	b.w	8003ea8 <error>
 8003ecc:	4770      	bx	lr

08003ece <_swiread>:
 8003ece:	b530      	push	{r4, r5, lr}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003ed6:	9203      	str	r2, [sp, #12]
 8003ed8:	2406      	movs	r4, #6
 8003eda:	ad01      	add	r5, sp, #4
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	beab      	bkpt	0x00ab
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff ffed 	bl	8003ec4 <checkerror>
 8003eea:	b005      	add	sp, #20
 8003eec:	bd30      	pop	{r4, r5, pc}

08003eee <_read>:
 8003eee:	b570      	push	{r4, r5, r6, lr}
 8003ef0:	460e      	mov	r6, r1
 8003ef2:	4614      	mov	r4, r2
 8003ef4:	f7ff ffbe 	bl	8003e74 <findslot>
 8003ef8:	4605      	mov	r5, r0
 8003efa:	b930      	cbnz	r0, 8003f0a <_read+0x1c>
 8003efc:	f000 fbb6 	bl	800466c <__errno>
 8003f00:	2309      	movs	r3, #9
 8003f02:	6003      	str	r3, [r0, #0]
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	bd70      	pop	{r4, r5, r6, pc}
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4631      	mov	r1, r6
 8003f10:	f7ff ffdd 	bl	8003ece <_swiread>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d0f5      	beq.n	8003f04 <_read+0x16>
 8003f18:	686b      	ldr	r3, [r5, #4]
 8003f1a:	1a20      	subs	r0, r4, r0
 8003f1c:	4403      	add	r3, r0
 8003f1e:	606b      	str	r3, [r5, #4]
 8003f20:	e7f2      	b.n	8003f08 <_read+0x1a>

08003f22 <_swilseek>:
 8003f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f24:	460c      	mov	r4, r1
 8003f26:	4616      	mov	r6, r2
 8003f28:	f7ff ffa4 	bl	8003e74 <findslot>
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	b940      	cbnz	r0, 8003f42 <_swilseek+0x20>
 8003f30:	f000 fb9c 	bl	800466c <__errno>
 8003f34:	2309      	movs	r3, #9
 8003f36:	6003      	str	r3, [r0, #0]
 8003f38:	f04f 34ff 	mov.w	r4, #4294967295
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	b003      	add	sp, #12
 8003f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f42:	2e02      	cmp	r6, #2
 8003f44:	d903      	bls.n	8003f4e <_swilseek+0x2c>
 8003f46:	f000 fb91 	bl	800466c <__errno>
 8003f4a:	2316      	movs	r3, #22
 8003f4c:	e7f3      	b.n	8003f36 <_swilseek+0x14>
 8003f4e:	2e01      	cmp	r6, #1
 8003f50:	d112      	bne.n	8003f78 <_swilseek+0x56>
 8003f52:	6843      	ldr	r3, [r0, #4]
 8003f54:	18e4      	adds	r4, r4, r3
 8003f56:	d4f6      	bmi.n	8003f46 <_swilseek+0x24>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	260a      	movs	r6, #10
 8003f5c:	e9cd 3400 	strd	r3, r4, [sp]
 8003f60:	466f      	mov	r7, sp
 8003f62:	4630      	mov	r0, r6
 8003f64:	4639      	mov	r1, r7
 8003f66:	beab      	bkpt	0x00ab
 8003f68:	4606      	mov	r6, r0
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f7ff ffaa 	bl	8003ec4 <checkerror>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	dbe1      	blt.n	8003f38 <_swilseek+0x16>
 8003f74:	606c      	str	r4, [r5, #4]
 8003f76:	e7e1      	b.n	8003f3c <_swilseek+0x1a>
 8003f78:	2e02      	cmp	r6, #2
 8003f7a:	6803      	ldr	r3, [r0, #0]
 8003f7c:	d1ec      	bne.n	8003f58 <_swilseek+0x36>
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	260c      	movs	r6, #12
 8003f82:	466f      	mov	r7, sp
 8003f84:	4630      	mov	r0, r6
 8003f86:	4639      	mov	r1, r7
 8003f88:	beab      	bkpt	0x00ab
 8003f8a:	4606      	mov	r6, r0
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff ff99 	bl	8003ec4 <checkerror>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	d0d0      	beq.n	8003f38 <_swilseek+0x16>
 8003f96:	4404      	add	r4, r0
 8003f98:	e7de      	b.n	8003f58 <_swilseek+0x36>

08003f9a <_lseek>:
 8003f9a:	f7ff bfc2 	b.w	8003f22 <_swilseek>

08003f9e <_swiwrite>:
 8003f9e:	b530      	push	{r4, r5, lr}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003fa6:	9203      	str	r2, [sp, #12]
 8003fa8:	2405      	movs	r4, #5
 8003faa:	ad01      	add	r5, sp, #4
 8003fac:	4620      	mov	r0, r4
 8003fae:	4629      	mov	r1, r5
 8003fb0:	beab      	bkpt	0x00ab
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7ff ff85 	bl	8003ec4 <checkerror>
 8003fba:	b005      	add	sp, #20
 8003fbc:	bd30      	pop	{r4, r5, pc}

08003fbe <_write>:
 8003fbe:	b570      	push	{r4, r5, r6, lr}
 8003fc0:	460e      	mov	r6, r1
 8003fc2:	4615      	mov	r5, r2
 8003fc4:	f7ff ff56 	bl	8003e74 <findslot>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	b930      	cbnz	r0, 8003fda <_write+0x1c>
 8003fcc:	f000 fb4e 	bl	800466c <__errno>
 8003fd0:	2309      	movs	r3, #9
 8003fd2:	6003      	str	r3, [r0, #0]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	462a      	mov	r2, r5
 8003fde:	4631      	mov	r1, r6
 8003fe0:	f7ff ffdd 	bl	8003f9e <_swiwrite>
 8003fe4:	1e03      	subs	r3, r0, #0
 8003fe6:	dbf5      	blt.n	8003fd4 <_write+0x16>
 8003fe8:	6862      	ldr	r2, [r4, #4]
 8003fea:	1ae8      	subs	r0, r5, r3
 8003fec:	4402      	add	r2, r0
 8003fee:	42ab      	cmp	r3, r5
 8003ff0:	6062      	str	r2, [r4, #4]
 8003ff2:	d1f1      	bne.n	8003fd8 <_write+0x1a>
 8003ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7ff bf55 	b.w	8003ea8 <error>

08003ffe <_swiclose>:
 8003ffe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004000:	2402      	movs	r4, #2
 8004002:	9001      	str	r0, [sp, #4]
 8004004:	ad01      	add	r5, sp, #4
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	beab      	bkpt	0x00ab
 800400c:	4604      	mov	r4, r0
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff ff58 	bl	8003ec4 <checkerror>
 8004014:	b003      	add	sp, #12
 8004016:	bd30      	pop	{r4, r5, pc}

08004018 <_close>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4605      	mov	r5, r0
 800401c:	f7ff ff2a 	bl	8003e74 <findslot>
 8004020:	4604      	mov	r4, r0
 8004022:	b930      	cbnz	r0, 8004032 <_close+0x1a>
 8004024:	f000 fb22 	bl	800466c <__errno>
 8004028:	2309      	movs	r3, #9
 800402a:	6003      	str	r3, [r0, #0]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	bd38      	pop	{r3, r4, r5, pc}
 8004032:	3d01      	subs	r5, #1
 8004034:	2d01      	cmp	r5, #1
 8004036:	d809      	bhi.n	800404c <_close+0x34>
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <_close+0x40>)
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	429a      	cmp	r2, r3
 8004040:	d104      	bne.n	800404c <_close+0x34>
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	2000      	movs	r0, #0
 800404a:	e7f1      	b.n	8004030 <_close+0x18>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	f7ff ffd6 	bl	8003ffe <_swiclose>
 8004052:	2800      	cmp	r0, #0
 8004054:	d0f5      	beq.n	8004042 <_close+0x2a>
 8004056:	e7eb      	b.n	8004030 <_close+0x18>
 8004058:	20000148 	.word	0x20000148

0800405c <_swistat>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	460c      	mov	r4, r1
 8004060:	f7ff ff08 	bl	8003e74 <findslot>
 8004064:	4605      	mov	r5, r0
 8004066:	b930      	cbnz	r0, 8004076 <_swistat+0x1a>
 8004068:	f000 fb00 	bl	800466c <__errno>
 800406c:	2309      	movs	r3, #9
 800406e:	6003      	str	r3, [r0, #0]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	bd70      	pop	{r4, r5, r6, pc}
 8004076:	6863      	ldr	r3, [r4, #4]
 8004078:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800407c:	6063      	str	r3, [r4, #4]
 800407e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004082:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004084:	260c      	movs	r6, #12
 8004086:	4630      	mov	r0, r6
 8004088:	4629      	mov	r1, r5
 800408a:	beab      	bkpt	0x00ab
 800408c:	4605      	mov	r5, r0
 800408e:	4628      	mov	r0, r5
 8004090:	f7ff ff18 	bl	8003ec4 <checkerror>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d0eb      	beq.n	8004070 <_swistat+0x14>
 8004098:	6120      	str	r0, [r4, #16]
 800409a:	2000      	movs	r0, #0
 800409c:	e7ea      	b.n	8004074 <_swistat+0x18>

0800409e <_fstat>:
 800409e:	460b      	mov	r3, r1
 80040a0:	b510      	push	{r4, lr}
 80040a2:	2100      	movs	r1, #0
 80040a4:	4604      	mov	r4, r0
 80040a6:	2258      	movs	r2, #88	@ 0x58
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fa90 	bl	80045ce <memset>
 80040ae:	4601      	mov	r1, r0
 80040b0:	4620      	mov	r0, r4
 80040b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b6:	f7ff bfd1 	b.w	800405c <_swistat>

080040ba <_stat>:
 80040ba:	b538      	push	{r3, r4, r5, lr}
 80040bc:	460d      	mov	r5, r1
 80040be:	4604      	mov	r4, r0
 80040c0:	2258      	movs	r2, #88	@ 0x58
 80040c2:	2100      	movs	r1, #0
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 fa82 	bl	80045ce <memset>
 80040ca:	4620      	mov	r0, r4
 80040cc:	2100      	movs	r1, #0
 80040ce:	f000 f811 	bl	80040f4 <_swiopen>
 80040d2:	1c43      	adds	r3, r0, #1
 80040d4:	4604      	mov	r4, r0
 80040d6:	d00b      	beq.n	80040f0 <_stat+0x36>
 80040d8:	686b      	ldr	r3, [r5, #4]
 80040da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80040de:	606b      	str	r3, [r5, #4]
 80040e0:	4629      	mov	r1, r5
 80040e2:	f7ff ffbb 	bl	800405c <_swistat>
 80040e6:	4605      	mov	r5, r0
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff ff95 	bl	8004018 <_close>
 80040ee:	462c      	mov	r4, r5
 80040f0:	4620      	mov	r0, r4
 80040f2:	bd38      	pop	{r3, r4, r5, pc}

080040f4 <_swiopen>:
 80040f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f8:	4f29      	ldr	r7, [pc, #164]	@ (80041a0 <_swiopen+0xac>)
 80040fa:	b096      	sub	sp, #88	@ 0x58
 80040fc:	4682      	mov	sl, r0
 80040fe:	460e      	mov	r6, r1
 8004100:	2400      	movs	r4, #0
 8004102:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8004106:	3301      	adds	r3, #1
 8004108:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800410c:	d00c      	beq.n	8004128 <_swiopen+0x34>
 800410e:	3401      	adds	r4, #1
 8004110:	2c14      	cmp	r4, #20
 8004112:	d1f6      	bne.n	8004102 <_swiopen+0xe>
 8004114:	f000 faaa 	bl	800466c <__errno>
 8004118:	2318      	movs	r3, #24
 800411a:	6003      	str	r3, [r0, #0]
 800411c:	f04f 34ff 	mov.w	r4, #4294967295
 8004120:	4620      	mov	r0, r4
 8004122:	b016      	add	sp, #88	@ 0x58
 8004124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004128:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800412c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004130:	46e9      	mov	r9, sp
 8004132:	d109      	bne.n	8004148 <_swiopen+0x54>
 8004134:	4649      	mov	r1, r9
 8004136:	4650      	mov	r0, sl
 8004138:	f7ff ffbf 	bl	80040ba <_stat>
 800413c:	3001      	adds	r0, #1
 800413e:	d003      	beq.n	8004148 <_swiopen+0x54>
 8004140:	f000 fa94 	bl	800466c <__errno>
 8004144:	2311      	movs	r3, #17
 8004146:	e7e8      	b.n	800411a <_swiopen+0x26>
 8004148:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800414c:	f240 6301 	movw	r3, #1537	@ 0x601
 8004150:	07b2      	lsls	r2, r6, #30
 8004152:	bf48      	it	mi
 8004154:	f045 0502 	orrmi.w	r5, r5, #2
 8004158:	421e      	tst	r6, r3
 800415a:	bf18      	it	ne
 800415c:	f045 0504 	orrne.w	r5, r5, #4
 8004160:	0733      	lsls	r3, r6, #28
 8004162:	bf48      	it	mi
 8004164:	f025 0504 	bicmi.w	r5, r5, #4
 8004168:	4650      	mov	r0, sl
 800416a:	bf48      	it	mi
 800416c:	f045 0508 	orrmi.w	r5, r5, #8
 8004170:	f8cd a000 	str.w	sl, [sp]
 8004174:	f7fc f834 	bl	80001e0 <strlen>
 8004178:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800417c:	2501      	movs	r5, #1
 800417e:	4628      	mov	r0, r5
 8004180:	4649      	mov	r1, r9
 8004182:	beab      	bkpt	0x00ab
 8004184:	4605      	mov	r5, r0
 8004186:	2d00      	cmp	r5, #0
 8004188:	db05      	blt.n	8004196 <_swiopen+0xa2>
 800418a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800418e:	4447      	add	r7, r8
 8004190:	2300      	movs	r3, #0
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	e7c4      	b.n	8004120 <_swiopen+0x2c>
 8004196:	4628      	mov	r0, r5
 8004198:	f7ff fe86 	bl	8003ea8 <error>
 800419c:	4604      	mov	r4, r0
 800419e:	e7bf      	b.n	8004120 <_swiopen+0x2c>
 80041a0:	20000148 	.word	0x20000148

080041a4 <_get_semihosting_exts>:
 80041a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80041a8:	4606      	mov	r6, r0
 80041aa:	460f      	mov	r7, r1
 80041ac:	4829      	ldr	r0, [pc, #164]	@ (8004254 <_get_semihosting_exts+0xb0>)
 80041ae:	2100      	movs	r1, #0
 80041b0:	4615      	mov	r5, r2
 80041b2:	f7ff ff9f 	bl	80040f4 <_swiopen>
 80041b6:	462a      	mov	r2, r5
 80041b8:	4604      	mov	r4, r0
 80041ba:	2100      	movs	r1, #0
 80041bc:	4630      	mov	r0, r6
 80041be:	f000 fa06 	bl	80045ce <memset>
 80041c2:	1c63      	adds	r3, r4, #1
 80041c4:	d014      	beq.n	80041f0 <_get_semihosting_exts+0x4c>
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7ff fe54 	bl	8003e74 <findslot>
 80041cc:	f04f 080c 	mov.w	r8, #12
 80041d0:	4681      	mov	r9, r0
 80041d2:	4640      	mov	r0, r8
 80041d4:	4649      	mov	r1, r9
 80041d6:	beab      	bkpt	0x00ab
 80041d8:	4680      	mov	r8, r0
 80041da:	4640      	mov	r0, r8
 80041dc:	f7ff fe72 	bl	8003ec4 <checkerror>
 80041e0:	2803      	cmp	r0, #3
 80041e2:	dd02      	ble.n	80041ea <_get_semihosting_exts+0x46>
 80041e4:	1ec3      	subs	r3, r0, #3
 80041e6:	42ab      	cmp	r3, r5
 80041e8:	dc07      	bgt.n	80041fa <_get_semihosting_exts+0x56>
 80041ea:	4620      	mov	r0, r4
 80041ec:	f7ff ff14 	bl	8004018 <_close>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b003      	add	sp, #12
 80041f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041fa:	2204      	movs	r2, #4
 80041fc:	eb0d 0102 	add.w	r1, sp, r2
 8004200:	4620      	mov	r0, r4
 8004202:	f7ff fe74 	bl	8003eee <_read>
 8004206:	2803      	cmp	r0, #3
 8004208:	ddef      	ble.n	80041ea <_get_semihosting_exts+0x46>
 800420a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800420e:	2b53      	cmp	r3, #83	@ 0x53
 8004210:	d1eb      	bne.n	80041ea <_get_semihosting_exts+0x46>
 8004212:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004216:	2b48      	cmp	r3, #72	@ 0x48
 8004218:	d1e7      	bne.n	80041ea <_get_semihosting_exts+0x46>
 800421a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800421e:	2b46      	cmp	r3, #70	@ 0x46
 8004220:	d1e3      	bne.n	80041ea <_get_semihosting_exts+0x46>
 8004222:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004226:	2b42      	cmp	r3, #66	@ 0x42
 8004228:	d1df      	bne.n	80041ea <_get_semihosting_exts+0x46>
 800422a:	2201      	movs	r2, #1
 800422c:	4639      	mov	r1, r7
 800422e:	4620      	mov	r0, r4
 8004230:	f7ff fe77 	bl	8003f22 <_swilseek>
 8004234:	2800      	cmp	r0, #0
 8004236:	dbd8      	blt.n	80041ea <_get_semihosting_exts+0x46>
 8004238:	462a      	mov	r2, r5
 800423a:	4631      	mov	r1, r6
 800423c:	4620      	mov	r0, r4
 800423e:	f7ff fe56 	bl	8003eee <_read>
 8004242:	4605      	mov	r5, r0
 8004244:	4620      	mov	r0, r4
 8004246:	f7ff fee7 	bl	8004018 <_close>
 800424a:	4628      	mov	r0, r5
 800424c:	f7ff fe3a 	bl	8003ec4 <checkerror>
 8004250:	e7d0      	b.n	80041f4 <_get_semihosting_exts+0x50>
 8004252:	bf00      	nop
 8004254:	08005254 	.word	0x08005254

08004258 <initialise_semihosting_exts>:
 8004258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800425a:	4d0a      	ldr	r5, [pc, #40]	@ (8004284 <initialise_semihosting_exts+0x2c>)
 800425c:	4c0a      	ldr	r4, [pc, #40]	@ (8004288 <initialise_semihosting_exts+0x30>)
 800425e:	2100      	movs	r1, #0
 8004260:	2201      	movs	r2, #1
 8004262:	a801      	add	r0, sp, #4
 8004264:	6029      	str	r1, [r5, #0]
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	f7ff ff9c 	bl	80041a4 <_get_semihosting_exts>
 800426c:	2800      	cmp	r0, #0
 800426e:	dd07      	ble.n	8004280 <initialise_semihosting_exts+0x28>
 8004270:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004274:	f003 0201 	and.w	r2, r3, #1
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	602a      	str	r2, [r5, #0]
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	b003      	add	sp, #12
 8004282:	bd30      	pop	{r4, r5, pc}
 8004284:	20000010 	.word	0x20000010
 8004288:	2000000c 	.word	0x2000000c

0800428c <_has_ext_stdout_stderr>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4c04      	ldr	r4, [pc, #16]	@ (80042a0 <_has_ext_stdout_stderr+0x14>)
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da01      	bge.n	800429a <_has_ext_stdout_stderr+0xe>
 8004296:	f7ff ffdf 	bl	8004258 <initialise_semihosting_exts>
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	2000000c 	.word	0x2000000c

080042a4 <initialise_monitor_handles>:
 80042a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a8:	b085      	sub	sp, #20
 80042aa:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800435c <initialise_monitor_handles+0xb8>
 80042ae:	f8cd 9004 	str.w	r9, [sp, #4]
 80042b2:	2303      	movs	r3, #3
 80042b4:	2400      	movs	r4, #0
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	af01      	add	r7, sp, #4
 80042ba:	9402      	str	r4, [sp, #8]
 80042bc:	2501      	movs	r5, #1
 80042be:	4628      	mov	r0, r5
 80042c0:	4639      	mov	r1, r7
 80042c2:	beab      	bkpt	0x00ab
 80042c4:	4605      	mov	r5, r0
 80042c6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004360 <initialise_monitor_handles+0xbc>
 80042ca:	4623      	mov	r3, r4
 80042cc:	4c20      	ldr	r4, [pc, #128]	@ (8004350 <initialise_monitor_handles+0xac>)
 80042ce:	f8c8 5000 	str.w	r5, [r8]
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80042da:	3301      	adds	r3, #1
 80042dc:	2b14      	cmp	r3, #20
 80042de:	d1fa      	bne.n	80042d6 <initialise_monitor_handles+0x32>
 80042e0:	f7ff ffd4 	bl	800428c <_has_ext_stdout_stderr>
 80042e4:	4d1b      	ldr	r5, [pc, #108]	@ (8004354 <initialise_monitor_handles+0xb0>)
 80042e6:	b1d0      	cbz	r0, 800431e <initialise_monitor_handles+0x7a>
 80042e8:	f04f 0a03 	mov.w	sl, #3
 80042ec:	2304      	movs	r3, #4
 80042ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80042f2:	2601      	movs	r6, #1
 80042f4:	f8cd a00c 	str.w	sl, [sp, #12]
 80042f8:	9302      	str	r3, [sp, #8]
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	beab      	bkpt	0x00ab
 8004300:	4683      	mov	fp, r0
 8004302:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <initialise_monitor_handles+0xb4>)
 8004304:	f8cd 9004 	str.w	r9, [sp, #4]
 8004308:	f8c3 b000 	str.w	fp, [r3]
 800430c:	2308      	movs	r3, #8
 800430e:	f8cd a00c 	str.w	sl, [sp, #12]
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	4630      	mov	r0, r6
 8004316:	4639      	mov	r1, r7
 8004318:	beab      	bkpt	0x00ab
 800431a:	4606      	mov	r6, r0
 800431c:	602e      	str	r6, [r5, #0]
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	bf02      	ittt	eq
 8004324:	4b0c      	ldreq	r3, [pc, #48]	@ (8004358 <initialise_monitor_handles+0xb4>)
 8004326:	681b      	ldreq	r3, [r3, #0]
 8004328:	602b      	streq	r3, [r5, #0]
 800432a:	2600      	movs	r6, #0
 800432c:	f8d8 3000 	ldr.w	r3, [r8]
 8004330:	6023      	str	r3, [r4, #0]
 8004332:	6066      	str	r6, [r4, #4]
 8004334:	f7ff ffaa 	bl	800428c <_has_ext_stdout_stderr>
 8004338:	b130      	cbz	r0, 8004348 <initialise_monitor_handles+0xa4>
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <initialise_monitor_handles+0xb4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004348:	b005      	add	sp, #20
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	bf00      	nop
 8004350:	20000148 	.word	0x20000148
 8004354:	2000013c 	.word	0x2000013c
 8004358:	20000140 	.word	0x20000140
 800435c:	0800526a 	.word	0x0800526a
 8004360:	20000144 	.word	0x20000144

08004364 <_isatty>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	f7ff fd85 	bl	8003e74 <findslot>
 800436a:	2409      	movs	r4, #9
 800436c:	4605      	mov	r5, r0
 800436e:	b920      	cbnz	r0, 800437a <_isatty+0x16>
 8004370:	f000 f97c 	bl	800466c <__errno>
 8004374:	6004      	str	r4, [r0, #0]
 8004376:	2000      	movs	r0, #0
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	4620      	mov	r0, r4
 800437c:	4629      	mov	r1, r5
 800437e:	beab      	bkpt	0x00ab
 8004380:	4604      	mov	r4, r0
 8004382:	2c01      	cmp	r4, #1
 8004384:	4620      	mov	r0, r4
 8004386:	d0f7      	beq.n	8004378 <_isatty+0x14>
 8004388:	f000 f970 	bl	800466c <__errno>
 800438c:	2513      	movs	r5, #19
 800438e:	4604      	mov	r4, r0
 8004390:	2600      	movs	r6, #0
 8004392:	4628      	mov	r0, r5
 8004394:	4631      	mov	r1, r6
 8004396:	beab      	bkpt	0x00ab
 8004398:	4605      	mov	r5, r0
 800439a:	6025      	str	r5, [r4, #0]
 800439c:	e7eb      	b.n	8004376 <_isatty+0x12>
	...

080043a0 <std>:
 80043a0:	2300      	movs	r3, #0
 80043a2:	b510      	push	{r4, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	e9c0 3300 	strd	r3, r3, [r0]
 80043aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ae:	6083      	str	r3, [r0, #8]
 80043b0:	8181      	strh	r1, [r0, #12]
 80043b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80043b4:	81c2      	strh	r2, [r0, #14]
 80043b6:	6183      	str	r3, [r0, #24]
 80043b8:	4619      	mov	r1, r3
 80043ba:	2208      	movs	r2, #8
 80043bc:	305c      	adds	r0, #92	@ 0x5c
 80043be:	f000 f906 	bl	80045ce <memset>
 80043c2:	4b0d      	ldr	r3, [pc, #52]	@ (80043f8 <std+0x58>)
 80043c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <std+0x5c>)
 80043c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <std+0x60>)
 80043cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <std+0x64>)
 80043d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <std+0x68>)
 80043d4:	6224      	str	r4, [r4, #32]
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d006      	beq.n	80043e8 <std+0x48>
 80043da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043de:	4294      	cmp	r4, r2
 80043e0:	d002      	beq.n	80043e8 <std+0x48>
 80043e2:	33d0      	adds	r3, #208	@ 0xd0
 80043e4:	429c      	cmp	r4, r3
 80043e6:	d105      	bne.n	80043f4 <std+0x54>
 80043e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f0:	f000 b966 	b.w	80046c0 <__retarget_lock_init_recursive>
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	bf00      	nop
 80043f8:	08004549 	.word	0x08004549
 80043fc:	0800456b 	.word	0x0800456b
 8004400:	080045a3 	.word	0x080045a3
 8004404:	080045c7 	.word	0x080045c7
 8004408:	200001e8 	.word	0x200001e8

0800440c <stdio_exit_handler>:
 800440c:	4a02      	ldr	r2, [pc, #8]	@ (8004418 <stdio_exit_handler+0xc>)
 800440e:	4903      	ldr	r1, [pc, #12]	@ (800441c <stdio_exit_handler+0x10>)
 8004410:	4803      	ldr	r0, [pc, #12]	@ (8004420 <stdio_exit_handler+0x14>)
 8004412:	f000 b869 	b.w	80044e8 <_fwalk_sglue>
 8004416:	bf00      	nop
 8004418:	20000014 	.word	0x20000014
 800441c:	08004f61 	.word	0x08004f61
 8004420:	20000024 	.word	0x20000024

08004424 <cleanup_stdio>:
 8004424:	6841      	ldr	r1, [r0, #4]
 8004426:	4b0c      	ldr	r3, [pc, #48]	@ (8004458 <cleanup_stdio+0x34>)
 8004428:	4299      	cmp	r1, r3
 800442a:	b510      	push	{r4, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	d001      	beq.n	8004434 <cleanup_stdio+0x10>
 8004430:	f000 fd96 	bl	8004f60 <_fflush_r>
 8004434:	68a1      	ldr	r1, [r4, #8]
 8004436:	4b09      	ldr	r3, [pc, #36]	@ (800445c <cleanup_stdio+0x38>)
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <cleanup_stdio+0x1e>
 800443c:	4620      	mov	r0, r4
 800443e:	f000 fd8f 	bl	8004f60 <_fflush_r>
 8004442:	68e1      	ldr	r1, [r4, #12]
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <cleanup_stdio+0x3c>)
 8004446:	4299      	cmp	r1, r3
 8004448:	d004      	beq.n	8004454 <cleanup_stdio+0x30>
 800444a:	4620      	mov	r0, r4
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f000 bd86 	b.w	8004f60 <_fflush_r>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	200001e8 	.word	0x200001e8
 800445c:	20000250 	.word	0x20000250
 8004460:	200002b8 	.word	0x200002b8

08004464 <global_stdio_init.part.0>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <global_stdio_init.part.0+0x30>)
 8004468:	4c0b      	ldr	r4, [pc, #44]	@ (8004498 <global_stdio_init.part.0+0x34>)
 800446a:	4a0c      	ldr	r2, [pc, #48]	@ (800449c <global_stdio_init.part.0+0x38>)
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	4620      	mov	r0, r4
 8004470:	2200      	movs	r2, #0
 8004472:	2104      	movs	r1, #4
 8004474:	f7ff ff94 	bl	80043a0 <std>
 8004478:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800447c:	2201      	movs	r2, #1
 800447e:	2109      	movs	r1, #9
 8004480:	f7ff ff8e 	bl	80043a0 <std>
 8004484:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004488:	2202      	movs	r2, #2
 800448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448e:	2112      	movs	r1, #18
 8004490:	f7ff bf86 	b.w	80043a0 <std>
 8004494:	20000320 	.word	0x20000320
 8004498:	200001e8 	.word	0x200001e8
 800449c:	0800440d 	.word	0x0800440d

080044a0 <__sfp_lock_acquire>:
 80044a0:	4801      	ldr	r0, [pc, #4]	@ (80044a8 <__sfp_lock_acquire+0x8>)
 80044a2:	f000 b90e 	b.w	80046c2 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	20000329 	.word	0x20000329

080044ac <__sfp_lock_release>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__sfp_lock_release+0x8>)
 80044ae:	f000 b909 	b.w	80046c4 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	20000329 	.word	0x20000329

080044b8 <__sinit>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f7ff fff0 	bl	80044a0 <__sfp_lock_acquire>
 80044c0:	6a23      	ldr	r3, [r4, #32]
 80044c2:	b11b      	cbz	r3, 80044cc <__sinit+0x14>
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f7ff bff0 	b.w	80044ac <__sfp_lock_release>
 80044cc:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <__sinit+0x28>)
 80044ce:	6223      	str	r3, [r4, #32]
 80044d0:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <__sinit+0x2c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f5      	bne.n	80044c4 <__sinit+0xc>
 80044d8:	f7ff ffc4 	bl	8004464 <global_stdio_init.part.0>
 80044dc:	e7f2      	b.n	80044c4 <__sinit+0xc>
 80044de:	bf00      	nop
 80044e0:	08004425 	.word	0x08004425
 80044e4:	20000320 	.word	0x20000320

080044e8 <_fwalk_sglue>:
 80044e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ec:	4607      	mov	r7, r0
 80044ee:	4688      	mov	r8, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	2600      	movs	r6, #0
 80044f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044f8:	f1b9 0901 	subs.w	r9, r9, #1
 80044fc:	d505      	bpl.n	800450a <_fwalk_sglue+0x22>
 80044fe:	6824      	ldr	r4, [r4, #0]
 8004500:	2c00      	cmp	r4, #0
 8004502:	d1f7      	bne.n	80044f4 <_fwalk_sglue+0xc>
 8004504:	4630      	mov	r0, r6
 8004506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d907      	bls.n	8004520 <_fwalk_sglue+0x38>
 8004510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004514:	3301      	adds	r3, #1
 8004516:	d003      	beq.n	8004520 <_fwalk_sglue+0x38>
 8004518:	4629      	mov	r1, r5
 800451a:	4638      	mov	r0, r7
 800451c:	47c0      	blx	r8
 800451e:	4306      	orrs	r6, r0
 8004520:	3568      	adds	r5, #104	@ 0x68
 8004522:	e7e9      	b.n	80044f8 <_fwalk_sglue+0x10>

08004524 <iprintf>:
 8004524:	b40f      	push	{r0, r1, r2, r3}
 8004526:	b507      	push	{r0, r1, r2, lr}
 8004528:	4906      	ldr	r1, [pc, #24]	@ (8004544 <iprintf+0x20>)
 800452a:	ab04      	add	r3, sp, #16
 800452c:	6808      	ldr	r0, [r1, #0]
 800452e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004532:	6881      	ldr	r1, [r0, #8]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f000 f9e9 	bl	800490c <_vfiprintf_r>
 800453a:	b003      	add	sp, #12
 800453c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr
 8004544:	20000020 	.word	0x20000020

08004548 <__sread>:
 8004548:	b510      	push	{r4, lr}
 800454a:	460c      	mov	r4, r1
 800454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004550:	f000 f868 	bl	8004624 <_read_r>
 8004554:	2800      	cmp	r0, #0
 8004556:	bfab      	itete	ge
 8004558:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800455a:	89a3      	ldrhlt	r3, [r4, #12]
 800455c:	181b      	addge	r3, r3, r0
 800455e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004562:	bfac      	ite	ge
 8004564:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004566:	81a3      	strhlt	r3, [r4, #12]
 8004568:	bd10      	pop	{r4, pc}

0800456a <__swrite>:
 800456a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	461f      	mov	r7, r3
 8004570:	898b      	ldrh	r3, [r1, #12]
 8004572:	05db      	lsls	r3, r3, #23
 8004574:	4605      	mov	r5, r0
 8004576:	460c      	mov	r4, r1
 8004578:	4616      	mov	r6, r2
 800457a:	d505      	bpl.n	8004588 <__swrite+0x1e>
 800457c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004580:	2302      	movs	r3, #2
 8004582:	2200      	movs	r2, #0
 8004584:	f000 f83c 	bl	8004600 <_lseek_r>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800458e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	4632      	mov	r2, r6
 8004596:	463b      	mov	r3, r7
 8004598:	4628      	mov	r0, r5
 800459a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800459e:	f000 b853 	b.w	8004648 <_write_r>

080045a2 <__sseek>:
 80045a2:	b510      	push	{r4, lr}
 80045a4:	460c      	mov	r4, r1
 80045a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045aa:	f000 f829 	bl	8004600 <_lseek_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	bf15      	itete	ne
 80045b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045be:	81a3      	strheq	r3, [r4, #12]
 80045c0:	bf18      	it	ne
 80045c2:	81a3      	strhne	r3, [r4, #12]
 80045c4:	bd10      	pop	{r4, pc}

080045c6 <__sclose>:
 80045c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ca:	f000 b809 	b.w	80045e0 <_close_r>

080045ce <memset>:
 80045ce:	4402      	add	r2, r0
 80045d0:	4603      	mov	r3, r0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d100      	bne.n	80045d8 <memset+0xa>
 80045d6:	4770      	bx	lr
 80045d8:	f803 1b01 	strb.w	r1, [r3], #1
 80045dc:	e7f9      	b.n	80045d2 <memset+0x4>
	...

080045e0 <_close_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d06      	ldr	r5, [pc, #24]	@ (80045fc <_close_r+0x1c>)
 80045e4:	2300      	movs	r3, #0
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7ff fd14 	bl	8004018 <_close>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_close_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_close_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	20000324 	.word	0x20000324

08004600 <_lseek_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	4d07      	ldr	r5, [pc, #28]	@ (8004620 <_lseek_r+0x20>)
 8004604:	4604      	mov	r4, r0
 8004606:	4608      	mov	r0, r1
 8004608:	4611      	mov	r1, r2
 800460a:	2200      	movs	r2, #0
 800460c:	602a      	str	r2, [r5, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f7ff fcc3 	bl	8003f9a <_lseek>
 8004614:	1c43      	adds	r3, r0, #1
 8004616:	d102      	bne.n	800461e <_lseek_r+0x1e>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	b103      	cbz	r3, 800461e <_lseek_r+0x1e>
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	bd38      	pop	{r3, r4, r5, pc}
 8004620:	20000324 	.word	0x20000324

08004624 <_read_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	4d07      	ldr	r5, [pc, #28]	@ (8004644 <_read_r+0x20>)
 8004628:	4604      	mov	r4, r0
 800462a:	4608      	mov	r0, r1
 800462c:	4611      	mov	r1, r2
 800462e:	2200      	movs	r2, #0
 8004630:	602a      	str	r2, [r5, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f7ff fc5b 	bl	8003eee <_read>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_read_r+0x1e>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_read_r+0x1e>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000324 	.word	0x20000324

08004648 <_write_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d07      	ldr	r5, [pc, #28]	@ (8004668 <_write_r+0x20>)
 800464c:	4604      	mov	r4, r0
 800464e:	4608      	mov	r0, r1
 8004650:	4611      	mov	r1, r2
 8004652:	2200      	movs	r2, #0
 8004654:	602a      	str	r2, [r5, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7ff fcb1 	bl	8003fbe <_write>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_write_r+0x1e>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_write_r+0x1e>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	20000324 	.word	0x20000324

0800466c <__errno>:
 800466c:	4b01      	ldr	r3, [pc, #4]	@ (8004674 <__errno+0x8>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000020 	.word	0x20000020

08004678 <__libc_init_array>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4d0d      	ldr	r5, [pc, #52]	@ (80046b0 <__libc_init_array+0x38>)
 800467c:	4c0d      	ldr	r4, [pc, #52]	@ (80046b4 <__libc_init_array+0x3c>)
 800467e:	1b64      	subs	r4, r4, r5
 8004680:	10a4      	asrs	r4, r4, #2
 8004682:	2600      	movs	r6, #0
 8004684:	42a6      	cmp	r6, r4
 8004686:	d109      	bne.n	800469c <__libc_init_array+0x24>
 8004688:	4d0b      	ldr	r5, [pc, #44]	@ (80046b8 <__libc_init_array+0x40>)
 800468a:	4c0c      	ldr	r4, [pc, #48]	@ (80046bc <__libc_init_array+0x44>)
 800468c:	f000 fdb8 	bl	8005200 <_init>
 8004690:	1b64      	subs	r4, r4, r5
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	2600      	movs	r6, #0
 8004696:	42a6      	cmp	r6, r4
 8004698:	d105      	bne.n	80046a6 <__libc_init_array+0x2e>
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a0:	4798      	blx	r3
 80046a2:	3601      	adds	r6, #1
 80046a4:	e7ee      	b.n	8004684 <__libc_init_array+0xc>
 80046a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046aa:	4798      	blx	r3
 80046ac:	3601      	adds	r6, #1
 80046ae:	e7f2      	b.n	8004696 <__libc_init_array+0x1e>
 80046b0:	080052ac 	.word	0x080052ac
 80046b4:	080052ac 	.word	0x080052ac
 80046b8:	080052ac 	.word	0x080052ac
 80046bc:	080052b0 	.word	0x080052b0

080046c0 <__retarget_lock_init_recursive>:
 80046c0:	4770      	bx	lr

080046c2 <__retarget_lock_acquire_recursive>:
 80046c2:	4770      	bx	lr

080046c4 <__retarget_lock_release_recursive>:
 80046c4:	4770      	bx	lr
	...

080046c8 <_free_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4605      	mov	r5, r0
 80046cc:	2900      	cmp	r1, #0
 80046ce:	d041      	beq.n	8004754 <_free_r+0x8c>
 80046d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d4:	1f0c      	subs	r4, r1, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bfb8      	it	lt
 80046da:	18e4      	addlt	r4, r4, r3
 80046dc:	f000 f8e0 	bl	80048a0 <__malloc_lock>
 80046e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004758 <_free_r+0x90>)
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	b933      	cbnz	r3, 80046f4 <_free_r+0x2c>
 80046e6:	6063      	str	r3, [r4, #4]
 80046e8:	6014      	str	r4, [r2, #0]
 80046ea:	4628      	mov	r0, r5
 80046ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f0:	f000 b8dc 	b.w	80048ac <__malloc_unlock>
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	d908      	bls.n	800470a <_free_r+0x42>
 80046f8:	6820      	ldr	r0, [r4, #0]
 80046fa:	1821      	adds	r1, r4, r0
 80046fc:	428b      	cmp	r3, r1
 80046fe:	bf01      	itttt	eq
 8004700:	6819      	ldreq	r1, [r3, #0]
 8004702:	685b      	ldreq	r3, [r3, #4]
 8004704:	1809      	addeq	r1, r1, r0
 8004706:	6021      	streq	r1, [r4, #0]
 8004708:	e7ed      	b.n	80046e6 <_free_r+0x1e>
 800470a:	461a      	mov	r2, r3
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b10b      	cbz	r3, 8004714 <_free_r+0x4c>
 8004710:	42a3      	cmp	r3, r4
 8004712:	d9fa      	bls.n	800470a <_free_r+0x42>
 8004714:	6811      	ldr	r1, [r2, #0]
 8004716:	1850      	adds	r0, r2, r1
 8004718:	42a0      	cmp	r0, r4
 800471a:	d10b      	bne.n	8004734 <_free_r+0x6c>
 800471c:	6820      	ldr	r0, [r4, #0]
 800471e:	4401      	add	r1, r0
 8004720:	1850      	adds	r0, r2, r1
 8004722:	4283      	cmp	r3, r0
 8004724:	6011      	str	r1, [r2, #0]
 8004726:	d1e0      	bne.n	80046ea <_free_r+0x22>
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	6053      	str	r3, [r2, #4]
 800472e:	4408      	add	r0, r1
 8004730:	6010      	str	r0, [r2, #0]
 8004732:	e7da      	b.n	80046ea <_free_r+0x22>
 8004734:	d902      	bls.n	800473c <_free_r+0x74>
 8004736:	230c      	movs	r3, #12
 8004738:	602b      	str	r3, [r5, #0]
 800473a:	e7d6      	b.n	80046ea <_free_r+0x22>
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	1821      	adds	r1, r4, r0
 8004740:	428b      	cmp	r3, r1
 8004742:	bf04      	itt	eq
 8004744:	6819      	ldreq	r1, [r3, #0]
 8004746:	685b      	ldreq	r3, [r3, #4]
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	bf04      	itt	eq
 800474c:	1809      	addeq	r1, r1, r0
 800474e:	6021      	streq	r1, [r4, #0]
 8004750:	6054      	str	r4, [r2, #4]
 8004752:	e7ca      	b.n	80046ea <_free_r+0x22>
 8004754:	bd38      	pop	{r3, r4, r5, pc}
 8004756:	bf00      	nop
 8004758:	20000330 	.word	0x20000330

0800475c <sbrk_aligned>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	4e0f      	ldr	r6, [pc, #60]	@ (800479c <sbrk_aligned+0x40>)
 8004760:	460c      	mov	r4, r1
 8004762:	6831      	ldr	r1, [r6, #0]
 8004764:	4605      	mov	r5, r0
 8004766:	b911      	cbnz	r1, 800476e <sbrk_aligned+0x12>
 8004768:	f000 fcb6 	bl	80050d8 <_sbrk_r>
 800476c:	6030      	str	r0, [r6, #0]
 800476e:	4621      	mov	r1, r4
 8004770:	4628      	mov	r0, r5
 8004772:	f000 fcb1 	bl	80050d8 <_sbrk_r>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d103      	bne.n	8004782 <sbrk_aligned+0x26>
 800477a:	f04f 34ff 	mov.w	r4, #4294967295
 800477e:	4620      	mov	r0, r4
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	1cc4      	adds	r4, r0, #3
 8004784:	f024 0403 	bic.w	r4, r4, #3
 8004788:	42a0      	cmp	r0, r4
 800478a:	d0f8      	beq.n	800477e <sbrk_aligned+0x22>
 800478c:	1a21      	subs	r1, r4, r0
 800478e:	4628      	mov	r0, r5
 8004790:	f000 fca2 	bl	80050d8 <_sbrk_r>
 8004794:	3001      	adds	r0, #1
 8004796:	d1f2      	bne.n	800477e <sbrk_aligned+0x22>
 8004798:	e7ef      	b.n	800477a <sbrk_aligned+0x1e>
 800479a:	bf00      	nop
 800479c:	2000032c 	.word	0x2000032c

080047a0 <_malloc_r>:
 80047a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a4:	1ccd      	adds	r5, r1, #3
 80047a6:	f025 0503 	bic.w	r5, r5, #3
 80047aa:	3508      	adds	r5, #8
 80047ac:	2d0c      	cmp	r5, #12
 80047ae:	bf38      	it	cc
 80047b0:	250c      	movcc	r5, #12
 80047b2:	2d00      	cmp	r5, #0
 80047b4:	4606      	mov	r6, r0
 80047b6:	db01      	blt.n	80047bc <_malloc_r+0x1c>
 80047b8:	42a9      	cmp	r1, r5
 80047ba:	d904      	bls.n	80047c6 <_malloc_r+0x26>
 80047bc:	230c      	movs	r3, #12
 80047be:	6033      	str	r3, [r6, #0]
 80047c0:	2000      	movs	r0, #0
 80047c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800489c <_malloc_r+0xfc>
 80047ca:	f000 f869 	bl	80048a0 <__malloc_lock>
 80047ce:	f8d8 3000 	ldr.w	r3, [r8]
 80047d2:	461c      	mov	r4, r3
 80047d4:	bb44      	cbnz	r4, 8004828 <_malloc_r+0x88>
 80047d6:	4629      	mov	r1, r5
 80047d8:	4630      	mov	r0, r6
 80047da:	f7ff ffbf 	bl	800475c <sbrk_aligned>
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	4604      	mov	r4, r0
 80047e2:	d158      	bne.n	8004896 <_malloc_r+0xf6>
 80047e4:	f8d8 4000 	ldr.w	r4, [r8]
 80047e8:	4627      	mov	r7, r4
 80047ea:	2f00      	cmp	r7, #0
 80047ec:	d143      	bne.n	8004876 <_malloc_r+0xd6>
 80047ee:	2c00      	cmp	r4, #0
 80047f0:	d04b      	beq.n	800488a <_malloc_r+0xea>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	4639      	mov	r1, r7
 80047f6:	4630      	mov	r0, r6
 80047f8:	eb04 0903 	add.w	r9, r4, r3
 80047fc:	f000 fc6c 	bl	80050d8 <_sbrk_r>
 8004800:	4581      	cmp	r9, r0
 8004802:	d142      	bne.n	800488a <_malloc_r+0xea>
 8004804:	6821      	ldr	r1, [r4, #0]
 8004806:	1a6d      	subs	r5, r5, r1
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff ffa6 	bl	800475c <sbrk_aligned>
 8004810:	3001      	adds	r0, #1
 8004812:	d03a      	beq.n	800488a <_malloc_r+0xea>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	442b      	add	r3, r5
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	f8d8 3000 	ldr.w	r3, [r8]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	bb62      	cbnz	r2, 800487c <_malloc_r+0xdc>
 8004822:	f8c8 7000 	str.w	r7, [r8]
 8004826:	e00f      	b.n	8004848 <_malloc_r+0xa8>
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	1b52      	subs	r2, r2, r5
 800482c:	d420      	bmi.n	8004870 <_malloc_r+0xd0>
 800482e:	2a0b      	cmp	r2, #11
 8004830:	d917      	bls.n	8004862 <_malloc_r+0xc2>
 8004832:	1961      	adds	r1, r4, r5
 8004834:	42a3      	cmp	r3, r4
 8004836:	6025      	str	r5, [r4, #0]
 8004838:	bf18      	it	ne
 800483a:	6059      	strne	r1, [r3, #4]
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	bf08      	it	eq
 8004840:	f8c8 1000 	streq.w	r1, [r8]
 8004844:	5162      	str	r2, [r4, r5]
 8004846:	604b      	str	r3, [r1, #4]
 8004848:	4630      	mov	r0, r6
 800484a:	f000 f82f 	bl	80048ac <__malloc_unlock>
 800484e:	f104 000b 	add.w	r0, r4, #11
 8004852:	1d23      	adds	r3, r4, #4
 8004854:	f020 0007 	bic.w	r0, r0, #7
 8004858:	1ac2      	subs	r2, r0, r3
 800485a:	bf1c      	itt	ne
 800485c:	1a1b      	subne	r3, r3, r0
 800485e:	50a3      	strne	r3, [r4, r2]
 8004860:	e7af      	b.n	80047c2 <_malloc_r+0x22>
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	42a3      	cmp	r3, r4
 8004866:	bf0c      	ite	eq
 8004868:	f8c8 2000 	streq.w	r2, [r8]
 800486c:	605a      	strne	r2, [r3, #4]
 800486e:	e7eb      	b.n	8004848 <_malloc_r+0xa8>
 8004870:	4623      	mov	r3, r4
 8004872:	6864      	ldr	r4, [r4, #4]
 8004874:	e7ae      	b.n	80047d4 <_malloc_r+0x34>
 8004876:	463c      	mov	r4, r7
 8004878:	687f      	ldr	r7, [r7, #4]
 800487a:	e7b6      	b.n	80047ea <_malloc_r+0x4a>
 800487c:	461a      	mov	r2, r3
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	42a3      	cmp	r3, r4
 8004882:	d1fb      	bne.n	800487c <_malloc_r+0xdc>
 8004884:	2300      	movs	r3, #0
 8004886:	6053      	str	r3, [r2, #4]
 8004888:	e7de      	b.n	8004848 <_malloc_r+0xa8>
 800488a:	230c      	movs	r3, #12
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	4630      	mov	r0, r6
 8004890:	f000 f80c 	bl	80048ac <__malloc_unlock>
 8004894:	e794      	b.n	80047c0 <_malloc_r+0x20>
 8004896:	6005      	str	r5, [r0, #0]
 8004898:	e7d6      	b.n	8004848 <_malloc_r+0xa8>
 800489a:	bf00      	nop
 800489c:	20000330 	.word	0x20000330

080048a0 <__malloc_lock>:
 80048a0:	4801      	ldr	r0, [pc, #4]	@ (80048a8 <__malloc_lock+0x8>)
 80048a2:	f7ff bf0e 	b.w	80046c2 <__retarget_lock_acquire_recursive>
 80048a6:	bf00      	nop
 80048a8:	20000328 	.word	0x20000328

080048ac <__malloc_unlock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	@ (80048b4 <__malloc_unlock+0x8>)
 80048ae:	f7ff bf09 	b.w	80046c4 <__retarget_lock_release_recursive>
 80048b2:	bf00      	nop
 80048b4:	20000328 	.word	0x20000328

080048b8 <__sfputc_r>:
 80048b8:	6893      	ldr	r3, [r2, #8]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	b410      	push	{r4}
 80048c0:	6093      	str	r3, [r2, #8]
 80048c2:	da08      	bge.n	80048d6 <__sfputc_r+0x1e>
 80048c4:	6994      	ldr	r4, [r2, #24]
 80048c6:	42a3      	cmp	r3, r4
 80048c8:	db01      	blt.n	80048ce <__sfputc_r+0x16>
 80048ca:	290a      	cmp	r1, #10
 80048cc:	d103      	bne.n	80048d6 <__sfputc_r+0x1e>
 80048ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d2:	f000 bb6d 	b.w	8004fb0 <__swbuf_r>
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	1c58      	adds	r0, r3, #1
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	7019      	strb	r1, [r3, #0]
 80048de:	4608      	mov	r0, r1
 80048e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <__sfputs_r>:
 80048e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e8:	4606      	mov	r6, r0
 80048ea:	460f      	mov	r7, r1
 80048ec:	4614      	mov	r4, r2
 80048ee:	18d5      	adds	r5, r2, r3
 80048f0:	42ac      	cmp	r4, r5
 80048f2:	d101      	bne.n	80048f8 <__sfputs_r+0x12>
 80048f4:	2000      	movs	r0, #0
 80048f6:	e007      	b.n	8004908 <__sfputs_r+0x22>
 80048f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048fc:	463a      	mov	r2, r7
 80048fe:	4630      	mov	r0, r6
 8004900:	f7ff ffda 	bl	80048b8 <__sfputc_r>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d1f3      	bne.n	80048f0 <__sfputs_r+0xa>
 8004908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800490c <_vfiprintf_r>:
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	460d      	mov	r5, r1
 8004912:	b09d      	sub	sp, #116	@ 0x74
 8004914:	4614      	mov	r4, r2
 8004916:	4698      	mov	r8, r3
 8004918:	4606      	mov	r6, r0
 800491a:	b118      	cbz	r0, 8004924 <_vfiprintf_r+0x18>
 800491c:	6a03      	ldr	r3, [r0, #32]
 800491e:	b90b      	cbnz	r3, 8004924 <_vfiprintf_r+0x18>
 8004920:	f7ff fdca 	bl	80044b8 <__sinit>
 8004924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004926:	07d9      	lsls	r1, r3, #31
 8004928:	d405      	bmi.n	8004936 <_vfiprintf_r+0x2a>
 800492a:	89ab      	ldrh	r3, [r5, #12]
 800492c:	059a      	lsls	r2, r3, #22
 800492e:	d402      	bmi.n	8004936 <_vfiprintf_r+0x2a>
 8004930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004932:	f7ff fec6 	bl	80046c2 <__retarget_lock_acquire_recursive>
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	d501      	bpl.n	8004940 <_vfiprintf_r+0x34>
 800493c:	692b      	ldr	r3, [r5, #16]
 800493e:	b99b      	cbnz	r3, 8004968 <_vfiprintf_r+0x5c>
 8004940:	4629      	mov	r1, r5
 8004942:	4630      	mov	r0, r6
 8004944:	f000 fb72 	bl	800502c <__swsetup_r>
 8004948:	b170      	cbz	r0, 8004968 <_vfiprintf_r+0x5c>
 800494a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800494c:	07dc      	lsls	r4, r3, #31
 800494e:	d504      	bpl.n	800495a <_vfiprintf_r+0x4e>
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	b01d      	add	sp, #116	@ 0x74
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495a:	89ab      	ldrh	r3, [r5, #12]
 800495c:	0598      	lsls	r0, r3, #22
 800495e:	d4f7      	bmi.n	8004950 <_vfiprintf_r+0x44>
 8004960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004962:	f7ff feaf 	bl	80046c4 <__retarget_lock_release_recursive>
 8004966:	e7f3      	b.n	8004950 <_vfiprintf_r+0x44>
 8004968:	2300      	movs	r3, #0
 800496a:	9309      	str	r3, [sp, #36]	@ 0x24
 800496c:	2320      	movs	r3, #32
 800496e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004972:	f8cd 800c 	str.w	r8, [sp, #12]
 8004976:	2330      	movs	r3, #48	@ 0x30
 8004978:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b28 <_vfiprintf_r+0x21c>
 800497c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004980:	f04f 0901 	mov.w	r9, #1
 8004984:	4623      	mov	r3, r4
 8004986:	469a      	mov	sl, r3
 8004988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800498c:	b10a      	cbz	r2, 8004992 <_vfiprintf_r+0x86>
 800498e:	2a25      	cmp	r2, #37	@ 0x25
 8004990:	d1f9      	bne.n	8004986 <_vfiprintf_r+0x7a>
 8004992:	ebba 0b04 	subs.w	fp, sl, r4
 8004996:	d00b      	beq.n	80049b0 <_vfiprintf_r+0xa4>
 8004998:	465b      	mov	r3, fp
 800499a:	4622      	mov	r2, r4
 800499c:	4629      	mov	r1, r5
 800499e:	4630      	mov	r0, r6
 80049a0:	f7ff ffa1 	bl	80048e6 <__sfputs_r>
 80049a4:	3001      	adds	r0, #1
 80049a6:	f000 80a7 	beq.w	8004af8 <_vfiprintf_r+0x1ec>
 80049aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ac:	445a      	add	r2, fp
 80049ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80049b0:	f89a 3000 	ldrb.w	r3, [sl]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 809f 	beq.w	8004af8 <_vfiprintf_r+0x1ec>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049c4:	f10a 0a01 	add.w	sl, sl, #1
 80049c8:	9304      	str	r3, [sp, #16]
 80049ca:	9307      	str	r3, [sp, #28]
 80049cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80049d2:	4654      	mov	r4, sl
 80049d4:	2205      	movs	r2, #5
 80049d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049da:	4853      	ldr	r0, [pc, #332]	@ (8004b28 <_vfiprintf_r+0x21c>)
 80049dc:	f7fb fc08 	bl	80001f0 <memchr>
 80049e0:	9a04      	ldr	r2, [sp, #16]
 80049e2:	b9d8      	cbnz	r0, 8004a1c <_vfiprintf_r+0x110>
 80049e4:	06d1      	lsls	r1, r2, #27
 80049e6:	bf44      	itt	mi
 80049e8:	2320      	movmi	r3, #32
 80049ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ee:	0713      	lsls	r3, r2, #28
 80049f0:	bf44      	itt	mi
 80049f2:	232b      	movmi	r3, #43	@ 0x2b
 80049f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049f8:	f89a 3000 	ldrb.w	r3, [sl]
 80049fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80049fe:	d015      	beq.n	8004a2c <_vfiprintf_r+0x120>
 8004a00:	9a07      	ldr	r2, [sp, #28]
 8004a02:	4654      	mov	r4, sl
 8004a04:	2000      	movs	r0, #0
 8004a06:	f04f 0c0a 	mov.w	ip, #10
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a10:	3b30      	subs	r3, #48	@ 0x30
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d94b      	bls.n	8004aae <_vfiprintf_r+0x1a2>
 8004a16:	b1b0      	cbz	r0, 8004a46 <_vfiprintf_r+0x13a>
 8004a18:	9207      	str	r2, [sp, #28]
 8004a1a:	e014      	b.n	8004a46 <_vfiprintf_r+0x13a>
 8004a1c:	eba0 0308 	sub.w	r3, r0, r8
 8004a20:	fa09 f303 	lsl.w	r3, r9, r3
 8004a24:	4313      	orrs	r3, r2
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	46a2      	mov	sl, r4
 8004a2a:	e7d2      	b.n	80049d2 <_vfiprintf_r+0xc6>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	1d19      	adds	r1, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	9103      	str	r1, [sp, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bfbb      	ittet	lt
 8004a38:	425b      	neglt	r3, r3
 8004a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a3e:	9307      	strge	r3, [sp, #28]
 8004a40:	9307      	strlt	r3, [sp, #28]
 8004a42:	bfb8      	it	lt
 8004a44:	9204      	strlt	r2, [sp, #16]
 8004a46:	7823      	ldrb	r3, [r4, #0]
 8004a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a4a:	d10a      	bne.n	8004a62 <_vfiprintf_r+0x156>
 8004a4c:	7863      	ldrb	r3, [r4, #1]
 8004a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a50:	d132      	bne.n	8004ab8 <_vfiprintf_r+0x1ac>
 8004a52:	9b03      	ldr	r3, [sp, #12]
 8004a54:	1d1a      	adds	r2, r3, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	9203      	str	r2, [sp, #12]
 8004a5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a5e:	3402      	adds	r4, #2
 8004a60:	9305      	str	r3, [sp, #20]
 8004a62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b38 <_vfiprintf_r+0x22c>
 8004a66:	7821      	ldrb	r1, [r4, #0]
 8004a68:	2203      	movs	r2, #3
 8004a6a:	4650      	mov	r0, sl
 8004a6c:	f7fb fbc0 	bl	80001f0 <memchr>
 8004a70:	b138      	cbz	r0, 8004a82 <_vfiprintf_r+0x176>
 8004a72:	9b04      	ldr	r3, [sp, #16]
 8004a74:	eba0 000a 	sub.w	r0, r0, sl
 8004a78:	2240      	movs	r2, #64	@ 0x40
 8004a7a:	4082      	lsls	r2, r0
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	3401      	adds	r4, #1
 8004a80:	9304      	str	r3, [sp, #16]
 8004a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a86:	4829      	ldr	r0, [pc, #164]	@ (8004b2c <_vfiprintf_r+0x220>)
 8004a88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a8c:	2206      	movs	r2, #6
 8004a8e:	f7fb fbaf 	bl	80001f0 <memchr>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d03f      	beq.n	8004b16 <_vfiprintf_r+0x20a>
 8004a96:	4b26      	ldr	r3, [pc, #152]	@ (8004b30 <_vfiprintf_r+0x224>)
 8004a98:	bb1b      	cbnz	r3, 8004ae2 <_vfiprintf_r+0x1d6>
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	3307      	adds	r3, #7
 8004a9e:	f023 0307 	bic.w	r3, r3, #7
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	9303      	str	r3, [sp, #12]
 8004aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa8:	443b      	add	r3, r7
 8004aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aac:	e76a      	b.n	8004984 <_vfiprintf_r+0x78>
 8004aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	e7a8      	b.n	8004a0a <_vfiprintf_r+0xfe>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	3401      	adds	r4, #1
 8004abc:	9305      	str	r3, [sp, #20]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f04f 0c0a 	mov.w	ip, #10
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aca:	3a30      	subs	r2, #48	@ 0x30
 8004acc:	2a09      	cmp	r2, #9
 8004ace:	d903      	bls.n	8004ad8 <_vfiprintf_r+0x1cc>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0c6      	beq.n	8004a62 <_vfiprintf_r+0x156>
 8004ad4:	9105      	str	r1, [sp, #20]
 8004ad6:	e7c4      	b.n	8004a62 <_vfiprintf_r+0x156>
 8004ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004adc:	4604      	mov	r4, r0
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e7f0      	b.n	8004ac4 <_vfiprintf_r+0x1b8>
 8004ae2:	ab03      	add	r3, sp, #12
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	462a      	mov	r2, r5
 8004ae8:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <_vfiprintf_r+0x228>)
 8004aea:	a904      	add	r1, sp, #16
 8004aec:	4630      	mov	r0, r6
 8004aee:	f3af 8000 	nop.w
 8004af2:	4607      	mov	r7, r0
 8004af4:	1c78      	adds	r0, r7, #1
 8004af6:	d1d6      	bne.n	8004aa6 <_vfiprintf_r+0x19a>
 8004af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004afa:	07d9      	lsls	r1, r3, #31
 8004afc:	d405      	bmi.n	8004b0a <_vfiprintf_r+0x1fe>
 8004afe:	89ab      	ldrh	r3, [r5, #12]
 8004b00:	059a      	lsls	r2, r3, #22
 8004b02:	d402      	bmi.n	8004b0a <_vfiprintf_r+0x1fe>
 8004b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b06:	f7ff fddd 	bl	80046c4 <__retarget_lock_release_recursive>
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	065b      	lsls	r3, r3, #25
 8004b0e:	f53f af1f 	bmi.w	8004950 <_vfiprintf_r+0x44>
 8004b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b14:	e71e      	b.n	8004954 <_vfiprintf_r+0x48>
 8004b16:	ab03      	add	r3, sp, #12
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	462a      	mov	r2, r5
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <_vfiprintf_r+0x228>)
 8004b1e:	a904      	add	r1, sp, #16
 8004b20:	4630      	mov	r0, r6
 8004b22:	f000 f879 	bl	8004c18 <_printf_i>
 8004b26:	e7e4      	b.n	8004af2 <_vfiprintf_r+0x1e6>
 8004b28:	0800526e 	.word	0x0800526e
 8004b2c:	08005278 	.word	0x08005278
 8004b30:	00000000 	.word	0x00000000
 8004b34:	080048e7 	.word	0x080048e7
 8004b38:	08005274 	.word	0x08005274

08004b3c <_printf_common>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	4616      	mov	r6, r2
 8004b42:	4698      	mov	r8, r3
 8004b44:	688a      	ldr	r2, [r1, #8]
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bfb8      	it	lt
 8004b50:	4613      	movlt	r3, r2
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b58:	4607      	mov	r7, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	b10a      	cbz	r2, 8004b62 <_printf_common+0x26>
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	bf42      	ittt	mi
 8004b68:	6833      	ldrmi	r3, [r6, #0]
 8004b6a:	3302      	addmi	r3, #2
 8004b6c:	6033      	strmi	r3, [r6, #0]
 8004b6e:	6825      	ldr	r5, [r4, #0]
 8004b70:	f015 0506 	ands.w	r5, r5, #6
 8004b74:	d106      	bne.n	8004b84 <_printf_common+0x48>
 8004b76:	f104 0a19 	add.w	sl, r4, #25
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	6832      	ldr	r2, [r6, #0]
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dc26      	bgt.n	8004bd2 <_printf_common+0x96>
 8004b84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	3b00      	subs	r3, #0
 8004b8c:	bf18      	it	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	0692      	lsls	r2, r2, #26
 8004b92:	d42b      	bmi.n	8004bec <_printf_common+0xb0>
 8004b94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b98:	4641      	mov	r1, r8
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	47c8      	blx	r9
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d01e      	beq.n	8004be0 <_printf_common+0xa4>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	6922      	ldr	r2, [r4, #16]
 8004ba6:	f003 0306 	and.w	r3, r3, #6
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf02      	ittt	eq
 8004bae:	68e5      	ldreq	r5, [r4, #12]
 8004bb0:	6833      	ldreq	r3, [r6, #0]
 8004bb2:	1aed      	subeq	r5, r5, r3
 8004bb4:	68a3      	ldr	r3, [r4, #8]
 8004bb6:	bf0c      	ite	eq
 8004bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bbc:	2500      	movne	r5, #0
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	bfc4      	itt	gt
 8004bc2:	1a9b      	subgt	r3, r3, r2
 8004bc4:	18ed      	addgt	r5, r5, r3
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	341a      	adds	r4, #26
 8004bca:	42b5      	cmp	r5, r6
 8004bcc:	d11a      	bne.n	8004c04 <_printf_common+0xc8>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e008      	b.n	8004be4 <_printf_common+0xa8>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4652      	mov	r2, sl
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	4638      	mov	r0, r7
 8004bda:	47c8      	blx	r9
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d103      	bne.n	8004be8 <_printf_common+0xac>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	3501      	adds	r5, #1
 8004bea:	e7c6      	b.n	8004b7a <_printf_common+0x3e>
 8004bec:	18e1      	adds	r1, r4, r3
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	2030      	movs	r0, #48	@ 0x30
 8004bf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bf6:	4422      	add	r2, r4
 8004bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c00:	3302      	adds	r3, #2
 8004c02:	e7c7      	b.n	8004b94 <_printf_common+0x58>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4622      	mov	r2, r4
 8004c08:	4641      	mov	r1, r8
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	47c8      	blx	r9
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d0e6      	beq.n	8004be0 <_printf_common+0xa4>
 8004c12:	3601      	adds	r6, #1
 8004c14:	e7d9      	b.n	8004bca <_printf_common+0x8e>
	...

08004c18 <_printf_i>:
 8004c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	7e0f      	ldrb	r7, [r1, #24]
 8004c1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c20:	2f78      	cmp	r7, #120	@ 0x78
 8004c22:	4691      	mov	r9, r2
 8004c24:	4680      	mov	r8, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	469a      	mov	sl, r3
 8004c2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c2e:	d807      	bhi.n	8004c40 <_printf_i+0x28>
 8004c30:	2f62      	cmp	r7, #98	@ 0x62
 8004c32:	d80a      	bhi.n	8004c4a <_printf_i+0x32>
 8004c34:	2f00      	cmp	r7, #0
 8004c36:	f000 80d2 	beq.w	8004dde <_printf_i+0x1c6>
 8004c3a:	2f58      	cmp	r7, #88	@ 0x58
 8004c3c:	f000 80b9 	beq.w	8004db2 <_printf_i+0x19a>
 8004c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c48:	e03a      	b.n	8004cc0 <_printf_i+0xa8>
 8004c4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c4e:	2b15      	cmp	r3, #21
 8004c50:	d8f6      	bhi.n	8004c40 <_printf_i+0x28>
 8004c52:	a101      	add	r1, pc, #4	@ (adr r1, 8004c58 <_printf_i+0x40>)
 8004c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c58:	08004cb1 	.word	0x08004cb1
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004c41 	.word	0x08004c41
 8004c64:	08004c41 	.word	0x08004c41
 8004c68:	08004c41 	.word	0x08004c41
 8004c6c:	08004c41 	.word	0x08004c41
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004c41 	.word	0x08004c41
 8004c78:	08004c41 	.word	0x08004c41
 8004c7c:	08004c41 	.word	0x08004c41
 8004c80:	08004c41 	.word	0x08004c41
 8004c84:	08004dc5 	.word	0x08004dc5
 8004c88:	08004cef 	.word	0x08004cef
 8004c8c:	08004d7f 	.word	0x08004d7f
 8004c90:	08004c41 	.word	0x08004c41
 8004c94:	08004c41 	.word	0x08004c41
 8004c98:	08004de7 	.word	0x08004de7
 8004c9c:	08004c41 	.word	0x08004c41
 8004ca0:	08004cef 	.word	0x08004cef
 8004ca4:	08004c41 	.word	0x08004c41
 8004ca8:	08004c41 	.word	0x08004c41
 8004cac:	08004d87 	.word	0x08004d87
 8004cb0:	6833      	ldr	r3, [r6, #0]
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6032      	str	r2, [r6, #0]
 8004cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e09d      	b.n	8004e00 <_printf_i+0x1e8>
 8004cc4:	6833      	ldr	r3, [r6, #0]
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1d19      	adds	r1, r3, #4
 8004cca:	6031      	str	r1, [r6, #0]
 8004ccc:	0606      	lsls	r6, r0, #24
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0xbc>
 8004cd0:	681d      	ldr	r5, [r3, #0]
 8004cd2:	e003      	b.n	8004cdc <_printf_i+0xc4>
 8004cd4:	0645      	lsls	r5, r0, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0xb8>
 8004cd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cdc:	2d00      	cmp	r5, #0
 8004cde:	da03      	bge.n	8004ce8 <_printf_i+0xd0>
 8004ce0:	232d      	movs	r3, #45	@ 0x2d
 8004ce2:	426d      	negs	r5, r5
 8004ce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ce8:	4859      	ldr	r0, [pc, #356]	@ (8004e50 <_printf_i+0x238>)
 8004cea:	230a      	movs	r3, #10
 8004cec:	e011      	b.n	8004d12 <_printf_i+0xfa>
 8004cee:	6821      	ldr	r1, [r4, #0]
 8004cf0:	6833      	ldr	r3, [r6, #0]
 8004cf2:	0608      	lsls	r0, r1, #24
 8004cf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cf8:	d402      	bmi.n	8004d00 <_printf_i+0xe8>
 8004cfa:	0649      	lsls	r1, r1, #25
 8004cfc:	bf48      	it	mi
 8004cfe:	b2ad      	uxthmi	r5, r5
 8004d00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d02:	4853      	ldr	r0, [pc, #332]	@ (8004e50 <_printf_i+0x238>)
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	bf14      	ite	ne
 8004d08:	230a      	movne	r3, #10
 8004d0a:	2308      	moveq	r3, #8
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d12:	6866      	ldr	r6, [r4, #4]
 8004d14:	60a6      	str	r6, [r4, #8]
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	bfa2      	ittt	ge
 8004d1a:	6821      	ldrge	r1, [r4, #0]
 8004d1c:	f021 0104 	bicge.w	r1, r1, #4
 8004d20:	6021      	strge	r1, [r4, #0]
 8004d22:	b90d      	cbnz	r5, 8004d28 <_printf_i+0x110>
 8004d24:	2e00      	cmp	r6, #0
 8004d26:	d04b      	beq.n	8004dc0 <_printf_i+0x1a8>
 8004d28:	4616      	mov	r6, r2
 8004d2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004d32:	5dc7      	ldrb	r7, [r0, r7]
 8004d34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d38:	462f      	mov	r7, r5
 8004d3a:	42bb      	cmp	r3, r7
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	d9f4      	bls.n	8004d2a <_printf_i+0x112>
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d10b      	bne.n	8004d5c <_printf_i+0x144>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	07df      	lsls	r7, r3, #31
 8004d48:	d508      	bpl.n	8004d5c <_printf_i+0x144>
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	6861      	ldr	r1, [r4, #4]
 8004d4e:	4299      	cmp	r1, r3
 8004d50:	bfde      	ittt	le
 8004d52:	2330      	movle	r3, #48	@ 0x30
 8004d54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d5c:	1b92      	subs	r2, r2, r6
 8004d5e:	6122      	str	r2, [r4, #16]
 8004d60:	f8cd a000 	str.w	sl, [sp]
 8004d64:	464b      	mov	r3, r9
 8004d66:	aa03      	add	r2, sp, #12
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	f7ff fee6 	bl	8004b3c <_printf_common>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d14a      	bne.n	8004e0a <_printf_i+0x1f2>
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	b004      	add	sp, #16
 8004d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f043 0320 	orr.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	4833      	ldr	r0, [pc, #204]	@ (8004e54 <_printf_i+0x23c>)
 8004d88:	2778      	movs	r7, #120	@ 0x78
 8004d8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	6831      	ldr	r1, [r6, #0]
 8004d92:	061f      	lsls	r7, r3, #24
 8004d94:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d98:	d402      	bmi.n	8004da0 <_printf_i+0x188>
 8004d9a:	065f      	lsls	r7, r3, #25
 8004d9c:	bf48      	it	mi
 8004d9e:	b2ad      	uxthmi	r5, r5
 8004da0:	6031      	str	r1, [r6, #0]
 8004da2:	07d9      	lsls	r1, r3, #31
 8004da4:	bf44      	itt	mi
 8004da6:	f043 0320 	orrmi.w	r3, r3, #32
 8004daa:	6023      	strmi	r3, [r4, #0]
 8004dac:	b11d      	cbz	r5, 8004db6 <_printf_i+0x19e>
 8004dae:	2310      	movs	r3, #16
 8004db0:	e7ac      	b.n	8004d0c <_printf_i+0xf4>
 8004db2:	4827      	ldr	r0, [pc, #156]	@ (8004e50 <_printf_i+0x238>)
 8004db4:	e7e9      	b.n	8004d8a <_printf_i+0x172>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f023 0320 	bic.w	r3, r3, #32
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	e7f6      	b.n	8004dae <_printf_i+0x196>
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	e7bd      	b.n	8004d40 <_printf_i+0x128>
 8004dc4:	6833      	ldr	r3, [r6, #0]
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	6961      	ldr	r1, [r4, #20]
 8004dca:	1d18      	adds	r0, r3, #4
 8004dcc:	6030      	str	r0, [r6, #0]
 8004dce:	062e      	lsls	r6, r5, #24
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	d501      	bpl.n	8004dd8 <_printf_i+0x1c0>
 8004dd4:	6019      	str	r1, [r3, #0]
 8004dd6:	e002      	b.n	8004dde <_printf_i+0x1c6>
 8004dd8:	0668      	lsls	r0, r5, #25
 8004dda:	d5fb      	bpl.n	8004dd4 <_printf_i+0x1bc>
 8004ddc:	8019      	strh	r1, [r3, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	4616      	mov	r6, r2
 8004de4:	e7bc      	b.n	8004d60 <_printf_i+0x148>
 8004de6:	6833      	ldr	r3, [r6, #0]
 8004de8:	1d1a      	adds	r2, r3, #4
 8004dea:	6032      	str	r2, [r6, #0]
 8004dec:	681e      	ldr	r6, [r3, #0]
 8004dee:	6862      	ldr	r2, [r4, #4]
 8004df0:	2100      	movs	r1, #0
 8004df2:	4630      	mov	r0, r6
 8004df4:	f7fb f9fc 	bl	80001f0 <memchr>
 8004df8:	b108      	cbz	r0, 8004dfe <_printf_i+0x1e6>
 8004dfa:	1b80      	subs	r0, r0, r6
 8004dfc:	6060      	str	r0, [r4, #4]
 8004dfe:	6863      	ldr	r3, [r4, #4]
 8004e00:	6123      	str	r3, [r4, #16]
 8004e02:	2300      	movs	r3, #0
 8004e04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e08:	e7aa      	b.n	8004d60 <_printf_i+0x148>
 8004e0a:	6923      	ldr	r3, [r4, #16]
 8004e0c:	4632      	mov	r2, r6
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4640      	mov	r0, r8
 8004e12:	47d0      	blx	sl
 8004e14:	3001      	adds	r0, #1
 8004e16:	d0ad      	beq.n	8004d74 <_printf_i+0x15c>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	079b      	lsls	r3, r3, #30
 8004e1c:	d413      	bmi.n	8004e46 <_printf_i+0x22e>
 8004e1e:	68e0      	ldr	r0, [r4, #12]
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	4298      	cmp	r0, r3
 8004e24:	bfb8      	it	lt
 8004e26:	4618      	movlt	r0, r3
 8004e28:	e7a6      	b.n	8004d78 <_printf_i+0x160>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4640      	mov	r0, r8
 8004e32:	47d0      	blx	sl
 8004e34:	3001      	adds	r0, #1
 8004e36:	d09d      	beq.n	8004d74 <_printf_i+0x15c>
 8004e38:	3501      	adds	r5, #1
 8004e3a:	68e3      	ldr	r3, [r4, #12]
 8004e3c:	9903      	ldr	r1, [sp, #12]
 8004e3e:	1a5b      	subs	r3, r3, r1
 8004e40:	42ab      	cmp	r3, r5
 8004e42:	dcf2      	bgt.n	8004e2a <_printf_i+0x212>
 8004e44:	e7eb      	b.n	8004e1e <_printf_i+0x206>
 8004e46:	2500      	movs	r5, #0
 8004e48:	f104 0619 	add.w	r6, r4, #25
 8004e4c:	e7f5      	b.n	8004e3a <_printf_i+0x222>
 8004e4e:	bf00      	nop
 8004e50:	0800527f 	.word	0x0800527f
 8004e54:	08005290 	.word	0x08005290

08004e58 <__sflush_r>:
 8004e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e60:	0716      	lsls	r6, r2, #28
 8004e62:	4605      	mov	r5, r0
 8004e64:	460c      	mov	r4, r1
 8004e66:	d454      	bmi.n	8004f12 <__sflush_r+0xba>
 8004e68:	684b      	ldr	r3, [r1, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dc02      	bgt.n	8004e74 <__sflush_r+0x1c>
 8004e6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dd48      	ble.n	8004f06 <__sflush_r+0xae>
 8004e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	d045      	beq.n	8004f06 <__sflush_r+0xae>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e80:	682f      	ldr	r7, [r5, #0]
 8004e82:	6a21      	ldr	r1, [r4, #32]
 8004e84:	602b      	str	r3, [r5, #0]
 8004e86:	d030      	beq.n	8004eea <__sflush_r+0x92>
 8004e88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	0759      	lsls	r1, r3, #29
 8004e8e:	d505      	bpl.n	8004e9c <__sflush_r+0x44>
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e96:	b10b      	cbz	r3, 8004e9c <__sflush_r+0x44>
 8004e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e9a:	1ad2      	subs	r2, r2, r3
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ea0:	6a21      	ldr	r1, [r4, #32]
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b0      	blx	r6
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	d106      	bne.n	8004eba <__sflush_r+0x62>
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	291d      	cmp	r1, #29
 8004eb0:	d82b      	bhi.n	8004f0a <__sflush_r+0xb2>
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f5c <__sflush_r+0x104>)
 8004eb4:	410a      	asrs	r2, r1
 8004eb6:	07d6      	lsls	r6, r2, #31
 8004eb8:	d427      	bmi.n	8004f0a <__sflush_r+0xb2>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	6062      	str	r2, [r4, #4]
 8004ebe:	04d9      	lsls	r1, r3, #19
 8004ec0:	6922      	ldr	r2, [r4, #16]
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	d504      	bpl.n	8004ed0 <__sflush_r+0x78>
 8004ec6:	1c42      	adds	r2, r0, #1
 8004ec8:	d101      	bne.n	8004ece <__sflush_r+0x76>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	b903      	cbnz	r3, 8004ed0 <__sflush_r+0x78>
 8004ece:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ed2:	602f      	str	r7, [r5, #0]
 8004ed4:	b1b9      	cbz	r1, 8004f06 <__sflush_r+0xae>
 8004ed6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eda:	4299      	cmp	r1, r3
 8004edc:	d002      	beq.n	8004ee4 <__sflush_r+0x8c>
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f7ff fbf2 	bl	80046c8 <_free_r>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ee8:	e00d      	b.n	8004f06 <__sflush_r+0xae>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b0      	blx	r6
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	1c50      	adds	r0, r2, #1
 8004ef4:	d1c9      	bne.n	8004e8a <__sflush_r+0x32>
 8004ef6:	682b      	ldr	r3, [r5, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0c6      	beq.n	8004e8a <__sflush_r+0x32>
 8004efc:	2b1d      	cmp	r3, #29
 8004efe:	d001      	beq.n	8004f04 <__sflush_r+0xac>
 8004f00:	2b16      	cmp	r3, #22
 8004f02:	d11e      	bne.n	8004f42 <__sflush_r+0xea>
 8004f04:	602f      	str	r7, [r5, #0]
 8004f06:	2000      	movs	r0, #0
 8004f08:	e022      	b.n	8004f50 <__sflush_r+0xf8>
 8004f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f0e:	b21b      	sxth	r3, r3
 8004f10:	e01b      	b.n	8004f4a <__sflush_r+0xf2>
 8004f12:	690f      	ldr	r7, [r1, #16]
 8004f14:	2f00      	cmp	r7, #0
 8004f16:	d0f6      	beq.n	8004f06 <__sflush_r+0xae>
 8004f18:	0793      	lsls	r3, r2, #30
 8004f1a:	680e      	ldr	r6, [r1, #0]
 8004f1c:	bf08      	it	eq
 8004f1e:	694b      	ldreq	r3, [r1, #20]
 8004f20:	600f      	str	r7, [r1, #0]
 8004f22:	bf18      	it	ne
 8004f24:	2300      	movne	r3, #0
 8004f26:	eba6 0807 	sub.w	r8, r6, r7
 8004f2a:	608b      	str	r3, [r1, #8]
 8004f2c:	f1b8 0f00 	cmp.w	r8, #0
 8004f30:	dde9      	ble.n	8004f06 <__sflush_r+0xae>
 8004f32:	6a21      	ldr	r1, [r4, #32]
 8004f34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f36:	4643      	mov	r3, r8
 8004f38:	463a      	mov	r2, r7
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b0      	blx	r6
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	dc08      	bgt.n	8004f54 <__sflush_r+0xfc>
 8004f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	4407      	add	r7, r0
 8004f56:	eba8 0800 	sub.w	r8, r8, r0
 8004f5a:	e7e7      	b.n	8004f2c <__sflush_r+0xd4>
 8004f5c:	dfbffffe 	.word	0xdfbffffe

08004f60 <_fflush_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	690b      	ldr	r3, [r1, #16]
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	b913      	cbnz	r3, 8004f70 <_fflush_r+0x10>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	b118      	cbz	r0, 8004f7a <_fflush_r+0x1a>
 8004f72:	6a03      	ldr	r3, [r0, #32]
 8004f74:	b90b      	cbnz	r3, 8004f7a <_fflush_r+0x1a>
 8004f76:	f7ff fa9f 	bl	80044b8 <__sinit>
 8004f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f3      	beq.n	8004f6a <_fflush_r+0xa>
 8004f82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f84:	07d0      	lsls	r0, r2, #31
 8004f86:	d404      	bmi.n	8004f92 <_fflush_r+0x32>
 8004f88:	0599      	lsls	r1, r3, #22
 8004f8a:	d402      	bmi.n	8004f92 <_fflush_r+0x32>
 8004f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f8e:	f7ff fb98 	bl	80046c2 <__retarget_lock_acquire_recursive>
 8004f92:	4628      	mov	r0, r5
 8004f94:	4621      	mov	r1, r4
 8004f96:	f7ff ff5f 	bl	8004e58 <__sflush_r>
 8004f9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f9c:	07da      	lsls	r2, r3, #31
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	d4e4      	bmi.n	8004f6c <_fflush_r+0xc>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	059b      	lsls	r3, r3, #22
 8004fa6:	d4e1      	bmi.n	8004f6c <_fflush_r+0xc>
 8004fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004faa:	f7ff fb8b 	bl	80046c4 <__retarget_lock_release_recursive>
 8004fae:	e7dd      	b.n	8004f6c <_fflush_r+0xc>

08004fb0 <__swbuf_r>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	460e      	mov	r6, r1
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	b118      	cbz	r0, 8004fc2 <__swbuf_r+0x12>
 8004fba:	6a03      	ldr	r3, [r0, #32]
 8004fbc:	b90b      	cbnz	r3, 8004fc2 <__swbuf_r+0x12>
 8004fbe:	f7ff fa7b 	bl	80044b8 <__sinit>
 8004fc2:	69a3      	ldr	r3, [r4, #24]
 8004fc4:	60a3      	str	r3, [r4, #8]
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	071a      	lsls	r2, r3, #28
 8004fca:	d501      	bpl.n	8004fd0 <__swbuf_r+0x20>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	b943      	cbnz	r3, 8004fe2 <__swbuf_r+0x32>
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 f82a 	bl	800502c <__swsetup_r>
 8004fd8:	b118      	cbz	r0, 8004fe2 <__swbuf_r+0x32>
 8004fda:	f04f 37ff 	mov.w	r7, #4294967295
 8004fde:	4638      	mov	r0, r7
 8004fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	6922      	ldr	r2, [r4, #16]
 8004fe6:	1a98      	subs	r0, r3, r2
 8004fe8:	6963      	ldr	r3, [r4, #20]
 8004fea:	b2f6      	uxtb	r6, r6
 8004fec:	4283      	cmp	r3, r0
 8004fee:	4637      	mov	r7, r6
 8004ff0:	dc05      	bgt.n	8004ffe <__swbuf_r+0x4e>
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f7ff ffb3 	bl	8004f60 <_fflush_r>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d1ed      	bne.n	8004fda <__swbuf_r+0x2a>
 8004ffe:	68a3      	ldr	r3, [r4, #8]
 8005000:	3b01      	subs	r3, #1
 8005002:	60a3      	str	r3, [r4, #8]
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	6022      	str	r2, [r4, #0]
 800500a:	701e      	strb	r6, [r3, #0]
 800500c:	6962      	ldr	r2, [r4, #20]
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	429a      	cmp	r2, r3
 8005012:	d004      	beq.n	800501e <__swbuf_r+0x6e>
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	07db      	lsls	r3, r3, #31
 8005018:	d5e1      	bpl.n	8004fde <__swbuf_r+0x2e>
 800501a:	2e0a      	cmp	r6, #10
 800501c:	d1df      	bne.n	8004fde <__swbuf_r+0x2e>
 800501e:	4621      	mov	r1, r4
 8005020:	4628      	mov	r0, r5
 8005022:	f7ff ff9d 	bl	8004f60 <_fflush_r>
 8005026:	2800      	cmp	r0, #0
 8005028:	d0d9      	beq.n	8004fde <__swbuf_r+0x2e>
 800502a:	e7d6      	b.n	8004fda <__swbuf_r+0x2a>

0800502c <__swsetup_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4b29      	ldr	r3, [pc, #164]	@ (80050d4 <__swsetup_r+0xa8>)
 8005030:	4605      	mov	r5, r0
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	460c      	mov	r4, r1
 8005036:	b118      	cbz	r0, 8005040 <__swsetup_r+0x14>
 8005038:	6a03      	ldr	r3, [r0, #32]
 800503a:	b90b      	cbnz	r3, 8005040 <__swsetup_r+0x14>
 800503c:	f7ff fa3c 	bl	80044b8 <__sinit>
 8005040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005044:	0719      	lsls	r1, r3, #28
 8005046:	d422      	bmi.n	800508e <__swsetup_r+0x62>
 8005048:	06da      	lsls	r2, r3, #27
 800504a:	d407      	bmi.n	800505c <__swsetup_r+0x30>
 800504c:	2209      	movs	r2, #9
 800504e:	602a      	str	r2, [r5, #0]
 8005050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	e033      	b.n	80050c4 <__swsetup_r+0x98>
 800505c:	0758      	lsls	r0, r3, #29
 800505e:	d512      	bpl.n	8005086 <__swsetup_r+0x5a>
 8005060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005062:	b141      	cbz	r1, 8005076 <__swsetup_r+0x4a>
 8005064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005068:	4299      	cmp	r1, r3
 800506a:	d002      	beq.n	8005072 <__swsetup_r+0x46>
 800506c:	4628      	mov	r0, r5
 800506e:	f7ff fb2b 	bl	80046c8 <_free_r>
 8005072:	2300      	movs	r3, #0
 8005074:	6363      	str	r3, [r4, #52]	@ 0x34
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	2300      	movs	r3, #0
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f043 0308 	orr.w	r3, r3, #8
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	b94b      	cbnz	r3, 80050a6 <__swsetup_r+0x7a>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800509c:	d003      	beq.n	80050a6 <__swsetup_r+0x7a>
 800509e:	4621      	mov	r1, r4
 80050a0:	4628      	mov	r0, r5
 80050a2:	f000 f84f 	bl	8005144 <__smakebuf_r>
 80050a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050aa:	f013 0201 	ands.w	r2, r3, #1
 80050ae:	d00a      	beq.n	80050c6 <__swsetup_r+0x9a>
 80050b0:	2200      	movs	r2, #0
 80050b2:	60a2      	str	r2, [r4, #8]
 80050b4:	6962      	ldr	r2, [r4, #20]
 80050b6:	4252      	negs	r2, r2
 80050b8:	61a2      	str	r2, [r4, #24]
 80050ba:	6922      	ldr	r2, [r4, #16]
 80050bc:	b942      	cbnz	r2, 80050d0 <__swsetup_r+0xa4>
 80050be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050c2:	d1c5      	bne.n	8005050 <__swsetup_r+0x24>
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	0799      	lsls	r1, r3, #30
 80050c8:	bf58      	it	pl
 80050ca:	6962      	ldrpl	r2, [r4, #20]
 80050cc:	60a2      	str	r2, [r4, #8]
 80050ce:	e7f4      	b.n	80050ba <__swsetup_r+0x8e>
 80050d0:	2000      	movs	r0, #0
 80050d2:	e7f7      	b.n	80050c4 <__swsetup_r+0x98>
 80050d4:	20000020 	.word	0x20000020

080050d8 <_sbrk_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d06      	ldr	r5, [pc, #24]	@ (80050f4 <_sbrk_r+0x1c>)
 80050dc:	2300      	movs	r3, #0
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fc f9ea 	bl	80014bc <_sbrk>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_sbrk_r+0x1a>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_sbrk_r+0x1a>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20000324 	.word	0x20000324

080050f8 <__swhatbuf_r>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	460c      	mov	r4, r1
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	2900      	cmp	r1, #0
 8005102:	b096      	sub	sp, #88	@ 0x58
 8005104:	4615      	mov	r5, r2
 8005106:	461e      	mov	r6, r3
 8005108:	da0d      	bge.n	8005126 <__swhatbuf_r+0x2e>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005110:	f04f 0100 	mov.w	r1, #0
 8005114:	bf14      	ite	ne
 8005116:	2340      	movne	r3, #64	@ 0x40
 8005118:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800511c:	2000      	movs	r0, #0
 800511e:	6031      	str	r1, [r6, #0]
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	b016      	add	sp, #88	@ 0x58
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	466a      	mov	r2, sp
 8005128:	f000 f848 	bl	80051bc <_fstat_r>
 800512c:	2800      	cmp	r0, #0
 800512e:	dbec      	blt.n	800510a <__swhatbuf_r+0x12>
 8005130:	9901      	ldr	r1, [sp, #4]
 8005132:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005136:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800513a:	4259      	negs	r1, r3
 800513c:	4159      	adcs	r1, r3
 800513e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005142:	e7eb      	b.n	800511c <__swhatbuf_r+0x24>

08005144 <__smakebuf_r>:
 8005144:	898b      	ldrh	r3, [r1, #12]
 8005146:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005148:	079d      	lsls	r5, r3, #30
 800514a:	4606      	mov	r6, r0
 800514c:	460c      	mov	r4, r1
 800514e:	d507      	bpl.n	8005160 <__smakebuf_r+0x1c>
 8005150:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2301      	movs	r3, #1
 800515a:	6163      	str	r3, [r4, #20]
 800515c:	b003      	add	sp, #12
 800515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005160:	ab01      	add	r3, sp, #4
 8005162:	466a      	mov	r2, sp
 8005164:	f7ff ffc8 	bl	80050f8 <__swhatbuf_r>
 8005168:	9f00      	ldr	r7, [sp, #0]
 800516a:	4605      	mov	r5, r0
 800516c:	4639      	mov	r1, r7
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff fb16 	bl	80047a0 <_malloc_r>
 8005174:	b948      	cbnz	r0, 800518a <__smakebuf_r+0x46>
 8005176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517a:	059a      	lsls	r2, r3, #22
 800517c:	d4ee      	bmi.n	800515c <__smakebuf_r+0x18>
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	e7e2      	b.n	8005150 <__smakebuf_r+0xc>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	6020      	str	r0, [r4, #0]
 800518e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	9b01      	ldr	r3, [sp, #4]
 8005196:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800519a:	b15b      	cbz	r3, 80051b4 <__smakebuf_r+0x70>
 800519c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a0:	4630      	mov	r0, r6
 80051a2:	f000 f81d 	bl	80051e0 <_isatty_r>
 80051a6:	b128      	cbz	r0, 80051b4 <__smakebuf_r+0x70>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	f023 0303 	bic.w	r3, r3, #3
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	431d      	orrs	r5, r3
 80051b8:	81a5      	strh	r5, [r4, #12]
 80051ba:	e7cf      	b.n	800515c <__smakebuf_r+0x18>

080051bc <_fstat_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	@ (80051dc <_fstat_r+0x20>)
 80051c0:	2300      	movs	r3, #0
 80051c2:	4604      	mov	r4, r0
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	f7fe ff68 	bl	800409e <_fstat>
 80051ce:	1c43      	adds	r3, r0, #1
 80051d0:	d102      	bne.n	80051d8 <_fstat_r+0x1c>
 80051d2:	682b      	ldr	r3, [r5, #0]
 80051d4:	b103      	cbz	r3, 80051d8 <_fstat_r+0x1c>
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
 80051da:	bf00      	nop
 80051dc:	20000324 	.word	0x20000324

080051e0 <_isatty_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	@ (80051fc <_isatty_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7ff f8ba 	bl	8004364 <_isatty>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_isatty_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_isatty_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000324 	.word	0x20000324

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
