
intro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004b48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08004bb8  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004bb8  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f4a  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001768  00000000  00000000  0000efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00010758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076f  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160fd  00000000  00000000  0001186f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a89e  00000000  00000000  0002796c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf6a  00000000  00000000  0003220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  000be1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c14c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ab8 	.word	0x08004ab8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004ab8 	.word	0x08004ab8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 initialise_monitor_handles();
 8000584:	f003 faea 	bl	8003b5c <initialise_monitor_handles>
	printf("test");
 8000588:	480e      	ldr	r0, [pc, #56]	@ (80005c4 <main+0x44>)
 800058a:	f003 fc27 	bl	8003ddc <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc9d 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f81d 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f981 	bl	800089c <MX_GPIO_Init>
  MX_TIM4_Init();
 800059a:	f000 f8f3 	bl	8000784 <MX_TIM4_Init>
  MX_TIM2_Init();
 800059e:	f000 f881 	bl	80006a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Base_Start_IT(&htim4);
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <main+0x48>)
 80005a4:	f001 fc82 	bl	8001eac <HAL_TIM_Base_Start_IT>
  	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <main+0x48>)
 80005ac:	f001 fd3a 	bl	8002024 <HAL_TIM_OC_Start>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 80005b0:	2108      	movs	r1, #8
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <main+0x48>)
 80005b4:	f001 fe40 	bl	8002238 <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <main+0x4c>)
 80005bc:	f001 ff94 	bl	80024e8 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0x40>
 80005c4:	08004ad0 	.word	0x08004ad0
 80005c8:	200000d4 	.word	0x200000d4
 80005cc:	2000008c 	.word	0x2000008c

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fc51 	bl	8003e86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000644:	23c0      	movs	r3, #192	@ 0xc0
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 ff75 	bl	8001544 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 faaa 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f9d6 	bl	8001a34 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 fa93 	bl	8000bb8 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006d8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006e4:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f8:	4821      	ldr	r0, [pc, #132]	@ (8000780 <MX_TIM2_Init+0xdc>)
 80006fa:	f001 fb87 	bl	8001e0c <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000704:	f000 fa58 	bl	8000bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4619      	mov	r1, r3
 8000714:	481a      	ldr	r0, [pc, #104]	@ (8000780 <MX_TIM2_Init+0xdc>)
 8000716:	f002 faab 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000720:	f000 fa4a 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000724:	4816      	ldr	r0, [pc, #88]	@ (8000780 <MX_TIM2_Init+0xdc>)
 8000726:	f001 fe85 	bl	8002434 <HAL_TIM_IC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 fa42 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	480f      	ldr	r0, [pc, #60]	@ (8000780 <MX_TIM2_Init+0xdc>)
 8000744:	f002 ff70 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800074e:	f000 fa33 	bl	8000bb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_TIM2_Init+0xdc>)
 800076a:	f002 f923 	bl	80029b4 <HAL_TIM_IC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000774:	f000 fa20 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	@ 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000008c 	.word	0x2000008c

08000784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	@ 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007b4:	4b37      	ldr	r3, [pc, #220]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007b6:	4a38      	ldr	r2, [pc, #224]	@ (8000898 <MX_TIM4_Init+0x114>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 80007ba:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80007c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007c8:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007dc:	482d      	ldr	r0, [pc, #180]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007de:	f001 fb15 	bl	8001e0c <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007e8:	f000 f9e6 	bl	8000bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4826      	ldr	r0, [pc, #152]	@ (8000894 <MX_TIM4_Init+0x110>)
 80007fa:	f002 fa39 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000804:	f000 f9d8 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000808:	4822      	ldr	r0, [pc, #136]	@ (8000894 <MX_TIM4_Init+0x110>)
 800080a:	f001 fbb1 	bl	8001f70 <HAL_TIM_OC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 f9d0 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000818:	481e      	ldr	r0, [pc, #120]	@ (8000894 <MX_TIM4_Init+0x110>)
 800081a:	f001 fcb3 	bl	8002184 <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8000824:	f000 f9c8 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4619      	mov	r1, r3
 8000836:	4817      	ldr	r0, [pc, #92]	@ (8000894 <MX_TIM4_Init+0x110>)
 8000838:	f002 fef6 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000842:	f000 f9b9 	bl	8000bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000846:	2310      	movs	r3, #16
 8000848:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800084a:	23fa      	movs	r3, #250	@ 0xfa
 800084c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_TIM4_Init+0x110>)
 800085e:	f002 f84d 	bl	80028fc <HAL_TIM_OC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8000868:	f000 f9a6 	bl	8000bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	@ 0x60
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2208      	movs	r2, #8
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	@ (8000894 <MX_TIM4_Init+0x110>)
 8000878:	f002 f938 	bl	8002aec <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000882:	f000 f999 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000886:	4803      	ldr	r0, [pc, #12]	@ (8000894 <MX_TIM4_Init+0x110>)
 8000888:	f000 fa30 	bl	8000cec <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3738      	adds	r7, #56	@ 0x38
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000d4 	.word	0x200000d4
 8000898:	40000800 	.word	0x40000800

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	@ 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	4b9b      	ldr	r3, [pc, #620]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a9a      	ldr	r2, [pc, #616]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b98      	ldr	r3, [pc, #608]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0310 	and.w	r3, r3, #16
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	4b94      	ldr	r3, [pc, #592]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a93      	ldr	r2, [pc, #588]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b91      	ldr	r3, [pc, #580]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b8d      	ldr	r3, [pc, #564]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a8c      	ldr	r2, [pc, #560]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b8a      	ldr	r3, [pc, #552]	@ (8000b24 <MX_GPIO_Init+0x288>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b86      	ldr	r3, [pc, #536]	@ (8000b24 <MX_GPIO_Init+0x288>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a85      	ldr	r2, [pc, #532]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b83      	ldr	r3, [pc, #524]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b7f      	ldr	r3, [pc, #508]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a7e      	ldr	r2, [pc, #504]	@ (8000b24 <MX_GPIO_Init+0x288>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b7c      	ldr	r3, [pc, #496]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b78      	ldr	r3, [pc, #480]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a77      	ldr	r2, [pc, #476]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b75      	ldr	r3, [pc, #468]	@ (8000b24 <MX_GPIO_Init+0x288>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2108      	movs	r1, #8
 800095e:	4872      	ldr	r0, [pc, #456]	@ (8000b28 <MX_GPIO_Init+0x28c>)
 8000960:	f000 fdbc 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2101      	movs	r1, #1
 8000968:	4870      	ldr	r0, [pc, #448]	@ (8000b2c <MX_GPIO_Init+0x290>)
 800096a:	f000 fdb7 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f24a 0110 	movw	r1, #40976	@ 0xa010
 8000974:	486e      	ldr	r0, [pc, #440]	@ (8000b30 <MX_GPIO_Init+0x294>)
 8000976:	f000 fdb1 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097a:	2304      	movs	r3, #4
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4866      	ldr	r0, [pc, #408]	@ (8000b28 <MX_GPIO_Init+0x28c>)
 800098e:	f000 fc21 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000992:	2308      	movs	r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	485f      	ldr	r0, [pc, #380]	@ (8000b28 <MX_GPIO_Init+0x28c>)
 80009aa:	f000 fc13 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80009ae:	2332      	movs	r3, #50	@ 0x32
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4859      	ldr	r0, [pc, #356]	@ (8000b28 <MX_GPIO_Init+0x28c>)
 80009c4:	f000 fc06 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4853      	ldr	r0, [pc, #332]	@ (8000b2c <MX_GPIO_Init+0x290>)
 80009e0:	f000 fbf8 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e4:	2308      	movs	r3, #8
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f4:	2305      	movs	r3, #5
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	484b      	ldr	r0, [pc, #300]	@ (8000b2c <MX_GPIO_Init+0x290>)
 8000a00:	f000 fbe8 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a04:	2310      	movs	r3, #16
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a14:	2306      	movs	r3, #6
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4845      	ldr	r0, [pc, #276]	@ (8000b34 <MX_GPIO_Init+0x298>)
 8000a20:	f000 fbd8 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a24:	23e0      	movs	r3, #224	@ 0xe0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a34:	2305      	movs	r3, #5
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	483d      	ldr	r0, [pc, #244]	@ (8000b34 <MX_GPIO_Init+0x298>)
 8000a40:	f000 fbc8 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a44:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a56:	2305      	movs	r3, #5
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4835      	ldr	r0, [pc, #212]	@ (8000b38 <MX_GPIO_Init+0x29c>)
 8000a62:	f000 fbb7 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD6_Pin|Audio_RST_Pin;
 8000a66:	f24a 0310 	movw	r3, #40976	@ 0xa010
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	482c      	ldr	r0, [pc, #176]	@ (8000b30 <MX_GPIO_Init+0x294>)
 8000a80:	f000 fba8 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a84:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a96:	2306      	movs	r3, #6
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4822      	ldr	r0, [pc, #136]	@ (8000b2c <MX_GPIO_Init+0x290>)
 8000aa2:	f000 fb97 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000aa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <MX_GPIO_Init+0x298>)
 8000abc:	f000 fb8a 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ac0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <MX_GPIO_Init+0x298>)
 8000ade:	f000 fb79 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_GPIO_Init+0x294>)
 8000af6:	f000 fb6d 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <MX_GPIO_Init+0x29c>)
 8000b18:	f000 fb5c 	bl	80011d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3730      	adds	r7, #48	@ 0x30
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
		if(htim = &htim4)
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b46:	607b      	str	r3, [r7, #4]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b4e:	f000 fcde 	bl	800150e <HAL_GPIO_TogglePin>
	}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000d4 	.word	0x200000d4
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <HAL_TIM_PWM_PulseFinishedCallback>:
	uint32_t pulse_val;
	void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
		if(htim == &htim4)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d116      	bne.n	8000ba2 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
		{
			pulse_val = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_3);
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000b7c:	6013      	str	r3, [r2, #0]
			pulse_val = pulse_val + 10;
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	330a      	adds	r3, #10
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000b86:	6013      	str	r3, [r2, #0]
			if(pulse_val>1000)
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b90:	d902      	bls.n	8000b98 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
				pulse_val=0;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pulse_val);
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000b9e:	6812      	ldr	r2, [r2, #0]
 8000ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000d4 	.word	0x200000d4
 8000bb4:	2000011c 	.word	0x2000011c

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <Error_Handler+0x8>

08000bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 faa4 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	@ 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c34:	d134      	bne.n	8000ca0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4816      	ldr	r0, [pc, #88]	@ (8000ce4 <HAL_TIM_Base_MspInit+0xd0>)
 8000c8a:	f000 faa3 	bl	80011d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	201c      	movs	r0, #28
 8000c94:	f000 fa67 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c98:	201c      	movs	r0, #28
 8000c9a:	f000 fa80 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c9e:	e01a      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d115      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0xcc>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201e      	movs	r0, #30
 8000ccc:	f000 fa4b 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cd0:	201e      	movs	r0, #30
 8000cd2:	f000 fa64 	bl	800119e <HAL_NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	@ 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40000800 	.word	0x40000800

08000cec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <HAL_TIM_MspPostInit+0x68>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11e      	bne.n	8000d4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000d2a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <HAL_TIM_MspPostInit+0x70>)
 8000d48:	f000 fa44 	bl	80011d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40000800 	.word	0x40000800
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020c00 	.word	0x40020c00

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <MemManage_Handler+0x4>

08000d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db6:	f000 f8db 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <TIM2_IRQHandler+0x10>)
 8000dc6:	f001 fca9 	bl	800271c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000008c 	.word	0x2000008c

08000dd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <TIM4_IRQHandler+0x10>)
 8000dda:	f001 fc9f 	bl	800271c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000d4 	.word	0x200000d4

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f003 f884 	bl	8003f24 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000120 	.word	0x20000120
 8000e50:	20000320 	.word	0x20000320

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7c:	f7ff ffea 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	@ (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f003 f843 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eaa:	f7ff fb69 	bl	8000580 <main>
  bx  lr    
 8000eae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ebc:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 8000ec0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ec4:	20000320 	.word	0x20000320

08000ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f0c <HAL_Init+0x40>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <HAL_Init+0x40>)
 8000ee2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <HAL_Init+0x40>)
 8000eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f92b 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f808 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f00:	f7ff fe60 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_InitTick+0x54>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x58>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f943 	bl	80011ba <HAL_SYSTICK_Config>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00e      	b.n	8000f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b0f      	cmp	r3, #15
 8000f42:	d80a      	bhi.n	8000f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f000 f90b 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4a06      	ldr	r2, [pc, #24]	@ (8000f6c <HAL_InitTick+0x5c>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_IncTick+0x20>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4413      	add	r3, r2
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <HAL_IncTick+0x24>)
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000124 	.word	0x20000124

08000f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GetTick+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000124 	.word	0x20000124

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e159      	b.n	80014a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8148 	bne.w	800149e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a2 	beq.w	800149e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a56      	ldr	r2, [pc, #344]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <HAL_GPIO_Init+0x2e8>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a52      	ldr	r2, [pc, #328]	@ (80014c0 <HAL_GPIO_Init+0x2ec>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <HAL_GPIO_Init+0x2f0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x202>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a48      	ldr	r2, [pc, #288]	@ (80014c8 <HAL_GPIO_Init+0x2f4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x1fe>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a47      	ldr	r2, [pc, #284]	@ (80014cc <HAL_GPIO_Init+0x2f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x1fa>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a46      	ldr	r2, [pc, #280]	@ (80014d0 <HAL_GPIO_Init+0x2fc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x1f6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a45      	ldr	r2, [pc, #276]	@ (80014d4 <HAL_GPIO_Init+0x300>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x1f2>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x204>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	@ (80014c0 <HAL_GPIO_Init+0x2ec>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a24      	ldr	r2, [pc, #144]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001498:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <HAL_GPIO_Init+0x304>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f aea2 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150e:	b480      	push	{r7}
 8001510:	b085      	sub	sp, #20
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001520:	887a      	ldrh	r2, [r7, #2]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	041a      	lsls	r2, r3, #16
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43d9      	mvns	r1, r3
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	400b      	ands	r3, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e267      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d075      	beq.n	800164e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001562:	4b88      	ldr	r3, [pc, #544]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b04      	cmp	r3, #4
 800156c:	d00c      	beq.n	8001588 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156e:	4b85      	ldr	r3, [pc, #532]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001576:	2b08      	cmp	r3, #8
 8001578:	d112      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157a:	4b82      	ldr	r3, [pc, #520]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001582:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001586:	d10b      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	4b7e      	ldr	r3, [pc, #504]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d05b      	beq.n	800164c <HAL_RCC_OscConfig+0x108>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d157      	bne.n	800164c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e242      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a8:	d106      	bne.n	80015b8 <HAL_RCC_OscConfig+0x74>
 80015aa:	4b76      	ldr	r3, [pc, #472]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a75      	ldr	r2, [pc, #468]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xb0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x98>
 80015c2:	4b70      	ldr	r3, [pc, #448]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6f      	ldr	r2, [pc, #444]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6c      	ldr	r2, [pc, #432]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xb0>
 80015dc:	4b69      	ldr	r3, [pc, #420]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a68      	ldr	r2, [pc, #416]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b66      	ldr	r3, [pc, #408]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a65      	ldr	r2, [pc, #404]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fccc 	bl	8000f98 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fcc8 	bl	8000f98 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	@ 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e207      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b5b      	ldr	r3, [pc, #364]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xc0>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fcb8 	bl	8000f98 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fcb4 	bl	8000f98 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	@ 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1f3      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	4b51      	ldr	r3, [pc, #324]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0xe8>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d063      	beq.n	8001722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800165a:	4b4a      	ldr	r3, [pc, #296]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b47      	ldr	r3, [pc, #284]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800166e:	2b08      	cmp	r3, #8
 8001670:	d11c      	bne.n	80016ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001672:	4b44      	ldr	r3, [pc, #272]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d116      	bne.n	80016ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <HAL_RCC_OscConfig+0x152>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e1c7      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4937      	ldr	r1, [pc, #220]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	e03a      	b.n	8001722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <HAL_RCC_OscConfig+0x244>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff fc6d 	bl	8000f98 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fc69 	bl	8000f98 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1a8      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4925      	ldr	r1, [pc, #148]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_RCC_OscConfig+0x244>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fc4c 	bl	8000f98 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001704:	f7ff fc48 	bl	8000f98 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e187      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d036      	beq.n	800179c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d016      	beq.n	8001764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_RCC_OscConfig+0x248>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fc2c 	bl	8000f98 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fc28 	bl	8000f98 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e167      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_RCC_OscConfig+0x240>)
 8001758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x200>
 8001762:	e01b      	b.n	800179c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_RCC_OscConfig+0x248>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff fc15 	bl	8000f98 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	e00e      	b.n	8001790 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fc11 	bl	8000f98 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d907      	bls.n	8001790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e150      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
 8001784:	40023800 	.word	0x40023800
 8001788:	42470000 	.word	0x42470000
 800178c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	4b88      	ldr	r3, [pc, #544]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ea      	bne.n	8001772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 8097 	beq.w	80018d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b81      	ldr	r3, [pc, #516]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10f      	bne.n	80017da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b7d      	ldr	r3, [pc, #500]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	4a7c      	ldr	r2, [pc, #496]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ca:	4b7a      	ldr	r3, [pc, #488]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d6:	2301      	movs	r3, #1
 80017d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017da:	4b77      	ldr	r3, [pc, #476]	@ (80019b8 <HAL_RCC_OscConfig+0x474>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d118      	bne.n	8001818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <HAL_RCC_OscConfig+0x474>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a73      	ldr	r2, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x474>)
 80017ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fbd1 	bl	8000f98 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017fa:	f7ff fbcd 	bl	8000f98 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e10c      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_OscConfig+0x474>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d106      	bne.n	800182e <HAL_RCC_OscConfig+0x2ea>
 8001820:	4b64      	ldr	r3, [pc, #400]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001824:	4a63      	ldr	r2, [pc, #396]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	6713      	str	r3, [r2, #112]	@ 0x70
 800182c:	e01c      	b.n	8001868 <HAL_RCC_OscConfig+0x324>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x30c>
 8001836:	4b5f      	ldr	r3, [pc, #380]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183a:	4a5e      	ldr	r2, [pc, #376]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6713      	str	r3, [r2, #112]	@ 0x70
 8001842:	4b5c      	ldr	r3, [pc, #368]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001846:	4a5b      	ldr	r2, [pc, #364]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6713      	str	r3, [r2, #112]	@ 0x70
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0x324>
 8001850:	4b58      	ldr	r3, [pc, #352]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001854:	4a57      	ldr	r2, [pc, #348]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6713      	str	r3, [r2, #112]	@ 0x70
 800185c:	4b55      	ldr	r3, [pc, #340]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001860:	4a54      	ldr	r2, [pc, #336]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001862:	f023 0304 	bic.w	r3, r3, #4
 8001866:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d015      	beq.n	800189c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fb92 	bl	8000f98 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fb8e 	bl	8000f98 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0cb      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188e:	4b49      	ldr	r3, [pc, #292]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ee      	beq.n	8001878 <HAL_RCC_OscConfig+0x334>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7ff fb7c 	bl	8000f98 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff fb78 	bl	8000f98 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0b5      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ba:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ee      	bne.n	80018a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018c6:	7dfb      	ldrb	r3, [r7, #23]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018cc:	4b39      	ldr	r3, [pc, #228]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	4a38      	ldr	r2, [pc, #224]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80018d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80a1 	beq.w	8001a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018e2:	4b34      	ldr	r3, [pc, #208]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d05c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d141      	bne.n	800197a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_RCC_OscConfig+0x478>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fb4c 	bl	8000f98 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff fb48 	bl	8000f98 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e087      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	019b      	lsls	r3, r3, #6
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	085b      	lsrs	r3, r3, #1
 800193a:	3b01      	subs	r3, #1
 800193c:	041b      	lsls	r3, r3, #16
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	491b      	ldr	r1, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_RCC_OscConfig+0x478>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fb21 	bl	8000f98 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fb1d 	bl	8000f98 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e05c      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x416>
 8001978:	e054      	b.n	8001a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_RCC_OscConfig+0x478>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fb0a 	bl	8000f98 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff fb06 	bl	8000f98 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e045      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_RCC_OscConfig+0x470>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x444>
 80019a6:	e03d      	b.n	8001a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e038      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000
 80019bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_RCC_OscConfig+0x4ec>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d028      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d121      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d11a      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019f0:	4013      	ands	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a06:	085b      	lsrs	r3, r3, #1
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0cc      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a48:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <HAL_RCC_ClockConfig+0x1b8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d90c      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b65      	ldr	r3, [pc, #404]	@ (8001bec <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_ClockConfig+0x1b8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0b8      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a88:	4b59      	ldr	r3, [pc, #356]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a58      	ldr	r2, [pc, #352]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa0:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b50      	ldr	r3, [pc, #320]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	494d      	ldr	r1, [pc, #308]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d044      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b47      	ldr	r3, [pc, #284]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d119      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e07f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e06f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b02:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e067      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4b37      	ldr	r3, [pc, #220]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 0203 	bic.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4934      	ldr	r1, [pc, #208]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b24:	f7ff fa38 	bl	8000f98 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff fa34 	bl	8000f98 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e04f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d20c      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e032      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4916      	ldr	r1, [pc, #88]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bba:	f000 f821 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	490a      	ldr	r1, [pc, #40]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bd6:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <HAL_RCC_ClockConfig+0x1c8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f998 	bl	8000f10 <HAL_InitTick>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08004ad8 	.word	0x08004ad8
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c04:	b094      	sub	sp, #80	@ 0x50
 8001c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c18:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d00d      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x40>
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	f200 80e1 	bhi.w	8001dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x34>
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c32:	e0db      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4b73      	ldr	r3, [pc, #460]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c38:	e0db      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c3a:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c3e:	e0d8      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c40:	4b6f      	ldr	r3, [pc, #444]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d063      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c56:	4b6a      	ldr	r3, [pc, #424]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	099b      	lsrs	r3, r3, #6
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c72:	4622      	mov	r2, r4
 8001c74:	462b      	mov	r3, r5
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	0159      	lsls	r1, r3, #5
 8001c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c84:	0150      	lsls	r0, r2, #5
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	1a51      	subs	r1, r2, r1
 8001c8e:	6139      	str	r1, [r7, #16]
 8001c90:	4629      	mov	r1, r5
 8001c92:	eb63 0301 	sbc.w	r3, r3, r1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ca4:	4659      	mov	r1, fp
 8001ca6:	018b      	lsls	r3, r1, #6
 8001ca8:	4651      	mov	r1, sl
 8001caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cae:	4651      	mov	r1, sl
 8001cb0:	018a      	lsls	r2, r1, #6
 8001cb2:	4651      	mov	r1, sl
 8001cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb8:	4659      	mov	r1, fp
 8001cba:	eb63 0901 	sbc.w	r9, r3, r1
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	eb18 0303 	adds.w	r3, r8, r3
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	462b      	mov	r3, r5
 8001ce0:	eb49 0303 	adc.w	r3, r9, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	024b      	lsls	r3, r1, #9
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	024a      	lsls	r2, r1, #9
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d06:	2200      	movs	r2, #0
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d10:	f7fe fabe 	bl	8000290 <__aeabi_uldivmod>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d1c:	e058      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1e:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	2200      	movs	r2, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	4611      	mov	r1, r2
 8001d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d2e:	623b      	str	r3, [r7, #32]
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d38:	4642      	mov	r2, r8
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	0159      	lsls	r1, r3, #5
 8001d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4a:	0150      	lsls	r0, r2, #5
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4641      	mov	r1, r8
 8001d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d56:	4649      	mov	r1, r9
 8001d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d70:	ebb2 040a 	subs.w	r4, r2, sl
 8001d74:	eb63 050b 	sbc.w	r5, r3, fp
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	00eb      	lsls	r3, r5, #3
 8001d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d86:	00e2      	lsls	r2, r4, #3
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	18e3      	adds	r3, r4, r3
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	464b      	mov	r3, r9
 8001d94:	eb45 0303 	adc.w	r3, r5, r3
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001da6:	4629      	mov	r1, r5
 8001da8:	028b      	lsls	r3, r1, #10
 8001daa:	4621      	mov	r1, r4
 8001dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001db0:	4621      	mov	r1, r4
 8001db2:	028a      	lsls	r2, r1, #10
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	61fa      	str	r2, [r7, #28]
 8001dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc4:	f7fe fa64 	bl	8000290 <__aeabi_uldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001de0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dea:	e002      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3750      	adds	r7, #80	@ 0x50
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	00f42400 	.word	0x00f42400
 8001e08:	007a1200 	.word	0x007a1200

08001e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e041      	b.n	8001ea2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe feee 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3304      	adds	r3, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f000 fff6 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d001      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e044      	b.n	8001f4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f5c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d018      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x6c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eee:	d013      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x6c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f60 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00e      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x6c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d009      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x6c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d004      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x6c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <HAL_TIM_Base_Start_IT+0xc0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d111      	bne.n	8001f3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d010      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3a:	e007      	b.n	8001f4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800
 8001f68:	40000c00 	.word	0x40000c00
 8001f6c:	40014000 	.word	0x40014000

08001f70 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e041      	b.n	8002006 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f839 	bl	800200e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 ff44 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_TIM_OC_Start+0x24>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e022      	b.n	800208e <HAL_TIM_OC_Start+0x6a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d109      	bne.n	8002062 <HAL_TIM_OC_Start+0x3e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e015      	b.n	800208e <HAL_TIM_OC_Start+0x6a>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d109      	bne.n	800207c <HAL_TIM_OC_Start+0x58>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e008      	b.n	800208e <HAL_TIM_OC_Start+0x6a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e068      	b.n	8002168 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <HAL_TIM_OC_Start+0x82>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020a4:	e013      	b.n	80020ce <HAL_TIM_OC_Start+0xaa>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_OC_Start+0x92>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b4:	e00b      	b.n	80020ce <HAL_TIM_OC_Start+0xaa>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_OC_Start+0xa2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c4:	e003      	b.n	80020ce <HAL_TIM_OC_Start+0xaa>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 fa80 	bl	80035dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a23      	ldr	r2, [pc, #140]	@ (8002170 <HAL_TIM_OC_Start+0x14c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <HAL_TIM_OC_Start+0x14c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d018      	beq.n	8002132 <HAL_TIM_OC_Start+0x10e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002108:	d013      	beq.n	8002132 <HAL_TIM_OC_Start+0x10e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <HAL_TIM_OC_Start+0x150>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_TIM_OC_Start+0x10e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a17      	ldr	r2, [pc, #92]	@ (8002178 <HAL_TIM_OC_Start+0x154>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_TIM_OC_Start+0x10e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a16      	ldr	r2, [pc, #88]	@ (800217c <HAL_TIM_OC_Start+0x158>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_TIM_OC_Start+0x10e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <HAL_TIM_OC_Start+0x15c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d111      	bne.n	8002156 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d010      	beq.n	8002166 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002154:	e007      	b.n	8002166 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40010000 	.word	0x40010000
 8002174:	40000400 	.word	0x40000400
 8002178:	40000800 	.word	0x40000800
 800217c:	40000c00 	.word	0x40000c00
 8002180:	40014000 	.word	0x40014000

08002184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e041      	b.n	800221a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f839 	bl	8002222 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 fe3a 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_TIM_PWM_Start_IT+0x28>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	e022      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b04      	cmp	r3, #4
 8002264:	d109      	bne.n	800227a <HAL_TIM_PWM_Start_IT+0x42>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	e015      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x6e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d109      	bne.n	8002294 <HAL_TIM_PWM_Start_IT+0x5c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e008      	b.n	80022a6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0b3      	b.n	8002416 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_TIM_PWM_Start_IT+0x86>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022bc:	e013      	b.n	80022e6 <HAL_TIM_PWM_Start_IT+0xae>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PWM_Start_IT+0x96>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022cc:	e00b      	b.n	80022e6 <HAL_TIM_PWM_Start_IT+0xae>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d104      	bne.n	80022de <HAL_TIM_PWM_Start_IT+0xa6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022dc:	e003      	b.n	80022e6 <HAL_TIM_PWM_Start_IT+0xae>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d841      	bhi.n	8002370 <HAL_TIM_PWM_Start_IT+0x138>
 80022ec:	a201      	add	r2, pc, #4	@ (adr r2, 80022f4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002329 	.word	0x08002329
 80022f8:	08002371 	.word	0x08002371
 80022fc:	08002371 	.word	0x08002371
 8002300:	08002371 	.word	0x08002371
 8002304:	0800233b 	.word	0x0800233b
 8002308:	08002371 	.word	0x08002371
 800230c:	08002371 	.word	0x08002371
 8002310:	08002371 	.word	0x08002371
 8002314:	0800234d 	.word	0x0800234d
 8002318:	08002371 	.word	0x08002371
 800231c:	08002371 	.word	0x08002371
 8002320:	08002371 	.word	0x08002371
 8002324:	0800235f 	.word	0x0800235f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0202 	orr.w	r2, r2, #2
 8002336:	60da      	str	r2, [r3, #12]
      break;
 8002338:	e01d      	b.n	8002376 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0204 	orr.w	r2, r2, #4
 8002348:	60da      	str	r2, [r3, #12]
      break;
 800234a:	e014      	b.n	8002376 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	60da      	str	r2, [r3, #12]
      break;
 800235c:	e00b      	b.n	8002376 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0210 	orr.w	r2, r2, #16
 800236c:	60da      	str	r2, [r3, #12]
      break;
 800236e:	e002      	b.n	8002376 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	bf00      	nop
  }

  if (status == HAL_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d14b      	bne.n	8002414 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	6839      	ldr	r1, [r7, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f001 f929 	bl	80035dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002420 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b6:	d013      	beq.n	80023e0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	@ (8002424 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a18      	ldr	r2, [pc, #96]	@ (8002428 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	@ (800242c <HAL_TIM_PWM_Start_IT+0x1f4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a15      	ldr	r2, [pc, #84]	@ (8002430 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d111      	bne.n	8002404 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d010      	beq.n	8002414 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002402:	e007      	b.n	8002414 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40014000 	.word	0x40014000

08002434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e041      	b.n	80024ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f839 	bl	80024d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3304      	adds	r3, #4
 8002470:	4619      	mov	r1, r3
 8002472:	4610      	mov	r0, r2
 8002474:	f000 fce2 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_IC_Start_IT+0x1e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002502:	b2db      	uxtb	r3, r3
 8002504:	e013      	b.n	800252e <HAL_TIM_IC_Start_IT+0x46>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d104      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0x2e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002512:	b2db      	uxtb	r3, r3
 8002514:	e00b      	b.n	800252e <HAL_TIM_IC_Start_IT+0x46>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d104      	bne.n	8002526 <HAL_TIM_IC_Start_IT+0x3e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002522:	b2db      	uxtb	r3, r3
 8002524:	e003      	b.n	800252e <HAL_TIM_IC_Start_IT+0x46>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_TIM_IC_Start_IT+0x58>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e013      	b.n	8002568 <HAL_TIM_IC_Start_IT+0x80>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d104      	bne.n	8002550 <HAL_TIM_IC_Start_IT+0x68>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e00b      	b.n	8002568 <HAL_TIM_IC_Start_IT+0x80>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d104      	bne.n	8002560 <HAL_TIM_IC_Start_IT+0x78>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e003      	b.n	8002568 <HAL_TIM_IC_Start_IT+0x80>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002566:	b2db      	uxtb	r3, r3
 8002568:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d102      	bne.n	8002576 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002570:	7b7b      	ldrb	r3, [r7, #13]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0c2      	b.n	8002700 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_TIM_IC_Start_IT+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002588:	e013      	b.n	80025b2 <HAL_TIM_IC_Start_IT+0xca>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d104      	bne.n	800259a <HAL_TIM_IC_Start_IT+0xb2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002598:	e00b      	b.n	80025b2 <HAL_TIM_IC_Start_IT+0xca>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d104      	bne.n	80025aa <HAL_TIM_IC_Start_IT+0xc2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a8:	e003      	b.n	80025b2 <HAL_TIM_IC_Start_IT+0xca>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <HAL_TIM_IC_Start_IT+0xda>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025c0:	e013      	b.n	80025ea <HAL_TIM_IC_Start_IT+0x102>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d104      	bne.n	80025d2 <HAL_TIM_IC_Start_IT+0xea>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d0:	e00b      	b.n	80025ea <HAL_TIM_IC_Start_IT+0x102>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d104      	bne.n	80025e2 <HAL_TIM_IC_Start_IT+0xfa>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025e0:	e003      	b.n	80025ea <HAL_TIM_IC_Start_IT+0x102>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d841      	bhi.n	8002674 <HAL_TIM_IC_Start_IT+0x18c>
 80025f0:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <HAL_TIM_IC_Start_IT+0x110>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	08002675 	.word	0x08002675
 8002600:	08002675 	.word	0x08002675
 8002604:	08002675 	.word	0x08002675
 8002608:	0800263f 	.word	0x0800263f
 800260c:	08002675 	.word	0x08002675
 8002610:	08002675 	.word	0x08002675
 8002614:	08002675 	.word	0x08002675
 8002618:	08002651 	.word	0x08002651
 800261c:	08002675 	.word	0x08002675
 8002620:	08002675 	.word	0x08002675
 8002624:	08002675 	.word	0x08002675
 8002628:	08002663 	.word	0x08002663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0202 	orr.w	r2, r2, #2
 800263a:	60da      	str	r2, [r3, #12]
      break;
 800263c:	e01d      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0204 	orr.w	r2, r2, #4
 800264c:	60da      	str	r2, [r3, #12]
      break;
 800264e:	e014      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	60da      	str	r2, [r3, #12]
      break;
 8002660:	e00b      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0210 	orr.w	r2, r2, #16
 8002670:	60da      	str	r2, [r3, #12]
      break;
 8002672:	e002      	b.n	800267a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      break;
 8002678:	bf00      	nop
  }

  if (status == HAL_OK)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13e      	bne.n	80026fe <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 ffa7 	bl	80035dc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <HAL_TIM_IC_Start_IT+0x220>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d018      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a0:	d013      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a19      	ldr	r2, [pc, #100]	@ (800270c <HAL_TIM_IC_Start_IT+0x224>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_TIM_IC_Start_IT+0x228>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a16      	ldr	r2, [pc, #88]	@ (8002714 <HAL_TIM_IC_Start_IT+0x22c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIM_IC_Start_IT+0x1e2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <HAL_TIM_IC_Start_IT+0x230>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d010      	beq.n	80026fe <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ec:	e007      	b.n	80026fe <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40010000 	.word	0x40010000
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800
 8002714:	40000c00 	.word	0x40000c00
 8002718:	40014000 	.word	0x40014000

0800271c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d020      	beq.n	8002780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01b      	beq.n	8002780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0202 	mvn.w	r2, #2
 8002750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fb53 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fb45 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe f9f5 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d020      	beq.n	80027cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0204 	mvn.w	r2, #4
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2202      	movs	r2, #2
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fb2d 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fb1f 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe f9cf 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d020      	beq.n	8002818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0208 	mvn.w	r2, #8
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2204      	movs	r2, #4
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fb07 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 faf9 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe f9a9 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0210 	mvn.w	r2, #16
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2208      	movs	r2, #8
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fae1 	bl	8002e12 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fad3 	bl	8002dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fe f983 	bl	8000b64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00c      	beq.n	8002888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0201 	mvn.w	r2, #1
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f95a 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00c      	beq.n	80028ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 ff36 	bl	8003718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 faab 	bl	8002e26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0220 	mvn.w	r2, #32
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 ff08 	bl	8003704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002916:	2302      	movs	r3, #2
 8002918:	e048      	b.n	80029ac <HAL_TIM_OC_ConfigChannel+0xb0>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d839      	bhi.n	800299c <HAL_TIM_OC_ConfigChannel+0xa0>
 8002928:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <HAL_TIM_OC_ConfigChannel+0x34>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002965 	.word	0x08002965
 8002934:	0800299d 	.word	0x0800299d
 8002938:	0800299d 	.word	0x0800299d
 800293c:	0800299d 	.word	0x0800299d
 8002940:	08002973 	.word	0x08002973
 8002944:	0800299d 	.word	0x0800299d
 8002948:	0800299d 	.word	0x0800299d
 800294c:	0800299d 	.word	0x0800299d
 8002950:	08002981 	.word	0x08002981
 8002954:	0800299d 	.word	0x0800299d
 8002958:	0800299d 	.word	0x0800299d
 800295c:	0800299d 	.word	0x0800299d
 8002960:	0800298f 	.word	0x0800298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 faf2 	bl	8002f54 <TIM_OC1_SetConfig>
      break;
 8002970:	e017      	b.n	80029a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fb51 	bl	8003020 <TIM_OC2_SetConfig>
      break;
 800297e:	e010      	b.n	80029a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fbb6 	bl	80030f8 <TIM_OC3_SetConfig>
      break;
 800298c:	e009      	b.n	80029a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fc19 	bl	80031cc <TIM_OC4_SetConfig>
      break;
 800299a:	e002      	b.n	80029a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	75fb      	strb	r3, [r7, #23]
      break;
 80029a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e088      	b.n	8002ae4 <HAL_TIM_IC_ConfigChannel+0x130>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80029f0:	f000 fc3c 	bl	800326c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 020c 	bic.w	r2, r2, #12
 8002a02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6999      	ldr	r1, [r3, #24]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	619a      	str	r2, [r3, #24]
 8002a16:	e060      	b.n	8002ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d11c      	bne.n	8002a58 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002a2e:	f000 fcb4 	bl	800339a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699a      	ldr	r2, [r3, #24]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002a40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6999      	ldr	r1, [r3, #24]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	021a      	lsls	r2, r3, #8
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	619a      	str	r2, [r3, #24]
 8002a56:	e040      	b.n	8002ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d11b      	bne.n	8002a96 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002a6e:	f000 fd01 	bl	8003474 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 020c 	bic.w	r2, r2, #12
 8002a80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69d9      	ldr	r1, [r3, #28]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	61da      	str	r2, [r3, #28]
 8002a94:	e021      	b.n	8002ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d11c      	bne.n	8002ad6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002aac:	f000 fd1e 	bl	80034ec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002abe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69d9      	ldr	r1, [r3, #28]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	021a      	lsls	r2, r3, #8
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	61da      	str	r2, [r3, #28]
 8002ad4:	e001      	b.n	8002ada <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e0ae      	b.n	8002c68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0c      	cmp	r3, #12
 8002b16:	f200 809f 	bhi.w	8002c58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b55 	.word	0x08002b55
 8002b24:	08002c59 	.word	0x08002c59
 8002b28:	08002c59 	.word	0x08002c59
 8002b2c:	08002c59 	.word	0x08002c59
 8002b30:	08002b95 	.word	0x08002b95
 8002b34:	08002c59 	.word	0x08002c59
 8002b38:	08002c59 	.word	0x08002c59
 8002b3c:	08002c59 	.word	0x08002c59
 8002b40:	08002bd7 	.word	0x08002bd7
 8002b44:	08002c59 	.word	0x08002c59
 8002b48:	08002c59 	.word	0x08002c59
 8002b4c:	08002c59 	.word	0x08002c59
 8002b50:	08002c17 	.word	0x08002c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f9fa 	bl	8002f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0208 	orr.w	r2, r2, #8
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0204 	bic.w	r2, r2, #4
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	619a      	str	r2, [r3, #24]
      break;
 8002b92:	e064      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa40 	bl	8003020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6999      	ldr	r1, [r3, #24]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	021a      	lsls	r2, r3, #8
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	619a      	str	r2, [r3, #24]
      break;
 8002bd4:	e043      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa8b 	bl	80030f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0208 	orr.w	r2, r2, #8
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0204 	bic.w	r2, r2, #4
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
      break;
 8002c14:	e023      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fad5 	bl	80031cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69d9      	ldr	r1, [r3, #28]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	61da      	str	r2, [r3, #28]
      break;
 8002c56:	e002      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIM_ConfigClockSource+0x1c>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0b4      	b.n	8002df6 <HAL_TIM_ConfigClockSource+0x186>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc4:	d03e      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0xd4>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cca:	f200 8087 	bhi.w	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd2:	f000 8086 	beq.w	8002de2 <HAL_TIM_ConfigClockSource+0x172>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cda:	d87f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b70      	cmp	r3, #112	@ 0x70
 8002cde:	d01a      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xa6>
 8002ce0:	2b70      	cmp	r3, #112	@ 0x70
 8002ce2:	d87b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b60      	cmp	r3, #96	@ 0x60
 8002ce6:	d050      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x11a>
 8002ce8:	2b60      	cmp	r3, #96	@ 0x60
 8002cea:	d877      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b50      	cmp	r3, #80	@ 0x50
 8002cee:	d03c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0xfa>
 8002cf0:	2b50      	cmp	r3, #80	@ 0x50
 8002cf2:	d873      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b40      	cmp	r3, #64	@ 0x40
 8002cf6:	d058      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0x13a>
 8002cf8:	2b40      	cmp	r3, #64	@ 0x40
 8002cfa:	d86f      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b30      	cmp	r3, #48	@ 0x30
 8002cfe:	d064      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d00:	2b30      	cmp	r3, #48	@ 0x30
 8002d02:	d86b      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d060      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d867      	bhi.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05c      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d05a      	beq.n	8002dca <HAL_TIM_ConfigClockSource+0x15a>
 8002d14:	e062      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d26:	f000 fc39 	bl	800359c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
      break;
 8002d42:	e04f      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d54:	f000 fc22 	bl	800359c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e03c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 fae0 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2150      	movs	r1, #80	@ 0x50
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fbef 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002d88:	e02c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d96:	461a      	mov	r2, r3
 8002d98:	f000 fb3c 	bl	8003414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2160      	movs	r1, #96	@ 0x60
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fbdf 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002da8:	e01c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db6:	461a      	mov	r2, r3
 8002db8:	f000 fac0 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2140      	movs	r1, #64	@ 0x40
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fbcf 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002dc8:	e00c      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 fbc6 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002dda:	e003      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a3a      	ldr	r2, [pc, #232]	@ (8002f38 <TIM_Base_SetConfig+0xfc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a37      	ldr	r2, [pc, #220]	@ (8002f3c <TIM_Base_SetConfig+0x100>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a36      	ldr	r2, [pc, #216]	@ (8002f40 <TIM_Base_SetConfig+0x104>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x38>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a35      	ldr	r2, [pc, #212]	@ (8002f44 <TIM_Base_SetConfig+0x108>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2b      	ldr	r2, [pc, #172]	@ (8002f38 <TIM_Base_SetConfig+0xfc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01b      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e94:	d017      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a28      	ldr	r2, [pc, #160]	@ (8002f3c <TIM_Base_SetConfig+0x100>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a27      	ldr	r2, [pc, #156]	@ (8002f40 <TIM_Base_SetConfig+0x104>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00f      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a26      	ldr	r2, [pc, #152]	@ (8002f44 <TIM_Base_SetConfig+0x108>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a25      	ldr	r2, [pc, #148]	@ (8002f48 <TIM_Base_SetConfig+0x10c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a24      	ldr	r2, [pc, #144]	@ (8002f4c <TIM_Base_SetConfig+0x110>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	@ (8002f50 <TIM_Base_SetConfig+0x114>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0e      	ldr	r2, [pc, #56]	@ (8002f38 <TIM_Base_SetConfig+0xfc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d103      	bne.n	8002f0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40014400 	.word	0x40014400
 8002f50:	40014800 	.word	0x40014800

08002f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f023 0201 	bic.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 0302 	bic.w	r3, r3, #2
 8002f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a1c      	ldr	r2, [pc, #112]	@ (800301c <TIM_OC1_SetConfig+0xc8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d10c      	bne.n	8002fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f023 0308 	bic.w	r3, r3, #8
 8002fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f023 0304 	bic.w	r3, r3, #4
 8002fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a13      	ldr	r2, [pc, #76]	@ (800301c <TIM_OC1_SetConfig+0xc8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d111      	bne.n	8002ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40010000 	.word	0x40010000

08003020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f023 0210 	bic.w	r2, r3, #16
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f023 0320 	bic.w	r3, r3, #32
 800306a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1e      	ldr	r2, [pc, #120]	@ (80030f4 <TIM_OC2_SetConfig+0xd4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10d      	bne.n	800309c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800309a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a15      	ldr	r2, [pc, #84]	@ (80030f4 <TIM_OC2_SetConfig+0xd4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d113      	bne.n	80030cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000

080030f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1d      	ldr	r2, [pc, #116]	@ (80031c8 <TIM_OC3_SetConfig+0xd0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10d      	bne.n	8003172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800315c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a14      	ldr	r2, [pc, #80]	@ (80031c8 <TIM_OC3_SetConfig+0xd0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d113      	bne.n	80031a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40010000 	.word	0x40010000

080031cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	021b      	lsls	r3, r3, #8
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	031b      	lsls	r3, r3, #12
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a10      	ldr	r2, [pc, #64]	@ (8003268 <TIM_OC4_SetConfig+0x9c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d109      	bne.n	8003240 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000

0800326c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 0201 	bic.w	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a24      	ldr	r2, [pc, #144]	@ (8003328 <TIM_TI1_SetConfig+0xbc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <TIM_TI1_SetConfig+0x56>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a0:	d00f      	beq.n	80032c2 <TIM_TI1_SetConfig+0x56>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a21      	ldr	r2, [pc, #132]	@ (800332c <TIM_TI1_SetConfig+0xc0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <TIM_TI1_SetConfig+0x56>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a20      	ldr	r2, [pc, #128]	@ (8003330 <TIM_TI1_SetConfig+0xc4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <TIM_TI1_SetConfig+0x56>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003334 <TIM_TI1_SetConfig+0xc8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_TI1_SetConfig+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <TIM_TI1_SetConfig+0xcc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <TIM_TI1_SetConfig+0x5a>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <TIM_TI1_SetConfig+0x5c>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e003      	b.n	80032e6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f023 030a 	bic.w	r3, r3, #10
 8003300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 030a 	and.w	r3, r3, #10
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	621a      	str	r2, [r3, #32]
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40010000 	.word	0x40010000
 800332c:	40000400 	.word	0x40000400
 8003330:	40000800 	.word	0x40000800
 8003334:	40000c00 	.word	0x40000c00
 8003338:	40014000 	.word	0x40014000

0800333c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 030a 	bic.w	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0210 	bic.w	r2, r3, #16
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	031b      	lsls	r3, r3, #12
 80033de:	b29b      	uxth	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	031b      	lsls	r3, r3, #12
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f023 0303 	bic.w	r3, r3, #3
 80034a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	621a      	str	r2, [r3, #32]
}
 80034e0:	bf00      	nop
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003518:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	031b      	lsls	r3, r3, #12
 8003530:	b29b      	uxth	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	031b      	lsls	r3, r3, #12
 8003544:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	401a      	ands	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e050      	b.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368c:	d013      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a16      	ldr	r2, [pc, #88]	@ (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a15      	ldr	r2, [pc, #84]	@ (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10c      	bne.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40014000 	.word	0x40014000

08003704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <findslot>:
 800372c:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <findslot+0x2c>)
 800372e:	b510      	push	{r4, lr}
 8003730:	4604      	mov	r4, r0
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	b118      	cbz	r0, 800373e <findslot+0x12>
 8003736:	6a03      	ldr	r3, [r0, #32]
 8003738:	b90b      	cbnz	r3, 800373e <findslot+0x12>
 800373a:	f000 fb19 	bl	8003d70 <__sinit>
 800373e:	2c13      	cmp	r4, #19
 8003740:	d807      	bhi.n	8003752 <findslot+0x26>
 8003742:	4806      	ldr	r0, [pc, #24]	@ (800375c <findslot+0x30>)
 8003744:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003748:	3201      	adds	r2, #1
 800374a:	d002      	beq.n	8003752 <findslot+0x26>
 800374c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003750:	bd10      	pop	{r4, pc}
 8003752:	2000      	movs	r0, #0
 8003754:	e7fc      	b.n	8003750 <findslot+0x24>
 8003756:	bf00      	nop
 8003758:	20000020 	.word	0x20000020
 800375c:	20000134 	.word	0x20000134

08003760 <error>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	4604      	mov	r4, r0
 8003764:	f000 fbde 	bl	8003f24 <__errno>
 8003768:	2613      	movs	r6, #19
 800376a:	4605      	mov	r5, r0
 800376c:	2700      	movs	r7, #0
 800376e:	4630      	mov	r0, r6
 8003770:	4639      	mov	r1, r7
 8003772:	beab      	bkpt	0x00ab
 8003774:	4606      	mov	r6, r0
 8003776:	602e      	str	r6, [r5, #0]
 8003778:	4620      	mov	r0, r4
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800377c <checkerror>:
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d101      	bne.n	8003784 <checkerror+0x8>
 8003780:	f7ff bfee 	b.w	8003760 <error>
 8003784:	4770      	bx	lr

08003786 <_swiread>:
 8003786:	b530      	push	{r4, r5, lr}
 8003788:	b085      	sub	sp, #20
 800378a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800378e:	9203      	str	r2, [sp, #12]
 8003790:	2406      	movs	r4, #6
 8003792:	ad01      	add	r5, sp, #4
 8003794:	4620      	mov	r0, r4
 8003796:	4629      	mov	r1, r5
 8003798:	beab      	bkpt	0x00ab
 800379a:	4604      	mov	r4, r0
 800379c:	4620      	mov	r0, r4
 800379e:	f7ff ffed 	bl	800377c <checkerror>
 80037a2:	b005      	add	sp, #20
 80037a4:	bd30      	pop	{r4, r5, pc}

080037a6 <_read>:
 80037a6:	b570      	push	{r4, r5, r6, lr}
 80037a8:	460e      	mov	r6, r1
 80037aa:	4614      	mov	r4, r2
 80037ac:	f7ff ffbe 	bl	800372c <findslot>
 80037b0:	4605      	mov	r5, r0
 80037b2:	b930      	cbnz	r0, 80037c2 <_read+0x1c>
 80037b4:	f000 fbb6 	bl	8003f24 <__errno>
 80037b8:	2309      	movs	r3, #9
 80037ba:	6003      	str	r3, [r0, #0]
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
 80037c2:	6800      	ldr	r0, [r0, #0]
 80037c4:	4622      	mov	r2, r4
 80037c6:	4631      	mov	r1, r6
 80037c8:	f7ff ffdd 	bl	8003786 <_swiread>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d0f5      	beq.n	80037bc <_read+0x16>
 80037d0:	686b      	ldr	r3, [r5, #4]
 80037d2:	1a20      	subs	r0, r4, r0
 80037d4:	4403      	add	r3, r0
 80037d6:	606b      	str	r3, [r5, #4]
 80037d8:	e7f2      	b.n	80037c0 <_read+0x1a>

080037da <_swilseek>:
 80037da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037dc:	460c      	mov	r4, r1
 80037de:	4616      	mov	r6, r2
 80037e0:	f7ff ffa4 	bl	800372c <findslot>
 80037e4:	4605      	mov	r5, r0
 80037e6:	b940      	cbnz	r0, 80037fa <_swilseek+0x20>
 80037e8:	f000 fb9c 	bl	8003f24 <__errno>
 80037ec:	2309      	movs	r3, #9
 80037ee:	6003      	str	r3, [r0, #0]
 80037f0:	f04f 34ff 	mov.w	r4, #4294967295
 80037f4:	4620      	mov	r0, r4
 80037f6:	b003      	add	sp, #12
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fa:	2e02      	cmp	r6, #2
 80037fc:	d903      	bls.n	8003806 <_swilseek+0x2c>
 80037fe:	f000 fb91 	bl	8003f24 <__errno>
 8003802:	2316      	movs	r3, #22
 8003804:	e7f3      	b.n	80037ee <_swilseek+0x14>
 8003806:	2e01      	cmp	r6, #1
 8003808:	d112      	bne.n	8003830 <_swilseek+0x56>
 800380a:	6843      	ldr	r3, [r0, #4]
 800380c:	18e4      	adds	r4, r4, r3
 800380e:	d4f6      	bmi.n	80037fe <_swilseek+0x24>
 8003810:	682b      	ldr	r3, [r5, #0]
 8003812:	260a      	movs	r6, #10
 8003814:	e9cd 3400 	strd	r3, r4, [sp]
 8003818:	466f      	mov	r7, sp
 800381a:	4630      	mov	r0, r6
 800381c:	4639      	mov	r1, r7
 800381e:	beab      	bkpt	0x00ab
 8003820:	4606      	mov	r6, r0
 8003822:	4630      	mov	r0, r6
 8003824:	f7ff ffaa 	bl	800377c <checkerror>
 8003828:	2800      	cmp	r0, #0
 800382a:	dbe1      	blt.n	80037f0 <_swilseek+0x16>
 800382c:	606c      	str	r4, [r5, #4]
 800382e:	e7e1      	b.n	80037f4 <_swilseek+0x1a>
 8003830:	2e02      	cmp	r6, #2
 8003832:	6803      	ldr	r3, [r0, #0]
 8003834:	d1ec      	bne.n	8003810 <_swilseek+0x36>
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	260c      	movs	r6, #12
 800383a:	466f      	mov	r7, sp
 800383c:	4630      	mov	r0, r6
 800383e:	4639      	mov	r1, r7
 8003840:	beab      	bkpt	0x00ab
 8003842:	4606      	mov	r6, r0
 8003844:	4630      	mov	r0, r6
 8003846:	f7ff ff99 	bl	800377c <checkerror>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d0d0      	beq.n	80037f0 <_swilseek+0x16>
 800384e:	4404      	add	r4, r0
 8003850:	e7de      	b.n	8003810 <_swilseek+0x36>

08003852 <_lseek>:
 8003852:	f7ff bfc2 	b.w	80037da <_swilseek>

08003856 <_swiwrite>:
 8003856:	b530      	push	{r4, r5, lr}
 8003858:	b085      	sub	sp, #20
 800385a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800385e:	9203      	str	r2, [sp, #12]
 8003860:	2405      	movs	r4, #5
 8003862:	ad01      	add	r5, sp, #4
 8003864:	4620      	mov	r0, r4
 8003866:	4629      	mov	r1, r5
 8003868:	beab      	bkpt	0x00ab
 800386a:	4604      	mov	r4, r0
 800386c:	4620      	mov	r0, r4
 800386e:	f7ff ff85 	bl	800377c <checkerror>
 8003872:	b005      	add	sp, #20
 8003874:	bd30      	pop	{r4, r5, pc}

08003876 <_write>:
 8003876:	b570      	push	{r4, r5, r6, lr}
 8003878:	460e      	mov	r6, r1
 800387a:	4615      	mov	r5, r2
 800387c:	f7ff ff56 	bl	800372c <findslot>
 8003880:	4604      	mov	r4, r0
 8003882:	b930      	cbnz	r0, 8003892 <_write+0x1c>
 8003884:	f000 fb4e 	bl	8003f24 <__errno>
 8003888:	2309      	movs	r3, #9
 800388a:	6003      	str	r3, [r0, #0]
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	bd70      	pop	{r4, r5, r6, pc}
 8003892:	6800      	ldr	r0, [r0, #0]
 8003894:	462a      	mov	r2, r5
 8003896:	4631      	mov	r1, r6
 8003898:	f7ff ffdd 	bl	8003856 <_swiwrite>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	dbf5      	blt.n	800388c <_write+0x16>
 80038a0:	6862      	ldr	r2, [r4, #4]
 80038a2:	1ae8      	subs	r0, r5, r3
 80038a4:	4402      	add	r2, r0
 80038a6:	42ab      	cmp	r3, r5
 80038a8:	6062      	str	r2, [r4, #4]
 80038aa:	d1f1      	bne.n	8003890 <_write+0x1a>
 80038ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7ff bf55 	b.w	8003760 <error>

080038b6 <_swiclose>:
 80038b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038b8:	2402      	movs	r4, #2
 80038ba:	9001      	str	r0, [sp, #4]
 80038bc:	ad01      	add	r5, sp, #4
 80038be:	4620      	mov	r0, r4
 80038c0:	4629      	mov	r1, r5
 80038c2:	beab      	bkpt	0x00ab
 80038c4:	4604      	mov	r4, r0
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7ff ff58 	bl	800377c <checkerror>
 80038cc:	b003      	add	sp, #12
 80038ce:	bd30      	pop	{r4, r5, pc}

080038d0 <_close>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4605      	mov	r5, r0
 80038d4:	f7ff ff2a 	bl	800372c <findslot>
 80038d8:	4604      	mov	r4, r0
 80038da:	b930      	cbnz	r0, 80038ea <_close+0x1a>
 80038dc:	f000 fb22 	bl	8003f24 <__errno>
 80038e0:	2309      	movs	r3, #9
 80038e2:	6003      	str	r3, [r0, #0]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
 80038ea:	3d01      	subs	r5, #1
 80038ec:	2d01      	cmp	r5, #1
 80038ee:	d809      	bhi.n	8003904 <_close+0x34>
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <_close+0x40>)
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d104      	bne.n	8003904 <_close+0x34>
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	2000      	movs	r0, #0
 8003902:	e7f1      	b.n	80038e8 <_close+0x18>
 8003904:	6820      	ldr	r0, [r4, #0]
 8003906:	f7ff ffd6 	bl	80038b6 <_swiclose>
 800390a:	2800      	cmp	r0, #0
 800390c:	d0f5      	beq.n	80038fa <_close+0x2a>
 800390e:	e7eb      	b.n	80038e8 <_close+0x18>
 8003910:	20000134 	.word	0x20000134

08003914 <_swistat>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	460c      	mov	r4, r1
 8003918:	f7ff ff08 	bl	800372c <findslot>
 800391c:	4605      	mov	r5, r0
 800391e:	b930      	cbnz	r0, 800392e <_swistat+0x1a>
 8003920:	f000 fb00 	bl	8003f24 <__errno>
 8003924:	2309      	movs	r3, #9
 8003926:	6003      	str	r3, [r0, #0]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800393c:	260c      	movs	r6, #12
 800393e:	4630      	mov	r0, r6
 8003940:	4629      	mov	r1, r5
 8003942:	beab      	bkpt	0x00ab
 8003944:	4605      	mov	r5, r0
 8003946:	4628      	mov	r0, r5
 8003948:	f7ff ff18 	bl	800377c <checkerror>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d0eb      	beq.n	8003928 <_swistat+0x14>
 8003950:	6120      	str	r0, [r4, #16]
 8003952:	2000      	movs	r0, #0
 8003954:	e7ea      	b.n	800392c <_swistat+0x18>

08003956 <_fstat>:
 8003956:	460b      	mov	r3, r1
 8003958:	b510      	push	{r4, lr}
 800395a:	2100      	movs	r1, #0
 800395c:	4604      	mov	r4, r0
 800395e:	2258      	movs	r2, #88	@ 0x58
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fa90 	bl	8003e86 <memset>
 8003966:	4601      	mov	r1, r0
 8003968:	4620      	mov	r0, r4
 800396a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800396e:	f7ff bfd1 	b.w	8003914 <_swistat>

08003972 <_stat>:
 8003972:	b538      	push	{r3, r4, r5, lr}
 8003974:	460d      	mov	r5, r1
 8003976:	4604      	mov	r4, r0
 8003978:	2258      	movs	r2, #88	@ 0x58
 800397a:	2100      	movs	r1, #0
 800397c:	4628      	mov	r0, r5
 800397e:	f000 fa82 	bl	8003e86 <memset>
 8003982:	4620      	mov	r0, r4
 8003984:	2100      	movs	r1, #0
 8003986:	f000 f811 	bl	80039ac <_swiopen>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	4604      	mov	r4, r0
 800398e:	d00b      	beq.n	80039a8 <_stat+0x36>
 8003990:	686b      	ldr	r3, [r5, #4]
 8003992:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003996:	606b      	str	r3, [r5, #4]
 8003998:	4629      	mov	r1, r5
 800399a:	f7ff ffbb 	bl	8003914 <_swistat>
 800399e:	4605      	mov	r5, r0
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff ff95 	bl	80038d0 <_close>
 80039a6:	462c      	mov	r4, r5
 80039a8:	4620      	mov	r0, r4
 80039aa:	bd38      	pop	{r3, r4, r5, pc}

080039ac <_swiopen>:
 80039ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b0:	4f29      	ldr	r7, [pc, #164]	@ (8003a58 <_swiopen+0xac>)
 80039b2:	b096      	sub	sp, #88	@ 0x58
 80039b4:	4682      	mov	sl, r0
 80039b6:	460e      	mov	r6, r1
 80039b8:	2400      	movs	r4, #0
 80039ba:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80039be:	3301      	adds	r3, #1
 80039c0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80039c4:	d00c      	beq.n	80039e0 <_swiopen+0x34>
 80039c6:	3401      	adds	r4, #1
 80039c8:	2c14      	cmp	r4, #20
 80039ca:	d1f6      	bne.n	80039ba <_swiopen+0xe>
 80039cc:	f000 faaa 	bl	8003f24 <__errno>
 80039d0:	2318      	movs	r3, #24
 80039d2:	6003      	str	r3, [r0, #0]
 80039d4:	f04f 34ff 	mov.w	r4, #4294967295
 80039d8:	4620      	mov	r0, r4
 80039da:	b016      	add	sp, #88	@ 0x58
 80039dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80039e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80039e8:	46e9      	mov	r9, sp
 80039ea:	d109      	bne.n	8003a00 <_swiopen+0x54>
 80039ec:	4649      	mov	r1, r9
 80039ee:	4650      	mov	r0, sl
 80039f0:	f7ff ffbf 	bl	8003972 <_stat>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d003      	beq.n	8003a00 <_swiopen+0x54>
 80039f8:	f000 fa94 	bl	8003f24 <__errno>
 80039fc:	2311      	movs	r3, #17
 80039fe:	e7e8      	b.n	80039d2 <_swiopen+0x26>
 8003a00:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003a04:	f240 6301 	movw	r3, #1537	@ 0x601
 8003a08:	07b2      	lsls	r2, r6, #30
 8003a0a:	bf48      	it	mi
 8003a0c:	f045 0502 	orrmi.w	r5, r5, #2
 8003a10:	421e      	tst	r6, r3
 8003a12:	bf18      	it	ne
 8003a14:	f045 0504 	orrne.w	r5, r5, #4
 8003a18:	0733      	lsls	r3, r6, #28
 8003a1a:	bf48      	it	mi
 8003a1c:	f025 0504 	bicmi.w	r5, r5, #4
 8003a20:	4650      	mov	r0, sl
 8003a22:	bf48      	it	mi
 8003a24:	f045 0508 	orrmi.w	r5, r5, #8
 8003a28:	f8cd a000 	str.w	sl, [sp]
 8003a2c:	f7fc fbd8 	bl	80001e0 <strlen>
 8003a30:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003a34:	2501      	movs	r5, #1
 8003a36:	4628      	mov	r0, r5
 8003a38:	4649      	mov	r1, r9
 8003a3a:	beab      	bkpt	0x00ab
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	db05      	blt.n	8003a4e <_swiopen+0xa2>
 8003a42:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003a46:	4447      	add	r7, r8
 8003a48:	2300      	movs	r3, #0
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	e7c4      	b.n	80039d8 <_swiopen+0x2c>
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f7ff fe86 	bl	8003760 <error>
 8003a54:	4604      	mov	r4, r0
 8003a56:	e7bf      	b.n	80039d8 <_swiopen+0x2c>
 8003a58:	20000134 	.word	0x20000134

08003a5c <_get_semihosting_exts>:
 8003a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a60:	4606      	mov	r6, r0
 8003a62:	460f      	mov	r7, r1
 8003a64:	4829      	ldr	r0, [pc, #164]	@ (8003b0c <_get_semihosting_exts+0xb0>)
 8003a66:	2100      	movs	r1, #0
 8003a68:	4615      	mov	r5, r2
 8003a6a:	f7ff ff9f 	bl	80039ac <_swiopen>
 8003a6e:	462a      	mov	r2, r5
 8003a70:	4604      	mov	r4, r0
 8003a72:	2100      	movs	r1, #0
 8003a74:	4630      	mov	r0, r6
 8003a76:	f000 fa06 	bl	8003e86 <memset>
 8003a7a:	1c63      	adds	r3, r4, #1
 8003a7c:	d014      	beq.n	8003aa8 <_get_semihosting_exts+0x4c>
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff fe54 	bl	800372c <findslot>
 8003a84:	f04f 080c 	mov.w	r8, #12
 8003a88:	4681      	mov	r9, r0
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	4649      	mov	r1, r9
 8003a8e:	beab      	bkpt	0x00ab
 8003a90:	4680      	mov	r8, r0
 8003a92:	4640      	mov	r0, r8
 8003a94:	f7ff fe72 	bl	800377c <checkerror>
 8003a98:	2803      	cmp	r0, #3
 8003a9a:	dd02      	ble.n	8003aa2 <_get_semihosting_exts+0x46>
 8003a9c:	1ec3      	subs	r3, r0, #3
 8003a9e:	42ab      	cmp	r3, r5
 8003aa0:	dc07      	bgt.n	8003ab2 <_get_semihosting_exts+0x56>
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff ff14 	bl	80038d0 <_close>
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	b003      	add	sp, #12
 8003aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	eb0d 0102 	add.w	r1, sp, r2
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f7ff fe74 	bl	80037a6 <_read>
 8003abe:	2803      	cmp	r0, #3
 8003ac0:	ddef      	ble.n	8003aa2 <_get_semihosting_exts+0x46>
 8003ac2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ac6:	2b53      	cmp	r3, #83	@ 0x53
 8003ac8:	d1eb      	bne.n	8003aa2 <_get_semihosting_exts+0x46>
 8003aca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003ace:	2b48      	cmp	r3, #72	@ 0x48
 8003ad0:	d1e7      	bne.n	8003aa2 <_get_semihosting_exts+0x46>
 8003ad2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003ad6:	2b46      	cmp	r3, #70	@ 0x46
 8003ad8:	d1e3      	bne.n	8003aa2 <_get_semihosting_exts+0x46>
 8003ada:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ade:	2b42      	cmp	r3, #66	@ 0x42
 8003ae0:	d1df      	bne.n	8003aa2 <_get_semihosting_exts+0x46>
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4639      	mov	r1, r7
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f7ff fe77 	bl	80037da <_swilseek>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	dbd8      	blt.n	8003aa2 <_get_semihosting_exts+0x46>
 8003af0:	462a      	mov	r2, r5
 8003af2:	4631      	mov	r1, r6
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff fe56 	bl	80037a6 <_read>
 8003afa:	4605      	mov	r5, r0
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff fee7 	bl	80038d0 <_close>
 8003b02:	4628      	mov	r0, r5
 8003b04:	f7ff fe3a 	bl	800377c <checkerror>
 8003b08:	e7d0      	b.n	8003aac <_get_semihosting_exts+0x50>
 8003b0a:	bf00      	nop
 8003b0c:	08004ae8 	.word	0x08004ae8

08003b10 <initialise_semihosting_exts>:
 8003b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b12:	4d0a      	ldr	r5, [pc, #40]	@ (8003b3c <initialise_semihosting_exts+0x2c>)
 8003b14:	4c0a      	ldr	r4, [pc, #40]	@ (8003b40 <initialise_semihosting_exts+0x30>)
 8003b16:	2100      	movs	r1, #0
 8003b18:	2201      	movs	r2, #1
 8003b1a:	a801      	add	r0, sp, #4
 8003b1c:	6029      	str	r1, [r5, #0]
 8003b1e:	6022      	str	r2, [r4, #0]
 8003b20:	f7ff ff9c 	bl	8003a5c <_get_semihosting_exts>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	dd07      	ble.n	8003b38 <initialise_semihosting_exts+0x28>
 8003b28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003b2c:	f003 0201 	and.w	r2, r3, #1
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	602a      	str	r2, [r5, #0]
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	b003      	add	sp, #12
 8003b3a:	bd30      	pop	{r4, r5, pc}
 8003b3c:	20000010 	.word	0x20000010
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <_has_ext_stdout_stderr>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	4c04      	ldr	r4, [pc, #16]	@ (8003b58 <_has_ext_stdout_stderr+0x14>)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da01      	bge.n	8003b52 <_has_ext_stdout_stderr+0xe>
 8003b4e:	f7ff ffdf 	bl	8003b10 <initialise_semihosting_exts>
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	bd10      	pop	{r4, pc}
 8003b56:	bf00      	nop
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <initialise_monitor_handles>:
 8003b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	b085      	sub	sp, #20
 8003b62:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003c14 <initialise_monitor_handles+0xb8>
 8003b66:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	9303      	str	r3, [sp, #12]
 8003b70:	af01      	add	r7, sp, #4
 8003b72:	9402      	str	r4, [sp, #8]
 8003b74:	2501      	movs	r5, #1
 8003b76:	4628      	mov	r0, r5
 8003b78:	4639      	mov	r1, r7
 8003b7a:	beab      	bkpt	0x00ab
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003c18 <initialise_monitor_handles+0xbc>
 8003b82:	4623      	mov	r3, r4
 8003b84:	4c20      	ldr	r4, [pc, #128]	@ (8003c08 <initialise_monitor_handles+0xac>)
 8003b86:	f8c8 5000 	str.w	r5, [r8]
 8003b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003b92:	3301      	adds	r3, #1
 8003b94:	2b14      	cmp	r3, #20
 8003b96:	d1fa      	bne.n	8003b8e <initialise_monitor_handles+0x32>
 8003b98:	f7ff ffd4 	bl	8003b44 <_has_ext_stdout_stderr>
 8003b9c:	4d1b      	ldr	r5, [pc, #108]	@ (8003c0c <initialise_monitor_handles+0xb0>)
 8003b9e:	b1d0      	cbz	r0, 8003bd6 <initialise_monitor_handles+0x7a>
 8003ba0:	f04f 0a03 	mov.w	sl, #3
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f8cd 9004 	str.w	r9, [sp, #4]
 8003baa:	2601      	movs	r6, #1
 8003bac:	f8cd a00c 	str.w	sl, [sp, #12]
 8003bb0:	9302      	str	r3, [sp, #8]
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	beab      	bkpt	0x00ab
 8003bb8:	4683      	mov	fp, r0
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <initialise_monitor_handles+0xb4>)
 8003bbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bc0:	f8c3 b000 	str.w	fp, [r3]
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	f8cd a00c 	str.w	sl, [sp, #12]
 8003bca:	9302      	str	r3, [sp, #8]
 8003bcc:	4630      	mov	r0, r6
 8003bce:	4639      	mov	r1, r7
 8003bd0:	beab      	bkpt	0x00ab
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	602e      	str	r6, [r5, #0]
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	bf02      	ittt	eq
 8003bdc:	4b0c      	ldreq	r3, [pc, #48]	@ (8003c10 <initialise_monitor_handles+0xb4>)
 8003bde:	681b      	ldreq	r3, [r3, #0]
 8003be0:	602b      	streq	r3, [r5, #0]
 8003be2:	2600      	movs	r6, #0
 8003be4:	f8d8 3000 	ldr.w	r3, [r8]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	6066      	str	r6, [r4, #4]
 8003bec:	f7ff ffaa 	bl	8003b44 <_has_ext_stdout_stderr>
 8003bf0:	b130      	cbz	r0, 8003c00 <initialise_monitor_handles+0xa4>
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <initialise_monitor_handles+0xb4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003c00:	b005      	add	sp, #20
 8003c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	20000134 	.word	0x20000134
 8003c0c:	20000128 	.word	0x20000128
 8003c10:	2000012c 	.word	0x2000012c
 8003c14:	08004afe 	.word	0x08004afe
 8003c18:	20000130 	.word	0x20000130

08003c1c <_isatty>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	f7ff fd85 	bl	800372c <findslot>
 8003c22:	2409      	movs	r4, #9
 8003c24:	4605      	mov	r5, r0
 8003c26:	b920      	cbnz	r0, 8003c32 <_isatty+0x16>
 8003c28:	f000 f97c 	bl	8003f24 <__errno>
 8003c2c:	6004      	str	r4, [r0, #0]
 8003c2e:	2000      	movs	r0, #0
 8003c30:	bd70      	pop	{r4, r5, r6, pc}
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	beab      	bkpt	0x00ab
 8003c38:	4604      	mov	r4, r0
 8003c3a:	2c01      	cmp	r4, #1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	d0f7      	beq.n	8003c30 <_isatty+0x14>
 8003c40:	f000 f970 	bl	8003f24 <__errno>
 8003c44:	2513      	movs	r5, #19
 8003c46:	4604      	mov	r4, r0
 8003c48:	2600      	movs	r6, #0
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	beab      	bkpt	0x00ab
 8003c50:	4605      	mov	r5, r0
 8003c52:	6025      	str	r5, [r4, #0]
 8003c54:	e7eb      	b.n	8003c2e <_isatty+0x12>
	...

08003c58 <std>:
 8003c58:	2300      	movs	r3, #0
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	6183      	str	r3, [r0, #24]
 8003c70:	4619      	mov	r1, r3
 8003c72:	2208      	movs	r2, #8
 8003c74:	305c      	adds	r0, #92	@ 0x5c
 8003c76:	f000 f906 	bl	8003e86 <memset>
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <std+0x58>)
 8003c7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <std+0x5c>)
 8003c80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <std+0x60>)
 8003c84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c86:	4b0d      	ldr	r3, [pc, #52]	@ (8003cbc <std+0x64>)
 8003c88:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <std+0x68>)
 8003c8c:	6224      	str	r4, [r4, #32]
 8003c8e:	429c      	cmp	r4, r3
 8003c90:	d006      	beq.n	8003ca0 <std+0x48>
 8003c92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c96:	4294      	cmp	r4, r2
 8003c98:	d002      	beq.n	8003ca0 <std+0x48>
 8003c9a:	33d0      	adds	r3, #208	@ 0xd0
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	d105      	bne.n	8003cac <std+0x54>
 8003ca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca8:	f000 b966 	b.w	8003f78 <__retarget_lock_init_recursive>
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	bf00      	nop
 8003cb0:	08003e01 	.word	0x08003e01
 8003cb4:	08003e23 	.word	0x08003e23
 8003cb8:	08003e5b 	.word	0x08003e5b
 8003cbc:	08003e7f 	.word	0x08003e7f
 8003cc0:	200001d4 	.word	0x200001d4

08003cc4 <stdio_exit_handler>:
 8003cc4:	4a02      	ldr	r2, [pc, #8]	@ (8003cd0 <stdio_exit_handler+0xc>)
 8003cc6:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <stdio_exit_handler+0x10>)
 8003cc8:	4803      	ldr	r0, [pc, #12]	@ (8003cd8 <stdio_exit_handler+0x14>)
 8003cca:	f000 b869 	b.w	8003da0 <_fwalk_sglue>
 8003cce:	bf00      	nop
 8003cd0:	20000014 	.word	0x20000014
 8003cd4:	08004819 	.word	0x08004819
 8003cd8:	20000024 	.word	0x20000024

08003cdc <cleanup_stdio>:
 8003cdc:	6841      	ldr	r1, [r0, #4]
 8003cde:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <cleanup_stdio+0x34>)
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	d001      	beq.n	8003cec <cleanup_stdio+0x10>
 8003ce8:	f000 fd96 	bl	8004818 <_fflush_r>
 8003cec:	68a1      	ldr	r1, [r4, #8]
 8003cee:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <cleanup_stdio+0x38>)
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	d002      	beq.n	8003cfa <cleanup_stdio+0x1e>
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f000 fd8f 	bl	8004818 <_fflush_r>
 8003cfa:	68e1      	ldr	r1, [r4, #12]
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <cleanup_stdio+0x3c>)
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	d004      	beq.n	8003d0c <cleanup_stdio+0x30>
 8003d02:	4620      	mov	r0, r4
 8003d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d08:	f000 bd86 	b.w	8004818 <_fflush_r>
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	200001d4 	.word	0x200001d4
 8003d14:	2000023c 	.word	0x2000023c
 8003d18:	200002a4 	.word	0x200002a4

08003d1c <global_stdio_init.part.0>:
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <global_stdio_init.part.0+0x30>)
 8003d20:	4c0b      	ldr	r4, [pc, #44]	@ (8003d50 <global_stdio_init.part.0+0x34>)
 8003d22:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <global_stdio_init.part.0+0x38>)
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4620      	mov	r0, r4
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	f7ff ff94 	bl	8003c58 <std>
 8003d30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d34:	2201      	movs	r2, #1
 8003d36:	2109      	movs	r1, #9
 8003d38:	f7ff ff8e 	bl	8003c58 <std>
 8003d3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d40:	2202      	movs	r2, #2
 8003d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d46:	2112      	movs	r1, #18
 8003d48:	f7ff bf86 	b.w	8003c58 <std>
 8003d4c:	2000030c 	.word	0x2000030c
 8003d50:	200001d4 	.word	0x200001d4
 8003d54:	08003cc5 	.word	0x08003cc5

08003d58 <__sfp_lock_acquire>:
 8003d58:	4801      	ldr	r0, [pc, #4]	@ (8003d60 <__sfp_lock_acquire+0x8>)
 8003d5a:	f000 b90e 	b.w	8003f7a <__retarget_lock_acquire_recursive>
 8003d5e:	bf00      	nop
 8003d60:	20000315 	.word	0x20000315

08003d64 <__sfp_lock_release>:
 8003d64:	4801      	ldr	r0, [pc, #4]	@ (8003d6c <__sfp_lock_release+0x8>)
 8003d66:	f000 b909 	b.w	8003f7c <__retarget_lock_release_recursive>
 8003d6a:	bf00      	nop
 8003d6c:	20000315 	.word	0x20000315

08003d70 <__sinit>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	4604      	mov	r4, r0
 8003d74:	f7ff fff0 	bl	8003d58 <__sfp_lock_acquire>
 8003d78:	6a23      	ldr	r3, [r4, #32]
 8003d7a:	b11b      	cbz	r3, 8003d84 <__sinit+0x14>
 8003d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d80:	f7ff bff0 	b.w	8003d64 <__sfp_lock_release>
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <__sinit+0x28>)
 8003d86:	6223      	str	r3, [r4, #32]
 8003d88:	4b04      	ldr	r3, [pc, #16]	@ (8003d9c <__sinit+0x2c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f5      	bne.n	8003d7c <__sinit+0xc>
 8003d90:	f7ff ffc4 	bl	8003d1c <global_stdio_init.part.0>
 8003d94:	e7f2      	b.n	8003d7c <__sinit+0xc>
 8003d96:	bf00      	nop
 8003d98:	08003cdd 	.word	0x08003cdd
 8003d9c:	2000030c 	.word	0x2000030c

08003da0 <_fwalk_sglue>:
 8003da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da4:	4607      	mov	r7, r0
 8003da6:	4688      	mov	r8, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	2600      	movs	r6, #0
 8003dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003db0:	f1b9 0901 	subs.w	r9, r9, #1
 8003db4:	d505      	bpl.n	8003dc2 <_fwalk_sglue+0x22>
 8003db6:	6824      	ldr	r4, [r4, #0]
 8003db8:	2c00      	cmp	r4, #0
 8003dba:	d1f7      	bne.n	8003dac <_fwalk_sglue+0xc>
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dc2:	89ab      	ldrh	r3, [r5, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d907      	bls.n	8003dd8 <_fwalk_sglue+0x38>
 8003dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	d003      	beq.n	8003dd8 <_fwalk_sglue+0x38>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	47c0      	blx	r8
 8003dd6:	4306      	orrs	r6, r0
 8003dd8:	3568      	adds	r5, #104	@ 0x68
 8003dda:	e7e9      	b.n	8003db0 <_fwalk_sglue+0x10>

08003ddc <iprintf>:
 8003ddc:	b40f      	push	{r0, r1, r2, r3}
 8003dde:	b507      	push	{r0, r1, r2, lr}
 8003de0:	4906      	ldr	r1, [pc, #24]	@ (8003dfc <iprintf+0x20>)
 8003de2:	ab04      	add	r3, sp, #16
 8003de4:	6808      	ldr	r0, [r1, #0]
 8003de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dea:	6881      	ldr	r1, [r0, #8]
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	f000 f9e9 	bl	80041c4 <_vfiprintf_r>
 8003df2:	b003      	add	sp, #12
 8003df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df8:	b004      	add	sp, #16
 8003dfa:	4770      	bx	lr
 8003dfc:	20000020 	.word	0x20000020

08003e00 <__sread>:
 8003e00:	b510      	push	{r4, lr}
 8003e02:	460c      	mov	r4, r1
 8003e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e08:	f000 f868 	bl	8003edc <_read_r>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	bfab      	itete	ge
 8003e10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003e12:	89a3      	ldrhlt	r3, [r4, #12]
 8003e14:	181b      	addge	r3, r3, r0
 8003e16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003e1a:	bfac      	ite	ge
 8003e1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003e1e:	81a3      	strhlt	r3, [r4, #12]
 8003e20:	bd10      	pop	{r4, pc}

08003e22 <__swrite>:
 8003e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e26:	461f      	mov	r7, r3
 8003e28:	898b      	ldrh	r3, [r1, #12]
 8003e2a:	05db      	lsls	r3, r3, #23
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	4616      	mov	r6, r2
 8003e32:	d505      	bpl.n	8003e40 <__swrite+0x1e>
 8003e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e38:	2302      	movs	r3, #2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f000 f83c 	bl	8003eb8 <_lseek_r>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e4a:	81a3      	strh	r3, [r4, #12]
 8003e4c:	4632      	mov	r2, r6
 8003e4e:	463b      	mov	r3, r7
 8003e50:	4628      	mov	r0, r5
 8003e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e56:	f000 b853 	b.w	8003f00 <_write_r>

08003e5a <__sseek>:
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e62:	f000 f829 	bl	8003eb8 <_lseek_r>
 8003e66:	1c43      	adds	r3, r0, #1
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	bf15      	itete	ne
 8003e6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003e6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e76:	81a3      	strheq	r3, [r4, #12]
 8003e78:	bf18      	it	ne
 8003e7a:	81a3      	strhne	r3, [r4, #12]
 8003e7c:	bd10      	pop	{r4, pc}

08003e7e <__sclose>:
 8003e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e82:	f000 b809 	b.w	8003e98 <_close_r>

08003e86 <memset>:
 8003e86:	4402      	add	r2, r0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d100      	bne.n	8003e90 <memset+0xa>
 8003e8e:	4770      	bx	lr
 8003e90:	f803 1b01 	strb.w	r1, [r3], #1
 8003e94:	e7f9      	b.n	8003e8a <memset+0x4>
	...

08003e98 <_close_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4d06      	ldr	r5, [pc, #24]	@ (8003eb4 <_close_r+0x1c>)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7ff fd14 	bl	80038d0 <_close>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_close_r+0x1a>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_close_r+0x1a>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	20000310 	.word	0x20000310

08003eb8 <_lseek_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d07      	ldr	r5, [pc, #28]	@ (8003ed8 <_lseek_r+0x20>)
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	4608      	mov	r0, r1
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	602a      	str	r2, [r5, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f7ff fcc3 	bl	8003852 <_lseek>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_lseek_r+0x1e>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_lseek_r+0x1e>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	20000310 	.word	0x20000310

08003edc <_read_r>:
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	4d07      	ldr	r5, [pc, #28]	@ (8003efc <_read_r+0x20>)
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4608      	mov	r0, r1
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	602a      	str	r2, [r5, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f7ff fc5b 	bl	80037a6 <_read>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_read_r+0x1e>
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_read_r+0x1e>
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	20000310 	.word	0x20000310

08003f00 <_write_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4d07      	ldr	r5, [pc, #28]	@ (8003f20 <_write_r+0x20>)
 8003f04:	4604      	mov	r4, r0
 8003f06:	4608      	mov	r0, r1
 8003f08:	4611      	mov	r1, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	602a      	str	r2, [r5, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7ff fcb1 	bl	8003876 <_write>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_write_r+0x1e>
 8003f18:	682b      	ldr	r3, [r5, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_write_r+0x1e>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000310 	.word	0x20000310

08003f24 <__errno>:
 8003f24:	4b01      	ldr	r3, [pc, #4]	@ (8003f2c <__errno+0x8>)
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000020 	.word	0x20000020

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4d0d      	ldr	r5, [pc, #52]	@ (8003f68 <__libc_init_array+0x38>)
 8003f34:	4c0d      	ldr	r4, [pc, #52]	@ (8003f6c <__libc_init_array+0x3c>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	4d0b      	ldr	r5, [pc, #44]	@ (8003f70 <__libc_init_array+0x40>)
 8003f42:	4c0c      	ldr	r4, [pc, #48]	@ (8003f74 <__libc_init_array+0x44>)
 8003f44:	f000 fdb8 	bl	8004ab8 <_init>
 8003f48:	1b64      	subs	r4, r4, r5
 8003f4a:	10a4      	asrs	r4, r4, #2
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	08004b40 	.word	0x08004b40
 8003f6c:	08004b40 	.word	0x08004b40
 8003f70:	08004b40 	.word	0x08004b40
 8003f74:	08004b44 	.word	0x08004b44

08003f78 <__retarget_lock_init_recursive>:
 8003f78:	4770      	bx	lr

08003f7a <__retarget_lock_acquire_recursive>:
 8003f7a:	4770      	bx	lr

08003f7c <__retarget_lock_release_recursive>:
 8003f7c:	4770      	bx	lr
	...

08003f80 <_free_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4605      	mov	r5, r0
 8003f84:	2900      	cmp	r1, #0
 8003f86:	d041      	beq.n	800400c <_free_r+0x8c>
 8003f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8c:	1f0c      	subs	r4, r1, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfb8      	it	lt
 8003f92:	18e4      	addlt	r4, r4, r3
 8003f94:	f000 f8e0 	bl	8004158 <__malloc_lock>
 8003f98:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <_free_r+0x90>)
 8003f9a:	6813      	ldr	r3, [r2, #0]
 8003f9c:	b933      	cbnz	r3, 8003fac <_free_r+0x2c>
 8003f9e:	6063      	str	r3, [r4, #4]
 8003fa0:	6014      	str	r4, [r2, #0]
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fa8:	f000 b8dc 	b.w	8004164 <__malloc_unlock>
 8003fac:	42a3      	cmp	r3, r4
 8003fae:	d908      	bls.n	8003fc2 <_free_r+0x42>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	1821      	adds	r1, r4, r0
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	bf01      	itttt	eq
 8003fb8:	6819      	ldreq	r1, [r3, #0]
 8003fba:	685b      	ldreq	r3, [r3, #4]
 8003fbc:	1809      	addeq	r1, r1, r0
 8003fbe:	6021      	streq	r1, [r4, #0]
 8003fc0:	e7ed      	b.n	8003f9e <_free_r+0x1e>
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b10b      	cbz	r3, 8003fcc <_free_r+0x4c>
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	d9fa      	bls.n	8003fc2 <_free_r+0x42>
 8003fcc:	6811      	ldr	r1, [r2, #0]
 8003fce:	1850      	adds	r0, r2, r1
 8003fd0:	42a0      	cmp	r0, r4
 8003fd2:	d10b      	bne.n	8003fec <_free_r+0x6c>
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	4401      	add	r1, r0
 8003fd8:	1850      	adds	r0, r2, r1
 8003fda:	4283      	cmp	r3, r0
 8003fdc:	6011      	str	r1, [r2, #0]
 8003fde:	d1e0      	bne.n	8003fa2 <_free_r+0x22>
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	6053      	str	r3, [r2, #4]
 8003fe6:	4408      	add	r0, r1
 8003fe8:	6010      	str	r0, [r2, #0]
 8003fea:	e7da      	b.n	8003fa2 <_free_r+0x22>
 8003fec:	d902      	bls.n	8003ff4 <_free_r+0x74>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	e7d6      	b.n	8003fa2 <_free_r+0x22>
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	1821      	adds	r1, r4, r0
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	bf04      	itt	eq
 8003ffc:	6819      	ldreq	r1, [r3, #0]
 8003ffe:	685b      	ldreq	r3, [r3, #4]
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	bf04      	itt	eq
 8004004:	1809      	addeq	r1, r1, r0
 8004006:	6021      	streq	r1, [r4, #0]
 8004008:	6054      	str	r4, [r2, #4]
 800400a:	e7ca      	b.n	8003fa2 <_free_r+0x22>
 800400c:	bd38      	pop	{r3, r4, r5, pc}
 800400e:	bf00      	nop
 8004010:	2000031c 	.word	0x2000031c

08004014 <sbrk_aligned>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4e0f      	ldr	r6, [pc, #60]	@ (8004054 <sbrk_aligned+0x40>)
 8004018:	460c      	mov	r4, r1
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	4605      	mov	r5, r0
 800401e:	b911      	cbnz	r1, 8004026 <sbrk_aligned+0x12>
 8004020:	f000 fcb6 	bl	8004990 <_sbrk_r>
 8004024:	6030      	str	r0, [r6, #0]
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 fcb1 	bl	8004990 <_sbrk_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <sbrk_aligned+0x26>
 8004032:	f04f 34ff 	mov.w	r4, #4294967295
 8004036:	4620      	mov	r0, r4
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	1cc4      	adds	r4, r0, #3
 800403c:	f024 0403 	bic.w	r4, r4, #3
 8004040:	42a0      	cmp	r0, r4
 8004042:	d0f8      	beq.n	8004036 <sbrk_aligned+0x22>
 8004044:	1a21      	subs	r1, r4, r0
 8004046:	4628      	mov	r0, r5
 8004048:	f000 fca2 	bl	8004990 <_sbrk_r>
 800404c:	3001      	adds	r0, #1
 800404e:	d1f2      	bne.n	8004036 <sbrk_aligned+0x22>
 8004050:	e7ef      	b.n	8004032 <sbrk_aligned+0x1e>
 8004052:	bf00      	nop
 8004054:	20000318 	.word	0x20000318

08004058 <_malloc_r>:
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	1ccd      	adds	r5, r1, #3
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	2d00      	cmp	r5, #0
 800406c:	4606      	mov	r6, r0
 800406e:	db01      	blt.n	8004074 <_malloc_r+0x1c>
 8004070:	42a9      	cmp	r1, r5
 8004072:	d904      	bls.n	800407e <_malloc_r+0x26>
 8004074:	230c      	movs	r3, #12
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	2000      	movs	r0, #0
 800407a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004154 <_malloc_r+0xfc>
 8004082:	f000 f869 	bl	8004158 <__malloc_lock>
 8004086:	f8d8 3000 	ldr.w	r3, [r8]
 800408a:	461c      	mov	r4, r3
 800408c:	bb44      	cbnz	r4, 80040e0 <_malloc_r+0x88>
 800408e:	4629      	mov	r1, r5
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff ffbf 	bl	8004014 <sbrk_aligned>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	4604      	mov	r4, r0
 800409a:	d158      	bne.n	800414e <_malloc_r+0xf6>
 800409c:	f8d8 4000 	ldr.w	r4, [r8]
 80040a0:	4627      	mov	r7, r4
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	d143      	bne.n	800412e <_malloc_r+0xd6>
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	d04b      	beq.n	8004142 <_malloc_r+0xea>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	4639      	mov	r1, r7
 80040ae:	4630      	mov	r0, r6
 80040b0:	eb04 0903 	add.w	r9, r4, r3
 80040b4:	f000 fc6c 	bl	8004990 <_sbrk_r>
 80040b8:	4581      	cmp	r9, r0
 80040ba:	d142      	bne.n	8004142 <_malloc_r+0xea>
 80040bc:	6821      	ldr	r1, [r4, #0]
 80040be:	1a6d      	subs	r5, r5, r1
 80040c0:	4629      	mov	r1, r5
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7ff ffa6 	bl	8004014 <sbrk_aligned>
 80040c8:	3001      	adds	r0, #1
 80040ca:	d03a      	beq.n	8004142 <_malloc_r+0xea>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	442b      	add	r3, r5
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	f8d8 3000 	ldr.w	r3, [r8]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	bb62      	cbnz	r2, 8004134 <_malloc_r+0xdc>
 80040da:	f8c8 7000 	str.w	r7, [r8]
 80040de:	e00f      	b.n	8004100 <_malloc_r+0xa8>
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	1b52      	subs	r2, r2, r5
 80040e4:	d420      	bmi.n	8004128 <_malloc_r+0xd0>
 80040e6:	2a0b      	cmp	r2, #11
 80040e8:	d917      	bls.n	800411a <_malloc_r+0xc2>
 80040ea:	1961      	adds	r1, r4, r5
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	6025      	str	r5, [r4, #0]
 80040f0:	bf18      	it	ne
 80040f2:	6059      	strne	r1, [r3, #4]
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	bf08      	it	eq
 80040f8:	f8c8 1000 	streq.w	r1, [r8]
 80040fc:	5162      	str	r2, [r4, r5]
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f82f 	bl	8004164 <__malloc_unlock>
 8004106:	f104 000b 	add.w	r0, r4, #11
 800410a:	1d23      	adds	r3, r4, #4
 800410c:	f020 0007 	bic.w	r0, r0, #7
 8004110:	1ac2      	subs	r2, r0, r3
 8004112:	bf1c      	itt	ne
 8004114:	1a1b      	subne	r3, r3, r0
 8004116:	50a3      	strne	r3, [r4, r2]
 8004118:	e7af      	b.n	800407a <_malloc_r+0x22>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	42a3      	cmp	r3, r4
 800411e:	bf0c      	ite	eq
 8004120:	f8c8 2000 	streq.w	r2, [r8]
 8004124:	605a      	strne	r2, [r3, #4]
 8004126:	e7eb      	b.n	8004100 <_malloc_r+0xa8>
 8004128:	4623      	mov	r3, r4
 800412a:	6864      	ldr	r4, [r4, #4]
 800412c:	e7ae      	b.n	800408c <_malloc_r+0x34>
 800412e:	463c      	mov	r4, r7
 8004130:	687f      	ldr	r7, [r7, #4]
 8004132:	e7b6      	b.n	80040a2 <_malloc_r+0x4a>
 8004134:	461a      	mov	r2, r3
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	42a3      	cmp	r3, r4
 800413a:	d1fb      	bne.n	8004134 <_malloc_r+0xdc>
 800413c:	2300      	movs	r3, #0
 800413e:	6053      	str	r3, [r2, #4]
 8004140:	e7de      	b.n	8004100 <_malloc_r+0xa8>
 8004142:	230c      	movs	r3, #12
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	4630      	mov	r0, r6
 8004148:	f000 f80c 	bl	8004164 <__malloc_unlock>
 800414c:	e794      	b.n	8004078 <_malloc_r+0x20>
 800414e:	6005      	str	r5, [r0, #0]
 8004150:	e7d6      	b.n	8004100 <_malloc_r+0xa8>
 8004152:	bf00      	nop
 8004154:	2000031c 	.word	0x2000031c

08004158 <__malloc_lock>:
 8004158:	4801      	ldr	r0, [pc, #4]	@ (8004160 <__malloc_lock+0x8>)
 800415a:	f7ff bf0e 	b.w	8003f7a <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	20000314 	.word	0x20000314

08004164 <__malloc_unlock>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__malloc_unlock+0x8>)
 8004166:	f7ff bf09 	b.w	8003f7c <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	20000314 	.word	0x20000314

08004170 <__sfputc_r>:
 8004170:	6893      	ldr	r3, [r2, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	b410      	push	{r4}
 8004178:	6093      	str	r3, [r2, #8]
 800417a:	da08      	bge.n	800418e <__sfputc_r+0x1e>
 800417c:	6994      	ldr	r4, [r2, #24]
 800417e:	42a3      	cmp	r3, r4
 8004180:	db01      	blt.n	8004186 <__sfputc_r+0x16>
 8004182:	290a      	cmp	r1, #10
 8004184:	d103      	bne.n	800418e <__sfputc_r+0x1e>
 8004186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800418a:	f000 bb6d 	b.w	8004868 <__swbuf_r>
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	1c58      	adds	r0, r3, #1
 8004192:	6010      	str	r0, [r2, #0]
 8004194:	7019      	strb	r1, [r3, #0]
 8004196:	4608      	mov	r0, r1
 8004198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800419c:	4770      	bx	lr

0800419e <__sfputs_r>:
 800419e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a0:	4606      	mov	r6, r0
 80041a2:	460f      	mov	r7, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	18d5      	adds	r5, r2, r3
 80041a8:	42ac      	cmp	r4, r5
 80041aa:	d101      	bne.n	80041b0 <__sfputs_r+0x12>
 80041ac:	2000      	movs	r0, #0
 80041ae:	e007      	b.n	80041c0 <__sfputs_r+0x22>
 80041b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b4:	463a      	mov	r2, r7
 80041b6:	4630      	mov	r0, r6
 80041b8:	f7ff ffda 	bl	8004170 <__sfputc_r>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d1f3      	bne.n	80041a8 <__sfputs_r+0xa>
 80041c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041c4 <_vfiprintf_r>:
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	460d      	mov	r5, r1
 80041ca:	b09d      	sub	sp, #116	@ 0x74
 80041cc:	4614      	mov	r4, r2
 80041ce:	4698      	mov	r8, r3
 80041d0:	4606      	mov	r6, r0
 80041d2:	b118      	cbz	r0, 80041dc <_vfiprintf_r+0x18>
 80041d4:	6a03      	ldr	r3, [r0, #32]
 80041d6:	b90b      	cbnz	r3, 80041dc <_vfiprintf_r+0x18>
 80041d8:	f7ff fdca 	bl	8003d70 <__sinit>
 80041dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041de:	07d9      	lsls	r1, r3, #31
 80041e0:	d405      	bmi.n	80041ee <_vfiprintf_r+0x2a>
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	059a      	lsls	r2, r3, #22
 80041e6:	d402      	bmi.n	80041ee <_vfiprintf_r+0x2a>
 80041e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041ea:	f7ff fec6 	bl	8003f7a <__retarget_lock_acquire_recursive>
 80041ee:	89ab      	ldrh	r3, [r5, #12]
 80041f0:	071b      	lsls	r3, r3, #28
 80041f2:	d501      	bpl.n	80041f8 <_vfiprintf_r+0x34>
 80041f4:	692b      	ldr	r3, [r5, #16]
 80041f6:	b99b      	cbnz	r3, 8004220 <_vfiprintf_r+0x5c>
 80041f8:	4629      	mov	r1, r5
 80041fa:	4630      	mov	r0, r6
 80041fc:	f000 fb72 	bl	80048e4 <__swsetup_r>
 8004200:	b170      	cbz	r0, 8004220 <_vfiprintf_r+0x5c>
 8004202:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004204:	07dc      	lsls	r4, r3, #31
 8004206:	d504      	bpl.n	8004212 <_vfiprintf_r+0x4e>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	b01d      	add	sp, #116	@ 0x74
 800420e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004212:	89ab      	ldrh	r3, [r5, #12]
 8004214:	0598      	lsls	r0, r3, #22
 8004216:	d4f7      	bmi.n	8004208 <_vfiprintf_r+0x44>
 8004218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800421a:	f7ff feaf 	bl	8003f7c <__retarget_lock_release_recursive>
 800421e:	e7f3      	b.n	8004208 <_vfiprintf_r+0x44>
 8004220:	2300      	movs	r3, #0
 8004222:	9309      	str	r3, [sp, #36]	@ 0x24
 8004224:	2320      	movs	r3, #32
 8004226:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800422a:	f8cd 800c 	str.w	r8, [sp, #12]
 800422e:	2330      	movs	r3, #48	@ 0x30
 8004230:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80043e0 <_vfiprintf_r+0x21c>
 8004234:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004238:	f04f 0901 	mov.w	r9, #1
 800423c:	4623      	mov	r3, r4
 800423e:	469a      	mov	sl, r3
 8004240:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004244:	b10a      	cbz	r2, 800424a <_vfiprintf_r+0x86>
 8004246:	2a25      	cmp	r2, #37	@ 0x25
 8004248:	d1f9      	bne.n	800423e <_vfiprintf_r+0x7a>
 800424a:	ebba 0b04 	subs.w	fp, sl, r4
 800424e:	d00b      	beq.n	8004268 <_vfiprintf_r+0xa4>
 8004250:	465b      	mov	r3, fp
 8004252:	4622      	mov	r2, r4
 8004254:	4629      	mov	r1, r5
 8004256:	4630      	mov	r0, r6
 8004258:	f7ff ffa1 	bl	800419e <__sfputs_r>
 800425c:	3001      	adds	r0, #1
 800425e:	f000 80a7 	beq.w	80043b0 <_vfiprintf_r+0x1ec>
 8004262:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004264:	445a      	add	r2, fp
 8004266:	9209      	str	r2, [sp, #36]	@ 0x24
 8004268:	f89a 3000 	ldrb.w	r3, [sl]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 809f 	beq.w	80043b0 <_vfiprintf_r+0x1ec>
 8004272:	2300      	movs	r3, #0
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800427c:	f10a 0a01 	add.w	sl, sl, #1
 8004280:	9304      	str	r3, [sp, #16]
 8004282:	9307      	str	r3, [sp, #28]
 8004284:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004288:	931a      	str	r3, [sp, #104]	@ 0x68
 800428a:	4654      	mov	r4, sl
 800428c:	2205      	movs	r2, #5
 800428e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004292:	4853      	ldr	r0, [pc, #332]	@ (80043e0 <_vfiprintf_r+0x21c>)
 8004294:	f7fb ffac 	bl	80001f0 <memchr>
 8004298:	9a04      	ldr	r2, [sp, #16]
 800429a:	b9d8      	cbnz	r0, 80042d4 <_vfiprintf_r+0x110>
 800429c:	06d1      	lsls	r1, r2, #27
 800429e:	bf44      	itt	mi
 80042a0:	2320      	movmi	r3, #32
 80042a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042a6:	0713      	lsls	r3, r2, #28
 80042a8:	bf44      	itt	mi
 80042aa:	232b      	movmi	r3, #43	@ 0x2b
 80042ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042b0:	f89a 3000 	ldrb.w	r3, [sl]
 80042b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042b6:	d015      	beq.n	80042e4 <_vfiprintf_r+0x120>
 80042b8:	9a07      	ldr	r2, [sp, #28]
 80042ba:	4654      	mov	r4, sl
 80042bc:	2000      	movs	r0, #0
 80042be:	f04f 0c0a 	mov.w	ip, #10
 80042c2:	4621      	mov	r1, r4
 80042c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c8:	3b30      	subs	r3, #48	@ 0x30
 80042ca:	2b09      	cmp	r3, #9
 80042cc:	d94b      	bls.n	8004366 <_vfiprintf_r+0x1a2>
 80042ce:	b1b0      	cbz	r0, 80042fe <_vfiprintf_r+0x13a>
 80042d0:	9207      	str	r2, [sp, #28]
 80042d2:	e014      	b.n	80042fe <_vfiprintf_r+0x13a>
 80042d4:	eba0 0308 	sub.w	r3, r0, r8
 80042d8:	fa09 f303 	lsl.w	r3, r9, r3
 80042dc:	4313      	orrs	r3, r2
 80042de:	9304      	str	r3, [sp, #16]
 80042e0:	46a2      	mov	sl, r4
 80042e2:	e7d2      	b.n	800428a <_vfiprintf_r+0xc6>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	1d19      	adds	r1, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	9103      	str	r1, [sp, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bfbb      	ittet	lt
 80042f0:	425b      	neglt	r3, r3
 80042f2:	f042 0202 	orrlt.w	r2, r2, #2
 80042f6:	9307      	strge	r3, [sp, #28]
 80042f8:	9307      	strlt	r3, [sp, #28]
 80042fa:	bfb8      	it	lt
 80042fc:	9204      	strlt	r2, [sp, #16]
 80042fe:	7823      	ldrb	r3, [r4, #0]
 8004300:	2b2e      	cmp	r3, #46	@ 0x2e
 8004302:	d10a      	bne.n	800431a <_vfiprintf_r+0x156>
 8004304:	7863      	ldrb	r3, [r4, #1]
 8004306:	2b2a      	cmp	r3, #42	@ 0x2a
 8004308:	d132      	bne.n	8004370 <_vfiprintf_r+0x1ac>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	1d1a      	adds	r2, r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	9203      	str	r2, [sp, #12]
 8004312:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004316:	3402      	adds	r4, #2
 8004318:	9305      	str	r3, [sp, #20]
 800431a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80043f0 <_vfiprintf_r+0x22c>
 800431e:	7821      	ldrb	r1, [r4, #0]
 8004320:	2203      	movs	r2, #3
 8004322:	4650      	mov	r0, sl
 8004324:	f7fb ff64 	bl	80001f0 <memchr>
 8004328:	b138      	cbz	r0, 800433a <_vfiprintf_r+0x176>
 800432a:	9b04      	ldr	r3, [sp, #16]
 800432c:	eba0 000a 	sub.w	r0, r0, sl
 8004330:	2240      	movs	r2, #64	@ 0x40
 8004332:	4082      	lsls	r2, r0
 8004334:	4313      	orrs	r3, r2
 8004336:	3401      	adds	r4, #1
 8004338:	9304      	str	r3, [sp, #16]
 800433a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433e:	4829      	ldr	r0, [pc, #164]	@ (80043e4 <_vfiprintf_r+0x220>)
 8004340:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004344:	2206      	movs	r2, #6
 8004346:	f7fb ff53 	bl	80001f0 <memchr>
 800434a:	2800      	cmp	r0, #0
 800434c:	d03f      	beq.n	80043ce <_vfiprintf_r+0x20a>
 800434e:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <_vfiprintf_r+0x224>)
 8004350:	bb1b      	cbnz	r3, 800439a <_vfiprintf_r+0x1d6>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	3307      	adds	r3, #7
 8004356:	f023 0307 	bic.w	r3, r3, #7
 800435a:	3308      	adds	r3, #8
 800435c:	9303      	str	r3, [sp, #12]
 800435e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004360:	443b      	add	r3, r7
 8004362:	9309      	str	r3, [sp, #36]	@ 0x24
 8004364:	e76a      	b.n	800423c <_vfiprintf_r+0x78>
 8004366:	fb0c 3202 	mla	r2, ip, r2, r3
 800436a:	460c      	mov	r4, r1
 800436c:	2001      	movs	r0, #1
 800436e:	e7a8      	b.n	80042c2 <_vfiprintf_r+0xfe>
 8004370:	2300      	movs	r3, #0
 8004372:	3401      	adds	r4, #1
 8004374:	9305      	str	r3, [sp, #20]
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0c0a 	mov.w	ip, #10
 800437c:	4620      	mov	r0, r4
 800437e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004382:	3a30      	subs	r2, #48	@ 0x30
 8004384:	2a09      	cmp	r2, #9
 8004386:	d903      	bls.n	8004390 <_vfiprintf_r+0x1cc>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0c6      	beq.n	800431a <_vfiprintf_r+0x156>
 800438c:	9105      	str	r1, [sp, #20]
 800438e:	e7c4      	b.n	800431a <_vfiprintf_r+0x156>
 8004390:	fb0c 2101 	mla	r1, ip, r1, r2
 8004394:	4604      	mov	r4, r0
 8004396:	2301      	movs	r3, #1
 8004398:	e7f0      	b.n	800437c <_vfiprintf_r+0x1b8>
 800439a:	ab03      	add	r3, sp, #12
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	462a      	mov	r2, r5
 80043a0:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <_vfiprintf_r+0x228>)
 80043a2:	a904      	add	r1, sp, #16
 80043a4:	4630      	mov	r0, r6
 80043a6:	f3af 8000 	nop.w
 80043aa:	4607      	mov	r7, r0
 80043ac:	1c78      	adds	r0, r7, #1
 80043ae:	d1d6      	bne.n	800435e <_vfiprintf_r+0x19a>
 80043b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043b2:	07d9      	lsls	r1, r3, #31
 80043b4:	d405      	bmi.n	80043c2 <_vfiprintf_r+0x1fe>
 80043b6:	89ab      	ldrh	r3, [r5, #12]
 80043b8:	059a      	lsls	r2, r3, #22
 80043ba:	d402      	bmi.n	80043c2 <_vfiprintf_r+0x1fe>
 80043bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043be:	f7ff fddd 	bl	8003f7c <__retarget_lock_release_recursive>
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	065b      	lsls	r3, r3, #25
 80043c6:	f53f af1f 	bmi.w	8004208 <_vfiprintf_r+0x44>
 80043ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043cc:	e71e      	b.n	800420c <_vfiprintf_r+0x48>
 80043ce:	ab03      	add	r3, sp, #12
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	462a      	mov	r2, r5
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <_vfiprintf_r+0x228>)
 80043d6:	a904      	add	r1, sp, #16
 80043d8:	4630      	mov	r0, r6
 80043da:	f000 f879 	bl	80044d0 <_printf_i>
 80043de:	e7e4      	b.n	80043aa <_vfiprintf_r+0x1e6>
 80043e0:	08004b02 	.word	0x08004b02
 80043e4:	08004b0c 	.word	0x08004b0c
 80043e8:	00000000 	.word	0x00000000
 80043ec:	0800419f 	.word	0x0800419f
 80043f0:	08004b08 	.word	0x08004b08

080043f4 <_printf_common>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	4616      	mov	r6, r2
 80043fa:	4698      	mov	r8, r3
 80043fc:	688a      	ldr	r2, [r1, #8]
 80043fe:	690b      	ldr	r3, [r1, #16]
 8004400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004404:	4293      	cmp	r3, r2
 8004406:	bfb8      	it	lt
 8004408:	4613      	movlt	r3, r2
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004410:	4607      	mov	r7, r0
 8004412:	460c      	mov	r4, r1
 8004414:	b10a      	cbz	r2, 800441a <_printf_common+0x26>
 8004416:	3301      	adds	r3, #1
 8004418:	6033      	str	r3, [r6, #0]
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	0699      	lsls	r1, r3, #26
 800441e:	bf42      	ittt	mi
 8004420:	6833      	ldrmi	r3, [r6, #0]
 8004422:	3302      	addmi	r3, #2
 8004424:	6033      	strmi	r3, [r6, #0]
 8004426:	6825      	ldr	r5, [r4, #0]
 8004428:	f015 0506 	ands.w	r5, r5, #6
 800442c:	d106      	bne.n	800443c <_printf_common+0x48>
 800442e:	f104 0a19 	add.w	sl, r4, #25
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	6832      	ldr	r2, [r6, #0]
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	42ab      	cmp	r3, r5
 800443a:	dc26      	bgt.n	800448a <_printf_common+0x96>
 800443c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	3b00      	subs	r3, #0
 8004444:	bf18      	it	ne
 8004446:	2301      	movne	r3, #1
 8004448:	0692      	lsls	r2, r2, #26
 800444a:	d42b      	bmi.n	80044a4 <_printf_common+0xb0>
 800444c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004450:	4641      	mov	r1, r8
 8004452:	4638      	mov	r0, r7
 8004454:	47c8      	blx	r9
 8004456:	3001      	adds	r0, #1
 8004458:	d01e      	beq.n	8004498 <_printf_common+0xa4>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	6922      	ldr	r2, [r4, #16]
 800445e:	f003 0306 	and.w	r3, r3, #6
 8004462:	2b04      	cmp	r3, #4
 8004464:	bf02      	ittt	eq
 8004466:	68e5      	ldreq	r5, [r4, #12]
 8004468:	6833      	ldreq	r3, [r6, #0]
 800446a:	1aed      	subeq	r5, r5, r3
 800446c:	68a3      	ldr	r3, [r4, #8]
 800446e:	bf0c      	ite	eq
 8004470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004474:	2500      	movne	r5, #0
 8004476:	4293      	cmp	r3, r2
 8004478:	bfc4      	itt	gt
 800447a:	1a9b      	subgt	r3, r3, r2
 800447c:	18ed      	addgt	r5, r5, r3
 800447e:	2600      	movs	r6, #0
 8004480:	341a      	adds	r4, #26
 8004482:	42b5      	cmp	r5, r6
 8004484:	d11a      	bne.n	80044bc <_printf_common+0xc8>
 8004486:	2000      	movs	r0, #0
 8004488:	e008      	b.n	800449c <_printf_common+0xa8>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4641      	mov	r1, r8
 8004490:	4638      	mov	r0, r7
 8004492:	47c8      	blx	r9
 8004494:	3001      	adds	r0, #1
 8004496:	d103      	bne.n	80044a0 <_printf_common+0xac>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	3501      	adds	r5, #1
 80044a2:	e7c6      	b.n	8004432 <_printf_common+0x3e>
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	2030      	movs	r0, #48	@ 0x30
 80044aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ae:	4422      	add	r2, r4
 80044b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044b8:	3302      	adds	r3, #2
 80044ba:	e7c7      	b.n	800444c <_printf_common+0x58>
 80044bc:	2301      	movs	r3, #1
 80044be:	4622      	mov	r2, r4
 80044c0:	4641      	mov	r1, r8
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c8      	blx	r9
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0e6      	beq.n	8004498 <_printf_common+0xa4>
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7d9      	b.n	8004482 <_printf_common+0x8e>
	...

080044d0 <_printf_i>:
 80044d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	7e0f      	ldrb	r7, [r1, #24]
 80044d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044d8:	2f78      	cmp	r7, #120	@ 0x78
 80044da:	4691      	mov	r9, r2
 80044dc:	4680      	mov	r8, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	469a      	mov	sl, r3
 80044e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044e6:	d807      	bhi.n	80044f8 <_printf_i+0x28>
 80044e8:	2f62      	cmp	r7, #98	@ 0x62
 80044ea:	d80a      	bhi.n	8004502 <_printf_i+0x32>
 80044ec:	2f00      	cmp	r7, #0
 80044ee:	f000 80d2 	beq.w	8004696 <_printf_i+0x1c6>
 80044f2:	2f58      	cmp	r7, #88	@ 0x58
 80044f4:	f000 80b9 	beq.w	800466a <_printf_i+0x19a>
 80044f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004500:	e03a      	b.n	8004578 <_printf_i+0xa8>
 8004502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004506:	2b15      	cmp	r3, #21
 8004508:	d8f6      	bhi.n	80044f8 <_printf_i+0x28>
 800450a:	a101      	add	r1, pc, #4	@ (adr r1, 8004510 <_printf_i+0x40>)
 800450c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004510:	08004569 	.word	0x08004569
 8004514:	0800457d 	.word	0x0800457d
 8004518:	080044f9 	.word	0x080044f9
 800451c:	080044f9 	.word	0x080044f9
 8004520:	080044f9 	.word	0x080044f9
 8004524:	080044f9 	.word	0x080044f9
 8004528:	0800457d 	.word	0x0800457d
 800452c:	080044f9 	.word	0x080044f9
 8004530:	080044f9 	.word	0x080044f9
 8004534:	080044f9 	.word	0x080044f9
 8004538:	080044f9 	.word	0x080044f9
 800453c:	0800467d 	.word	0x0800467d
 8004540:	080045a7 	.word	0x080045a7
 8004544:	08004637 	.word	0x08004637
 8004548:	080044f9 	.word	0x080044f9
 800454c:	080044f9 	.word	0x080044f9
 8004550:	0800469f 	.word	0x0800469f
 8004554:	080044f9 	.word	0x080044f9
 8004558:	080045a7 	.word	0x080045a7
 800455c:	080044f9 	.word	0x080044f9
 8004560:	080044f9 	.word	0x080044f9
 8004564:	0800463f 	.word	0x0800463f
 8004568:	6833      	ldr	r3, [r6, #0]
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6032      	str	r2, [r6, #0]
 8004570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004578:	2301      	movs	r3, #1
 800457a:	e09d      	b.n	80046b8 <_printf_i+0x1e8>
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	1d19      	adds	r1, r3, #4
 8004582:	6031      	str	r1, [r6, #0]
 8004584:	0606      	lsls	r6, r0, #24
 8004586:	d501      	bpl.n	800458c <_printf_i+0xbc>
 8004588:	681d      	ldr	r5, [r3, #0]
 800458a:	e003      	b.n	8004594 <_printf_i+0xc4>
 800458c:	0645      	lsls	r5, r0, #25
 800458e:	d5fb      	bpl.n	8004588 <_printf_i+0xb8>
 8004590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004594:	2d00      	cmp	r5, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xd0>
 8004598:	232d      	movs	r3, #45	@ 0x2d
 800459a:	426d      	negs	r5, r5
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a0:	4859      	ldr	r0, [pc, #356]	@ (8004708 <_printf_i+0x238>)
 80045a2:	230a      	movs	r3, #10
 80045a4:	e011      	b.n	80045ca <_printf_i+0xfa>
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	0608      	lsls	r0, r1, #24
 80045ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80045b0:	d402      	bmi.n	80045b8 <_printf_i+0xe8>
 80045b2:	0649      	lsls	r1, r1, #25
 80045b4:	bf48      	it	mi
 80045b6:	b2ad      	uxthmi	r5, r5
 80045b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80045ba:	4853      	ldr	r0, [pc, #332]	@ (8004708 <_printf_i+0x238>)
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	bf14      	ite	ne
 80045c0:	230a      	movne	r3, #10
 80045c2:	2308      	moveq	r3, #8
 80045c4:	2100      	movs	r1, #0
 80045c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045ca:	6866      	ldr	r6, [r4, #4]
 80045cc:	60a6      	str	r6, [r4, #8]
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	bfa2      	ittt	ge
 80045d2:	6821      	ldrge	r1, [r4, #0]
 80045d4:	f021 0104 	bicge.w	r1, r1, #4
 80045d8:	6021      	strge	r1, [r4, #0]
 80045da:	b90d      	cbnz	r5, 80045e0 <_printf_i+0x110>
 80045dc:	2e00      	cmp	r6, #0
 80045de:	d04b      	beq.n	8004678 <_printf_i+0x1a8>
 80045e0:	4616      	mov	r6, r2
 80045e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80045e6:	fb03 5711 	mls	r7, r3, r1, r5
 80045ea:	5dc7      	ldrb	r7, [r0, r7]
 80045ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045f0:	462f      	mov	r7, r5
 80045f2:	42bb      	cmp	r3, r7
 80045f4:	460d      	mov	r5, r1
 80045f6:	d9f4      	bls.n	80045e2 <_printf_i+0x112>
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d10b      	bne.n	8004614 <_printf_i+0x144>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	07df      	lsls	r7, r3, #31
 8004600:	d508      	bpl.n	8004614 <_printf_i+0x144>
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	6861      	ldr	r1, [r4, #4]
 8004606:	4299      	cmp	r1, r3
 8004608:	bfde      	ittt	le
 800460a:	2330      	movle	r3, #48	@ 0x30
 800460c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004610:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004614:	1b92      	subs	r2, r2, r6
 8004616:	6122      	str	r2, [r4, #16]
 8004618:	f8cd a000 	str.w	sl, [sp]
 800461c:	464b      	mov	r3, r9
 800461e:	aa03      	add	r2, sp, #12
 8004620:	4621      	mov	r1, r4
 8004622:	4640      	mov	r0, r8
 8004624:	f7ff fee6 	bl	80043f4 <_printf_common>
 8004628:	3001      	adds	r0, #1
 800462a:	d14a      	bne.n	80046c2 <_printf_i+0x1f2>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	b004      	add	sp, #16
 8004632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	4833      	ldr	r0, [pc, #204]	@ (800470c <_printf_i+0x23c>)
 8004640:	2778      	movs	r7, #120	@ 0x78
 8004642:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	6831      	ldr	r1, [r6, #0]
 800464a:	061f      	lsls	r7, r3, #24
 800464c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004650:	d402      	bmi.n	8004658 <_printf_i+0x188>
 8004652:	065f      	lsls	r7, r3, #25
 8004654:	bf48      	it	mi
 8004656:	b2ad      	uxthmi	r5, r5
 8004658:	6031      	str	r1, [r6, #0]
 800465a:	07d9      	lsls	r1, r3, #31
 800465c:	bf44      	itt	mi
 800465e:	f043 0320 	orrmi.w	r3, r3, #32
 8004662:	6023      	strmi	r3, [r4, #0]
 8004664:	b11d      	cbz	r5, 800466e <_printf_i+0x19e>
 8004666:	2310      	movs	r3, #16
 8004668:	e7ac      	b.n	80045c4 <_printf_i+0xf4>
 800466a:	4827      	ldr	r0, [pc, #156]	@ (8004708 <_printf_i+0x238>)
 800466c:	e7e9      	b.n	8004642 <_printf_i+0x172>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f023 0320 	bic.w	r3, r3, #32
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	e7f6      	b.n	8004666 <_printf_i+0x196>
 8004678:	4616      	mov	r6, r2
 800467a:	e7bd      	b.n	80045f8 <_printf_i+0x128>
 800467c:	6833      	ldr	r3, [r6, #0]
 800467e:	6825      	ldr	r5, [r4, #0]
 8004680:	6961      	ldr	r1, [r4, #20]
 8004682:	1d18      	adds	r0, r3, #4
 8004684:	6030      	str	r0, [r6, #0]
 8004686:	062e      	lsls	r6, r5, #24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	d501      	bpl.n	8004690 <_printf_i+0x1c0>
 800468c:	6019      	str	r1, [r3, #0]
 800468e:	e002      	b.n	8004696 <_printf_i+0x1c6>
 8004690:	0668      	lsls	r0, r5, #25
 8004692:	d5fb      	bpl.n	800468c <_printf_i+0x1bc>
 8004694:	8019      	strh	r1, [r3, #0]
 8004696:	2300      	movs	r3, #0
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	4616      	mov	r6, r2
 800469c:	e7bc      	b.n	8004618 <_printf_i+0x148>
 800469e:	6833      	ldr	r3, [r6, #0]
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	6032      	str	r2, [r6, #0]
 80046a4:	681e      	ldr	r6, [r3, #0]
 80046a6:	6862      	ldr	r2, [r4, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7fb fda0 	bl	80001f0 <memchr>
 80046b0:	b108      	cbz	r0, 80046b6 <_printf_i+0x1e6>
 80046b2:	1b80      	subs	r0, r0, r6
 80046b4:	6060      	str	r0, [r4, #4]
 80046b6:	6863      	ldr	r3, [r4, #4]
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	2300      	movs	r3, #0
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c0:	e7aa      	b.n	8004618 <_printf_i+0x148>
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	4632      	mov	r2, r6
 80046c6:	4649      	mov	r1, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	47d0      	blx	sl
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0ad      	beq.n	800462c <_printf_i+0x15c>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	d413      	bmi.n	80046fe <_printf_i+0x22e>
 80046d6:	68e0      	ldr	r0, [r4, #12]
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	4298      	cmp	r0, r3
 80046dc:	bfb8      	it	lt
 80046de:	4618      	movlt	r0, r3
 80046e0:	e7a6      	b.n	8004630 <_printf_i+0x160>
 80046e2:	2301      	movs	r3, #1
 80046e4:	4632      	mov	r2, r6
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d09d      	beq.n	800462c <_printf_i+0x15c>
 80046f0:	3501      	adds	r5, #1
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	9903      	ldr	r1, [sp, #12]
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	42ab      	cmp	r3, r5
 80046fa:	dcf2      	bgt.n	80046e2 <_printf_i+0x212>
 80046fc:	e7eb      	b.n	80046d6 <_printf_i+0x206>
 80046fe:	2500      	movs	r5, #0
 8004700:	f104 0619 	add.w	r6, r4, #25
 8004704:	e7f5      	b.n	80046f2 <_printf_i+0x222>
 8004706:	bf00      	nop
 8004708:	08004b13 	.word	0x08004b13
 800470c:	08004b24 	.word	0x08004b24

08004710 <__sflush_r>:
 8004710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	0716      	lsls	r6, r2, #28
 800471a:	4605      	mov	r5, r0
 800471c:	460c      	mov	r4, r1
 800471e:	d454      	bmi.n	80047ca <__sflush_r+0xba>
 8004720:	684b      	ldr	r3, [r1, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	dc02      	bgt.n	800472c <__sflush_r+0x1c>
 8004726:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	dd48      	ble.n	80047be <__sflush_r+0xae>
 800472c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800472e:	2e00      	cmp	r6, #0
 8004730:	d045      	beq.n	80047be <__sflush_r+0xae>
 8004732:	2300      	movs	r3, #0
 8004734:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004738:	682f      	ldr	r7, [r5, #0]
 800473a:	6a21      	ldr	r1, [r4, #32]
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	d030      	beq.n	80047a2 <__sflush_r+0x92>
 8004740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	0759      	lsls	r1, r3, #29
 8004746:	d505      	bpl.n	8004754 <__sflush_r+0x44>
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800474e:	b10b      	cbz	r3, 8004754 <__sflush_r+0x44>
 8004750:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	2300      	movs	r3, #0
 8004756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004758:	6a21      	ldr	r1, [r4, #32]
 800475a:	4628      	mov	r0, r5
 800475c:	47b0      	blx	r6
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	d106      	bne.n	8004772 <__sflush_r+0x62>
 8004764:	6829      	ldr	r1, [r5, #0]
 8004766:	291d      	cmp	r1, #29
 8004768:	d82b      	bhi.n	80047c2 <__sflush_r+0xb2>
 800476a:	4a2a      	ldr	r2, [pc, #168]	@ (8004814 <__sflush_r+0x104>)
 800476c:	410a      	asrs	r2, r1
 800476e:	07d6      	lsls	r6, r2, #31
 8004770:	d427      	bmi.n	80047c2 <__sflush_r+0xb2>
 8004772:	2200      	movs	r2, #0
 8004774:	6062      	str	r2, [r4, #4]
 8004776:	04d9      	lsls	r1, r3, #19
 8004778:	6922      	ldr	r2, [r4, #16]
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	d504      	bpl.n	8004788 <__sflush_r+0x78>
 800477e:	1c42      	adds	r2, r0, #1
 8004780:	d101      	bne.n	8004786 <__sflush_r+0x76>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	b903      	cbnz	r3, 8004788 <__sflush_r+0x78>
 8004786:	6560      	str	r0, [r4, #84]	@ 0x54
 8004788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800478a:	602f      	str	r7, [r5, #0]
 800478c:	b1b9      	cbz	r1, 80047be <__sflush_r+0xae>
 800478e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004792:	4299      	cmp	r1, r3
 8004794:	d002      	beq.n	800479c <__sflush_r+0x8c>
 8004796:	4628      	mov	r0, r5
 8004798:	f7ff fbf2 	bl	8003f80 <_free_r>
 800479c:	2300      	movs	r3, #0
 800479e:	6363      	str	r3, [r4, #52]	@ 0x34
 80047a0:	e00d      	b.n	80047be <__sflush_r+0xae>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4628      	mov	r0, r5
 80047a6:	47b0      	blx	r6
 80047a8:	4602      	mov	r2, r0
 80047aa:	1c50      	adds	r0, r2, #1
 80047ac:	d1c9      	bne.n	8004742 <__sflush_r+0x32>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0c6      	beq.n	8004742 <__sflush_r+0x32>
 80047b4:	2b1d      	cmp	r3, #29
 80047b6:	d001      	beq.n	80047bc <__sflush_r+0xac>
 80047b8:	2b16      	cmp	r3, #22
 80047ba:	d11e      	bne.n	80047fa <__sflush_r+0xea>
 80047bc:	602f      	str	r7, [r5, #0]
 80047be:	2000      	movs	r0, #0
 80047c0:	e022      	b.n	8004808 <__sflush_r+0xf8>
 80047c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047c6:	b21b      	sxth	r3, r3
 80047c8:	e01b      	b.n	8004802 <__sflush_r+0xf2>
 80047ca:	690f      	ldr	r7, [r1, #16]
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	d0f6      	beq.n	80047be <__sflush_r+0xae>
 80047d0:	0793      	lsls	r3, r2, #30
 80047d2:	680e      	ldr	r6, [r1, #0]
 80047d4:	bf08      	it	eq
 80047d6:	694b      	ldreq	r3, [r1, #20]
 80047d8:	600f      	str	r7, [r1, #0]
 80047da:	bf18      	it	ne
 80047dc:	2300      	movne	r3, #0
 80047de:	eba6 0807 	sub.w	r8, r6, r7
 80047e2:	608b      	str	r3, [r1, #8]
 80047e4:	f1b8 0f00 	cmp.w	r8, #0
 80047e8:	dde9      	ble.n	80047be <__sflush_r+0xae>
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047ee:	4643      	mov	r3, r8
 80047f0:	463a      	mov	r2, r7
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b0      	blx	r6
 80047f6:	2800      	cmp	r0, #0
 80047f8:	dc08      	bgt.n	800480c <__sflush_r+0xfc>
 80047fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800480c:	4407      	add	r7, r0
 800480e:	eba8 0800 	sub.w	r8, r8, r0
 8004812:	e7e7      	b.n	80047e4 <__sflush_r+0xd4>
 8004814:	dfbffffe 	.word	0xdfbffffe

08004818 <_fflush_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	690b      	ldr	r3, [r1, #16]
 800481c:	4605      	mov	r5, r0
 800481e:	460c      	mov	r4, r1
 8004820:	b913      	cbnz	r3, 8004828 <_fflush_r+0x10>
 8004822:	2500      	movs	r5, #0
 8004824:	4628      	mov	r0, r5
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	b118      	cbz	r0, 8004832 <_fflush_r+0x1a>
 800482a:	6a03      	ldr	r3, [r0, #32]
 800482c:	b90b      	cbnz	r3, 8004832 <_fflush_r+0x1a>
 800482e:	f7ff fa9f 	bl	8003d70 <__sinit>
 8004832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f3      	beq.n	8004822 <_fflush_r+0xa>
 800483a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800483c:	07d0      	lsls	r0, r2, #31
 800483e:	d404      	bmi.n	800484a <_fflush_r+0x32>
 8004840:	0599      	lsls	r1, r3, #22
 8004842:	d402      	bmi.n	800484a <_fflush_r+0x32>
 8004844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004846:	f7ff fb98 	bl	8003f7a <__retarget_lock_acquire_recursive>
 800484a:	4628      	mov	r0, r5
 800484c:	4621      	mov	r1, r4
 800484e:	f7ff ff5f 	bl	8004710 <__sflush_r>
 8004852:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004854:	07da      	lsls	r2, r3, #31
 8004856:	4605      	mov	r5, r0
 8004858:	d4e4      	bmi.n	8004824 <_fflush_r+0xc>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	059b      	lsls	r3, r3, #22
 800485e:	d4e1      	bmi.n	8004824 <_fflush_r+0xc>
 8004860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004862:	f7ff fb8b 	bl	8003f7c <__retarget_lock_release_recursive>
 8004866:	e7dd      	b.n	8004824 <_fflush_r+0xc>

08004868 <__swbuf_r>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	460e      	mov	r6, r1
 800486c:	4614      	mov	r4, r2
 800486e:	4605      	mov	r5, r0
 8004870:	b118      	cbz	r0, 800487a <__swbuf_r+0x12>
 8004872:	6a03      	ldr	r3, [r0, #32]
 8004874:	b90b      	cbnz	r3, 800487a <__swbuf_r+0x12>
 8004876:	f7ff fa7b 	bl	8003d70 <__sinit>
 800487a:	69a3      	ldr	r3, [r4, #24]
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	071a      	lsls	r2, r3, #28
 8004882:	d501      	bpl.n	8004888 <__swbuf_r+0x20>
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	b943      	cbnz	r3, 800489a <__swbuf_r+0x32>
 8004888:	4621      	mov	r1, r4
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f82a 	bl	80048e4 <__swsetup_r>
 8004890:	b118      	cbz	r0, 800489a <__swbuf_r+0x32>
 8004892:	f04f 37ff 	mov.w	r7, #4294967295
 8004896:	4638      	mov	r0, r7
 8004898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	6922      	ldr	r2, [r4, #16]
 800489e:	1a98      	subs	r0, r3, r2
 80048a0:	6963      	ldr	r3, [r4, #20]
 80048a2:	b2f6      	uxtb	r6, r6
 80048a4:	4283      	cmp	r3, r0
 80048a6:	4637      	mov	r7, r6
 80048a8:	dc05      	bgt.n	80048b6 <__swbuf_r+0x4e>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f7ff ffb3 	bl	8004818 <_fflush_r>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d1ed      	bne.n	8004892 <__swbuf_r+0x2a>
 80048b6:	68a3      	ldr	r3, [r4, #8]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60a3      	str	r3, [r4, #8]
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	6022      	str	r2, [r4, #0]
 80048c2:	701e      	strb	r6, [r3, #0]
 80048c4:	6962      	ldr	r2, [r4, #20]
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d004      	beq.n	80048d6 <__swbuf_r+0x6e>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	07db      	lsls	r3, r3, #31
 80048d0:	d5e1      	bpl.n	8004896 <__swbuf_r+0x2e>
 80048d2:	2e0a      	cmp	r6, #10
 80048d4:	d1df      	bne.n	8004896 <__swbuf_r+0x2e>
 80048d6:	4621      	mov	r1, r4
 80048d8:	4628      	mov	r0, r5
 80048da:	f7ff ff9d 	bl	8004818 <_fflush_r>
 80048de:	2800      	cmp	r0, #0
 80048e0:	d0d9      	beq.n	8004896 <__swbuf_r+0x2e>
 80048e2:	e7d6      	b.n	8004892 <__swbuf_r+0x2a>

080048e4 <__swsetup_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4b29      	ldr	r3, [pc, #164]	@ (800498c <__swsetup_r+0xa8>)
 80048e8:	4605      	mov	r5, r0
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	460c      	mov	r4, r1
 80048ee:	b118      	cbz	r0, 80048f8 <__swsetup_r+0x14>
 80048f0:	6a03      	ldr	r3, [r0, #32]
 80048f2:	b90b      	cbnz	r3, 80048f8 <__swsetup_r+0x14>
 80048f4:	f7ff fa3c 	bl	8003d70 <__sinit>
 80048f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048fc:	0719      	lsls	r1, r3, #28
 80048fe:	d422      	bmi.n	8004946 <__swsetup_r+0x62>
 8004900:	06da      	lsls	r2, r3, #27
 8004902:	d407      	bmi.n	8004914 <__swsetup_r+0x30>
 8004904:	2209      	movs	r2, #9
 8004906:	602a      	str	r2, [r5, #0]
 8004908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490c:	81a3      	strh	r3, [r4, #12]
 800490e:	f04f 30ff 	mov.w	r0, #4294967295
 8004912:	e033      	b.n	800497c <__swsetup_r+0x98>
 8004914:	0758      	lsls	r0, r3, #29
 8004916:	d512      	bpl.n	800493e <__swsetup_r+0x5a>
 8004918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800491a:	b141      	cbz	r1, 800492e <__swsetup_r+0x4a>
 800491c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004920:	4299      	cmp	r1, r3
 8004922:	d002      	beq.n	800492a <__swsetup_r+0x46>
 8004924:	4628      	mov	r0, r5
 8004926:	f7ff fb2b 	bl	8003f80 <_free_r>
 800492a:	2300      	movs	r3, #0
 800492c:	6363      	str	r3, [r4, #52]	@ 0x34
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	2300      	movs	r3, #0
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	81a3      	strh	r3, [r4, #12]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	b94b      	cbnz	r3, 800495e <__swsetup_r+0x7a>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004954:	d003      	beq.n	800495e <__swsetup_r+0x7a>
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 f84f 	bl	80049fc <__smakebuf_r>
 800495e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004962:	f013 0201 	ands.w	r2, r3, #1
 8004966:	d00a      	beq.n	800497e <__swsetup_r+0x9a>
 8004968:	2200      	movs	r2, #0
 800496a:	60a2      	str	r2, [r4, #8]
 800496c:	6962      	ldr	r2, [r4, #20]
 800496e:	4252      	negs	r2, r2
 8004970:	61a2      	str	r2, [r4, #24]
 8004972:	6922      	ldr	r2, [r4, #16]
 8004974:	b942      	cbnz	r2, 8004988 <__swsetup_r+0xa4>
 8004976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800497a:	d1c5      	bne.n	8004908 <__swsetup_r+0x24>
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	0799      	lsls	r1, r3, #30
 8004980:	bf58      	it	pl
 8004982:	6962      	ldrpl	r2, [r4, #20]
 8004984:	60a2      	str	r2, [r4, #8]
 8004986:	e7f4      	b.n	8004972 <__swsetup_r+0x8e>
 8004988:	2000      	movs	r0, #0
 800498a:	e7f7      	b.n	800497c <__swsetup_r+0x98>
 800498c:	20000020 	.word	0x20000020

08004990 <_sbrk_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d06      	ldr	r5, [pc, #24]	@ (80049ac <_sbrk_r+0x1c>)
 8004994:	2300      	movs	r3, #0
 8004996:	4604      	mov	r4, r0
 8004998:	4608      	mov	r0, r1
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	f7fc fa24 	bl	8000de8 <_sbrk>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_sbrk_r+0x1a>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_sbrk_r+0x1a>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20000310 	.word	0x20000310

080049b0 <__swhatbuf_r>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	460c      	mov	r4, r1
 80049b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b8:	2900      	cmp	r1, #0
 80049ba:	b096      	sub	sp, #88	@ 0x58
 80049bc:	4615      	mov	r5, r2
 80049be:	461e      	mov	r6, r3
 80049c0:	da0d      	bge.n	80049de <__swhatbuf_r+0x2e>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2340      	movne	r3, #64	@ 0x40
 80049d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80049d4:	2000      	movs	r0, #0
 80049d6:	6031      	str	r1, [r6, #0]
 80049d8:	602b      	str	r3, [r5, #0]
 80049da:	b016      	add	sp, #88	@ 0x58
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
 80049de:	466a      	mov	r2, sp
 80049e0:	f000 f848 	bl	8004a74 <_fstat_r>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	dbec      	blt.n	80049c2 <__swhatbuf_r+0x12>
 80049e8:	9901      	ldr	r1, [sp, #4]
 80049ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80049ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80049f2:	4259      	negs	r1, r3
 80049f4:	4159      	adcs	r1, r3
 80049f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049fa:	e7eb      	b.n	80049d4 <__swhatbuf_r+0x24>

080049fc <__smakebuf_r>:
 80049fc:	898b      	ldrh	r3, [r1, #12]
 80049fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a00:	079d      	lsls	r5, r3, #30
 8004a02:	4606      	mov	r6, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	d507      	bpl.n	8004a18 <__smakebuf_r+0x1c>
 8004a08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	6123      	str	r3, [r4, #16]
 8004a10:	2301      	movs	r3, #1
 8004a12:	6163      	str	r3, [r4, #20]
 8004a14:	b003      	add	sp, #12
 8004a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a18:	ab01      	add	r3, sp, #4
 8004a1a:	466a      	mov	r2, sp
 8004a1c:	f7ff ffc8 	bl	80049b0 <__swhatbuf_r>
 8004a20:	9f00      	ldr	r7, [sp, #0]
 8004a22:	4605      	mov	r5, r0
 8004a24:	4639      	mov	r1, r7
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7ff fb16 	bl	8004058 <_malloc_r>
 8004a2c:	b948      	cbnz	r0, 8004a42 <__smakebuf_r+0x46>
 8004a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a32:	059a      	lsls	r2, r3, #22
 8004a34:	d4ee      	bmi.n	8004a14 <__smakebuf_r+0x18>
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	e7e2      	b.n	8004a08 <__smakebuf_r+0xc>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	6020      	str	r0, [r4, #0]
 8004a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	9b01      	ldr	r3, [sp, #4]
 8004a4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004a52:	b15b      	cbz	r3, 8004a6c <__smakebuf_r+0x70>
 8004a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f000 f81d 	bl	8004a98 <_isatty_r>
 8004a5e:	b128      	cbz	r0, 8004a6c <__smakebuf_r+0x70>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	f023 0303 	bic.w	r3, r3, #3
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	431d      	orrs	r5, r3
 8004a70:	81a5      	strh	r5, [r4, #12]
 8004a72:	e7cf      	b.n	8004a14 <__smakebuf_r+0x18>

08004a74 <_fstat_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	@ (8004a94 <_fstat_r+0x20>)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	f7fe ff68 	bl	8003956 <_fstat>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d102      	bne.n	8004a90 <_fstat_r+0x1c>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b103      	cbz	r3, 8004a90 <_fstat_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	20000310 	.word	0x20000310

08004a98 <_isatty_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d06      	ldr	r5, [pc, #24]	@ (8004ab4 <_isatty_r+0x1c>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7ff f8ba 	bl	8003c1c <_isatty>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_isatty_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_isatty_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000310 	.word	0x20000310

08004ab8 <_init>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr

08004ac4 <_fini>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	bf00      	nop
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr
