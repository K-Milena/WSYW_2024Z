
training2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005714  08005714  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800571c  0800571c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005720  08005720  00006720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005724  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08005794  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005794  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f56  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176b  00000000  00000000  0000fff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00011768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076f  00000000  00000000  00012110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160fd  00000000  00000000  0001287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a898  00000000  00000000  0002897c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf73  00000000  00000000  00033214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c0  00000000  00000000  000bf1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c288c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005514 	.word	0x08005514

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005514 	.word	0x08005514

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	 initialise_monitor_handles();
 8000584:	f003 fa06 	bl	8003994 <initialise_monitor_handles>
	printf("test\n");
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <main+0x3c>)
 800058a:	f003 fbab 	bl	8003ce4 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fca5 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f817 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f97b 	bl	8000890 <MX_GPIO_Init>
  MX_TIM2_Init();
 800059a:	f000 f87d 	bl	8000698 <MX_TIM2_Init>
  MX_TIM4_Init();
 800059e:	f000 f8eb 	bl	8000778 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Base_Start_IT(&htim4);
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <main+0x40>)
 80005a4:	f001 fc8a 	bl	8001ebc <HAL_TIM_Base_Start_IT>
  	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <main+0x40>)
 80005ac:	f001 fd70 	bl	8002090 <HAL_TIM_OC_Start>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 80005b0:	2108      	movs	r1, #8
 80005b2:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <main+0x40>)
 80005b4:	f001 fe76 	bl	80022a4 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x38>
 80005bc:	0800552c 	.word	0x0800552c
 80005c0:	200000d4 	.word	0x200000d4

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fc78 	bl	8003ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2300      	movs	r3, #0
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000638:	23c0      	movs	r3, #192	@ 0xc0
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800063c:	2304      	movs	r3, #4
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f000 ff83 	bl	8001554 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 fab8 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2103      	movs	r1, #3
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f9e4 	bl	8001a44 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 faa1 	bl	8000bc8 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006cc:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ec:	4821      	ldr	r0, [pc, #132]	@ (8000774 <MX_TIM2_Init+0xdc>)
 80006ee:	f001 fb95 	bl	8001e1c <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80006f8:	f000 fa66 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	4619      	mov	r1, r3
 8000708:	481a      	ldr	r0, [pc, #104]	@ (8000774 <MX_TIM2_Init+0xdc>)
 800070a:	f002 f9cd 	bl	8002aa8 <HAL_TIM_ConfigClockSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000714:	f000 fa58 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000718:	4816      	ldr	r0, [pc, #88]	@ (8000774 <MX_TIM2_Init+0xdc>)
 800071a:	f001 fec1 	bl	80024a0 <HAL_TIM_IC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000724:	f000 fa50 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	480f      	ldr	r0, [pc, #60]	@ (8000774 <MX_TIM2_Init+0xdc>)
 8000738:	f002 fe92 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000742:	f000 fa41 	bl	8000bc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800074a:	2301      	movs	r3, #1
 800074c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000752:	230f      	movs	r3, #15
 8000754:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_TIM2_Init+0xdc>)
 800075e:	f002 f845 	bl	80027ec <HAL_TIM_IC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000768:	f000 fa2e 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000008c 	.word	0x2000008c

08000778 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	@ 0x38
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007aa:	4a38      	ldr	r2, [pc, #224]	@ (800088c <MX_TIM4_Init+0x114>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007b0:	f240 12df 	movw	r2, #479	@ 0x1df
 80007b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007bc:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007d0:	482d      	ldr	r0, [pc, #180]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007d2:	f001 fb23 	bl	8001e1c <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007dc:	f000 f9f4 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4826      	ldr	r0, [pc, #152]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007ee:	f002 f95b 	bl	8002aa8 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80007f8:	f000 f9e6 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80007fc:	4822      	ldr	r0, [pc, #136]	@ (8000888 <MX_TIM4_Init+0x110>)
 80007fe:	f001 fbee 	bl	8001fde <HAL_TIM_OC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000808:	f000 f9de 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800080c:	481e      	ldr	r0, [pc, #120]	@ (8000888 <MX_TIM4_Init+0x110>)
 800080e:	f001 fcef 	bl	80021f0 <HAL_TIM_PWM_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM4_Init+0xa4>
  {
    Error_Handler();
 8000818:	f000 f9d6 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4619      	mov	r1, r3
 800082a:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_TIM4_Init+0x110>)
 800082c:	f002 fe18 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000836:	f000 f9c7 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800083a:	2310      	movs	r3, #16
 800083c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800083e:	23fa      	movs	r3, #250	@ 0xfa
 8000840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	480d      	ldr	r0, [pc, #52]	@ (8000888 <MX_TIM4_Init+0x110>)
 8000852:	f001 ff6f 	bl	8002734 <HAL_TIM_OC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 800085c:	f000 f9b4 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	@ 0x60
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2208      	movs	r2, #8
 8000868:	4619      	mov	r1, r3
 800086a:	4807      	ldr	r0, [pc, #28]	@ (8000888 <MX_TIM4_Init+0x110>)
 800086c:	f002 f85a 	bl	8002924 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000876:	f000 f9a7 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <MX_TIM4_Init+0x110>)
 800087c:	f000 fa3e 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 8000880:	bf00      	nop
 8000882:	3738      	adds	r7, #56	@ 0x38
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000d4 	.word	0x200000d4
 800088c:	40000800 	.word	0x40000800

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b9b      	ldr	r3, [pc, #620]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a9a      	ldr	r2, [pc, #616]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b98      	ldr	r3, [pc, #608]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b94      	ldr	r3, [pc, #592]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a93      	ldr	r2, [pc, #588]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b91      	ldr	r3, [pc, #580]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b8d      	ldr	r3, [pc, #564]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a8c      	ldr	r2, [pc, #560]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b8a      	ldr	r3, [pc, #552]	@ (8000b18 <MX_GPIO_Init+0x288>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b86      	ldr	r3, [pc, #536]	@ (8000b18 <MX_GPIO_Init+0x288>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a85      	ldr	r2, [pc, #532]	@ (8000b18 <MX_GPIO_Init+0x288>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b83      	ldr	r3, [pc, #524]	@ (8000b18 <MX_GPIO_Init+0x288>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b18 <MX_GPIO_Init+0x288>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a7e      	ldr	r2, [pc, #504]	@ (8000b18 <MX_GPIO_Init+0x288>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b7c      	ldr	r3, [pc, #496]	@ (8000b18 <MX_GPIO_Init+0x288>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b78      	ldr	r3, [pc, #480]	@ (8000b18 <MX_GPIO_Init+0x288>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a77      	ldr	r2, [pc, #476]	@ (8000b18 <MX_GPIO_Init+0x288>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b75      	ldr	r3, [pc, #468]	@ (8000b18 <MX_GPIO_Init+0x288>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	4872      	ldr	r0, [pc, #456]	@ (8000b1c <MX_GPIO_Init+0x28c>)
 8000954:	f000 fdca 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4870      	ldr	r0, [pc, #448]	@ (8000b20 <MX_GPIO_Init+0x290>)
 800095e:	f000 fdc5 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f24a 0110 	movw	r1, #40976	@ 0xa010
 8000968:	486e      	ldr	r0, [pc, #440]	@ (8000b24 <MX_GPIO_Init+0x294>)
 800096a:	f000 fdbf 	bl	80014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096e:	2304      	movs	r3, #4
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4866      	ldr	r0, [pc, #408]	@ (8000b1c <MX_GPIO_Init+0x28c>)
 8000982:	f000 fc2f 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	485f      	ldr	r0, [pc, #380]	@ (8000b1c <MX_GPIO_Init+0x28c>)
 800099e:	f000 fc21 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80009a2:	2332      	movs	r3, #50	@ 0x32
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4859      	ldr	r0, [pc, #356]	@ (8000b1c <MX_GPIO_Init+0x28c>)
 80009b8:	f000 fc14 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4853      	ldr	r0, [pc, #332]	@ (8000b20 <MX_GPIO_Init+0x290>)
 80009d4:	f000 fc06 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d8:	2308      	movs	r3, #8
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e8:	2305      	movs	r3, #5
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	484b      	ldr	r0, [pc, #300]	@ (8000b20 <MX_GPIO_Init+0x290>)
 80009f4:	f000 fbf6 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009f8:	2310      	movs	r3, #16
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4845      	ldr	r0, [pc, #276]	@ (8000b28 <MX_GPIO_Init+0x298>)
 8000a14:	f000 fbe6 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a18:	23e0      	movs	r3, #224	@ 0xe0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	483d      	ldr	r0, [pc, #244]	@ (8000b28 <MX_GPIO_Init+0x298>)
 8000a34:	f000 fbd6 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4835      	ldr	r0, [pc, #212]	@ (8000b2c <MX_GPIO_Init+0x29c>)
 8000a56:	f000 fbc5 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD6_Pin|Audio_RST_Pin;
 8000a5a:	f24a 0310 	movw	r3, #40976	@ 0xa010
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	482c      	ldr	r0, [pc, #176]	@ (8000b24 <MX_GPIO_Init+0x294>)
 8000a74:	f000 fbb6 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a78:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4822      	ldr	r0, [pc, #136]	@ (8000b20 <MX_GPIO_Init+0x290>)
 8000a96:	f000 fba5 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481e      	ldr	r0, [pc, #120]	@ (8000b28 <MX_GPIO_Init+0x298>)
 8000ab0:	f000 fb98 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ab4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4815      	ldr	r0, [pc, #84]	@ (8000b28 <MX_GPIO_Init+0x298>)
 8000ad2:	f000 fb87 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480e      	ldr	r0, [pc, #56]	@ (8000b24 <MX_GPIO_Init+0x294>)
 8000aea:	f000 fb7b 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <MX_GPIO_Init+0x29c>)
 8000b0c:	f000 fb6a 	bl	80011e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	@ 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
		if(htim = &htim4)
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	607b      	str	r3, [r7, #4]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b42:	f000 fcec 	bl	800151e <HAL_GPIO_TogglePin>
	}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000d4 	.word	0x200000d4
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <HAL_TIM_PWM_PulseFinishedCallback>:
	uint32_t pulse_val;
	void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
	{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	    if(htim == &htim4) // Sprawdzenie, czy to właściwy timer
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d120      	bne.n	8000baa <HAL_TIM_PWM_PulseFinishedCallback+0x52>
	    {
	        // Wyłączenie przerwań dla timera 4
	        HAL_TIM_Base_Stop_IT(&htim4);
 8000b68:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000b6a:	f001 fa09 	bl	8001f80 <HAL_TIM_Base_Stop_IT>

	        printf("Wprowadź liczbę jasności diody LED od 0 do 1000: \n");
 8000b6e:	4812      	ldr	r0, [pc, #72]	@ (8000bb8 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000b70:	f003 f8b8 	bl	8003ce4 <puts>
	        scanf("%d", &pulse_val); // Pobranie wartości od użytkownika
 8000b74:	4911      	ldr	r1, [pc, #68]	@ (8000bbc <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000b76:	4812      	ldr	r0, [pc, #72]	@ (8000bc0 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000b78:	f003 f8bc 	bl	8003cf4 <iscanf>

	        // Upewnij się, że wartość mieści się w granicach
	        if (pulse_val > 1000)
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b84:	d903      	bls.n	8000b8e <HAL_TIM_PWM_PulseFinishedCallback+0x36>
	        {
	            pulse_val = 1000; // Maksymalna jasność
 8000b86:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000b88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b8c:	601a      	str	r2, [r3, #0]
	        {
	        	pulse_val=0;
	        }

	        // Ustawienie wartości PWM na kanale 3
	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pulse_val);
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	63da      	str	r2, [r3, #60]	@ 0x3c

	        printf("Ustawiona liczba to: %d\n", pulse_val); // Wyświetlenie informacji
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4809      	ldr	r0, [pc, #36]	@ (8000bc4 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000ba0:	f003 f838 	bl	8003c14 <iprintf>

	        // Ponowne włączenie przerwań dla timera 4 po wprowadzeniu danych
	        HAL_TIM_Base_Start_IT(&htim4);
 8000ba4:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000ba6:	f001 f989 	bl	8001ebc <HAL_TIM_Base_Start_IT>
	    }
	}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000d4 	.word	0x200000d4
 8000bb8:	08005534 	.word	0x08005534
 8000bbc:	2000011c 	.word	0x2000011c
 8000bc0:	0800556c 	.word	0x0800556c
 8000bc4:	08005570 	.word	0x08005570

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c12:	2007      	movs	r0, #7
 8000c14:	f000 faa4 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c44:	d134      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a28      	ldr	r2, [pc, #160]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4816      	ldr	r0, [pc, #88]	@ (8000cf4 <HAL_TIM_Base_MspInit+0xd0>)
 8000c9a:	f000 faa3 	bl	80011e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	201c      	movs	r0, #28
 8000ca4:	f000 fa67 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca8:	201c      	movs	r0, #28
 8000caa:	f000 fa80 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cae:	e01a      	b.n	8000ce6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_TIM_Base_MspInit+0xd4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d115      	bne.n	8000ce6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xcc>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	201e      	movs	r0, #30
 8000cdc:	f000 fa4b 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ce0:	201e      	movs	r0, #30
 8000ce2:	f000 fa64 	bl	80011ae <HAL_NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	@ 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40000800 	.word	0x40000800

08000cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11e      	bne.n	8000d5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000d3a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <HAL_TIM_MspPostInit+0x70>)
 8000d58:	f000 fa44 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40000800 	.word	0x40000800
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <NMI_Handler+0x4>

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <MemManage_Handler+0x4>

08000d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f8db 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <TIM2_IRQHandler+0x10>)
 8000dd6:	f001 fbbc 	bl	8002552 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000008c 	.word	0x2000008c

08000de4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <TIM4_IRQHandler+0x10>)
 8000dea:	f001 fbb2 	bl	8002552 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000d4 	.word	0x200000d4

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f003 f89c 	bl	8003f64 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20020000 	.word	0x20020000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	20000120 	.word	0x20000120
 8000e60:	20000320 	.word	0x20000320

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8c:	f7ff ffea 	bl	8000e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f003 f85b 	bl	8003f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fb61 	bl	8000580 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ecc:	08005724 	.word	0x08005724
  ldr r2, =_sbss
 8000ed0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed4:	20000320 	.word	0x20000320

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f92b 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe60 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f943 	bl	80011ca <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f90b 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000124 	.word	0x20000124

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000124 	.word	0x20000124

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	@ (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	@ (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e159      	b.n	80014b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8148 	bne.w	80014ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a2 	beq.w	80014ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b57      	ldr	r3, [pc, #348]	@ (80014cc <HAL_GPIO_Init+0x2e8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a56      	ldr	r2, [pc, #344]	@ (80014cc <HAL_GPIO_Init+0x2e8>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b54      	ldr	r3, [pc, #336]	@ (80014cc <HAL_GPIO_Init+0x2e8>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a52      	ldr	r2, [pc, #328]	@ (80014d0 <HAL_GPIO_Init+0x2ec>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a49      	ldr	r2, [pc, #292]	@ (80014d4 <HAL_GPIO_Init+0x2f0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x202>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a48      	ldr	r2, [pc, #288]	@ (80014d8 <HAL_GPIO_Init+0x2f4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1fe>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <HAL_GPIO_Init+0x2f8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1fa>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a46      	ldr	r2, [pc, #280]	@ (80014e0 <HAL_GPIO_Init+0x2fc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1f6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a45      	ldr	r2, [pc, #276]	@ (80014e4 <HAL_GPIO_Init+0x300>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1f2>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013d6:	2307      	movs	r3, #7
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x204>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4935      	ldr	r1, [pc, #212]	@ (80014d0 <HAL_GPIO_Init+0x2ec>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001406:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142a:	4a2f      	ldr	r2, [pc, #188]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001430:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001454:	4a24      	ldr	r2, [pc, #144]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800145a:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147e:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a8:	4a0f      	ldr	r2, [pc, #60]	@ (80014e8 <HAL_GPIO_Init+0x304>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f aea2 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40013c00 	.word	0x40013c00

080014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014fc:	787b      	ldrb	r3, [r7, #1]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001508:	e003      	b.n	8001512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4013      	ands	r3, r2
 8001536:	041a      	lsls	r2, r3, #16
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43d9      	mvns	r1, r3
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	400b      	ands	r3, r1
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e267      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d075      	beq.n	800165e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001572:	4b88      	ldr	r3, [pc, #544]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b04      	cmp	r3, #4
 800157c:	d00c      	beq.n	8001598 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157e:	4b85      	ldr	r3, [pc, #532]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001586:	2b08      	cmp	r3, #8
 8001588:	d112      	bne.n	80015b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158a:	4b82      	ldr	r3, [pc, #520]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001596:	d10b      	bne.n	80015b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	4b7e      	ldr	r3, [pc, #504]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d05b      	beq.n	800165c <HAL_RCC_OscConfig+0x108>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d157      	bne.n	800165c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e242      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b8:	d106      	bne.n	80015c8 <HAL_RCC_OscConfig+0x74>
 80015ba:	4b76      	ldr	r3, [pc, #472]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a75      	ldr	r2, [pc, #468]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xb0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x98>
 80015d2:	4b70      	ldr	r3, [pc, #448]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b6d      	ldr	r3, [pc, #436]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xb0>
 80015ec:	4b69      	ldr	r3, [pc, #420]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a68      	ldr	r2, [pc, #416]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b66      	ldr	r3, [pc, #408]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a65      	ldr	r2, [pc, #404]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fccc 	bl	8000fa8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fcc8 	bl	8000fa8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e207      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b5b      	ldr	r3, [pc, #364]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xc0>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fcb8 	bl	8000fa8 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fcb4 	bl	8000fa8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1f3      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0xe8>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d063      	beq.n	8001732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800166a:	4b4a      	ldr	r3, [pc, #296]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b47      	ldr	r3, [pc, #284]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001682:	4b44      	ldr	r3, [pc, #272]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b41      	ldr	r3, [pc, #260]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x152>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1c7      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4937      	ldr	r1, [pc, #220]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e03a      	b.n	8001732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_RCC_OscConfig+0x244>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff fc6d 	bl	8000fa8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fc69 	bl	8000fa8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1a8      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4925      	ldr	r1, [pc, #148]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_RCC_OscConfig+0x244>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fc4c 	bl	8000fa8 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fc48 	bl	8000fa8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e187      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d036      	beq.n	80017ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d016      	beq.n	8001774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	@ (800179c <HAL_RCC_OscConfig+0x248>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff fc2c 	bl	8000fa8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff fc28 	bl	8000fa8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e167      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <HAL_RCC_OscConfig+0x240>)
 8001768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x200>
 8001772:	e01b      	b.n	80017ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001774:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_RCC_OscConfig+0x248>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fc15 	bl	8000fa8 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	e00e      	b.n	80017a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001782:	f7ff fc11 	bl	8000fa8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d907      	bls.n	80017a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e150      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
 8001794:	40023800 	.word	0x40023800
 8001798:	42470000 	.word	0x42470000
 800179c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b88      	ldr	r3, [pc, #544]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80017a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ea      	bne.n	8001782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8097 	beq.w	80018e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b81      	ldr	r3, [pc, #516]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b7d      	ldr	r3, [pc, #500]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	4a7c      	ldr	r2, [pc, #496]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017da:	4b7a      	ldr	r3, [pc, #488]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b77      	ldr	r3, [pc, #476]	@ (80019c8 <HAL_RCC_OscConfig+0x474>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d118      	bne.n	8001828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f6:	4b74      	ldr	r3, [pc, #464]	@ (80019c8 <HAL_RCC_OscConfig+0x474>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a73      	ldr	r2, [pc, #460]	@ (80019c8 <HAL_RCC_OscConfig+0x474>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001802:	f7ff fbd1 	bl	8000fa8 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180a:	f7ff fbcd 	bl	8000fa8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e10c      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b6a      	ldr	r3, [pc, #424]	@ (80019c8 <HAL_RCC_OscConfig+0x474>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x2ea>
 8001830:	4b64      	ldr	r3, [pc, #400]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001834:	4a63      	ldr	r2, [pc, #396]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6713      	str	r3, [r2, #112]	@ 0x70
 800183c:	e01c      	b.n	8001878 <HAL_RCC_OscConfig+0x324>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x30c>
 8001846:	4b5f      	ldr	r3, [pc, #380]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184a:	4a5e      	ldr	r2, [pc, #376]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6713      	str	r3, [r2, #112]	@ 0x70
 8001852:	4b5c      	ldr	r3, [pc, #368]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001856:	4a5b      	ldr	r2, [pc, #364]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6713      	str	r3, [r2, #112]	@ 0x70
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0x324>
 8001860:	4b58      	ldr	r3, [pc, #352]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001864:	4a57      	ldr	r2, [pc, #348]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	@ 0x70
 800186c:	4b55      	ldr	r3, [pc, #340]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001870:	4a54      	ldr	r2, [pc, #336]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001872:	f023 0304 	bic.w	r3, r3, #4
 8001876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d015      	beq.n	80018ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7ff fb92 	bl	8000fa8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff fb8e 	bl	8000fa8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e0cb      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189e:	4b49      	ldr	r3, [pc, #292]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0ee      	beq.n	8001888 <HAL_RCC_OscConfig+0x334>
 80018aa:	e014      	b.n	80018d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb7c 	bl	8000fa8 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fb78 	bl	8000fa8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e0b5      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ca:	4b3e      	ldr	r3, [pc, #248]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ee      	bne.n	80018b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b39      	ldr	r3, [pc, #228]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e0:	4a38      	ldr	r2, [pc, #224]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80018e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a1 	beq.w	8001a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018f2:	4b34      	ldr	r3, [pc, #208]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d05c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d141      	bne.n	800198a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_RCC_OscConfig+0x478>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fb4c 	bl	8000fa8 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fb48 	bl	8000fa8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e087      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	4b27      	ldr	r3, [pc, #156]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001954:	061b      	lsls	r3, r3, #24
 8001956:	491b      	ldr	r1, [pc, #108]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <HAL_RCC_OscConfig+0x478>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fb21 	bl	8000fa8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fb1d 	bl	8000fa8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e05c      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x416>
 8001988:	e054      	b.n	8001a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <HAL_RCC_OscConfig+0x478>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fb0a 	bl	8000fa8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff fb06 	bl	8000fa8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e045      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_RCC_OscConfig+0x470>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x444>
 80019b6:	e03d      	b.n	8001a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e038      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000
 80019cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_RCC_OscConfig+0x4ec>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d028      	beq.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d121      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d11a      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d111      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d107      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0cc      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b68      	ldr	r3, [pc, #416]	@ (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d90c      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b65      	ldr	r3, [pc, #404]	@ (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b63      	ldr	r3, [pc, #396]	@ (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b8      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d020      	beq.n	8001ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a98:	4b59      	ldr	r3, [pc, #356]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a58      	ldr	r2, [pc, #352]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b50      	ldr	r3, [pc, #320]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	494d      	ldr	r1, [pc, #308]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d044      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d119      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e07f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b3f      	ldr	r3, [pc, #252]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e067      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4934      	ldr	r1, [pc, #208]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff fa38 	bl	8000fa8 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff fa34 	bl	8000fa8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e04f      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d20c      	bcs.n	8001b8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e032      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4916      	ldr	r1, [pc, #88]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	490e      	ldr	r1, [pc, #56]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bca:	f000 f821 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	490a      	ldr	r1, [pc, #40]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	5ccb      	ldrb	r3, [r1, r3]
 8001bde:	fa22 f303 	lsr.w	r3, r2, r3
 8001be2:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f998 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08005598 	.word	0x08005598
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b094      	sub	sp, #80	@ 0x50
 8001c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c28:	4b79      	ldr	r3, [pc, #484]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d00d      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x40>
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	f200 80e1 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x34>
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c42:	e0db      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b73      	ldr	r3, [pc, #460]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c48:	e0db      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c4a:	4b73      	ldr	r3, [pc, #460]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c4e:	e0d8      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c50:	4b6f      	ldr	r3, [pc, #444]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c66:	4b6a      	ldr	r3, [pc, #424]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	099b      	lsrs	r3, r3, #6
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	f04f 0000 	mov.w	r0, #0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	0159      	lsls	r1, r3, #5
 8001c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c94:	0150      	lsls	r0, r2, #5
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	1a51      	subs	r1, r2, r1
 8001c9e:	6139      	str	r1, [r7, #16]
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	018b      	lsls	r3, r1, #6
 8001cb8:	4651      	mov	r1, sl
 8001cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cbe:	4651      	mov	r1, sl
 8001cc0:	018a      	lsls	r2, r1, #6
 8001cc2:	4651      	mov	r1, sl
 8001cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cc8:	4659      	mov	r1, fp
 8001cca:	eb63 0901 	sbc.w	r9, r3, r1
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ce2:	4690      	mov	r8, r2
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	eb18 0303 	adds.w	r3, r8, r3
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	462b      	mov	r3, r5
 8001cf0:	eb49 0303 	adc.w	r3, r9, r3
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d02:	4629      	mov	r1, r5
 8001d04:	024b      	lsls	r3, r1, #9
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	024a      	lsls	r2, r1, #9
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d16:	2200      	movs	r2, #0
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d20:	f7fe fab6 	bl	8000290 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d2c:	e058      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2e:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	2200      	movs	r2, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	4611      	mov	r1, r2
 8001d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d48:	4642      	mov	r2, r8
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	f04f 0000 	mov.w	r0, #0
 8001d50:	f04f 0100 	mov.w	r1, #0
 8001d54:	0159      	lsls	r1, r3, #5
 8001d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d5a:	0150      	lsls	r0, r2, #5
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4641      	mov	r1, r8
 8001d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d66:	4649      	mov	r1, r9
 8001d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d80:	ebb2 040a 	subs.w	r4, r2, sl
 8001d84:	eb63 050b 	sbc.w	r5, r3, fp
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	00eb      	lsls	r3, r5, #3
 8001d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d96:	00e2      	lsls	r2, r4, #3
 8001d98:	4614      	mov	r4, r2
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	4643      	mov	r3, r8
 8001d9e:	18e3      	adds	r3, r4, r3
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	464b      	mov	r3, r9
 8001da4:	eb45 0303 	adc.w	r3, r5, r3
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db6:	4629      	mov	r1, r5
 8001db8:	028b      	lsls	r3, r1, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	028a      	lsls	r2, r1, #10
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	61fa      	str	r2, [r7, #28]
 8001dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd4:	f7fe fa5c 	bl	8000290 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001df0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3750      	adds	r7, #80	@ 0x50
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe feee 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 ff0a 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d001      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e044      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001efe:	d013      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x6c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a16      	ldr	r2, [pc, #88]	@ (8001f7c <HAL_TIM_Base_Start_IT+0xc0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d010      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40014000 	.word	0x40014000

08001f80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10f      	bne.n	8001fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6a1a      	ldr	r2, [r3, #32]
 8001fae:	f240 4344 	movw	r3, #1092	@ 0x444
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d107      	bne.n	8001fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e041      	b.n	8002074 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f839 	bl	800207c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f000 fe29 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_TIM_OC_Start+0x24>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e022      	b.n	80020fa <HAL_TIM_OC_Start+0x6a>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d109      	bne.n	80020ce <HAL_TIM_OC_Start+0x3e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	e015      	b.n	80020fa <HAL_TIM_OC_Start+0x6a>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d109      	bne.n	80020e8 <HAL_TIM_OC_Start+0x58>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e008      	b.n	80020fa <HAL_TIM_OC_Start+0x6a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e068      	b.n	80021d4 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d104      	bne.n	8002112 <HAL_TIM_OC_Start+0x82>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002110:	e013      	b.n	800213a <HAL_TIM_OC_Start+0xaa>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d104      	bne.n	8002122 <HAL_TIM_OC_Start+0x92>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002120:	e00b      	b.n	800213a <HAL_TIM_OC_Start+0xaa>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d104      	bne.n	8002132 <HAL_TIM_OC_Start+0xa2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002130:	e003      	b.n	800213a <HAL_TIM_OC_Start+0xaa>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2201      	movs	r2, #1
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f001 f966 	bl	8003414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a23      	ldr	r2, [pc, #140]	@ (80021dc <HAL_TIM_OC_Start+0x14c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d107      	bne.n	8002162 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_TIM_OC_Start+0x14c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_TIM_OC_Start+0x10e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002174:	d013      	beq.n	800219e <HAL_TIM_OC_Start+0x10e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <HAL_TIM_OC_Start+0x150>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_TIM_OC_Start+0x10e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_TIM_OC_Start+0x154>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_TIM_OC_Start+0x10e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <HAL_TIM_OC_Start+0x158>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_TIM_OC_Start+0x10e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a14      	ldr	r2, [pc, #80]	@ (80021ec <HAL_TIM_OC_Start+0x15c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d111      	bne.n	80021c2 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b06      	cmp	r3, #6
 80021ae:	d010      	beq.n	80021d2 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	e007      	b.n	80021d2 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	40014000 	.word	0x40014000

080021f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e041      	b.n	8002286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f839 	bl	800228e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f000 fd20 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_TIM_PWM_Start_IT+0x28>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e022      	b.n	8002312 <HAL_TIM_PWM_Start_IT+0x6e>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d109      	bne.n	80022e6 <HAL_TIM_PWM_Start_IT+0x42>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	e015      	b.n	8002312 <HAL_TIM_PWM_Start_IT+0x6e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d109      	bne.n	8002300 <HAL_TIM_PWM_Start_IT+0x5c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e008      	b.n	8002312 <HAL_TIM_PWM_Start_IT+0x6e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0b3      	b.n	8002482 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d104      	bne.n	800232a <HAL_TIM_PWM_Start_IT+0x86>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2202      	movs	r2, #2
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002328:	e013      	b.n	8002352 <HAL_TIM_PWM_Start_IT+0xae>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d104      	bne.n	800233a <HAL_TIM_PWM_Start_IT+0x96>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002338:	e00b      	b.n	8002352 <HAL_TIM_PWM_Start_IT+0xae>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d104      	bne.n	800234a <HAL_TIM_PWM_Start_IT+0xa6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002348:	e003      	b.n	8002352 <HAL_TIM_PWM_Start_IT+0xae>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	d841      	bhi.n	80023dc <HAL_TIM_PWM_Start_IT+0x138>
 8002358:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <HAL_TIM_PWM_Start_IT+0xbc>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002395 	.word	0x08002395
 8002364:	080023dd 	.word	0x080023dd
 8002368:	080023dd 	.word	0x080023dd
 800236c:	080023dd 	.word	0x080023dd
 8002370:	080023a7 	.word	0x080023a7
 8002374:	080023dd 	.word	0x080023dd
 8002378:	080023dd 	.word	0x080023dd
 800237c:	080023dd 	.word	0x080023dd
 8002380:	080023b9 	.word	0x080023b9
 8002384:	080023dd 	.word	0x080023dd
 8002388:	080023dd 	.word	0x080023dd
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023cb 	.word	0x080023cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0202 	orr.w	r2, r2, #2
 80023a2:	60da      	str	r2, [r3, #12]
      break;
 80023a4:	e01d      	b.n	80023e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0204 	orr.w	r2, r2, #4
 80023b4:	60da      	str	r2, [r3, #12]
      break;
 80023b6:	e014      	b.n	80023e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0208 	orr.w	r2, r2, #8
 80023c6:	60da      	str	r2, [r3, #12]
      break;
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0210 	orr.w	r2, r2, #16
 80023d8:	60da      	str	r2, [r3, #12]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      break;
 80023e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d14b      	bne.n	8002480 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 f80f 	bl	8003414 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a24      	ldr	r2, [pc, #144]	@ (800248c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1d      	ldr	r2, [pc, #116]	@ (800248c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d018      	beq.n	800244c <HAL_TIM_PWM_Start_IT+0x1a8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002422:	d013      	beq.n	800244c <HAL_TIM_PWM_Start_IT+0x1a8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	@ (8002490 <HAL_TIM_PWM_Start_IT+0x1ec>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00e      	beq.n	800244c <HAL_TIM_PWM_Start_IT+0x1a8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_TIM_PWM_Start_IT+0x1a8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a16      	ldr	r2, [pc, #88]	@ (8002498 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_TIM_PWM_Start_IT+0x1a8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a15      	ldr	r2, [pc, #84]	@ (800249c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d111      	bne.n	8002470 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b06      	cmp	r3, #6
 800245c:	d010      	beq.n	8002480 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	e007      	b.n	8002480 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40010000 	.word	0x40010000
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800
 8002498:	40000c00 	.word	0x40000c00
 800249c:	40014000 	.word	0x40014000

080024a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e041      	b.n	8002536 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f839 	bl	800253e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3304      	adds	r3, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f000 fbc8 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01b      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0202 	mvn.w	r2, #2
 8002586:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fb54 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 80025a2:	e005      	b.n	80025b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fb46 	bl	8002c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fad4 	bl	8000b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01b      	beq.n	8002602 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0204 	mvn.w	r2, #4
 80025d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fb2e 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 80025ee:	e005      	b.n	80025fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb20 	bl	8002c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe faae 	bl	8000b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01b      	beq.n	800264e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f06f 0208 	mvn.w	r2, #8
 800261e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fb08 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 800263a:	e005      	b.n	8002648 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fafa 	bl	8002c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fa88 	bl	8000b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01b      	beq.n	800269a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 0210 	mvn.w	r2, #16
 800266a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2208      	movs	r2, #8
 8002670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fae2 	bl	8002c4a <HAL_TIM_IC_CaptureCallback>
 8002686:	e005      	b.n	8002694 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fad4 	bl	8002c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fa62 	bl	8000b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f06f 0201 	mvn.w	r2, #1
 80026b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7fe fa39 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00c      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 ff37 	bl	8003550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 faac 	bl	8002c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f06f 0220 	mvn.w	r2, #32
 8002722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 ff09 	bl	800353c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_TIM_OC_ConfigChannel+0x1e>
 800274e:	2302      	movs	r3, #2
 8002750:	e048      	b.n	80027e4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d839      	bhi.n	80027d4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002760:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	0800279d 	.word	0x0800279d
 800276c:	080027d5 	.word	0x080027d5
 8002770:	080027d5 	.word	0x080027d5
 8002774:	080027d5 	.word	0x080027d5
 8002778:	080027ab 	.word	0x080027ab
 800277c:	080027d5 	.word	0x080027d5
 8002780:	080027d5 	.word	0x080027d5
 8002784:	080027d5 	.word	0x080027d5
 8002788:	080027b9 	.word	0x080027b9
 800278c:	080027d5 	.word	0x080027d5
 8002790:	080027d5 	.word	0x080027d5
 8002794:	080027d5 	.word	0x080027d5
 8002798:	080027c7 	.word	0x080027c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 faf2 	bl	8002d8c <TIM_OC1_SetConfig>
      break;
 80027a8:	e017      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fb51 	bl	8002e58 <TIM_OC2_SetConfig>
      break;
 80027b6:	e010      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fbb6 	bl	8002f30 <TIM_OC3_SetConfig>
      break;
 80027c4:	e009      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fc19 	bl	8003004 <TIM_OC4_SetConfig>
      break;
 80027d2:	e002      	b.n	80027da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
      break;
 80027d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002806:	2302      	movs	r3, #2
 8002808:	e088      	b.n	800291c <HAL_TIM_IC_ConfigChannel+0x130>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002828:	f000 fc3c 	bl	80030a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 020c 	bic.w	r2, r2, #12
 800283a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6999      	ldr	r1, [r3, #24]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	619a      	str	r2, [r3, #24]
 800284e:	e060      	b.n	8002912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d11c      	bne.n	8002890 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002866:	f000 fcb4 	bl	80031d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002878:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6999      	ldr	r1, [r3, #24]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	021a      	lsls	r2, r3, #8
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	619a      	str	r2, [r3, #24]
 800288e:	e040      	b.n	8002912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d11b      	bne.n	80028ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80028a6:	f000 fd01 	bl	80032ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 020c 	bic.w	r2, r2, #12
 80028b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	61da      	str	r2, [r3, #28]
 80028cc:	e021      	b.n	8002912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d11c      	bne.n	800290e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80028e4:	f000 fd1e 	bl	8003324 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69d9      	ldr	r1, [r3, #28]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	021a      	lsls	r2, r3, #8
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	61da      	str	r2, [r3, #28]
 800290c:	e001      	b.n	8002912 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800291a:	7dfb      	ldrb	r3, [r7, #23]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293e:	2302      	movs	r3, #2
 8002940:	e0ae      	b.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	f200 809f 	bhi.w	8002a90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002952:	a201      	add	r2, pc, #4	@ (adr r2, 8002958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	0800298d 	.word	0x0800298d
 800295c:	08002a91 	.word	0x08002a91
 8002960:	08002a91 	.word	0x08002a91
 8002964:	08002a91 	.word	0x08002a91
 8002968:	080029cd 	.word	0x080029cd
 800296c:	08002a91 	.word	0x08002a91
 8002970:	08002a91 	.word	0x08002a91
 8002974:	08002a91 	.word	0x08002a91
 8002978:	08002a0f 	.word	0x08002a0f
 800297c:	08002a91 	.word	0x08002a91
 8002980:	08002a91 	.word	0x08002a91
 8002984:	08002a91 	.word	0x08002a91
 8002988:	08002a4f 	.word	0x08002a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f9fa 	bl	8002d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6999      	ldr	r1, [r3, #24]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	619a      	str	r2, [r3, #24]
      break;
 80029ca:	e064      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa40 	bl	8002e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	619a      	str	r2, [r3, #24]
      break;
 8002a0c:	e043      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa8b 	bl	8002f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0208 	orr.w	r2, r2, #8
 8002a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69d9      	ldr	r1, [r3, #28]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
      break;
 8002a4c:	e023      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fad5 	bl	8003004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	021a      	lsls	r2, r3, #8
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	61da      	str	r2, [r3, #28]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
      break;
 8002a94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e0b4      	b.n	8002c2e <HAL_TIM_ConfigClockSource+0x186>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002afc:	d03e      	beq.n	8002b7c <HAL_TIM_ConfigClockSource+0xd4>
 8002afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b02:	f200 8087 	bhi.w	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b0a:	f000 8086 	beq.w	8002c1a <HAL_TIM_ConfigClockSource+0x172>
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b12:	d87f      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b70      	cmp	r3, #112	@ 0x70
 8002b16:	d01a      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0xa6>
 8002b18:	2b70      	cmp	r3, #112	@ 0x70
 8002b1a:	d87b      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b60      	cmp	r3, #96	@ 0x60
 8002b1e:	d050      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b20:	2b60      	cmp	r3, #96	@ 0x60
 8002b22:	d877      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b24:	2b50      	cmp	r3, #80	@ 0x50
 8002b26:	d03c      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b28:	2b50      	cmp	r3, #80	@ 0x50
 8002b2a:	d873      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b40      	cmp	r3, #64	@ 0x40
 8002b2e:	d058      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0x13a>
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d86f      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b30      	cmp	r3, #48	@ 0x30
 8002b36:	d064      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b38:	2b30      	cmp	r3, #48	@ 0x30
 8002b3a:	d86b      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d060      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d867      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05c      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d05a      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x15a>
 8002b4c:	e062      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	f000 fc39 	bl	80033d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	609a      	str	r2, [r3, #8]
      break;
 8002b7a:	e04f      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b8c:	f000 fc22 	bl	80033d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b9e:	609a      	str	r2, [r3, #8]
      break;
 8002ba0:	e03c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f000 fae0 	bl	8003174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2150      	movs	r1, #80	@ 0x50
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fbef 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002bc0:	e02c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f000 fb3c 	bl	800324c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2160      	movs	r1, #96	@ 0x60
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fbdf 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002be0:	e01c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 fac0 	bl	8003174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2140      	movs	r1, #64	@ 0x40
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fbcf 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002c00:	e00c      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f000 fbc6 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002c12:	e003      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      break;
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3a      	ldr	r2, [pc, #232]	@ (8002d70 <TIM_Base_SetConfig+0xfc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00f      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c92:	d00b      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a37      	ldr	r2, [pc, #220]	@ (8002d74 <TIM_Base_SetConfig+0x100>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a36      	ldr	r2, [pc, #216]	@ (8002d78 <TIM_Base_SetConfig+0x104>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d003      	beq.n	8002cac <TIM_Base_SetConfig+0x38>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a35      	ldr	r2, [pc, #212]	@ (8002d7c <TIM_Base_SetConfig+0x108>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d70 <TIM_Base_SetConfig+0xfc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01b      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ccc:	d017      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a28      	ldr	r2, [pc, #160]	@ (8002d74 <TIM_Base_SetConfig+0x100>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a27      	ldr	r2, [pc, #156]	@ (8002d78 <TIM_Base_SetConfig+0x104>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	@ (8002d7c <TIM_Base_SetConfig+0x108>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a25      	ldr	r2, [pc, #148]	@ (8002d80 <TIM_Base_SetConfig+0x10c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a24      	ldr	r2, [pc, #144]	@ (8002d84 <TIM_Base_SetConfig+0x110>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x8a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <TIM_Base_SetConfig+0x114>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a0e      	ldr	r2, [pc, #56]	@ (8002d70 <TIM_Base_SetConfig+0xfc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	611a      	str	r2, [r3, #16]
  }
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40010000 	.word	0x40010000
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40000800 	.word	0x40000800
 8002d7c:	40000c00 	.word	0x40000c00
 8002d80:	40014000 	.word	0x40014000
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800

08002d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f023 0201 	bic.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f023 0302 	bic.w	r3, r3, #2
 8002dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <TIM_OC1_SetConfig+0xc8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10c      	bne.n	8002e02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0308 	bic.w	r3, r3, #8
 8002dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <TIM_OC1_SetConfig+0xc8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d111      	bne.n	8002e2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40010000 	.word	0x40010000

08002e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0210 	bic.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f023 0320 	bic.w	r3, r3, #32
 8002ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f2c <TIM_OC2_SetConfig+0xd4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10d      	bne.n	8002ed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	@ (8002f2c <TIM_OC2_SetConfig+0xd4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d113      	bne.n	8002f04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000

08002f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <TIM_OC3_SetConfig+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10d      	bne.n	8002faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <TIM_OC3_SetConfig+0xd0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d113      	bne.n	8002fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	621a      	str	r2, [r3, #32]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40010000 	.word	0x40010000

08003004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800303a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800304e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <TIM_OC4_SetConfig+0x9c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d109      	bne.n	8003078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800306a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	621a      	str	r2, [r3, #32]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000

080030a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 0201 	bic.w	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a24      	ldr	r2, [pc, #144]	@ (8003160 <TIM_TI1_SetConfig+0xbc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <TIM_TI1_SetConfig+0x56>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d8:	d00f      	beq.n	80030fa <TIM_TI1_SetConfig+0x56>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a21      	ldr	r2, [pc, #132]	@ (8003164 <TIM_TI1_SetConfig+0xc0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00b      	beq.n	80030fa <TIM_TI1_SetConfig+0x56>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4a20      	ldr	r2, [pc, #128]	@ (8003168 <TIM_TI1_SetConfig+0xc4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_TI1_SetConfig+0x56>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a1f      	ldr	r2, [pc, #124]	@ (800316c <TIM_TI1_SetConfig+0xc8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_TI1_SetConfig+0x56>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <TIM_TI1_SetConfig+0xcc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <TIM_TI1_SetConfig+0x5a>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <TIM_TI1_SetConfig+0x5c>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e003      	b.n	800311e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	b2db      	uxtb	r3, r3
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f023 030a 	bic.w	r3, r3, #10
 8003138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 030a 	and.w	r3, r3, #10
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40014000 	.word	0x40014000

08003174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0201 	bic.w	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800319e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 030a 	bic.w	r3, r3, #10
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f023 0210 	bic.w	r2, r3, #16
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	b29b      	uxth	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003224:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	621a      	str	r2, [r3, #32]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	031b      	lsls	r3, r3, #12
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003288:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f023 0303 	bic.w	r3, r3, #3
 80032d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003350:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	031b      	lsls	r3, r3, #12
 8003368:	b29b      	uxth	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003376:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	031b      	lsls	r3, r3, #12
 800337c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f043 0307 	orr.w	r3, r3, #7
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	021a      	lsls	r2, r3, #8
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	609a      	str	r2, [r3, #8]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	2201      	movs	r2, #1
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e050      	b.n	800351a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c4:	d013      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a18      	ldr	r2, [pc, #96]	@ (800352c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a16      	ldr	r2, [pc, #88]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a15      	ldr	r2, [pc, #84]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a13      	ldr	r2, [pc, #76]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d10c      	bne.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40014000 	.word	0x40014000

0800353c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <findslot>:
 8003564:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <findslot+0x2c>)
 8003566:	b510      	push	{r4, lr}
 8003568:	4604      	mov	r4, r0
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	b118      	cbz	r0, 8003576 <findslot+0x12>
 800356e:	6a03      	ldr	r3, [r0, #32]
 8003570:	b90b      	cbnz	r3, 8003576 <findslot+0x12>
 8003572:	f000 fb19 	bl	8003ba8 <__sinit>
 8003576:	2c13      	cmp	r4, #19
 8003578:	d807      	bhi.n	800358a <findslot+0x26>
 800357a:	4806      	ldr	r0, [pc, #24]	@ (8003594 <findslot+0x30>)
 800357c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003580:	3201      	adds	r2, #1
 8003582:	d002      	beq.n	800358a <findslot+0x26>
 8003584:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003588:	bd10      	pop	{r4, pc}
 800358a:	2000      	movs	r0, #0
 800358c:	e7fc      	b.n	8003588 <findslot+0x24>
 800358e:	bf00      	nop
 8003590:	20000020 	.word	0x20000020
 8003594:	20000134 	.word	0x20000134

08003598 <error>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	f000 fce2 	bl	8003f64 <__errno>
 80035a0:	2613      	movs	r6, #19
 80035a2:	4605      	mov	r5, r0
 80035a4:	2700      	movs	r7, #0
 80035a6:	4630      	mov	r0, r6
 80035a8:	4639      	mov	r1, r7
 80035aa:	beab      	bkpt	0x00ab
 80035ac:	4606      	mov	r6, r0
 80035ae:	602e      	str	r6, [r5, #0]
 80035b0:	4620      	mov	r0, r4
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035b4 <checkerror>:
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d101      	bne.n	80035bc <checkerror+0x8>
 80035b8:	f7ff bfee 	b.w	8003598 <error>
 80035bc:	4770      	bx	lr

080035be <_swiread>:
 80035be:	b530      	push	{r4, r5, lr}
 80035c0:	b085      	sub	sp, #20
 80035c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80035c6:	9203      	str	r2, [sp, #12]
 80035c8:	2406      	movs	r4, #6
 80035ca:	ad01      	add	r5, sp, #4
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	beab      	bkpt	0x00ab
 80035d2:	4604      	mov	r4, r0
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff ffed 	bl	80035b4 <checkerror>
 80035da:	b005      	add	sp, #20
 80035dc:	bd30      	pop	{r4, r5, pc}

080035de <_read>:
 80035de:	b570      	push	{r4, r5, r6, lr}
 80035e0:	460e      	mov	r6, r1
 80035e2:	4614      	mov	r4, r2
 80035e4:	f7ff ffbe 	bl	8003564 <findslot>
 80035e8:	4605      	mov	r5, r0
 80035ea:	b930      	cbnz	r0, 80035fa <_read+0x1c>
 80035ec:	f000 fcba 	bl	8003f64 <__errno>
 80035f0:	2309      	movs	r3, #9
 80035f2:	6003      	str	r3, [r0, #0]
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	6800      	ldr	r0, [r0, #0]
 80035fc:	4622      	mov	r2, r4
 80035fe:	4631      	mov	r1, r6
 8003600:	f7ff ffdd 	bl	80035be <_swiread>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d0f5      	beq.n	80035f4 <_read+0x16>
 8003608:	686b      	ldr	r3, [r5, #4]
 800360a:	1a20      	subs	r0, r4, r0
 800360c:	4403      	add	r3, r0
 800360e:	606b      	str	r3, [r5, #4]
 8003610:	e7f2      	b.n	80035f8 <_read+0x1a>

08003612 <_swilseek>:
 8003612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003614:	460c      	mov	r4, r1
 8003616:	4616      	mov	r6, r2
 8003618:	f7ff ffa4 	bl	8003564 <findslot>
 800361c:	4605      	mov	r5, r0
 800361e:	b940      	cbnz	r0, 8003632 <_swilseek+0x20>
 8003620:	f000 fca0 	bl	8003f64 <__errno>
 8003624:	2309      	movs	r3, #9
 8003626:	6003      	str	r3, [r0, #0]
 8003628:	f04f 34ff 	mov.w	r4, #4294967295
 800362c:	4620      	mov	r0, r4
 800362e:	b003      	add	sp, #12
 8003630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003632:	2e02      	cmp	r6, #2
 8003634:	d903      	bls.n	800363e <_swilseek+0x2c>
 8003636:	f000 fc95 	bl	8003f64 <__errno>
 800363a:	2316      	movs	r3, #22
 800363c:	e7f3      	b.n	8003626 <_swilseek+0x14>
 800363e:	2e01      	cmp	r6, #1
 8003640:	d112      	bne.n	8003668 <_swilseek+0x56>
 8003642:	6843      	ldr	r3, [r0, #4]
 8003644:	18e4      	adds	r4, r4, r3
 8003646:	d4f6      	bmi.n	8003636 <_swilseek+0x24>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	260a      	movs	r6, #10
 800364c:	e9cd 3400 	strd	r3, r4, [sp]
 8003650:	466f      	mov	r7, sp
 8003652:	4630      	mov	r0, r6
 8003654:	4639      	mov	r1, r7
 8003656:	beab      	bkpt	0x00ab
 8003658:	4606      	mov	r6, r0
 800365a:	4630      	mov	r0, r6
 800365c:	f7ff ffaa 	bl	80035b4 <checkerror>
 8003660:	2800      	cmp	r0, #0
 8003662:	dbe1      	blt.n	8003628 <_swilseek+0x16>
 8003664:	606c      	str	r4, [r5, #4]
 8003666:	e7e1      	b.n	800362c <_swilseek+0x1a>
 8003668:	2e02      	cmp	r6, #2
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	d1ec      	bne.n	8003648 <_swilseek+0x36>
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	260c      	movs	r6, #12
 8003672:	466f      	mov	r7, sp
 8003674:	4630      	mov	r0, r6
 8003676:	4639      	mov	r1, r7
 8003678:	beab      	bkpt	0x00ab
 800367a:	4606      	mov	r6, r0
 800367c:	4630      	mov	r0, r6
 800367e:	f7ff ff99 	bl	80035b4 <checkerror>
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	d0d0      	beq.n	8003628 <_swilseek+0x16>
 8003686:	4404      	add	r4, r0
 8003688:	e7de      	b.n	8003648 <_swilseek+0x36>

0800368a <_lseek>:
 800368a:	f7ff bfc2 	b.w	8003612 <_swilseek>

0800368e <_swiwrite>:
 800368e:	b530      	push	{r4, r5, lr}
 8003690:	b085      	sub	sp, #20
 8003692:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003696:	9203      	str	r2, [sp, #12]
 8003698:	2405      	movs	r4, #5
 800369a:	ad01      	add	r5, sp, #4
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	beab      	bkpt	0x00ab
 80036a2:	4604      	mov	r4, r0
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ff85 	bl	80035b4 <checkerror>
 80036aa:	b005      	add	sp, #20
 80036ac:	bd30      	pop	{r4, r5, pc}

080036ae <_write>:
 80036ae:	b570      	push	{r4, r5, r6, lr}
 80036b0:	460e      	mov	r6, r1
 80036b2:	4615      	mov	r5, r2
 80036b4:	f7ff ff56 	bl	8003564 <findslot>
 80036b8:	4604      	mov	r4, r0
 80036ba:	b930      	cbnz	r0, 80036ca <_write+0x1c>
 80036bc:	f000 fc52 	bl	8003f64 <__errno>
 80036c0:	2309      	movs	r3, #9
 80036c2:	6003      	str	r3, [r0, #0]
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	bd70      	pop	{r4, r5, r6, pc}
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	462a      	mov	r2, r5
 80036ce:	4631      	mov	r1, r6
 80036d0:	f7ff ffdd 	bl	800368e <_swiwrite>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	dbf5      	blt.n	80036c4 <_write+0x16>
 80036d8:	6862      	ldr	r2, [r4, #4]
 80036da:	1ae8      	subs	r0, r5, r3
 80036dc:	4402      	add	r2, r0
 80036de:	42ab      	cmp	r3, r5
 80036e0:	6062      	str	r2, [r4, #4]
 80036e2:	d1f1      	bne.n	80036c8 <_write+0x1a>
 80036e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7ff bf55 	b.w	8003598 <error>

080036ee <_swiclose>:
 80036ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036f0:	2402      	movs	r4, #2
 80036f2:	9001      	str	r0, [sp, #4]
 80036f4:	ad01      	add	r5, sp, #4
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	beab      	bkpt	0x00ab
 80036fc:	4604      	mov	r4, r0
 80036fe:	4620      	mov	r0, r4
 8003700:	f7ff ff58 	bl	80035b4 <checkerror>
 8003704:	b003      	add	sp, #12
 8003706:	bd30      	pop	{r4, r5, pc}

08003708 <_close>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4605      	mov	r5, r0
 800370c:	f7ff ff2a 	bl	8003564 <findslot>
 8003710:	4604      	mov	r4, r0
 8003712:	b930      	cbnz	r0, 8003722 <_close+0x1a>
 8003714:	f000 fc26 	bl	8003f64 <__errno>
 8003718:	2309      	movs	r3, #9
 800371a:	6003      	str	r3, [r0, #0]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	bd38      	pop	{r3, r4, r5, pc}
 8003722:	3d01      	subs	r5, #1
 8003724:	2d01      	cmp	r5, #1
 8003726:	d809      	bhi.n	800373c <_close+0x34>
 8003728:	4b07      	ldr	r3, [pc, #28]	@ (8003748 <_close+0x40>)
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	429a      	cmp	r2, r3
 8003730:	d104      	bne.n	800373c <_close+0x34>
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	2000      	movs	r0, #0
 800373a:	e7f1      	b.n	8003720 <_close+0x18>
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f7ff ffd6 	bl	80036ee <_swiclose>
 8003742:	2800      	cmp	r0, #0
 8003744:	d0f5      	beq.n	8003732 <_close+0x2a>
 8003746:	e7eb      	b.n	8003720 <_close+0x18>
 8003748:	20000134 	.word	0x20000134

0800374c <_swistat>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	460c      	mov	r4, r1
 8003750:	f7ff ff08 	bl	8003564 <findslot>
 8003754:	4605      	mov	r5, r0
 8003756:	b930      	cbnz	r0, 8003766 <_swistat+0x1a>
 8003758:	f000 fc04 	bl	8003f64 <__errno>
 800375c:	2309      	movs	r3, #9
 800375e:	6003      	str	r3, [r0, #0]
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	bd70      	pop	{r4, r5, r6, pc}
 8003766:	6863      	ldr	r3, [r4, #4]
 8003768:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003772:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003774:	260c      	movs	r6, #12
 8003776:	4630      	mov	r0, r6
 8003778:	4629      	mov	r1, r5
 800377a:	beab      	bkpt	0x00ab
 800377c:	4605      	mov	r5, r0
 800377e:	4628      	mov	r0, r5
 8003780:	f7ff ff18 	bl	80035b4 <checkerror>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d0eb      	beq.n	8003760 <_swistat+0x14>
 8003788:	6120      	str	r0, [r4, #16]
 800378a:	2000      	movs	r0, #0
 800378c:	e7ea      	b.n	8003764 <_swistat+0x18>

0800378e <_fstat>:
 800378e:	460b      	mov	r3, r1
 8003790:	b510      	push	{r4, lr}
 8003792:	2100      	movs	r1, #0
 8003794:	4604      	mov	r4, r0
 8003796:	2258      	movs	r2, #88	@ 0x58
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fb95 	bl	8003ec8 <memset>
 800379e:	4601      	mov	r1, r0
 80037a0:	4620      	mov	r0, r4
 80037a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a6:	f7ff bfd1 	b.w	800374c <_swistat>

080037aa <_stat>:
 80037aa:	b538      	push	{r3, r4, r5, lr}
 80037ac:	460d      	mov	r5, r1
 80037ae:	4604      	mov	r4, r0
 80037b0:	2258      	movs	r2, #88	@ 0x58
 80037b2:	2100      	movs	r1, #0
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 fb87 	bl	8003ec8 <memset>
 80037ba:	4620      	mov	r0, r4
 80037bc:	2100      	movs	r1, #0
 80037be:	f000 f811 	bl	80037e4 <_swiopen>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	4604      	mov	r4, r0
 80037c6:	d00b      	beq.n	80037e0 <_stat+0x36>
 80037c8:	686b      	ldr	r3, [r5, #4]
 80037ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80037ce:	606b      	str	r3, [r5, #4]
 80037d0:	4629      	mov	r1, r5
 80037d2:	f7ff ffbb 	bl	800374c <_swistat>
 80037d6:	4605      	mov	r5, r0
 80037d8:	4620      	mov	r0, r4
 80037da:	f7ff ff95 	bl	8003708 <_close>
 80037de:	462c      	mov	r4, r5
 80037e0:	4620      	mov	r0, r4
 80037e2:	bd38      	pop	{r3, r4, r5, pc}

080037e4 <_swiopen>:
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037e8:	4f29      	ldr	r7, [pc, #164]	@ (8003890 <_swiopen+0xac>)
 80037ea:	b096      	sub	sp, #88	@ 0x58
 80037ec:	4682      	mov	sl, r0
 80037ee:	460e      	mov	r6, r1
 80037f0:	2400      	movs	r4, #0
 80037f2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80037f6:	3301      	adds	r3, #1
 80037f8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80037fc:	d00c      	beq.n	8003818 <_swiopen+0x34>
 80037fe:	3401      	adds	r4, #1
 8003800:	2c14      	cmp	r4, #20
 8003802:	d1f6      	bne.n	80037f2 <_swiopen+0xe>
 8003804:	f000 fbae 	bl	8003f64 <__errno>
 8003808:	2318      	movs	r3, #24
 800380a:	6003      	str	r3, [r0, #0]
 800380c:	f04f 34ff 	mov.w	r4, #4294967295
 8003810:	4620      	mov	r0, r4
 8003812:	b016      	add	sp, #88	@ 0x58
 8003814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003818:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800381c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003820:	46e9      	mov	r9, sp
 8003822:	d109      	bne.n	8003838 <_swiopen+0x54>
 8003824:	4649      	mov	r1, r9
 8003826:	4650      	mov	r0, sl
 8003828:	f7ff ffbf 	bl	80037aa <_stat>
 800382c:	3001      	adds	r0, #1
 800382e:	d003      	beq.n	8003838 <_swiopen+0x54>
 8003830:	f000 fb98 	bl	8003f64 <__errno>
 8003834:	2311      	movs	r3, #17
 8003836:	e7e8      	b.n	800380a <_swiopen+0x26>
 8003838:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800383c:	f240 6301 	movw	r3, #1537	@ 0x601
 8003840:	07b2      	lsls	r2, r6, #30
 8003842:	bf48      	it	mi
 8003844:	f045 0502 	orrmi.w	r5, r5, #2
 8003848:	421e      	tst	r6, r3
 800384a:	bf18      	it	ne
 800384c:	f045 0504 	orrne.w	r5, r5, #4
 8003850:	0733      	lsls	r3, r6, #28
 8003852:	bf48      	it	mi
 8003854:	f025 0504 	bicmi.w	r5, r5, #4
 8003858:	4650      	mov	r0, sl
 800385a:	bf48      	it	mi
 800385c:	f045 0508 	orrmi.w	r5, r5, #8
 8003860:	f8cd a000 	str.w	sl, [sp]
 8003864:	f7fc fcbc 	bl	80001e0 <strlen>
 8003868:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800386c:	2501      	movs	r5, #1
 800386e:	4628      	mov	r0, r5
 8003870:	4649      	mov	r1, r9
 8003872:	beab      	bkpt	0x00ab
 8003874:	4605      	mov	r5, r0
 8003876:	2d00      	cmp	r5, #0
 8003878:	db05      	blt.n	8003886 <_swiopen+0xa2>
 800387a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800387e:	4447      	add	r7, r8
 8003880:	2300      	movs	r3, #0
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e7c4      	b.n	8003810 <_swiopen+0x2c>
 8003886:	4628      	mov	r0, r5
 8003888:	f7ff fe86 	bl	8003598 <error>
 800388c:	4604      	mov	r4, r0
 800388e:	e7bf      	b.n	8003810 <_swiopen+0x2c>
 8003890:	20000134 	.word	0x20000134

08003894 <_get_semihosting_exts>:
 8003894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003898:	4606      	mov	r6, r0
 800389a:	460f      	mov	r7, r1
 800389c:	4829      	ldr	r0, [pc, #164]	@ (8003944 <_get_semihosting_exts+0xb0>)
 800389e:	2100      	movs	r1, #0
 80038a0:	4615      	mov	r5, r2
 80038a2:	f7ff ff9f 	bl	80037e4 <_swiopen>
 80038a6:	462a      	mov	r2, r5
 80038a8:	4604      	mov	r4, r0
 80038aa:	2100      	movs	r1, #0
 80038ac:	4630      	mov	r0, r6
 80038ae:	f000 fb0b 	bl	8003ec8 <memset>
 80038b2:	1c63      	adds	r3, r4, #1
 80038b4:	d014      	beq.n	80038e0 <_get_semihosting_exts+0x4c>
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7ff fe54 	bl	8003564 <findslot>
 80038bc:	f04f 080c 	mov.w	r8, #12
 80038c0:	4681      	mov	r9, r0
 80038c2:	4640      	mov	r0, r8
 80038c4:	4649      	mov	r1, r9
 80038c6:	beab      	bkpt	0x00ab
 80038c8:	4680      	mov	r8, r0
 80038ca:	4640      	mov	r0, r8
 80038cc:	f7ff fe72 	bl	80035b4 <checkerror>
 80038d0:	2803      	cmp	r0, #3
 80038d2:	dd02      	ble.n	80038da <_get_semihosting_exts+0x46>
 80038d4:	1ec3      	subs	r3, r0, #3
 80038d6:	42ab      	cmp	r3, r5
 80038d8:	dc07      	bgt.n	80038ea <_get_semihosting_exts+0x56>
 80038da:	4620      	mov	r0, r4
 80038dc:	f7ff ff14 	bl	8003708 <_close>
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	b003      	add	sp, #12
 80038e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038ea:	2204      	movs	r2, #4
 80038ec:	eb0d 0102 	add.w	r1, sp, r2
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff fe74 	bl	80035de <_read>
 80038f6:	2803      	cmp	r0, #3
 80038f8:	ddef      	ble.n	80038da <_get_semihosting_exts+0x46>
 80038fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80038fe:	2b53      	cmp	r3, #83	@ 0x53
 8003900:	d1eb      	bne.n	80038da <_get_semihosting_exts+0x46>
 8003902:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003906:	2b48      	cmp	r3, #72	@ 0x48
 8003908:	d1e7      	bne.n	80038da <_get_semihosting_exts+0x46>
 800390a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800390e:	2b46      	cmp	r3, #70	@ 0x46
 8003910:	d1e3      	bne.n	80038da <_get_semihosting_exts+0x46>
 8003912:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003916:	2b42      	cmp	r3, #66	@ 0x42
 8003918:	d1df      	bne.n	80038da <_get_semihosting_exts+0x46>
 800391a:	2201      	movs	r2, #1
 800391c:	4639      	mov	r1, r7
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff fe77 	bl	8003612 <_swilseek>
 8003924:	2800      	cmp	r0, #0
 8003926:	dbd8      	blt.n	80038da <_get_semihosting_exts+0x46>
 8003928:	462a      	mov	r2, r5
 800392a:	4631      	mov	r1, r6
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff fe56 	bl	80035de <_read>
 8003932:	4605      	mov	r5, r0
 8003934:	4620      	mov	r0, r4
 8003936:	f7ff fee7 	bl	8003708 <_close>
 800393a:	4628      	mov	r0, r5
 800393c:	f7ff fe3a 	bl	80035b4 <checkerror>
 8003940:	e7d0      	b.n	80038e4 <_get_semihosting_exts+0x50>
 8003942:	bf00      	nop
 8003944:	080055a8 	.word	0x080055a8

08003948 <initialise_semihosting_exts>:
 8003948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800394a:	4d0a      	ldr	r5, [pc, #40]	@ (8003974 <initialise_semihosting_exts+0x2c>)
 800394c:	4c0a      	ldr	r4, [pc, #40]	@ (8003978 <initialise_semihosting_exts+0x30>)
 800394e:	2100      	movs	r1, #0
 8003950:	2201      	movs	r2, #1
 8003952:	a801      	add	r0, sp, #4
 8003954:	6029      	str	r1, [r5, #0]
 8003956:	6022      	str	r2, [r4, #0]
 8003958:	f7ff ff9c 	bl	8003894 <_get_semihosting_exts>
 800395c:	2800      	cmp	r0, #0
 800395e:	dd07      	ble.n	8003970 <initialise_semihosting_exts+0x28>
 8003960:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003964:	f003 0201 	and.w	r2, r3, #1
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	602a      	str	r2, [r5, #0]
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	b003      	add	sp, #12
 8003972:	bd30      	pop	{r4, r5, pc}
 8003974:	20000010 	.word	0x20000010
 8003978:	2000000c 	.word	0x2000000c

0800397c <_has_ext_stdout_stderr>:
 800397c:	b510      	push	{r4, lr}
 800397e:	4c04      	ldr	r4, [pc, #16]	@ (8003990 <_has_ext_stdout_stderr+0x14>)
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da01      	bge.n	800398a <_has_ext_stdout_stderr+0xe>
 8003986:	f7ff ffdf 	bl	8003948 <initialise_semihosting_exts>
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	bd10      	pop	{r4, pc}
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c

08003994 <initialise_monitor_handles>:
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b085      	sub	sp, #20
 800399a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003a4c <initialise_monitor_handles+0xb8>
 800399e:	f8cd 9004 	str.w	r9, [sp, #4]
 80039a2:	2303      	movs	r3, #3
 80039a4:	2400      	movs	r4, #0
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	af01      	add	r7, sp, #4
 80039aa:	9402      	str	r4, [sp, #8]
 80039ac:	2501      	movs	r5, #1
 80039ae:	4628      	mov	r0, r5
 80039b0:	4639      	mov	r1, r7
 80039b2:	beab      	bkpt	0x00ab
 80039b4:	4605      	mov	r5, r0
 80039b6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003a50 <initialise_monitor_handles+0xbc>
 80039ba:	4623      	mov	r3, r4
 80039bc:	4c20      	ldr	r4, [pc, #128]	@ (8003a40 <initialise_monitor_handles+0xac>)
 80039be:	f8c8 5000 	str.w	r5, [r8]
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80039ca:	3301      	adds	r3, #1
 80039cc:	2b14      	cmp	r3, #20
 80039ce:	d1fa      	bne.n	80039c6 <initialise_monitor_handles+0x32>
 80039d0:	f7ff ffd4 	bl	800397c <_has_ext_stdout_stderr>
 80039d4:	4d1b      	ldr	r5, [pc, #108]	@ (8003a44 <initialise_monitor_handles+0xb0>)
 80039d6:	b1d0      	cbz	r0, 8003a0e <initialise_monitor_handles+0x7a>
 80039d8:	f04f 0a03 	mov.w	sl, #3
 80039dc:	2304      	movs	r3, #4
 80039de:	f8cd 9004 	str.w	r9, [sp, #4]
 80039e2:	2601      	movs	r6, #1
 80039e4:	f8cd a00c 	str.w	sl, [sp, #12]
 80039e8:	9302      	str	r3, [sp, #8]
 80039ea:	4630      	mov	r0, r6
 80039ec:	4639      	mov	r1, r7
 80039ee:	beab      	bkpt	0x00ab
 80039f0:	4683      	mov	fp, r0
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <initialise_monitor_handles+0xb4>)
 80039f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80039f8:	f8c3 b000 	str.w	fp, [r3]
 80039fc:	2308      	movs	r3, #8
 80039fe:	f8cd a00c 	str.w	sl, [sp, #12]
 8003a02:	9302      	str	r3, [sp, #8]
 8003a04:	4630      	mov	r0, r6
 8003a06:	4639      	mov	r1, r7
 8003a08:	beab      	bkpt	0x00ab
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	602e      	str	r6, [r5, #0]
 8003a0e:	682b      	ldr	r3, [r5, #0]
 8003a10:	3301      	adds	r3, #1
 8003a12:	bf02      	ittt	eq
 8003a14:	4b0c      	ldreq	r3, [pc, #48]	@ (8003a48 <initialise_monitor_handles+0xb4>)
 8003a16:	681b      	ldreq	r3, [r3, #0]
 8003a18:	602b      	streq	r3, [r5, #0]
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	6066      	str	r6, [r4, #4]
 8003a24:	f7ff ffaa 	bl	800397c <_has_ext_stdout_stderr>
 8003a28:	b130      	cbz	r0, 8003a38 <initialise_monitor_handles+0xa4>
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <initialise_monitor_handles+0xb4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003a38:	b005      	add	sp, #20
 8003a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000134 	.word	0x20000134
 8003a44:	20000128 	.word	0x20000128
 8003a48:	2000012c 	.word	0x2000012c
 8003a4c:	080055be 	.word	0x080055be
 8003a50:	20000130 	.word	0x20000130

08003a54 <_isatty>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	f7ff fd85 	bl	8003564 <findslot>
 8003a5a:	2409      	movs	r4, #9
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	b920      	cbnz	r0, 8003a6a <_isatty+0x16>
 8003a60:	f000 fa80 	bl	8003f64 <__errno>
 8003a64:	6004      	str	r4, [r0, #0]
 8003a66:	2000      	movs	r0, #0
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	beab      	bkpt	0x00ab
 8003a70:	4604      	mov	r4, r0
 8003a72:	2c01      	cmp	r4, #1
 8003a74:	4620      	mov	r0, r4
 8003a76:	d0f7      	beq.n	8003a68 <_isatty+0x14>
 8003a78:	f000 fa74 	bl	8003f64 <__errno>
 8003a7c:	2513      	movs	r5, #19
 8003a7e:	4604      	mov	r4, r0
 8003a80:	2600      	movs	r6, #0
 8003a82:	4628      	mov	r0, r5
 8003a84:	4631      	mov	r1, r6
 8003a86:	beab      	bkpt	0x00ab
 8003a88:	4605      	mov	r5, r0
 8003a8a:	6025      	str	r5, [r4, #0]
 8003a8c:	e7eb      	b.n	8003a66 <_isatty+0x12>
	...

08003a90 <std>:
 8003a90:	2300      	movs	r3, #0
 8003a92:	b510      	push	{r4, lr}
 8003a94:	4604      	mov	r4, r0
 8003a96:	e9c0 3300 	strd	r3, r3, [r0]
 8003a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a9e:	6083      	str	r3, [r0, #8]
 8003aa0:	8181      	strh	r1, [r0, #12]
 8003aa2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003aa4:	81c2      	strh	r2, [r0, #14]
 8003aa6:	6183      	str	r3, [r0, #24]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	2208      	movs	r2, #8
 8003aac:	305c      	adds	r0, #92	@ 0x5c
 8003aae:	f000 fa0b 	bl	8003ec8 <memset>
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <std+0x58>)
 8003ab4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <std+0x5c>)
 8003ab8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003aba:	4b0d      	ldr	r3, [pc, #52]	@ (8003af0 <std+0x60>)
 8003abc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003abe:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <std+0x64>)
 8003ac0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8003af8 <std+0x68>)
 8003ac4:	6224      	str	r4, [r4, #32]
 8003ac6:	429c      	cmp	r4, r3
 8003ac8:	d006      	beq.n	8003ad8 <std+0x48>
 8003aca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ace:	4294      	cmp	r4, r2
 8003ad0:	d002      	beq.n	8003ad8 <std+0x48>
 8003ad2:	33d0      	adds	r3, #208	@ 0xd0
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d105      	bne.n	8003ae4 <std+0x54>
 8003ad8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ae0:	f000 ba6a 	b.w	8003fb8 <__retarget_lock_init_recursive>
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	bf00      	nop
 8003ae8:	08003d19 	.word	0x08003d19
 8003aec:	08003d3b 	.word	0x08003d3b
 8003af0:	08003d73 	.word	0x08003d73
 8003af4:	08003d97 	.word	0x08003d97
 8003af8:	200001d4 	.word	0x200001d4

08003afc <stdio_exit_handler>:
 8003afc:	4a02      	ldr	r2, [pc, #8]	@ (8003b08 <stdio_exit_handler+0xc>)
 8003afe:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <stdio_exit_handler+0x10>)
 8003b00:	4803      	ldr	r0, [pc, #12]	@ (8003b10 <stdio_exit_handler+0x14>)
 8003b02:	f000 b869 	b.w	8003bd8 <_fwalk_sglue>
 8003b06:	bf00      	nop
 8003b08:	20000014 	.word	0x20000014
 8003b0c:	08004e55 	.word	0x08004e55
 8003b10:	20000024 	.word	0x20000024

08003b14 <cleanup_stdio>:
 8003b14:	6841      	ldr	r1, [r0, #4]
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <cleanup_stdio+0x34>)
 8003b18:	4299      	cmp	r1, r3
 8003b1a:	b510      	push	{r4, lr}
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	d001      	beq.n	8003b24 <cleanup_stdio+0x10>
 8003b20:	f001 f998 	bl	8004e54 <_fflush_r>
 8003b24:	68a1      	ldr	r1, [r4, #8]
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <cleanup_stdio+0x38>)
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	d002      	beq.n	8003b32 <cleanup_stdio+0x1e>
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f001 f991 	bl	8004e54 <_fflush_r>
 8003b32:	68e1      	ldr	r1, [r4, #12]
 8003b34:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <cleanup_stdio+0x3c>)
 8003b36:	4299      	cmp	r1, r3
 8003b38:	d004      	beq.n	8003b44 <cleanup_stdio+0x30>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b40:	f001 b988 	b.w	8004e54 <_fflush_r>
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	bf00      	nop
 8003b48:	200001d4 	.word	0x200001d4
 8003b4c:	2000023c 	.word	0x2000023c
 8003b50:	200002a4 	.word	0x200002a4

08003b54 <global_stdio_init.part.0>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <global_stdio_init.part.0+0x30>)
 8003b58:	4c0b      	ldr	r4, [pc, #44]	@ (8003b88 <global_stdio_init.part.0+0x34>)
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <global_stdio_init.part.0+0x38>)
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	4620      	mov	r0, r4
 8003b60:	2200      	movs	r2, #0
 8003b62:	2104      	movs	r1, #4
 8003b64:	f7ff ff94 	bl	8003a90 <std>
 8003b68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	2109      	movs	r1, #9
 8003b70:	f7ff ff8e 	bl	8003a90 <std>
 8003b74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b78:	2202      	movs	r2, #2
 8003b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b7e:	2112      	movs	r1, #18
 8003b80:	f7ff bf86 	b.w	8003a90 <std>
 8003b84:	2000030c 	.word	0x2000030c
 8003b88:	200001d4 	.word	0x200001d4
 8003b8c:	08003afd 	.word	0x08003afd

08003b90 <__sfp_lock_acquire>:
 8003b90:	4801      	ldr	r0, [pc, #4]	@ (8003b98 <__sfp_lock_acquire+0x8>)
 8003b92:	f000 ba12 	b.w	8003fba <__retarget_lock_acquire_recursive>
 8003b96:	bf00      	nop
 8003b98:	20000315 	.word	0x20000315

08003b9c <__sfp_lock_release>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	@ (8003ba4 <__sfp_lock_release+0x8>)
 8003b9e:	f000 ba0d 	b.w	8003fbc <__retarget_lock_release_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	20000315 	.word	0x20000315

08003ba8 <__sinit>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4604      	mov	r4, r0
 8003bac:	f7ff fff0 	bl	8003b90 <__sfp_lock_acquire>
 8003bb0:	6a23      	ldr	r3, [r4, #32]
 8003bb2:	b11b      	cbz	r3, 8003bbc <__sinit+0x14>
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	f7ff bff0 	b.w	8003b9c <__sfp_lock_release>
 8003bbc:	4b04      	ldr	r3, [pc, #16]	@ (8003bd0 <__sinit+0x28>)
 8003bbe:	6223      	str	r3, [r4, #32]
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <__sinit+0x2c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f5      	bne.n	8003bb4 <__sinit+0xc>
 8003bc8:	f7ff ffc4 	bl	8003b54 <global_stdio_init.part.0>
 8003bcc:	e7f2      	b.n	8003bb4 <__sinit+0xc>
 8003bce:	bf00      	nop
 8003bd0:	08003b15 	.word	0x08003b15
 8003bd4:	2000030c 	.word	0x2000030c

08003bd8 <_fwalk_sglue>:
 8003bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bdc:	4607      	mov	r7, r0
 8003bde:	4688      	mov	r8, r1
 8003be0:	4614      	mov	r4, r2
 8003be2:	2600      	movs	r6, #0
 8003be4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003be8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bec:	d505      	bpl.n	8003bfa <_fwalk_sglue+0x22>
 8003bee:	6824      	ldr	r4, [r4, #0]
 8003bf0:	2c00      	cmp	r4, #0
 8003bf2:	d1f7      	bne.n	8003be4 <_fwalk_sglue+0xc>
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bfa:	89ab      	ldrh	r3, [r5, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d907      	bls.n	8003c10 <_fwalk_sglue+0x38>
 8003c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c04:	3301      	adds	r3, #1
 8003c06:	d003      	beq.n	8003c10 <_fwalk_sglue+0x38>
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	4306      	orrs	r6, r0
 8003c10:	3568      	adds	r5, #104	@ 0x68
 8003c12:	e7e9      	b.n	8003be8 <_fwalk_sglue+0x10>

08003c14 <iprintf>:
 8003c14:	b40f      	push	{r0, r1, r2, r3}
 8003c16:	b507      	push	{r0, r1, r2, lr}
 8003c18:	4906      	ldr	r1, [pc, #24]	@ (8003c34 <iprintf+0x20>)
 8003c1a:	ab04      	add	r3, sp, #16
 8003c1c:	6808      	ldr	r0, [r1, #0]
 8003c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c22:	6881      	ldr	r1, [r0, #8]
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	f000 faed 	bl	8004204 <_vfiprintf_r>
 8003c2a:	b003      	add	sp, #12
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b004      	add	sp, #16
 8003c32:	4770      	bx	lr
 8003c34:	20000020 	.word	0x20000020

08003c38 <_puts_r>:
 8003c38:	6a03      	ldr	r3, [r0, #32]
 8003c3a:	b570      	push	{r4, r5, r6, lr}
 8003c3c:	6884      	ldr	r4, [r0, #8]
 8003c3e:	4605      	mov	r5, r0
 8003c40:	460e      	mov	r6, r1
 8003c42:	b90b      	cbnz	r3, 8003c48 <_puts_r+0x10>
 8003c44:	f7ff ffb0 	bl	8003ba8 <__sinit>
 8003c48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c4a:	07db      	lsls	r3, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_puts_r+0x22>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	0598      	lsls	r0, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_puts_r+0x22>
 8003c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c56:	f000 f9b0 	bl	8003fba <__retarget_lock_acquire_recursive>
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	0719      	lsls	r1, r3, #28
 8003c5e:	d502      	bpl.n	8003c66 <_puts_r+0x2e>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d135      	bne.n	8003cd2 <_puts_r+0x9a>
 8003c66:	4621      	mov	r1, r4
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f000 f8d7 	bl	8003e1c <__swsetup_r>
 8003c6e:	b380      	cbz	r0, 8003cd2 <_puts_r+0x9a>
 8003c70:	f04f 35ff 	mov.w	r5, #4294967295
 8003c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c76:	07da      	lsls	r2, r3, #31
 8003c78:	d405      	bmi.n	8003c86 <_puts_r+0x4e>
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	059b      	lsls	r3, r3, #22
 8003c7e:	d402      	bmi.n	8003c86 <_puts_r+0x4e>
 8003c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c82:	f000 f99b 	bl	8003fbc <__retarget_lock_release_recursive>
 8003c86:	4628      	mov	r0, r5
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da04      	bge.n	8003c98 <_puts_r+0x60>
 8003c8e:	69a2      	ldr	r2, [r4, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	dc17      	bgt.n	8003cc4 <_puts_r+0x8c>
 8003c94:	290a      	cmp	r1, #10
 8003c96:	d015      	beq.n	8003cc4 <_puts_r+0x8c>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	6022      	str	r2, [r4, #0]
 8003c9e:	7019      	strb	r1, [r3, #0]
 8003ca0:	68a3      	ldr	r3, [r4, #8]
 8003ca2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	60a3      	str	r3, [r4, #8]
 8003caa:	2900      	cmp	r1, #0
 8003cac:	d1ed      	bne.n	8003c8a <_puts_r+0x52>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da11      	bge.n	8003cd6 <_puts_r+0x9e>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	210a      	movs	r1, #10
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 f871 	bl	8003d9e <__swbuf_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d0d7      	beq.n	8003c70 <_puts_r+0x38>
 8003cc0:	250a      	movs	r5, #10
 8003cc2:	e7d7      	b.n	8003c74 <_puts_r+0x3c>
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 f869 	bl	8003d9e <__swbuf_r>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d1e7      	bne.n	8003ca0 <_puts_r+0x68>
 8003cd0:	e7ce      	b.n	8003c70 <_puts_r+0x38>
 8003cd2:	3e01      	subs	r6, #1
 8003cd4:	e7e4      	b.n	8003ca0 <_puts_r+0x68>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	6022      	str	r2, [r4, #0]
 8003cdc:	220a      	movs	r2, #10
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e7ee      	b.n	8003cc0 <_puts_r+0x88>
	...

08003ce4 <puts>:
 8003ce4:	4b02      	ldr	r3, [pc, #8]	@ (8003cf0 <puts+0xc>)
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f7ff bfa5 	b.w	8003c38 <_puts_r>
 8003cee:	bf00      	nop
 8003cf0:	20000020 	.word	0x20000020

08003cf4 <iscanf>:
 8003cf4:	b40f      	push	{r0, r1, r2, r3}
 8003cf6:	b507      	push	{r0, r1, r2, lr}
 8003cf8:	4906      	ldr	r1, [pc, #24]	@ (8003d14 <iscanf+0x20>)
 8003cfa:	ab04      	add	r3, sp, #16
 8003cfc:	6808      	ldr	r0, [r1, #0]
 8003cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d02:	6841      	ldr	r1, [r0, #4]
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	f000 febf 	bl	8004a88 <_vfiscanf_r>
 8003d0a:	b003      	add	sp, #12
 8003d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d10:	b004      	add	sp, #16
 8003d12:	4770      	bx	lr
 8003d14:	20000020 	.word	0x20000020

08003d18 <__sread>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	460c      	mov	r4, r1
 8003d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d20:	f000 f8fc 	bl	8003f1c <_read_r>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	bfab      	itete	ge
 8003d28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d2c:	181b      	addge	r3, r3, r0
 8003d2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d32:	bfac      	ite	ge
 8003d34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d36:	81a3      	strhlt	r3, [r4, #12]
 8003d38:	bd10      	pop	{r4, pc}

08003d3a <__swrite>:
 8003d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3e:	461f      	mov	r7, r3
 8003d40:	898b      	ldrh	r3, [r1, #12]
 8003d42:	05db      	lsls	r3, r3, #23
 8003d44:	4605      	mov	r5, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	4616      	mov	r6, r2
 8003d4a:	d505      	bpl.n	8003d58 <__swrite+0x1e>
 8003d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d50:	2302      	movs	r3, #2
 8003d52:	2200      	movs	r2, #0
 8003d54:	f000 f8d0 	bl	8003ef8 <_lseek_r>
 8003d58:	89a3      	ldrh	r3, [r4, #12]
 8003d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	4628      	mov	r0, r5
 8003d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6e:	f000 b8e7 	b.w	8003f40 <_write_r>

08003d72 <__sseek>:
 8003d72:	b510      	push	{r4, lr}
 8003d74:	460c      	mov	r4, r1
 8003d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7a:	f000 f8bd 	bl	8003ef8 <_lseek_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	bf15      	itete	ne
 8003d84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d8e:	81a3      	strheq	r3, [r4, #12]
 8003d90:	bf18      	it	ne
 8003d92:	81a3      	strhne	r3, [r4, #12]
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <__sclose>:
 8003d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9a:	f000 b89d 	b.w	8003ed8 <_close_r>

08003d9e <__swbuf_r>:
 8003d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da0:	460e      	mov	r6, r1
 8003da2:	4614      	mov	r4, r2
 8003da4:	4605      	mov	r5, r0
 8003da6:	b118      	cbz	r0, 8003db0 <__swbuf_r+0x12>
 8003da8:	6a03      	ldr	r3, [r0, #32]
 8003daa:	b90b      	cbnz	r3, 8003db0 <__swbuf_r+0x12>
 8003dac:	f7ff fefc 	bl	8003ba8 <__sinit>
 8003db0:	69a3      	ldr	r3, [r4, #24]
 8003db2:	60a3      	str	r3, [r4, #8]
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	071a      	lsls	r2, r3, #28
 8003db8:	d501      	bpl.n	8003dbe <__swbuf_r+0x20>
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	b943      	cbnz	r3, 8003dd0 <__swbuf_r+0x32>
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f82b 	bl	8003e1c <__swsetup_r>
 8003dc6:	b118      	cbz	r0, 8003dd0 <__swbuf_r+0x32>
 8003dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8003dcc:	4638      	mov	r0, r7
 8003dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	6922      	ldr	r2, [r4, #16]
 8003dd4:	1a98      	subs	r0, r3, r2
 8003dd6:	6963      	ldr	r3, [r4, #20]
 8003dd8:	b2f6      	uxtb	r6, r6
 8003dda:	4283      	cmp	r3, r0
 8003ddc:	4637      	mov	r7, r6
 8003dde:	dc05      	bgt.n	8003dec <__swbuf_r+0x4e>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4628      	mov	r0, r5
 8003de4:	f001 f836 	bl	8004e54 <_fflush_r>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d1ed      	bne.n	8003dc8 <__swbuf_r+0x2a>
 8003dec:	68a3      	ldr	r3, [r4, #8]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	60a3      	str	r3, [r4, #8]
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	6022      	str	r2, [r4, #0]
 8003df8:	701e      	strb	r6, [r3, #0]
 8003dfa:	6962      	ldr	r2, [r4, #20]
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d004      	beq.n	8003e0c <__swbuf_r+0x6e>
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	07db      	lsls	r3, r3, #31
 8003e06:	d5e1      	bpl.n	8003dcc <__swbuf_r+0x2e>
 8003e08:	2e0a      	cmp	r6, #10
 8003e0a:	d1df      	bne.n	8003dcc <__swbuf_r+0x2e>
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f001 f820 	bl	8004e54 <_fflush_r>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d0d9      	beq.n	8003dcc <__swbuf_r+0x2e>
 8003e18:	e7d6      	b.n	8003dc8 <__swbuf_r+0x2a>
	...

08003e1c <__swsetup_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ec4 <__swsetup_r+0xa8>)
 8003e20:	4605      	mov	r5, r0
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	460c      	mov	r4, r1
 8003e26:	b118      	cbz	r0, 8003e30 <__swsetup_r+0x14>
 8003e28:	6a03      	ldr	r3, [r0, #32]
 8003e2a:	b90b      	cbnz	r3, 8003e30 <__swsetup_r+0x14>
 8003e2c:	f7ff febc 	bl	8003ba8 <__sinit>
 8003e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e34:	0719      	lsls	r1, r3, #28
 8003e36:	d422      	bmi.n	8003e7e <__swsetup_r+0x62>
 8003e38:	06da      	lsls	r2, r3, #27
 8003e3a:	d407      	bmi.n	8003e4c <__swsetup_r+0x30>
 8003e3c:	2209      	movs	r2, #9
 8003e3e:	602a      	str	r2, [r5, #0]
 8003e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4a:	e033      	b.n	8003eb4 <__swsetup_r+0x98>
 8003e4c:	0758      	lsls	r0, r3, #29
 8003e4e:	d512      	bpl.n	8003e76 <__swsetup_r+0x5a>
 8003e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e52:	b141      	cbz	r1, 8003e66 <__swsetup_r+0x4a>
 8003e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <__swsetup_r+0x46>
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f8af 	bl	8003fc0 <_free_r>
 8003e62:	2300      	movs	r3, #0
 8003e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f043 0308 	orr.w	r3, r3, #8
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	b94b      	cbnz	r3, 8003e96 <__swsetup_r+0x7a>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8c:	d003      	beq.n	8003e96 <__swsetup_r+0x7a>
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	f001 f82d 	bl	8004ef0 <__smakebuf_r>
 8003e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9a:	f013 0201 	ands.w	r2, r3, #1
 8003e9e:	d00a      	beq.n	8003eb6 <__swsetup_r+0x9a>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	60a2      	str	r2, [r4, #8]
 8003ea4:	6962      	ldr	r2, [r4, #20]
 8003ea6:	4252      	negs	r2, r2
 8003ea8:	61a2      	str	r2, [r4, #24]
 8003eaa:	6922      	ldr	r2, [r4, #16]
 8003eac:	b942      	cbnz	r2, 8003ec0 <__swsetup_r+0xa4>
 8003eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003eb2:	d1c5      	bne.n	8003e40 <__swsetup_r+0x24>
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
 8003eb6:	0799      	lsls	r1, r3, #30
 8003eb8:	bf58      	it	pl
 8003eba:	6962      	ldrpl	r2, [r4, #20]
 8003ebc:	60a2      	str	r2, [r4, #8]
 8003ebe:	e7f4      	b.n	8003eaa <__swsetup_r+0x8e>
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e7f7      	b.n	8003eb4 <__swsetup_r+0x98>
 8003ec4:	20000020 	.word	0x20000020

08003ec8 <memset>:
 8003ec8:	4402      	add	r2, r0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <memset+0xa>
 8003ed0:	4770      	bx	lr
 8003ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed6:	e7f9      	b.n	8003ecc <memset+0x4>

08003ed8 <_close_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d06      	ldr	r5, [pc, #24]	@ (8003ef4 <_close_r+0x1c>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7ff fc10 	bl	8003708 <_close>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_close_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_close_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	20000310 	.word	0x20000310

08003ef8 <_lseek_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d07      	ldr	r5, [pc, #28]	@ (8003f18 <_lseek_r+0x20>)
 8003efc:	4604      	mov	r4, r0
 8003efe:	4608      	mov	r0, r1
 8003f00:	4611      	mov	r1, r2
 8003f02:	2200      	movs	r2, #0
 8003f04:	602a      	str	r2, [r5, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7ff fbbf 	bl	800368a <_lseek>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_lseek_r+0x1e>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_lseek_r+0x1e>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	20000310 	.word	0x20000310

08003f1c <_read_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d07      	ldr	r5, [pc, #28]	@ (8003f3c <_read_r+0x20>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	4608      	mov	r0, r1
 8003f24:	4611      	mov	r1, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7ff fb57 	bl	80035de <_read>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_read_r+0x1e>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_read_r+0x1e>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20000310 	.word	0x20000310

08003f40 <_write_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d07      	ldr	r5, [pc, #28]	@ (8003f60 <_write_r+0x20>)
 8003f44:	4604      	mov	r4, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	602a      	str	r2, [r5, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7ff fbad 	bl	80036ae <_write>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_write_r+0x1e>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_write_r+0x1e>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000310 	.word	0x20000310

08003f64 <__errno>:
 8003f64:	4b01      	ldr	r3, [pc, #4]	@ (8003f6c <__errno+0x8>)
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000020 	.word	0x20000020

08003f70 <__libc_init_array>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4d0d      	ldr	r5, [pc, #52]	@ (8003fa8 <__libc_init_array+0x38>)
 8003f74:	4c0d      	ldr	r4, [pc, #52]	@ (8003fac <__libc_init_array+0x3c>)
 8003f76:	1b64      	subs	r4, r4, r5
 8003f78:	10a4      	asrs	r4, r4, #2
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	42a6      	cmp	r6, r4
 8003f7e:	d109      	bne.n	8003f94 <__libc_init_array+0x24>
 8003f80:	4d0b      	ldr	r5, [pc, #44]	@ (8003fb0 <__libc_init_array+0x40>)
 8003f82:	4c0c      	ldr	r4, [pc, #48]	@ (8003fb4 <__libc_init_array+0x44>)
 8003f84:	f001 fac6 	bl	8005514 <_init>
 8003f88:	1b64      	subs	r4, r4, r5
 8003f8a:	10a4      	asrs	r4, r4, #2
 8003f8c:	2600      	movs	r6, #0
 8003f8e:	42a6      	cmp	r6, r4
 8003f90:	d105      	bne.n	8003f9e <__libc_init_array+0x2e>
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f98:	4798      	blx	r3
 8003f9a:	3601      	adds	r6, #1
 8003f9c:	e7ee      	b.n	8003f7c <__libc_init_array+0xc>
 8003f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa2:	4798      	blx	r3
 8003fa4:	3601      	adds	r6, #1
 8003fa6:	e7f2      	b.n	8003f8e <__libc_init_array+0x1e>
 8003fa8:	0800571c 	.word	0x0800571c
 8003fac:	0800571c 	.word	0x0800571c
 8003fb0:	0800571c 	.word	0x0800571c
 8003fb4:	08005720 	.word	0x08005720

08003fb8 <__retarget_lock_init_recursive>:
 8003fb8:	4770      	bx	lr

08003fba <__retarget_lock_acquire_recursive>:
 8003fba:	4770      	bx	lr

08003fbc <__retarget_lock_release_recursive>:
 8003fbc:	4770      	bx	lr
	...

08003fc0 <_free_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	d041      	beq.n	800404c <_free_r+0x8c>
 8003fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fcc:	1f0c      	subs	r4, r1, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bfb8      	it	lt
 8003fd2:	18e4      	addlt	r4, r4, r3
 8003fd4:	f000 f8e0 	bl	8004198 <__malloc_lock>
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004050 <_free_r+0x90>)
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	b933      	cbnz	r3, 8003fec <_free_r+0x2c>
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	6014      	str	r4, [r2, #0]
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fe8:	f000 b8dc 	b.w	80041a4 <__malloc_unlock>
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	d908      	bls.n	8004002 <_free_r+0x42>
 8003ff0:	6820      	ldr	r0, [r4, #0]
 8003ff2:	1821      	adds	r1, r4, r0
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	bf01      	itttt	eq
 8003ff8:	6819      	ldreq	r1, [r3, #0]
 8003ffa:	685b      	ldreq	r3, [r3, #4]
 8003ffc:	1809      	addeq	r1, r1, r0
 8003ffe:	6021      	streq	r1, [r4, #0]
 8004000:	e7ed      	b.n	8003fde <_free_r+0x1e>
 8004002:	461a      	mov	r2, r3
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	b10b      	cbz	r3, 800400c <_free_r+0x4c>
 8004008:	42a3      	cmp	r3, r4
 800400a:	d9fa      	bls.n	8004002 <_free_r+0x42>
 800400c:	6811      	ldr	r1, [r2, #0]
 800400e:	1850      	adds	r0, r2, r1
 8004010:	42a0      	cmp	r0, r4
 8004012:	d10b      	bne.n	800402c <_free_r+0x6c>
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	4401      	add	r1, r0
 8004018:	1850      	adds	r0, r2, r1
 800401a:	4283      	cmp	r3, r0
 800401c:	6011      	str	r1, [r2, #0]
 800401e:	d1e0      	bne.n	8003fe2 <_free_r+0x22>
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	6053      	str	r3, [r2, #4]
 8004026:	4408      	add	r0, r1
 8004028:	6010      	str	r0, [r2, #0]
 800402a:	e7da      	b.n	8003fe2 <_free_r+0x22>
 800402c:	d902      	bls.n	8004034 <_free_r+0x74>
 800402e:	230c      	movs	r3, #12
 8004030:	602b      	str	r3, [r5, #0]
 8004032:	e7d6      	b.n	8003fe2 <_free_r+0x22>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	1821      	adds	r1, r4, r0
 8004038:	428b      	cmp	r3, r1
 800403a:	bf04      	itt	eq
 800403c:	6819      	ldreq	r1, [r3, #0]
 800403e:	685b      	ldreq	r3, [r3, #4]
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	bf04      	itt	eq
 8004044:	1809      	addeq	r1, r1, r0
 8004046:	6021      	streq	r1, [r4, #0]
 8004048:	6054      	str	r4, [r2, #4]
 800404a:	e7ca      	b.n	8003fe2 <_free_r+0x22>
 800404c:	bd38      	pop	{r3, r4, r5, pc}
 800404e:	bf00      	nop
 8004050:	2000031c 	.word	0x2000031c

08004054 <sbrk_aligned>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4e0f      	ldr	r6, [pc, #60]	@ (8004094 <sbrk_aligned+0x40>)
 8004058:	460c      	mov	r4, r1
 800405a:	6831      	ldr	r1, [r6, #0]
 800405c:	4605      	mov	r5, r0
 800405e:	b911      	cbnz	r1, 8004066 <sbrk_aligned+0x12>
 8004060:	f001 f918 	bl	8005294 <_sbrk_r>
 8004064:	6030      	str	r0, [r6, #0]
 8004066:	4621      	mov	r1, r4
 8004068:	4628      	mov	r0, r5
 800406a:	f001 f913 	bl	8005294 <_sbrk_r>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	d103      	bne.n	800407a <sbrk_aligned+0x26>
 8004072:	f04f 34ff 	mov.w	r4, #4294967295
 8004076:	4620      	mov	r0, r4
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	1cc4      	adds	r4, r0, #3
 800407c:	f024 0403 	bic.w	r4, r4, #3
 8004080:	42a0      	cmp	r0, r4
 8004082:	d0f8      	beq.n	8004076 <sbrk_aligned+0x22>
 8004084:	1a21      	subs	r1, r4, r0
 8004086:	4628      	mov	r0, r5
 8004088:	f001 f904 	bl	8005294 <_sbrk_r>
 800408c:	3001      	adds	r0, #1
 800408e:	d1f2      	bne.n	8004076 <sbrk_aligned+0x22>
 8004090:	e7ef      	b.n	8004072 <sbrk_aligned+0x1e>
 8004092:	bf00      	nop
 8004094:	20000318 	.word	0x20000318

08004098 <_malloc_r>:
 8004098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800409c:	1ccd      	adds	r5, r1, #3
 800409e:	f025 0503 	bic.w	r5, r5, #3
 80040a2:	3508      	adds	r5, #8
 80040a4:	2d0c      	cmp	r5, #12
 80040a6:	bf38      	it	cc
 80040a8:	250c      	movcc	r5, #12
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	4606      	mov	r6, r0
 80040ae:	db01      	blt.n	80040b4 <_malloc_r+0x1c>
 80040b0:	42a9      	cmp	r1, r5
 80040b2:	d904      	bls.n	80040be <_malloc_r+0x26>
 80040b4:	230c      	movs	r3, #12
 80040b6:	6033      	str	r3, [r6, #0]
 80040b8:	2000      	movs	r0, #0
 80040ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004194 <_malloc_r+0xfc>
 80040c2:	f000 f869 	bl	8004198 <__malloc_lock>
 80040c6:	f8d8 3000 	ldr.w	r3, [r8]
 80040ca:	461c      	mov	r4, r3
 80040cc:	bb44      	cbnz	r4, 8004120 <_malloc_r+0x88>
 80040ce:	4629      	mov	r1, r5
 80040d0:	4630      	mov	r0, r6
 80040d2:	f7ff ffbf 	bl	8004054 <sbrk_aligned>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	4604      	mov	r4, r0
 80040da:	d158      	bne.n	800418e <_malloc_r+0xf6>
 80040dc:	f8d8 4000 	ldr.w	r4, [r8]
 80040e0:	4627      	mov	r7, r4
 80040e2:	2f00      	cmp	r7, #0
 80040e4:	d143      	bne.n	800416e <_malloc_r+0xd6>
 80040e6:	2c00      	cmp	r4, #0
 80040e8:	d04b      	beq.n	8004182 <_malloc_r+0xea>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	4639      	mov	r1, r7
 80040ee:	4630      	mov	r0, r6
 80040f0:	eb04 0903 	add.w	r9, r4, r3
 80040f4:	f001 f8ce 	bl	8005294 <_sbrk_r>
 80040f8:	4581      	cmp	r9, r0
 80040fa:	d142      	bne.n	8004182 <_malloc_r+0xea>
 80040fc:	6821      	ldr	r1, [r4, #0]
 80040fe:	1a6d      	subs	r5, r5, r1
 8004100:	4629      	mov	r1, r5
 8004102:	4630      	mov	r0, r6
 8004104:	f7ff ffa6 	bl	8004054 <sbrk_aligned>
 8004108:	3001      	adds	r0, #1
 800410a:	d03a      	beq.n	8004182 <_malloc_r+0xea>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	442b      	add	r3, r5
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	f8d8 3000 	ldr.w	r3, [r8]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	bb62      	cbnz	r2, 8004174 <_malloc_r+0xdc>
 800411a:	f8c8 7000 	str.w	r7, [r8]
 800411e:	e00f      	b.n	8004140 <_malloc_r+0xa8>
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	1b52      	subs	r2, r2, r5
 8004124:	d420      	bmi.n	8004168 <_malloc_r+0xd0>
 8004126:	2a0b      	cmp	r2, #11
 8004128:	d917      	bls.n	800415a <_malloc_r+0xc2>
 800412a:	1961      	adds	r1, r4, r5
 800412c:	42a3      	cmp	r3, r4
 800412e:	6025      	str	r5, [r4, #0]
 8004130:	bf18      	it	ne
 8004132:	6059      	strne	r1, [r3, #4]
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	bf08      	it	eq
 8004138:	f8c8 1000 	streq.w	r1, [r8]
 800413c:	5162      	str	r2, [r4, r5]
 800413e:	604b      	str	r3, [r1, #4]
 8004140:	4630      	mov	r0, r6
 8004142:	f000 f82f 	bl	80041a4 <__malloc_unlock>
 8004146:	f104 000b 	add.w	r0, r4, #11
 800414a:	1d23      	adds	r3, r4, #4
 800414c:	f020 0007 	bic.w	r0, r0, #7
 8004150:	1ac2      	subs	r2, r0, r3
 8004152:	bf1c      	itt	ne
 8004154:	1a1b      	subne	r3, r3, r0
 8004156:	50a3      	strne	r3, [r4, r2]
 8004158:	e7af      	b.n	80040ba <_malloc_r+0x22>
 800415a:	6862      	ldr	r2, [r4, #4]
 800415c:	42a3      	cmp	r3, r4
 800415e:	bf0c      	ite	eq
 8004160:	f8c8 2000 	streq.w	r2, [r8]
 8004164:	605a      	strne	r2, [r3, #4]
 8004166:	e7eb      	b.n	8004140 <_malloc_r+0xa8>
 8004168:	4623      	mov	r3, r4
 800416a:	6864      	ldr	r4, [r4, #4]
 800416c:	e7ae      	b.n	80040cc <_malloc_r+0x34>
 800416e:	463c      	mov	r4, r7
 8004170:	687f      	ldr	r7, [r7, #4]
 8004172:	e7b6      	b.n	80040e2 <_malloc_r+0x4a>
 8004174:	461a      	mov	r2, r3
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	42a3      	cmp	r3, r4
 800417a:	d1fb      	bne.n	8004174 <_malloc_r+0xdc>
 800417c:	2300      	movs	r3, #0
 800417e:	6053      	str	r3, [r2, #4]
 8004180:	e7de      	b.n	8004140 <_malloc_r+0xa8>
 8004182:	230c      	movs	r3, #12
 8004184:	6033      	str	r3, [r6, #0]
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f80c 	bl	80041a4 <__malloc_unlock>
 800418c:	e794      	b.n	80040b8 <_malloc_r+0x20>
 800418e:	6005      	str	r5, [r0, #0]
 8004190:	e7d6      	b.n	8004140 <_malloc_r+0xa8>
 8004192:	bf00      	nop
 8004194:	2000031c 	.word	0x2000031c

08004198 <__malloc_lock>:
 8004198:	4801      	ldr	r0, [pc, #4]	@ (80041a0 <__malloc_lock+0x8>)
 800419a:	f7ff bf0e 	b.w	8003fba <__retarget_lock_acquire_recursive>
 800419e:	bf00      	nop
 80041a0:	20000314 	.word	0x20000314

080041a4 <__malloc_unlock>:
 80041a4:	4801      	ldr	r0, [pc, #4]	@ (80041ac <__malloc_unlock+0x8>)
 80041a6:	f7ff bf09 	b.w	8003fbc <__retarget_lock_release_recursive>
 80041aa:	bf00      	nop
 80041ac:	20000314 	.word	0x20000314

080041b0 <__sfputc_r>:
 80041b0:	6893      	ldr	r3, [r2, #8]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	b410      	push	{r4}
 80041b8:	6093      	str	r3, [r2, #8]
 80041ba:	da08      	bge.n	80041ce <__sfputc_r+0x1e>
 80041bc:	6994      	ldr	r4, [r2, #24]
 80041be:	42a3      	cmp	r3, r4
 80041c0:	db01      	blt.n	80041c6 <__sfputc_r+0x16>
 80041c2:	290a      	cmp	r1, #10
 80041c4:	d103      	bne.n	80041ce <__sfputc_r+0x1e>
 80041c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041ca:	f7ff bde8 	b.w	8003d9e <__swbuf_r>
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	1c58      	adds	r0, r3, #1
 80041d2:	6010      	str	r0, [r2, #0]
 80041d4:	7019      	strb	r1, [r3, #0]
 80041d6:	4608      	mov	r0, r1
 80041d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041dc:	4770      	bx	lr

080041de <__sfputs_r>:
 80041de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e0:	4606      	mov	r6, r0
 80041e2:	460f      	mov	r7, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	18d5      	adds	r5, r2, r3
 80041e8:	42ac      	cmp	r4, r5
 80041ea:	d101      	bne.n	80041f0 <__sfputs_r+0x12>
 80041ec:	2000      	movs	r0, #0
 80041ee:	e007      	b.n	8004200 <__sfputs_r+0x22>
 80041f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f4:	463a      	mov	r2, r7
 80041f6:	4630      	mov	r0, r6
 80041f8:	f7ff ffda 	bl	80041b0 <__sfputc_r>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d1f3      	bne.n	80041e8 <__sfputs_r+0xa>
 8004200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004204 <_vfiprintf_r>:
 8004204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004208:	460d      	mov	r5, r1
 800420a:	b09d      	sub	sp, #116	@ 0x74
 800420c:	4614      	mov	r4, r2
 800420e:	4698      	mov	r8, r3
 8004210:	4606      	mov	r6, r0
 8004212:	b118      	cbz	r0, 800421c <_vfiprintf_r+0x18>
 8004214:	6a03      	ldr	r3, [r0, #32]
 8004216:	b90b      	cbnz	r3, 800421c <_vfiprintf_r+0x18>
 8004218:	f7ff fcc6 	bl	8003ba8 <__sinit>
 800421c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800421e:	07d9      	lsls	r1, r3, #31
 8004220:	d405      	bmi.n	800422e <_vfiprintf_r+0x2a>
 8004222:	89ab      	ldrh	r3, [r5, #12]
 8004224:	059a      	lsls	r2, r3, #22
 8004226:	d402      	bmi.n	800422e <_vfiprintf_r+0x2a>
 8004228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800422a:	f7ff fec6 	bl	8003fba <__retarget_lock_acquire_recursive>
 800422e:	89ab      	ldrh	r3, [r5, #12]
 8004230:	071b      	lsls	r3, r3, #28
 8004232:	d501      	bpl.n	8004238 <_vfiprintf_r+0x34>
 8004234:	692b      	ldr	r3, [r5, #16]
 8004236:	b99b      	cbnz	r3, 8004260 <_vfiprintf_r+0x5c>
 8004238:	4629      	mov	r1, r5
 800423a:	4630      	mov	r0, r6
 800423c:	f7ff fdee 	bl	8003e1c <__swsetup_r>
 8004240:	b170      	cbz	r0, 8004260 <_vfiprintf_r+0x5c>
 8004242:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004244:	07dc      	lsls	r4, r3, #31
 8004246:	d504      	bpl.n	8004252 <_vfiprintf_r+0x4e>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	b01d      	add	sp, #116	@ 0x74
 800424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004252:	89ab      	ldrh	r3, [r5, #12]
 8004254:	0598      	lsls	r0, r3, #22
 8004256:	d4f7      	bmi.n	8004248 <_vfiprintf_r+0x44>
 8004258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800425a:	f7ff feaf 	bl	8003fbc <__retarget_lock_release_recursive>
 800425e:	e7f3      	b.n	8004248 <_vfiprintf_r+0x44>
 8004260:	2300      	movs	r3, #0
 8004262:	9309      	str	r3, [sp, #36]	@ 0x24
 8004264:	2320      	movs	r3, #32
 8004266:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800426a:	f8cd 800c 	str.w	r8, [sp, #12]
 800426e:	2330      	movs	r3, #48	@ 0x30
 8004270:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004420 <_vfiprintf_r+0x21c>
 8004274:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004278:	f04f 0901 	mov.w	r9, #1
 800427c:	4623      	mov	r3, r4
 800427e:	469a      	mov	sl, r3
 8004280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004284:	b10a      	cbz	r2, 800428a <_vfiprintf_r+0x86>
 8004286:	2a25      	cmp	r2, #37	@ 0x25
 8004288:	d1f9      	bne.n	800427e <_vfiprintf_r+0x7a>
 800428a:	ebba 0b04 	subs.w	fp, sl, r4
 800428e:	d00b      	beq.n	80042a8 <_vfiprintf_r+0xa4>
 8004290:	465b      	mov	r3, fp
 8004292:	4622      	mov	r2, r4
 8004294:	4629      	mov	r1, r5
 8004296:	4630      	mov	r0, r6
 8004298:	f7ff ffa1 	bl	80041de <__sfputs_r>
 800429c:	3001      	adds	r0, #1
 800429e:	f000 80a7 	beq.w	80043f0 <_vfiprintf_r+0x1ec>
 80042a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042a4:	445a      	add	r2, fp
 80042a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80042a8:	f89a 3000 	ldrb.w	r3, [sl]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 809f 	beq.w	80043f0 <_vfiprintf_r+0x1ec>
 80042b2:	2300      	movs	r3, #0
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042bc:	f10a 0a01 	add.w	sl, sl, #1
 80042c0:	9304      	str	r3, [sp, #16]
 80042c2:	9307      	str	r3, [sp, #28]
 80042c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80042ca:	4654      	mov	r4, sl
 80042cc:	2205      	movs	r2, #5
 80042ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d2:	4853      	ldr	r0, [pc, #332]	@ (8004420 <_vfiprintf_r+0x21c>)
 80042d4:	f7fb ff8c 	bl	80001f0 <memchr>
 80042d8:	9a04      	ldr	r2, [sp, #16]
 80042da:	b9d8      	cbnz	r0, 8004314 <_vfiprintf_r+0x110>
 80042dc:	06d1      	lsls	r1, r2, #27
 80042de:	bf44      	itt	mi
 80042e0:	2320      	movmi	r3, #32
 80042e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042e6:	0713      	lsls	r3, r2, #28
 80042e8:	bf44      	itt	mi
 80042ea:	232b      	movmi	r3, #43	@ 0x2b
 80042ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042f0:	f89a 3000 	ldrb.w	r3, [sl]
 80042f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042f6:	d015      	beq.n	8004324 <_vfiprintf_r+0x120>
 80042f8:	9a07      	ldr	r2, [sp, #28]
 80042fa:	4654      	mov	r4, sl
 80042fc:	2000      	movs	r0, #0
 80042fe:	f04f 0c0a 	mov.w	ip, #10
 8004302:	4621      	mov	r1, r4
 8004304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004308:	3b30      	subs	r3, #48	@ 0x30
 800430a:	2b09      	cmp	r3, #9
 800430c:	d94b      	bls.n	80043a6 <_vfiprintf_r+0x1a2>
 800430e:	b1b0      	cbz	r0, 800433e <_vfiprintf_r+0x13a>
 8004310:	9207      	str	r2, [sp, #28]
 8004312:	e014      	b.n	800433e <_vfiprintf_r+0x13a>
 8004314:	eba0 0308 	sub.w	r3, r0, r8
 8004318:	fa09 f303 	lsl.w	r3, r9, r3
 800431c:	4313      	orrs	r3, r2
 800431e:	9304      	str	r3, [sp, #16]
 8004320:	46a2      	mov	sl, r4
 8004322:	e7d2      	b.n	80042ca <_vfiprintf_r+0xc6>
 8004324:	9b03      	ldr	r3, [sp, #12]
 8004326:	1d19      	adds	r1, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	9103      	str	r1, [sp, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	bfbb      	ittet	lt
 8004330:	425b      	neglt	r3, r3
 8004332:	f042 0202 	orrlt.w	r2, r2, #2
 8004336:	9307      	strge	r3, [sp, #28]
 8004338:	9307      	strlt	r3, [sp, #28]
 800433a:	bfb8      	it	lt
 800433c:	9204      	strlt	r2, [sp, #16]
 800433e:	7823      	ldrb	r3, [r4, #0]
 8004340:	2b2e      	cmp	r3, #46	@ 0x2e
 8004342:	d10a      	bne.n	800435a <_vfiprintf_r+0x156>
 8004344:	7863      	ldrb	r3, [r4, #1]
 8004346:	2b2a      	cmp	r3, #42	@ 0x2a
 8004348:	d132      	bne.n	80043b0 <_vfiprintf_r+0x1ac>
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	9203      	str	r2, [sp, #12]
 8004352:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004356:	3402      	adds	r4, #2
 8004358:	9305      	str	r3, [sp, #20]
 800435a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004430 <_vfiprintf_r+0x22c>
 800435e:	7821      	ldrb	r1, [r4, #0]
 8004360:	2203      	movs	r2, #3
 8004362:	4650      	mov	r0, sl
 8004364:	f7fb ff44 	bl	80001f0 <memchr>
 8004368:	b138      	cbz	r0, 800437a <_vfiprintf_r+0x176>
 800436a:	9b04      	ldr	r3, [sp, #16]
 800436c:	eba0 000a 	sub.w	r0, r0, sl
 8004370:	2240      	movs	r2, #64	@ 0x40
 8004372:	4082      	lsls	r2, r0
 8004374:	4313      	orrs	r3, r2
 8004376:	3401      	adds	r4, #1
 8004378:	9304      	str	r3, [sp, #16]
 800437a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437e:	4829      	ldr	r0, [pc, #164]	@ (8004424 <_vfiprintf_r+0x220>)
 8004380:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004384:	2206      	movs	r2, #6
 8004386:	f7fb ff33 	bl	80001f0 <memchr>
 800438a:	2800      	cmp	r0, #0
 800438c:	d03f      	beq.n	800440e <_vfiprintf_r+0x20a>
 800438e:	4b26      	ldr	r3, [pc, #152]	@ (8004428 <_vfiprintf_r+0x224>)
 8004390:	bb1b      	cbnz	r3, 80043da <_vfiprintf_r+0x1d6>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	3307      	adds	r3, #7
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	3308      	adds	r3, #8
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a0:	443b      	add	r3, r7
 80043a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043a4:	e76a      	b.n	800427c <_vfiprintf_r+0x78>
 80043a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80043aa:	460c      	mov	r4, r1
 80043ac:	2001      	movs	r0, #1
 80043ae:	e7a8      	b.n	8004302 <_vfiprintf_r+0xfe>
 80043b0:	2300      	movs	r3, #0
 80043b2:	3401      	adds	r4, #1
 80043b4:	9305      	str	r3, [sp, #20]
 80043b6:	4619      	mov	r1, r3
 80043b8:	f04f 0c0a 	mov.w	ip, #10
 80043bc:	4620      	mov	r0, r4
 80043be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c2:	3a30      	subs	r2, #48	@ 0x30
 80043c4:	2a09      	cmp	r2, #9
 80043c6:	d903      	bls.n	80043d0 <_vfiprintf_r+0x1cc>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0c6      	beq.n	800435a <_vfiprintf_r+0x156>
 80043cc:	9105      	str	r1, [sp, #20]
 80043ce:	e7c4      	b.n	800435a <_vfiprintf_r+0x156>
 80043d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80043d4:	4604      	mov	r4, r0
 80043d6:	2301      	movs	r3, #1
 80043d8:	e7f0      	b.n	80043bc <_vfiprintf_r+0x1b8>
 80043da:	ab03      	add	r3, sp, #12
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	462a      	mov	r2, r5
 80043e0:	4b12      	ldr	r3, [pc, #72]	@ (800442c <_vfiprintf_r+0x228>)
 80043e2:	a904      	add	r1, sp, #16
 80043e4:	4630      	mov	r0, r6
 80043e6:	f3af 8000 	nop.w
 80043ea:	4607      	mov	r7, r0
 80043ec:	1c78      	adds	r0, r7, #1
 80043ee:	d1d6      	bne.n	800439e <_vfiprintf_r+0x19a>
 80043f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043f2:	07d9      	lsls	r1, r3, #31
 80043f4:	d405      	bmi.n	8004402 <_vfiprintf_r+0x1fe>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	059a      	lsls	r2, r3, #22
 80043fa:	d402      	bmi.n	8004402 <_vfiprintf_r+0x1fe>
 80043fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043fe:	f7ff fddd 	bl	8003fbc <__retarget_lock_release_recursive>
 8004402:	89ab      	ldrh	r3, [r5, #12]
 8004404:	065b      	lsls	r3, r3, #25
 8004406:	f53f af1f 	bmi.w	8004248 <_vfiprintf_r+0x44>
 800440a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800440c:	e71e      	b.n	800424c <_vfiprintf_r+0x48>
 800440e:	ab03      	add	r3, sp, #12
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	462a      	mov	r2, r5
 8004414:	4b05      	ldr	r3, [pc, #20]	@ (800442c <_vfiprintf_r+0x228>)
 8004416:	a904      	add	r1, sp, #16
 8004418:	4630      	mov	r0, r6
 800441a:	f000 f879 	bl	8004510 <_printf_i>
 800441e:	e7e4      	b.n	80043ea <_vfiprintf_r+0x1e6>
 8004420:	080055c2 	.word	0x080055c2
 8004424:	080055cc 	.word	0x080055cc
 8004428:	00000000 	.word	0x00000000
 800442c:	080041df 	.word	0x080041df
 8004430:	080055c8 	.word	0x080055c8

08004434 <_printf_common>:
 8004434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	4616      	mov	r6, r2
 800443a:	4698      	mov	r8, r3
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	690b      	ldr	r3, [r1, #16]
 8004440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004444:	4293      	cmp	r3, r2
 8004446:	bfb8      	it	lt
 8004448:	4613      	movlt	r3, r2
 800444a:	6033      	str	r3, [r6, #0]
 800444c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004450:	4607      	mov	r7, r0
 8004452:	460c      	mov	r4, r1
 8004454:	b10a      	cbz	r2, 800445a <_printf_common+0x26>
 8004456:	3301      	adds	r3, #1
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	0699      	lsls	r1, r3, #26
 800445e:	bf42      	ittt	mi
 8004460:	6833      	ldrmi	r3, [r6, #0]
 8004462:	3302      	addmi	r3, #2
 8004464:	6033      	strmi	r3, [r6, #0]
 8004466:	6825      	ldr	r5, [r4, #0]
 8004468:	f015 0506 	ands.w	r5, r5, #6
 800446c:	d106      	bne.n	800447c <_printf_common+0x48>
 800446e:	f104 0a19 	add.w	sl, r4, #25
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	6832      	ldr	r2, [r6, #0]
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	42ab      	cmp	r3, r5
 800447a:	dc26      	bgt.n	80044ca <_printf_common+0x96>
 800447c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004480:	6822      	ldr	r2, [r4, #0]
 8004482:	3b00      	subs	r3, #0
 8004484:	bf18      	it	ne
 8004486:	2301      	movne	r3, #1
 8004488:	0692      	lsls	r2, r2, #26
 800448a:	d42b      	bmi.n	80044e4 <_printf_common+0xb0>
 800448c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004490:	4641      	mov	r1, r8
 8004492:	4638      	mov	r0, r7
 8004494:	47c8      	blx	r9
 8004496:	3001      	adds	r0, #1
 8004498:	d01e      	beq.n	80044d8 <_printf_common+0xa4>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	f003 0306 	and.w	r3, r3, #6
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	bf02      	ittt	eq
 80044a6:	68e5      	ldreq	r5, [r4, #12]
 80044a8:	6833      	ldreq	r3, [r6, #0]
 80044aa:	1aed      	subeq	r5, r5, r3
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	bf0c      	ite	eq
 80044b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b4:	2500      	movne	r5, #0
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bfc4      	itt	gt
 80044ba:	1a9b      	subgt	r3, r3, r2
 80044bc:	18ed      	addgt	r5, r5, r3
 80044be:	2600      	movs	r6, #0
 80044c0:	341a      	adds	r4, #26
 80044c2:	42b5      	cmp	r5, r6
 80044c4:	d11a      	bne.n	80044fc <_printf_common+0xc8>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e008      	b.n	80044dc <_printf_common+0xa8>
 80044ca:	2301      	movs	r3, #1
 80044cc:	4652      	mov	r2, sl
 80044ce:	4641      	mov	r1, r8
 80044d0:	4638      	mov	r0, r7
 80044d2:	47c8      	blx	r9
 80044d4:	3001      	adds	r0, #1
 80044d6:	d103      	bne.n	80044e0 <_printf_common+0xac>
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	3501      	adds	r5, #1
 80044e2:	e7c6      	b.n	8004472 <_printf_common+0x3e>
 80044e4:	18e1      	adds	r1, r4, r3
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	2030      	movs	r0, #48	@ 0x30
 80044ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ee:	4422      	add	r2, r4
 80044f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044f8:	3302      	adds	r3, #2
 80044fa:	e7c7      	b.n	800448c <_printf_common+0x58>
 80044fc:	2301      	movs	r3, #1
 80044fe:	4622      	mov	r2, r4
 8004500:	4641      	mov	r1, r8
 8004502:	4638      	mov	r0, r7
 8004504:	47c8      	blx	r9
 8004506:	3001      	adds	r0, #1
 8004508:	d0e6      	beq.n	80044d8 <_printf_common+0xa4>
 800450a:	3601      	adds	r6, #1
 800450c:	e7d9      	b.n	80044c2 <_printf_common+0x8e>
	...

08004510 <_printf_i>:
 8004510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004514:	7e0f      	ldrb	r7, [r1, #24]
 8004516:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004518:	2f78      	cmp	r7, #120	@ 0x78
 800451a:	4691      	mov	r9, r2
 800451c:	4680      	mov	r8, r0
 800451e:	460c      	mov	r4, r1
 8004520:	469a      	mov	sl, r3
 8004522:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004526:	d807      	bhi.n	8004538 <_printf_i+0x28>
 8004528:	2f62      	cmp	r7, #98	@ 0x62
 800452a:	d80a      	bhi.n	8004542 <_printf_i+0x32>
 800452c:	2f00      	cmp	r7, #0
 800452e:	f000 80d2 	beq.w	80046d6 <_printf_i+0x1c6>
 8004532:	2f58      	cmp	r7, #88	@ 0x58
 8004534:	f000 80b9 	beq.w	80046aa <_printf_i+0x19a>
 8004538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800453c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004540:	e03a      	b.n	80045b8 <_printf_i+0xa8>
 8004542:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004546:	2b15      	cmp	r3, #21
 8004548:	d8f6      	bhi.n	8004538 <_printf_i+0x28>
 800454a:	a101      	add	r1, pc, #4	@ (adr r1, 8004550 <_printf_i+0x40>)
 800454c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004550:	080045a9 	.word	0x080045a9
 8004554:	080045bd 	.word	0x080045bd
 8004558:	08004539 	.word	0x08004539
 800455c:	08004539 	.word	0x08004539
 8004560:	08004539 	.word	0x08004539
 8004564:	08004539 	.word	0x08004539
 8004568:	080045bd 	.word	0x080045bd
 800456c:	08004539 	.word	0x08004539
 8004570:	08004539 	.word	0x08004539
 8004574:	08004539 	.word	0x08004539
 8004578:	08004539 	.word	0x08004539
 800457c:	080046bd 	.word	0x080046bd
 8004580:	080045e7 	.word	0x080045e7
 8004584:	08004677 	.word	0x08004677
 8004588:	08004539 	.word	0x08004539
 800458c:	08004539 	.word	0x08004539
 8004590:	080046df 	.word	0x080046df
 8004594:	08004539 	.word	0x08004539
 8004598:	080045e7 	.word	0x080045e7
 800459c:	08004539 	.word	0x08004539
 80045a0:	08004539 	.word	0x08004539
 80045a4:	0800467f 	.word	0x0800467f
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	1d1a      	adds	r2, r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6032      	str	r2, [r6, #0]
 80045b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045b8:	2301      	movs	r3, #1
 80045ba:	e09d      	b.n	80046f8 <_printf_i+0x1e8>
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	6820      	ldr	r0, [r4, #0]
 80045c0:	1d19      	adds	r1, r3, #4
 80045c2:	6031      	str	r1, [r6, #0]
 80045c4:	0606      	lsls	r6, r0, #24
 80045c6:	d501      	bpl.n	80045cc <_printf_i+0xbc>
 80045c8:	681d      	ldr	r5, [r3, #0]
 80045ca:	e003      	b.n	80045d4 <_printf_i+0xc4>
 80045cc:	0645      	lsls	r5, r0, #25
 80045ce:	d5fb      	bpl.n	80045c8 <_printf_i+0xb8>
 80045d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045d4:	2d00      	cmp	r5, #0
 80045d6:	da03      	bge.n	80045e0 <_printf_i+0xd0>
 80045d8:	232d      	movs	r3, #45	@ 0x2d
 80045da:	426d      	negs	r5, r5
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045e0:	4859      	ldr	r0, [pc, #356]	@ (8004748 <_printf_i+0x238>)
 80045e2:	230a      	movs	r3, #10
 80045e4:	e011      	b.n	800460a <_printf_i+0xfa>
 80045e6:	6821      	ldr	r1, [r4, #0]
 80045e8:	6833      	ldr	r3, [r6, #0]
 80045ea:	0608      	lsls	r0, r1, #24
 80045ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80045f0:	d402      	bmi.n	80045f8 <_printf_i+0xe8>
 80045f2:	0649      	lsls	r1, r1, #25
 80045f4:	bf48      	it	mi
 80045f6:	b2ad      	uxthmi	r5, r5
 80045f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80045fa:	4853      	ldr	r0, [pc, #332]	@ (8004748 <_printf_i+0x238>)
 80045fc:	6033      	str	r3, [r6, #0]
 80045fe:	bf14      	ite	ne
 8004600:	230a      	movne	r3, #10
 8004602:	2308      	moveq	r3, #8
 8004604:	2100      	movs	r1, #0
 8004606:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800460a:	6866      	ldr	r6, [r4, #4]
 800460c:	60a6      	str	r6, [r4, #8]
 800460e:	2e00      	cmp	r6, #0
 8004610:	bfa2      	ittt	ge
 8004612:	6821      	ldrge	r1, [r4, #0]
 8004614:	f021 0104 	bicge.w	r1, r1, #4
 8004618:	6021      	strge	r1, [r4, #0]
 800461a:	b90d      	cbnz	r5, 8004620 <_printf_i+0x110>
 800461c:	2e00      	cmp	r6, #0
 800461e:	d04b      	beq.n	80046b8 <_printf_i+0x1a8>
 8004620:	4616      	mov	r6, r2
 8004622:	fbb5 f1f3 	udiv	r1, r5, r3
 8004626:	fb03 5711 	mls	r7, r3, r1, r5
 800462a:	5dc7      	ldrb	r7, [r0, r7]
 800462c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004630:	462f      	mov	r7, r5
 8004632:	42bb      	cmp	r3, r7
 8004634:	460d      	mov	r5, r1
 8004636:	d9f4      	bls.n	8004622 <_printf_i+0x112>
 8004638:	2b08      	cmp	r3, #8
 800463a:	d10b      	bne.n	8004654 <_printf_i+0x144>
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	07df      	lsls	r7, r3, #31
 8004640:	d508      	bpl.n	8004654 <_printf_i+0x144>
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	6861      	ldr	r1, [r4, #4]
 8004646:	4299      	cmp	r1, r3
 8004648:	bfde      	ittt	le
 800464a:	2330      	movle	r3, #48	@ 0x30
 800464c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004650:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004654:	1b92      	subs	r2, r2, r6
 8004656:	6122      	str	r2, [r4, #16]
 8004658:	f8cd a000 	str.w	sl, [sp]
 800465c:	464b      	mov	r3, r9
 800465e:	aa03      	add	r2, sp, #12
 8004660:	4621      	mov	r1, r4
 8004662:	4640      	mov	r0, r8
 8004664:	f7ff fee6 	bl	8004434 <_printf_common>
 8004668:	3001      	adds	r0, #1
 800466a:	d14a      	bne.n	8004702 <_printf_i+0x1f2>
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	b004      	add	sp, #16
 8004672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	f043 0320 	orr.w	r3, r3, #32
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	4833      	ldr	r0, [pc, #204]	@ (800474c <_printf_i+0x23c>)
 8004680:	2778      	movs	r7, #120	@ 0x78
 8004682:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	6831      	ldr	r1, [r6, #0]
 800468a:	061f      	lsls	r7, r3, #24
 800468c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004690:	d402      	bmi.n	8004698 <_printf_i+0x188>
 8004692:	065f      	lsls	r7, r3, #25
 8004694:	bf48      	it	mi
 8004696:	b2ad      	uxthmi	r5, r5
 8004698:	6031      	str	r1, [r6, #0]
 800469a:	07d9      	lsls	r1, r3, #31
 800469c:	bf44      	itt	mi
 800469e:	f043 0320 	orrmi.w	r3, r3, #32
 80046a2:	6023      	strmi	r3, [r4, #0]
 80046a4:	b11d      	cbz	r5, 80046ae <_printf_i+0x19e>
 80046a6:	2310      	movs	r3, #16
 80046a8:	e7ac      	b.n	8004604 <_printf_i+0xf4>
 80046aa:	4827      	ldr	r0, [pc, #156]	@ (8004748 <_printf_i+0x238>)
 80046ac:	e7e9      	b.n	8004682 <_printf_i+0x172>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	f023 0320 	bic.w	r3, r3, #32
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	e7f6      	b.n	80046a6 <_printf_i+0x196>
 80046b8:	4616      	mov	r6, r2
 80046ba:	e7bd      	b.n	8004638 <_printf_i+0x128>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	6825      	ldr	r5, [r4, #0]
 80046c0:	6961      	ldr	r1, [r4, #20]
 80046c2:	1d18      	adds	r0, r3, #4
 80046c4:	6030      	str	r0, [r6, #0]
 80046c6:	062e      	lsls	r6, r5, #24
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	d501      	bpl.n	80046d0 <_printf_i+0x1c0>
 80046cc:	6019      	str	r1, [r3, #0]
 80046ce:	e002      	b.n	80046d6 <_printf_i+0x1c6>
 80046d0:	0668      	lsls	r0, r5, #25
 80046d2:	d5fb      	bpl.n	80046cc <_printf_i+0x1bc>
 80046d4:	8019      	strh	r1, [r3, #0]
 80046d6:	2300      	movs	r3, #0
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	4616      	mov	r6, r2
 80046dc:	e7bc      	b.n	8004658 <_printf_i+0x148>
 80046de:	6833      	ldr	r3, [r6, #0]
 80046e0:	1d1a      	adds	r2, r3, #4
 80046e2:	6032      	str	r2, [r6, #0]
 80046e4:	681e      	ldr	r6, [r3, #0]
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	2100      	movs	r1, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	f7fb fd80 	bl	80001f0 <memchr>
 80046f0:	b108      	cbz	r0, 80046f6 <_printf_i+0x1e6>
 80046f2:	1b80      	subs	r0, r0, r6
 80046f4:	6060      	str	r0, [r4, #4]
 80046f6:	6863      	ldr	r3, [r4, #4]
 80046f8:	6123      	str	r3, [r4, #16]
 80046fa:	2300      	movs	r3, #0
 80046fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004700:	e7aa      	b.n	8004658 <_printf_i+0x148>
 8004702:	6923      	ldr	r3, [r4, #16]
 8004704:	4632      	mov	r2, r6
 8004706:	4649      	mov	r1, r9
 8004708:	4640      	mov	r0, r8
 800470a:	47d0      	blx	sl
 800470c:	3001      	adds	r0, #1
 800470e:	d0ad      	beq.n	800466c <_printf_i+0x15c>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	079b      	lsls	r3, r3, #30
 8004714:	d413      	bmi.n	800473e <_printf_i+0x22e>
 8004716:	68e0      	ldr	r0, [r4, #12]
 8004718:	9b03      	ldr	r3, [sp, #12]
 800471a:	4298      	cmp	r0, r3
 800471c:	bfb8      	it	lt
 800471e:	4618      	movlt	r0, r3
 8004720:	e7a6      	b.n	8004670 <_printf_i+0x160>
 8004722:	2301      	movs	r3, #1
 8004724:	4632      	mov	r2, r6
 8004726:	4649      	mov	r1, r9
 8004728:	4640      	mov	r0, r8
 800472a:	47d0      	blx	sl
 800472c:	3001      	adds	r0, #1
 800472e:	d09d      	beq.n	800466c <_printf_i+0x15c>
 8004730:	3501      	adds	r5, #1
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	9903      	ldr	r1, [sp, #12]
 8004736:	1a5b      	subs	r3, r3, r1
 8004738:	42ab      	cmp	r3, r5
 800473a:	dcf2      	bgt.n	8004722 <_printf_i+0x212>
 800473c:	e7eb      	b.n	8004716 <_printf_i+0x206>
 800473e:	2500      	movs	r5, #0
 8004740:	f104 0619 	add.w	r6, r4, #25
 8004744:	e7f5      	b.n	8004732 <_printf_i+0x222>
 8004746:	bf00      	nop
 8004748:	080055d3 	.word	0x080055d3
 800474c:	080055e4 	.word	0x080055e4

08004750 <__svfiscanf_r>:
 8004750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	461d      	mov	r5, r3
 8004756:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8004758:	07df      	lsls	r7, r3, #31
 800475a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800475e:	4606      	mov	r6, r0
 8004760:	460c      	mov	r4, r1
 8004762:	4691      	mov	r9, r2
 8004764:	d405      	bmi.n	8004772 <__svfiscanf_r+0x22>
 8004766:	898b      	ldrh	r3, [r1, #12]
 8004768:	0598      	lsls	r0, r3, #22
 800476a:	d402      	bmi.n	8004772 <__svfiscanf_r+0x22>
 800476c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800476e:	f7ff fc24 	bl	8003fba <__retarget_lock_acquire_recursive>
 8004772:	2300      	movs	r3, #0
 8004774:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8004778:	4ba7      	ldr	r3, [pc, #668]	@ (8004a18 <__svfiscanf_r+0x2c8>)
 800477a:	93a0      	str	r3, [sp, #640]	@ 0x280
 800477c:	f10d 0804 	add.w	r8, sp, #4
 8004780:	4ba6      	ldr	r3, [pc, #664]	@ (8004a1c <__svfiscanf_r+0x2cc>)
 8004782:	4fa7      	ldr	r7, [pc, #668]	@ (8004a20 <__svfiscanf_r+0x2d0>)
 8004784:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004788:	93a1      	str	r3, [sp, #644]	@ 0x284
 800478a:	9500      	str	r5, [sp, #0]
 800478c:	f899 3000 	ldrb.w	r3, [r9]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 816c 	beq.w	8004a6e <__svfiscanf_r+0x31e>
 8004796:	5cf9      	ldrb	r1, [r7, r3]
 8004798:	f011 0108 	ands.w	r1, r1, #8
 800479c:	f109 0501 	add.w	r5, r9, #1
 80047a0:	d019      	beq.n	80047d6 <__svfiscanf_r+0x86>
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	dd0f      	ble.n	80047c8 <__svfiscanf_r+0x78>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	5cba      	ldrb	r2, [r7, r2]
 80047ae:	0711      	lsls	r1, r2, #28
 80047b0:	d401      	bmi.n	80047b6 <__svfiscanf_r+0x66>
 80047b2:	46a9      	mov	r9, r5
 80047b4:	e7ea      	b.n	800478c <__svfiscanf_r+0x3c>
 80047b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80047b8:	3201      	adds	r2, #1
 80047ba:	9245      	str	r2, [sp, #276]	@ 0x114
 80047bc:	6862      	ldr	r2, [r4, #4]
 80047be:	3301      	adds	r3, #1
 80047c0:	3a01      	subs	r2, #1
 80047c2:	6062      	str	r2, [r4, #4]
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	e7ec      	b.n	80047a2 <__svfiscanf_r+0x52>
 80047c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80047ca:	4621      	mov	r1, r4
 80047cc:	4630      	mov	r0, r6
 80047ce:	4798      	blx	r3
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d0e9      	beq.n	80047a8 <__svfiscanf_r+0x58>
 80047d4:	e7ed      	b.n	80047b2 <__svfiscanf_r+0x62>
 80047d6:	2b25      	cmp	r3, #37	@ 0x25
 80047d8:	d012      	beq.n	8004800 <__svfiscanf_r+0xb0>
 80047da:	4699      	mov	r9, r3
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f340 8095 	ble.w	800490e <__svfiscanf_r+0x1be>
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	7813      	ldrb	r3, [r2, #0]
 80047e8:	454b      	cmp	r3, r9
 80047ea:	f040 8140 	bne.w	8004a6e <__svfiscanf_r+0x31e>
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	6063      	str	r3, [r4, #4]
 80047f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80047f6:	3201      	adds	r2, #1
 80047f8:	3301      	adds	r3, #1
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80047fe:	e7d8      	b.n	80047b2 <__svfiscanf_r+0x62>
 8004800:	9141      	str	r1, [sp, #260]	@ 0x104
 8004802:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004804:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004808:	2b2a      	cmp	r3, #42	@ 0x2a
 800480a:	bf02      	ittt	eq
 800480c:	2310      	moveq	r3, #16
 800480e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004810:	f109 0502 	addeq.w	r5, r9, #2
 8004814:	220a      	movs	r2, #10
 8004816:	46a9      	mov	r9, r5
 8004818:	f819 1b01 	ldrb.w	r1, [r9], #1
 800481c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004820:	2b09      	cmp	r3, #9
 8004822:	d91f      	bls.n	8004864 <__svfiscanf_r+0x114>
 8004824:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8004a24 <__svfiscanf_r+0x2d4>
 8004828:	2203      	movs	r2, #3
 800482a:	4650      	mov	r0, sl
 800482c:	f7fb fce0 	bl	80001f0 <memchr>
 8004830:	b138      	cbz	r0, 8004842 <__svfiscanf_r+0xf2>
 8004832:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004834:	eba0 000a 	sub.w	r0, r0, sl
 8004838:	2301      	movs	r3, #1
 800483a:	4083      	lsls	r3, r0
 800483c:	4313      	orrs	r3, r2
 800483e:	9341      	str	r3, [sp, #260]	@ 0x104
 8004840:	464d      	mov	r5, r9
 8004842:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004846:	2b78      	cmp	r3, #120	@ 0x78
 8004848:	d807      	bhi.n	800485a <__svfiscanf_r+0x10a>
 800484a:	2b57      	cmp	r3, #87	@ 0x57
 800484c:	d811      	bhi.n	8004872 <__svfiscanf_r+0x122>
 800484e:	2b25      	cmp	r3, #37	@ 0x25
 8004850:	d0c3      	beq.n	80047da <__svfiscanf_r+0x8a>
 8004852:	d857      	bhi.n	8004904 <__svfiscanf_r+0x1b4>
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80c1 	beq.w	80049dc <__svfiscanf_r+0x28c>
 800485a:	2303      	movs	r3, #3
 800485c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800485e:	230a      	movs	r3, #10
 8004860:	9342      	str	r3, [sp, #264]	@ 0x108
 8004862:	e07e      	b.n	8004962 <__svfiscanf_r+0x212>
 8004864:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004866:	fb02 1103 	mla	r1, r2, r3, r1
 800486a:	3930      	subs	r1, #48	@ 0x30
 800486c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800486e:	464d      	mov	r5, r9
 8004870:	e7d1      	b.n	8004816 <__svfiscanf_r+0xc6>
 8004872:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004876:	2a20      	cmp	r2, #32
 8004878:	d8ef      	bhi.n	800485a <__svfiscanf_r+0x10a>
 800487a:	a101      	add	r1, pc, #4	@ (adr r1, 8004880 <__svfiscanf_r+0x130>)
 800487c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004880:	08004941 	.word	0x08004941
 8004884:	0800485b 	.word	0x0800485b
 8004888:	0800485b 	.word	0x0800485b
 800488c:	0800499b 	.word	0x0800499b
 8004890:	0800485b 	.word	0x0800485b
 8004894:	0800485b 	.word	0x0800485b
 8004898:	0800485b 	.word	0x0800485b
 800489c:	0800485b 	.word	0x0800485b
 80048a0:	0800485b 	.word	0x0800485b
 80048a4:	0800485b 	.word	0x0800485b
 80048a8:	0800485b 	.word	0x0800485b
 80048ac:	080049b1 	.word	0x080049b1
 80048b0:	08004997 	.word	0x08004997
 80048b4:	0800490b 	.word	0x0800490b
 80048b8:	0800490b 	.word	0x0800490b
 80048bc:	0800490b 	.word	0x0800490b
 80048c0:	0800485b 	.word	0x0800485b
 80048c4:	08004953 	.word	0x08004953
 80048c8:	0800485b 	.word	0x0800485b
 80048cc:	0800485b 	.word	0x0800485b
 80048d0:	0800485b 	.word	0x0800485b
 80048d4:	0800485b 	.word	0x0800485b
 80048d8:	080049c1 	.word	0x080049c1
 80048dc:	0800495b 	.word	0x0800495b
 80048e0:	08004939 	.word	0x08004939
 80048e4:	0800485b 	.word	0x0800485b
 80048e8:	0800485b 	.word	0x0800485b
 80048ec:	080049bd 	.word	0x080049bd
 80048f0:	0800485b 	.word	0x0800485b
 80048f4:	08004997 	.word	0x08004997
 80048f8:	0800485b 	.word	0x0800485b
 80048fc:	0800485b 	.word	0x0800485b
 8004900:	08004941 	.word	0x08004941
 8004904:	3b45      	subs	r3, #69	@ 0x45
 8004906:	2b02      	cmp	r3, #2
 8004908:	d8a7      	bhi.n	800485a <__svfiscanf_r+0x10a>
 800490a:	2305      	movs	r3, #5
 800490c:	e028      	b.n	8004960 <__svfiscanf_r+0x210>
 800490e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004910:	4621      	mov	r1, r4
 8004912:	4630      	mov	r0, r6
 8004914:	4798      	blx	r3
 8004916:	2800      	cmp	r0, #0
 8004918:	f43f af64 	beq.w	80047e4 <__svfiscanf_r+0x94>
 800491c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800491e:	07da      	lsls	r2, r3, #31
 8004920:	f140 809d 	bpl.w	8004a5e <__svfiscanf_r+0x30e>
 8004924:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004926:	2800      	cmp	r0, #0
 8004928:	d061      	beq.n	80049ee <__svfiscanf_r+0x29e>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	0659      	lsls	r1, r3, #25
 800492e:	d45e      	bmi.n	80049ee <__svfiscanf_r+0x29e>
 8004930:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800493a:	f042 0220 	orr.w	r2, r2, #32
 800493e:	9241      	str	r2, [sp, #260]	@ 0x104
 8004940:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004946:	9241      	str	r2, [sp, #260]	@ 0x104
 8004948:	2210      	movs	r2, #16
 800494a:	2b6e      	cmp	r3, #110	@ 0x6e
 800494c:	9242      	str	r2, [sp, #264]	@ 0x108
 800494e:	d902      	bls.n	8004956 <__svfiscanf_r+0x206>
 8004950:	e005      	b.n	800495e <__svfiscanf_r+0x20e>
 8004952:	2300      	movs	r3, #0
 8004954:	9342      	str	r3, [sp, #264]	@ 0x108
 8004956:	2303      	movs	r3, #3
 8004958:	e002      	b.n	8004960 <__svfiscanf_r+0x210>
 800495a:	2308      	movs	r3, #8
 800495c:	9342      	str	r3, [sp, #264]	@ 0x108
 800495e:	2304      	movs	r3, #4
 8004960:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004962:	6863      	ldr	r3, [r4, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	dd45      	ble.n	80049f4 <__svfiscanf_r+0x2a4>
 8004968:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800496a:	0659      	lsls	r1, r3, #25
 800496c:	d404      	bmi.n	8004978 <__svfiscanf_r+0x228>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	5cba      	ldrb	r2, [r7, r2]
 8004974:	0712      	lsls	r2, r2, #28
 8004976:	d444      	bmi.n	8004a02 <__svfiscanf_r+0x2b2>
 8004978:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800497a:	2b02      	cmp	r3, #2
 800497c:	dc5b      	bgt.n	8004a36 <__svfiscanf_r+0x2e6>
 800497e:	466b      	mov	r3, sp
 8004980:	4622      	mov	r2, r4
 8004982:	a941      	add	r1, sp, #260	@ 0x104
 8004984:	4630      	mov	r0, r6
 8004986:	f000 f893 	bl	8004ab0 <_scanf_chars>
 800498a:	2801      	cmp	r0, #1
 800498c:	d06f      	beq.n	8004a6e <__svfiscanf_r+0x31e>
 800498e:	2802      	cmp	r0, #2
 8004990:	f47f af0f 	bne.w	80047b2 <__svfiscanf_r+0x62>
 8004994:	e7c2      	b.n	800491c <__svfiscanf_r+0x1cc>
 8004996:	220a      	movs	r2, #10
 8004998:	e7d7      	b.n	800494a <__svfiscanf_r+0x1fa>
 800499a:	4629      	mov	r1, r5
 800499c:	4640      	mov	r0, r8
 800499e:	f000 fb65 	bl	800506c <__sccl>
 80049a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80049a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80049aa:	4605      	mov	r5, r0
 80049ac:	2301      	movs	r3, #1
 80049ae:	e7d7      	b.n	8004960 <__svfiscanf_r+0x210>
 80049b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80049b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80049b8:	2300      	movs	r3, #0
 80049ba:	e7d1      	b.n	8004960 <__svfiscanf_r+0x210>
 80049bc:	2302      	movs	r3, #2
 80049be:	e7cf      	b.n	8004960 <__svfiscanf_r+0x210>
 80049c0:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80049c2:	06c3      	lsls	r3, r0, #27
 80049c4:	f53f aef5 	bmi.w	80047b2 <__svfiscanf_r+0x62>
 80049c8:	9b00      	ldr	r3, [sp, #0]
 80049ca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80049cc:	1d19      	adds	r1, r3, #4
 80049ce:	9100      	str	r1, [sp, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	07c0      	lsls	r0, r0, #31
 80049d4:	bf4c      	ite	mi
 80049d6:	801a      	strhmi	r2, [r3, #0]
 80049d8:	601a      	strpl	r2, [r3, #0]
 80049da:	e6ea      	b.n	80047b2 <__svfiscanf_r+0x62>
 80049dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049de:	07de      	lsls	r6, r3, #31
 80049e0:	d405      	bmi.n	80049ee <__svfiscanf_r+0x29e>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	059d      	lsls	r5, r3, #22
 80049e6:	d402      	bmi.n	80049ee <__svfiscanf_r+0x29e>
 80049e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049ea:	f7ff fae7 	bl	8003fbc <__retarget_lock_release_recursive>
 80049ee:	f04f 30ff 	mov.w	r0, #4294967295
 80049f2:	e79d      	b.n	8004930 <__svfiscanf_r+0x1e0>
 80049f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80049f6:	4621      	mov	r1, r4
 80049f8:	4630      	mov	r0, r6
 80049fa:	4798      	blx	r3
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0b3      	beq.n	8004968 <__svfiscanf_r+0x218>
 8004a00:	e78c      	b.n	800491c <__svfiscanf_r+0x1cc>
 8004a02:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004a04:	3201      	adds	r2, #1
 8004a06:	9245      	str	r2, [sp, #276]	@ 0x114
 8004a08:	6862      	ldr	r2, [r4, #4]
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	2a00      	cmp	r2, #0
 8004a0e:	6062      	str	r2, [r4, #4]
 8004a10:	dd0a      	ble.n	8004a28 <__svfiscanf_r+0x2d8>
 8004a12:	3301      	adds	r3, #1
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	e7aa      	b.n	800496e <__svfiscanf_r+0x21e>
 8004a18:	08005153 	.word	0x08005153
 8004a1c:	08004f85 	.word	0x08004f85
 8004a20:	08005611 	.word	0x08005611
 8004a24:	080055c8 	.word	0x080055c8
 8004a28:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4798      	blx	r3
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d09c      	beq.n	800496e <__svfiscanf_r+0x21e>
 8004a34:	e772      	b.n	800491c <__svfiscanf_r+0x1cc>
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	dc06      	bgt.n	8004a48 <__svfiscanf_r+0x2f8>
 8004a3a:	466b      	mov	r3, sp
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	a941      	add	r1, sp, #260	@ 0x104
 8004a40:	4630      	mov	r0, r6
 8004a42:	f000 f88f 	bl	8004b64 <_scanf_i>
 8004a46:	e7a0      	b.n	800498a <__svfiscanf_r+0x23a>
 8004a48:	4b0e      	ldr	r3, [pc, #56]	@ (8004a84 <__svfiscanf_r+0x334>)
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f43f aeb1 	beq.w	80047b2 <__svfiscanf_r+0x62>
 8004a50:	466b      	mov	r3, sp
 8004a52:	4622      	mov	r2, r4
 8004a54:	a941      	add	r1, sp, #260	@ 0x104
 8004a56:	4630      	mov	r0, r6
 8004a58:	f3af 8000 	nop.w
 8004a5c:	e795      	b.n	800498a <__svfiscanf_r+0x23a>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	0598      	lsls	r0, r3, #22
 8004a62:	f53f af5f 	bmi.w	8004924 <__svfiscanf_r+0x1d4>
 8004a66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a68:	f7ff faa8 	bl	8003fbc <__retarget_lock_release_recursive>
 8004a6c:	e75a      	b.n	8004924 <__svfiscanf_r+0x1d4>
 8004a6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a70:	07da      	lsls	r2, r3, #31
 8004a72:	d405      	bmi.n	8004a80 <__svfiscanf_r+0x330>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	059b      	lsls	r3, r3, #22
 8004a78:	d402      	bmi.n	8004a80 <__svfiscanf_r+0x330>
 8004a7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a7c:	f7ff fa9e 	bl	8003fbc <__retarget_lock_release_recursive>
 8004a80:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004a82:	e755      	b.n	8004930 <__svfiscanf_r+0x1e0>
 8004a84:	00000000 	.word	0x00000000

08004a88 <_vfiscanf_r>:
 8004a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8c:	460d      	mov	r5, r1
 8004a8e:	4616      	mov	r6, r2
 8004a90:	461f      	mov	r7, r3
 8004a92:	4604      	mov	r4, r0
 8004a94:	b118      	cbz	r0, 8004a9e <_vfiscanf_r+0x16>
 8004a96:	6a03      	ldr	r3, [r0, #32]
 8004a98:	b90b      	cbnz	r3, 8004a9e <_vfiscanf_r+0x16>
 8004a9a:	f7ff f885 	bl	8003ba8 <__sinit>
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aaa:	f7ff be51 	b.w	8004750 <__svfiscanf_r>
	...

08004ab0 <_scanf_chars>:
 8004ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab4:	4615      	mov	r5, r2
 8004ab6:	688a      	ldr	r2, [r1, #8]
 8004ab8:	4680      	mov	r8, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	b932      	cbnz	r2, 8004acc <_scanf_chars+0x1c>
 8004abe:	698a      	ldr	r2, [r1, #24]
 8004ac0:	2a00      	cmp	r2, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	f04f 32ff 	movne.w	r2, #4294967295
 8004ac8:	2201      	moveq	r2, #1
 8004aca:	608a      	str	r2, [r1, #8]
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004b60 <_scanf_chars+0xb0>
 8004ad2:	06d1      	lsls	r1, r2, #27
 8004ad4:	bf5f      	itttt	pl
 8004ad6:	681a      	ldrpl	r2, [r3, #0]
 8004ad8:	1d11      	addpl	r1, r2, #4
 8004ada:	6019      	strpl	r1, [r3, #0]
 8004adc:	6816      	ldrpl	r6, [r2, #0]
 8004ade:	2700      	movs	r7, #0
 8004ae0:	69a0      	ldr	r0, [r4, #24]
 8004ae2:	b188      	cbz	r0, 8004b08 <_scanf_chars+0x58>
 8004ae4:	2801      	cmp	r0, #1
 8004ae6:	d107      	bne.n	8004af8 <_scanf_chars+0x48>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	6963      	ldr	r3, [r4, #20]
 8004aee:	5c9b      	ldrb	r3, [r3, r2]
 8004af0:	b953      	cbnz	r3, 8004b08 <_scanf_chars+0x58>
 8004af2:	2f00      	cmp	r7, #0
 8004af4:	d031      	beq.n	8004b5a <_scanf_chars+0xaa>
 8004af6:	e022      	b.n	8004b3e <_scanf_chars+0x8e>
 8004af8:	2802      	cmp	r0, #2
 8004afa:	d120      	bne.n	8004b3e <_scanf_chars+0x8e>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	d41a      	bmi.n	8004b3e <_scanf_chars+0x8e>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	06da      	lsls	r2, r3, #27
 8004b0c:	bf5e      	ittt	pl
 8004b0e:	682b      	ldrpl	r3, [r5, #0]
 8004b10:	781b      	ldrbpl	r3, [r3, #0]
 8004b12:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004b16:	682a      	ldr	r2, [r5, #0]
 8004b18:	686b      	ldr	r3, [r5, #4]
 8004b1a:	3201      	adds	r2, #1
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	68a2      	ldr	r2, [r4, #8]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	3a01      	subs	r2, #1
 8004b24:	606b      	str	r3, [r5, #4]
 8004b26:	3701      	adds	r7, #1
 8004b28:	60a2      	str	r2, [r4, #8]
 8004b2a:	b142      	cbz	r2, 8004b3e <_scanf_chars+0x8e>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	dcd7      	bgt.n	8004ae0 <_scanf_chars+0x30>
 8004b30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b34:	4629      	mov	r1, r5
 8004b36:	4640      	mov	r0, r8
 8004b38:	4798      	blx	r3
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d0d0      	beq.n	8004ae0 <_scanf_chars+0x30>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f013 0310 	ands.w	r3, r3, #16
 8004b44:	d105      	bne.n	8004b52 <_scanf_chars+0xa2>
 8004b46:	68e2      	ldr	r2, [r4, #12]
 8004b48:	3201      	adds	r2, #1
 8004b4a:	60e2      	str	r2, [r4, #12]
 8004b4c:	69a2      	ldr	r2, [r4, #24]
 8004b4e:	b102      	cbz	r2, 8004b52 <_scanf_chars+0xa2>
 8004b50:	7033      	strb	r3, [r6, #0]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	443b      	add	r3, r7
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	bf00      	nop
 8004b60:	08005611 	.word	0x08005611

08004b64 <_scanf_i>:
 8004b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	4698      	mov	r8, r3
 8004b6a:	4b74      	ldr	r3, [pc, #464]	@ (8004d3c <_scanf_i+0x1d8>)
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	4682      	mov	sl, r0
 8004b70:	4616      	mov	r6, r2
 8004b72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b76:	b087      	sub	sp, #28
 8004b78:	ab03      	add	r3, sp, #12
 8004b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004b7e:	4b70      	ldr	r3, [pc, #448]	@ (8004d40 <_scanf_i+0x1dc>)
 8004b80:	69a1      	ldr	r1, [r4, #24]
 8004b82:	4a70      	ldr	r2, [pc, #448]	@ (8004d44 <_scanf_i+0x1e0>)
 8004b84:	2903      	cmp	r1, #3
 8004b86:	bf08      	it	eq
 8004b88:	461a      	moveq	r2, r3
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	9201      	str	r2, [sp, #4]
 8004b8e:	1e5a      	subs	r2, r3, #1
 8004b90:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004b94:	bf88      	it	hi
 8004b96:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004b9a:	4627      	mov	r7, r4
 8004b9c:	bf82      	ittt	hi
 8004b9e:	eb03 0905 	addhi.w	r9, r3, r5
 8004ba2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004ba6:	60a3      	strhi	r3, [r4, #8]
 8004ba8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004bac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004bb0:	bf98      	it	ls
 8004bb2:	f04f 0900 	movls.w	r9, #0
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	463d      	mov	r5, r7
 8004bba:	f04f 0b00 	mov.w	fp, #0
 8004bbe:	6831      	ldr	r1, [r6, #0]
 8004bc0:	ab03      	add	r3, sp, #12
 8004bc2:	7809      	ldrb	r1, [r1, #0]
 8004bc4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f7fb fb11 	bl	80001f0 <memchr>
 8004bce:	b328      	cbz	r0, 8004c1c <_scanf_i+0xb8>
 8004bd0:	f1bb 0f01 	cmp.w	fp, #1
 8004bd4:	d159      	bne.n	8004c8a <_scanf_i+0x126>
 8004bd6:	6862      	ldr	r2, [r4, #4]
 8004bd8:	b92a      	cbnz	r2, 8004be6 <_scanf_i+0x82>
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	2108      	movs	r1, #8
 8004bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be2:	6061      	str	r1, [r4, #4]
 8004be4:	6022      	str	r2, [r4, #0]
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004bec:	6022      	str	r2, [r4, #0]
 8004bee:	68a2      	ldr	r2, [r4, #8]
 8004bf0:	1e51      	subs	r1, r2, #1
 8004bf2:	60a1      	str	r1, [r4, #8]
 8004bf4:	b192      	cbz	r2, 8004c1c <_scanf_i+0xb8>
 8004bf6:	6832      	ldr	r2, [r6, #0]
 8004bf8:	1c51      	adds	r1, r2, #1
 8004bfa:	6031      	str	r1, [r6, #0]
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	f805 2b01 	strb.w	r2, [r5], #1
 8004c02:	6872      	ldr	r2, [r6, #4]
 8004c04:	3a01      	subs	r2, #1
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	6072      	str	r2, [r6, #4]
 8004c0a:	dc07      	bgt.n	8004c1c <_scanf_i+0xb8>
 8004c0c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004c10:	4631      	mov	r1, r6
 8004c12:	4650      	mov	r0, sl
 8004c14:	4790      	blx	r2
 8004c16:	2800      	cmp	r0, #0
 8004c18:	f040 8085 	bne.w	8004d26 <_scanf_i+0x1c2>
 8004c1c:	f10b 0b01 	add.w	fp, fp, #1
 8004c20:	f1bb 0f03 	cmp.w	fp, #3
 8004c24:	d1cb      	bne.n	8004bbe <_scanf_i+0x5a>
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	b90b      	cbnz	r3, 8004c2e <_scanf_i+0xca>
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	6863      	ldr	r3, [r4, #4]
 8004c30:	4945      	ldr	r1, [pc, #276]	@ (8004d48 <_scanf_i+0x1e4>)
 8004c32:	6960      	ldr	r0, [r4, #20]
 8004c34:	1ac9      	subs	r1, r1, r3
 8004c36:	f000 fa19 	bl	800506c <__sccl>
 8004c3a:	f04f 0b00 	mov.w	fp, #0
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	6822      	ldr	r2, [r4, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d03d      	beq.n	8004cc2 <_scanf_i+0x15e>
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	6960      	ldr	r0, [r4, #20]
 8004c4a:	f891 c000 	ldrb.w	ip, [r1]
 8004c4e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d035      	beq.n	8004cc2 <_scanf_i+0x15e>
 8004c56:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004c5a:	d124      	bne.n	8004ca6 <_scanf_i+0x142>
 8004c5c:	0510      	lsls	r0, r2, #20
 8004c5e:	d522      	bpl.n	8004ca6 <_scanf_i+0x142>
 8004c60:	f10b 0b01 	add.w	fp, fp, #1
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	d003      	beq.n	8004c72 <_scanf_i+0x10e>
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c70:	60a3      	str	r3, [r4, #8]
 8004c72:	6873      	ldr	r3, [r6, #4]
 8004c74:	3b01      	subs	r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	6073      	str	r3, [r6, #4]
 8004c7a:	dd1b      	ble.n	8004cb4 <_scanf_i+0x150>
 8004c7c:	6833      	ldr	r3, [r6, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60a3      	str	r3, [r4, #8]
 8004c88:	e7d9      	b.n	8004c3e <_scanf_i+0xda>
 8004c8a:	f1bb 0f02 	cmp.w	fp, #2
 8004c8e:	d1ae      	bne.n	8004bee <_scanf_i+0x8a>
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004c96:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004c9a:	d1bf      	bne.n	8004c1c <_scanf_i+0xb8>
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	6061      	str	r1, [r4, #4]
 8004ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca4:	e7a2      	b.n	8004bec <_scanf_i+0x88>
 8004ca6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004caa:	6022      	str	r2, [r4, #0]
 8004cac:	780b      	ldrb	r3, [r1, #0]
 8004cae:	f805 3b01 	strb.w	r3, [r5], #1
 8004cb2:	e7de      	b.n	8004c72 <_scanf_i+0x10e>
 8004cb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4650      	mov	r0, sl
 8004cbc:	4798      	blx	r3
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0df      	beq.n	8004c82 <_scanf_i+0x11e>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	05d9      	lsls	r1, r3, #23
 8004cc6:	d50d      	bpl.n	8004ce4 <_scanf_i+0x180>
 8004cc8:	42bd      	cmp	r5, r7
 8004cca:	d909      	bls.n	8004ce0 <_scanf_i+0x17c>
 8004ccc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4650      	mov	r0, sl
 8004cd8:	4798      	blx	r3
 8004cda:	f105 39ff 	add.w	r9, r5, #4294967295
 8004cde:	464d      	mov	r5, r9
 8004ce0:	42bd      	cmp	r5, r7
 8004ce2:	d028      	beq.n	8004d36 <_scanf_i+0x1d2>
 8004ce4:	6822      	ldr	r2, [r4, #0]
 8004ce6:	f012 0210 	ands.w	r2, r2, #16
 8004cea:	d113      	bne.n	8004d14 <_scanf_i+0x1b0>
 8004cec:	702a      	strb	r2, [r5, #0]
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	9e01      	ldr	r6, [sp, #4]
 8004cf2:	4639      	mov	r1, r7
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	47b0      	blx	r6
 8004cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfc:	6821      	ldr	r1, [r4, #0]
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	f8c8 2000 	str.w	r2, [r8]
 8004d04:	f011 0f20 	tst.w	r1, #32
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	d00f      	beq.n	8004d2c <_scanf_i+0x1c8>
 8004d0c:	6018      	str	r0, [r3, #0]
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	3301      	adds	r3, #1
 8004d12:	60e3      	str	r3, [r4, #12]
 8004d14:	6923      	ldr	r3, [r4, #16]
 8004d16:	1bed      	subs	r5, r5, r7
 8004d18:	445d      	add	r5, fp
 8004d1a:	442b      	add	r3, r5
 8004d1c:	6123      	str	r3, [r4, #16]
 8004d1e:	2000      	movs	r0, #0
 8004d20:	b007      	add	sp, #28
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	f04f 0b00 	mov.w	fp, #0
 8004d2a:	e7ca      	b.n	8004cc2 <_scanf_i+0x15e>
 8004d2c:	07ca      	lsls	r2, r1, #31
 8004d2e:	bf4c      	ite	mi
 8004d30:	8018      	strhmi	r0, [r3, #0]
 8004d32:	6018      	strpl	r0, [r3, #0]
 8004d34:	e7eb      	b.n	8004d0e <_scanf_i+0x1aa>
 8004d36:	2001      	movs	r0, #1
 8004d38:	e7f2      	b.n	8004d20 <_scanf_i+0x1bc>
 8004d3a:	bf00      	nop
 8004d3c:	0800558c 	.word	0x0800558c
 8004d40:	08005421 	.word	0x08005421
 8004d44:	08005501 	.word	0x08005501
 8004d48:	08005605 	.word	0x08005605

08004d4c <__sflush_r>:
 8004d4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	0716      	lsls	r6, r2, #28
 8004d56:	4605      	mov	r5, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	d454      	bmi.n	8004e06 <__sflush_r+0xba>
 8004d5c:	684b      	ldr	r3, [r1, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	dc02      	bgt.n	8004d68 <__sflush_r+0x1c>
 8004d62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dd48      	ble.n	8004dfa <__sflush_r+0xae>
 8004d68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	d045      	beq.n	8004dfa <__sflush_r+0xae>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d74:	682f      	ldr	r7, [r5, #0]
 8004d76:	6a21      	ldr	r1, [r4, #32]
 8004d78:	602b      	str	r3, [r5, #0]
 8004d7a:	d030      	beq.n	8004dde <__sflush_r+0x92>
 8004d7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	0759      	lsls	r1, r3, #29
 8004d82:	d505      	bpl.n	8004d90 <__sflush_r+0x44>
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	1ad2      	subs	r2, r2, r3
 8004d88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d8a:	b10b      	cbz	r3, 8004d90 <__sflush_r+0x44>
 8004d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	2300      	movs	r3, #0
 8004d92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d94:	6a21      	ldr	r1, [r4, #32]
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b0      	blx	r6
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	d106      	bne.n	8004dae <__sflush_r+0x62>
 8004da0:	6829      	ldr	r1, [r5, #0]
 8004da2:	291d      	cmp	r1, #29
 8004da4:	d82b      	bhi.n	8004dfe <__sflush_r+0xb2>
 8004da6:	4a2a      	ldr	r2, [pc, #168]	@ (8004e50 <__sflush_r+0x104>)
 8004da8:	410a      	asrs	r2, r1
 8004daa:	07d6      	lsls	r6, r2, #31
 8004dac:	d427      	bmi.n	8004dfe <__sflush_r+0xb2>
 8004dae:	2200      	movs	r2, #0
 8004db0:	6062      	str	r2, [r4, #4]
 8004db2:	04d9      	lsls	r1, r3, #19
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	6022      	str	r2, [r4, #0]
 8004db8:	d504      	bpl.n	8004dc4 <__sflush_r+0x78>
 8004dba:	1c42      	adds	r2, r0, #1
 8004dbc:	d101      	bne.n	8004dc2 <__sflush_r+0x76>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	b903      	cbnz	r3, 8004dc4 <__sflush_r+0x78>
 8004dc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dc6:	602f      	str	r7, [r5, #0]
 8004dc8:	b1b9      	cbz	r1, 8004dfa <__sflush_r+0xae>
 8004dca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d002      	beq.n	8004dd8 <__sflush_r+0x8c>
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f7ff f8f4 	bl	8003fc0 <_free_r>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ddc:	e00d      	b.n	8004dfa <__sflush_r+0xae>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b0      	blx	r6
 8004de4:	4602      	mov	r2, r0
 8004de6:	1c50      	adds	r0, r2, #1
 8004de8:	d1c9      	bne.n	8004d7e <__sflush_r+0x32>
 8004dea:	682b      	ldr	r3, [r5, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0c6      	beq.n	8004d7e <__sflush_r+0x32>
 8004df0:	2b1d      	cmp	r3, #29
 8004df2:	d001      	beq.n	8004df8 <__sflush_r+0xac>
 8004df4:	2b16      	cmp	r3, #22
 8004df6:	d11e      	bne.n	8004e36 <__sflush_r+0xea>
 8004df8:	602f      	str	r7, [r5, #0]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e022      	b.n	8004e44 <__sflush_r+0xf8>
 8004dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e02:	b21b      	sxth	r3, r3
 8004e04:	e01b      	b.n	8004e3e <__sflush_r+0xf2>
 8004e06:	690f      	ldr	r7, [r1, #16]
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	d0f6      	beq.n	8004dfa <__sflush_r+0xae>
 8004e0c:	0793      	lsls	r3, r2, #30
 8004e0e:	680e      	ldr	r6, [r1, #0]
 8004e10:	bf08      	it	eq
 8004e12:	694b      	ldreq	r3, [r1, #20]
 8004e14:	600f      	str	r7, [r1, #0]
 8004e16:	bf18      	it	ne
 8004e18:	2300      	movne	r3, #0
 8004e1a:	eba6 0807 	sub.w	r8, r6, r7
 8004e1e:	608b      	str	r3, [r1, #8]
 8004e20:	f1b8 0f00 	cmp.w	r8, #0
 8004e24:	dde9      	ble.n	8004dfa <__sflush_r+0xae>
 8004e26:	6a21      	ldr	r1, [r4, #32]
 8004e28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e2a:	4643      	mov	r3, r8
 8004e2c:	463a      	mov	r2, r7
 8004e2e:	4628      	mov	r0, r5
 8004e30:	47b0      	blx	r6
 8004e32:	2800      	cmp	r0, #0
 8004e34:	dc08      	bgt.n	8004e48 <__sflush_r+0xfc>
 8004e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	4407      	add	r7, r0
 8004e4a:	eba8 0800 	sub.w	r8, r8, r0
 8004e4e:	e7e7      	b.n	8004e20 <__sflush_r+0xd4>
 8004e50:	dfbffffe 	.word	0xdfbffffe

08004e54 <_fflush_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	690b      	ldr	r3, [r1, #16]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b913      	cbnz	r3, 8004e64 <_fflush_r+0x10>
 8004e5e:	2500      	movs	r5, #0
 8004e60:	4628      	mov	r0, r5
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	b118      	cbz	r0, 8004e6e <_fflush_r+0x1a>
 8004e66:	6a03      	ldr	r3, [r0, #32]
 8004e68:	b90b      	cbnz	r3, 8004e6e <_fflush_r+0x1a>
 8004e6a:	f7fe fe9d 	bl	8003ba8 <__sinit>
 8004e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f3      	beq.n	8004e5e <_fflush_r+0xa>
 8004e76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e78:	07d0      	lsls	r0, r2, #31
 8004e7a:	d404      	bmi.n	8004e86 <_fflush_r+0x32>
 8004e7c:	0599      	lsls	r1, r3, #22
 8004e7e:	d402      	bmi.n	8004e86 <_fflush_r+0x32>
 8004e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e82:	f7ff f89a 	bl	8003fba <__retarget_lock_acquire_recursive>
 8004e86:	4628      	mov	r0, r5
 8004e88:	4621      	mov	r1, r4
 8004e8a:	f7ff ff5f 	bl	8004d4c <__sflush_r>
 8004e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e90:	07da      	lsls	r2, r3, #31
 8004e92:	4605      	mov	r5, r0
 8004e94:	d4e4      	bmi.n	8004e60 <_fflush_r+0xc>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	059b      	lsls	r3, r3, #22
 8004e9a:	d4e1      	bmi.n	8004e60 <_fflush_r+0xc>
 8004e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e9e:	f7ff f88d 	bl	8003fbc <__retarget_lock_release_recursive>
 8004ea2:	e7dd      	b.n	8004e60 <_fflush_r+0xc>

08004ea4 <__swhatbuf_r>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	b096      	sub	sp, #88	@ 0x58
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	461e      	mov	r6, r3
 8004eb4:	da0d      	bge.n	8004ed2 <__swhatbuf_r+0x2e>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2340      	movne	r3, #64	@ 0x40
 8004ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ec8:	2000      	movs	r0, #0
 8004eca:	6031      	str	r1, [r6, #0]
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	b016      	add	sp, #88	@ 0x58
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	f000 f9bc 	bl	8005250 <_fstat_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dbec      	blt.n	8004eb6 <__swhatbuf_r+0x12>
 8004edc:	9901      	ldr	r1, [sp, #4]
 8004ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ee6:	4259      	negs	r1, r3
 8004ee8:	4159      	adcs	r1, r3
 8004eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eee:	e7eb      	b.n	8004ec8 <__swhatbuf_r+0x24>

08004ef0 <__smakebuf_r>:
 8004ef0:	898b      	ldrh	r3, [r1, #12]
 8004ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef4:	079d      	lsls	r5, r3, #30
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	d507      	bpl.n	8004f0c <__smakebuf_r+0x1c>
 8004efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	2301      	movs	r3, #1
 8004f06:	6163      	str	r3, [r4, #20]
 8004f08:	b003      	add	sp, #12
 8004f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0c:	ab01      	add	r3, sp, #4
 8004f0e:	466a      	mov	r2, sp
 8004f10:	f7ff ffc8 	bl	8004ea4 <__swhatbuf_r>
 8004f14:	9f00      	ldr	r7, [sp, #0]
 8004f16:	4605      	mov	r5, r0
 8004f18:	4639      	mov	r1, r7
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff f8bc 	bl	8004098 <_malloc_r>
 8004f20:	b948      	cbnz	r0, 8004f36 <__smakebuf_r+0x46>
 8004f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f26:	059a      	lsls	r2, r3, #22
 8004f28:	d4ee      	bmi.n	8004f08 <__smakebuf_r+0x18>
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	f043 0302 	orr.w	r3, r3, #2
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	e7e2      	b.n	8004efc <__smakebuf_r+0xc>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	6020      	str	r0, [r4, #0]
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	9b01      	ldr	r3, [sp, #4]
 8004f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f46:	b15b      	cbz	r3, 8004f60 <__smakebuf_r+0x70>
 8004f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f991 	bl	8005274 <_isatty_r>
 8004f52:	b128      	cbz	r0, 8004f60 <__smakebuf_r+0x70>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	431d      	orrs	r5, r3
 8004f64:	81a5      	strh	r5, [r4, #12]
 8004f66:	e7cf      	b.n	8004f08 <__smakebuf_r+0x18>

08004f68 <lflush>:
 8004f68:	898b      	ldrh	r3, [r1, #12]
 8004f6a:	f003 0309 	and.w	r3, r3, #9
 8004f6e:	2b09      	cmp	r3, #9
 8004f70:	d103      	bne.n	8004f7a <lflush+0x12>
 8004f72:	4b03      	ldr	r3, [pc, #12]	@ (8004f80 <lflush+0x18>)
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f7ff bf6d 	b.w	8004e54 <_fflush_r>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000020 	.word	0x20000020

08004f84 <__srefill_r>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	460c      	mov	r4, r1
 8004f88:	4605      	mov	r5, r0
 8004f8a:	b118      	cbz	r0, 8004f94 <__srefill_r+0x10>
 8004f8c:	6a03      	ldr	r3, [r0, #32]
 8004f8e:	b90b      	cbnz	r3, 8004f94 <__srefill_r+0x10>
 8004f90:	f7fe fe0a 	bl	8003ba8 <__sinit>
 8004f94:	2300      	movs	r3, #0
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9c:	069e      	lsls	r6, r3, #26
 8004f9e:	d408      	bmi.n	8004fb2 <__srefill_r+0x2e>
 8004fa0:	0758      	lsls	r0, r3, #29
 8004fa2:	d445      	bmi.n	8005030 <__srefill_r+0xac>
 8004fa4:	06d9      	lsls	r1, r3, #27
 8004fa6:	d407      	bmi.n	8004fb8 <__srefill_r+0x34>
 8004fa8:	2209      	movs	r2, #9
 8004faa:	602a      	str	r2, [r5, #0]
 8004fac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	071a      	lsls	r2, r3, #28
 8004fba:	d50b      	bpl.n	8004fd4 <__srefill_r+0x50>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f7ff ff48 	bl	8004e54 <_fflush_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d1f4      	bne.n	8004fb2 <__srefill_r+0x2e>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	60a0      	str	r0, [r4, #8]
 8004fcc:	f023 0308 	bic.w	r3, r3, #8
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	61a0      	str	r0, [r4, #24]
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f043 0304 	orr.w	r3, r3, #4
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	b91b      	cbnz	r3, 8004fe8 <__srefill_r+0x64>
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7ff ff84 	bl	8004ef0 <__smakebuf_r>
 8004fe8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8004fec:	07b3      	lsls	r3, r6, #30
 8004fee:	d00f      	beq.n	8005010 <__srefill_r+0x8c>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8005060 <__srefill_r+0xdc>)
 8004ff4:	491b      	ldr	r1, [pc, #108]	@ (8005064 <__srefill_r+0xe0>)
 8004ff6:	481c      	ldr	r0, [pc, #112]	@ (8005068 <__srefill_r+0xe4>)
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	f7fe fded 	bl	8003bd8 <_fwalk_sglue>
 8004ffe:	81a6      	strh	r6, [r4, #12]
 8005000:	f006 0609 	and.w	r6, r6, #9
 8005004:	2e09      	cmp	r6, #9
 8005006:	d103      	bne.n	8005010 <__srefill_r+0x8c>
 8005008:	4621      	mov	r1, r4
 800500a:	4628      	mov	r0, r5
 800500c:	f7ff fe9e 	bl	8004d4c <__sflush_r>
 8005010:	6922      	ldr	r2, [r4, #16]
 8005012:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005014:	6963      	ldr	r3, [r4, #20]
 8005016:	6a21      	ldr	r1, [r4, #32]
 8005018:	6022      	str	r2, [r4, #0]
 800501a:	4628      	mov	r0, r5
 800501c:	47b0      	blx	r6
 800501e:	2800      	cmp	r0, #0
 8005020:	6060      	str	r0, [r4, #4]
 8005022:	dc17      	bgt.n	8005054 <__srefill_r+0xd0>
 8005024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005028:	d116      	bne.n	8005058 <__srefill_r+0xd4>
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	e7bf      	b.n	8004fb0 <__srefill_r+0x2c>
 8005030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005032:	2900      	cmp	r1, #0
 8005034:	d0d2      	beq.n	8004fdc <__srefill_r+0x58>
 8005036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800503a:	4299      	cmp	r1, r3
 800503c:	d002      	beq.n	8005044 <__srefill_r+0xc0>
 800503e:	4628      	mov	r0, r5
 8005040:	f7fe ffbe 	bl	8003fc0 <_free_r>
 8005044:	2300      	movs	r3, #0
 8005046:	6363      	str	r3, [r4, #52]	@ 0x34
 8005048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0c5      	beq.n	8004fdc <__srefill_r+0x58>
 8005050:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	2000      	movs	r0, #0
 8005056:	e7ae      	b.n	8004fb6 <__srefill_r+0x32>
 8005058:	2200      	movs	r2, #0
 800505a:	6062      	str	r2, [r4, #4]
 800505c:	e7a6      	b.n	8004fac <__srefill_r+0x28>
 800505e:	bf00      	nop
 8005060:	20000014 	.word	0x20000014
 8005064:	08004f69 	.word	0x08004f69
 8005068:	20000024 	.word	0x20000024

0800506c <__sccl>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	780b      	ldrb	r3, [r1, #0]
 8005070:	4604      	mov	r4, r0
 8005072:	2b5e      	cmp	r3, #94	@ 0x5e
 8005074:	bf0b      	itete	eq
 8005076:	784b      	ldrbeq	r3, [r1, #1]
 8005078:	1c4a      	addne	r2, r1, #1
 800507a:	1c8a      	addeq	r2, r1, #2
 800507c:	2100      	movne	r1, #0
 800507e:	bf08      	it	eq
 8005080:	2101      	moveq	r1, #1
 8005082:	3801      	subs	r0, #1
 8005084:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005088:	f800 1f01 	strb.w	r1, [r0, #1]!
 800508c:	42a8      	cmp	r0, r5
 800508e:	d1fb      	bne.n	8005088 <__sccl+0x1c>
 8005090:	b90b      	cbnz	r3, 8005096 <__sccl+0x2a>
 8005092:	1e50      	subs	r0, r2, #1
 8005094:	bd70      	pop	{r4, r5, r6, pc}
 8005096:	f081 0101 	eor.w	r1, r1, #1
 800509a:	54e1      	strb	r1, [r4, r3]
 800509c:	4610      	mov	r0, r2
 800509e:	4602      	mov	r2, r0
 80050a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050a4:	2d2d      	cmp	r5, #45	@ 0x2d
 80050a6:	d005      	beq.n	80050b4 <__sccl+0x48>
 80050a8:	2d5d      	cmp	r5, #93	@ 0x5d
 80050aa:	d016      	beq.n	80050da <__sccl+0x6e>
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	d0f1      	beq.n	8005094 <__sccl+0x28>
 80050b0:	462b      	mov	r3, r5
 80050b2:	e7f2      	b.n	800509a <__sccl+0x2e>
 80050b4:	7846      	ldrb	r6, [r0, #1]
 80050b6:	2e5d      	cmp	r6, #93	@ 0x5d
 80050b8:	d0fa      	beq.n	80050b0 <__sccl+0x44>
 80050ba:	42b3      	cmp	r3, r6
 80050bc:	dcf8      	bgt.n	80050b0 <__sccl+0x44>
 80050be:	3002      	adds	r0, #2
 80050c0:	461a      	mov	r2, r3
 80050c2:	3201      	adds	r2, #1
 80050c4:	4296      	cmp	r6, r2
 80050c6:	54a1      	strb	r1, [r4, r2]
 80050c8:	dcfb      	bgt.n	80050c2 <__sccl+0x56>
 80050ca:	1af2      	subs	r2, r6, r3
 80050cc:	3a01      	subs	r2, #1
 80050ce:	1c5d      	adds	r5, r3, #1
 80050d0:	42b3      	cmp	r3, r6
 80050d2:	bfa8      	it	ge
 80050d4:	2200      	movge	r2, #0
 80050d6:	18ab      	adds	r3, r5, r2
 80050d8:	e7e1      	b.n	800509e <__sccl+0x32>
 80050da:	4610      	mov	r0, r2
 80050dc:	e7da      	b.n	8005094 <__sccl+0x28>

080050de <__submore>:
 80050de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e2:	460c      	mov	r4, r1
 80050e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80050e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d11d      	bne.n	800512a <__submore+0x4c>
 80050ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80050f2:	f7fe ffd1 	bl	8004098 <_malloc_r>
 80050f6:	b918      	cbnz	r0, 8005100 <__submore+0x22>
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005104:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005106:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800510a:	6360      	str	r0, [r4, #52]	@ 0x34
 800510c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005110:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005114:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005118:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800511c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005120:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005124:	6020      	str	r0, [r4, #0]
 8005126:	2000      	movs	r0, #0
 8005128:	e7e8      	b.n	80050fc <__submore+0x1e>
 800512a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800512c:	0077      	lsls	r7, r6, #1
 800512e:	463a      	mov	r2, r7
 8005130:	f000 f8ce 	bl	80052d0 <_realloc_r>
 8005134:	4605      	mov	r5, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	d0de      	beq.n	80050f8 <__submore+0x1a>
 800513a:	eb00 0806 	add.w	r8, r0, r6
 800513e:	4601      	mov	r1, r0
 8005140:	4632      	mov	r2, r6
 8005142:	4640      	mov	r0, r8
 8005144:	f000 f8b6 	bl	80052b4 <memcpy>
 8005148:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800514c:	f8c4 8000 	str.w	r8, [r4]
 8005150:	e7e9      	b.n	8005126 <__submore+0x48>

08005152 <_ungetc_r>:
 8005152:	b570      	push	{r4, r5, r6, lr}
 8005154:	460d      	mov	r5, r1
 8005156:	1c69      	adds	r1, r5, #1
 8005158:	4606      	mov	r6, r0
 800515a:	4614      	mov	r4, r2
 800515c:	d01e      	beq.n	800519c <_ungetc_r+0x4a>
 800515e:	b118      	cbz	r0, 8005168 <_ungetc_r+0x16>
 8005160:	6a03      	ldr	r3, [r0, #32]
 8005162:	b90b      	cbnz	r3, 8005168 <_ungetc_r+0x16>
 8005164:	f7fe fd20 	bl	8003ba8 <__sinit>
 8005168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800516a:	07da      	lsls	r2, r3, #31
 800516c:	d405      	bmi.n	800517a <_ungetc_r+0x28>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	059b      	lsls	r3, r3, #22
 8005172:	d402      	bmi.n	800517a <_ungetc_r+0x28>
 8005174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005176:	f7fe ff20 	bl	8003fba <__retarget_lock_acquire_recursive>
 800517a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517e:	f023 0220 	bic.w	r2, r3, #32
 8005182:	0758      	lsls	r0, r3, #29
 8005184:	81a2      	strh	r2, [r4, #12]
 8005186:	d422      	bmi.n	80051ce <_ungetc_r+0x7c>
 8005188:	06d9      	lsls	r1, r3, #27
 800518a:	d40a      	bmi.n	80051a2 <_ungetc_r+0x50>
 800518c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800518e:	07d2      	lsls	r2, r2, #31
 8005190:	d404      	bmi.n	800519c <_ungetc_r+0x4a>
 8005192:	0599      	lsls	r1, r3, #22
 8005194:	d402      	bmi.n	800519c <_ungetc_r+0x4a>
 8005196:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005198:	f7fe ff10 	bl	8003fbc <__retarget_lock_release_recursive>
 800519c:	f04f 35ff 	mov.w	r5, #4294967295
 80051a0:	e046      	b.n	8005230 <_ungetc_r+0xde>
 80051a2:	071b      	lsls	r3, r3, #28
 80051a4:	d50f      	bpl.n	80051c6 <_ungetc_r+0x74>
 80051a6:	4621      	mov	r1, r4
 80051a8:	4630      	mov	r0, r6
 80051aa:	f7ff fe53 	bl	8004e54 <_fflush_r>
 80051ae:	b120      	cbz	r0, 80051ba <_ungetc_r+0x68>
 80051b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051b2:	07d8      	lsls	r0, r3, #31
 80051b4:	d4f2      	bmi.n	800519c <_ungetc_r+0x4a>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	e7eb      	b.n	8005192 <_ungetc_r+0x40>
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	60a0      	str	r0, [r4, #8]
 80051be:	f023 0308 	bic.w	r3, r3, #8
 80051c2:	81a3      	strh	r3, [r4, #12]
 80051c4:	61a0      	str	r0, [r4, #24]
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	81a3      	strh	r3, [r4, #12]
 80051ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051d0:	6862      	ldr	r2, [r4, #4]
 80051d2:	b2ed      	uxtb	r5, r5
 80051d4:	b1d3      	cbz	r3, 800520c <_ungetc_r+0xba>
 80051d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80051d8:	4293      	cmp	r3, r2
 80051da:	dc05      	bgt.n	80051e8 <_ungetc_r+0x96>
 80051dc:	4621      	mov	r1, r4
 80051de:	4630      	mov	r0, r6
 80051e0:	f7ff ff7d 	bl	80050de <__submore>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d1e3      	bne.n	80051b0 <_ungetc_r+0x5e>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	1e5a      	subs	r2, r3, #1
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	f803 5c01 	strb.w	r5, [r3, #-1]
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	3301      	adds	r3, #1
 80051f6:	6063      	str	r3, [r4, #4]
 80051f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051fa:	07da      	lsls	r2, r3, #31
 80051fc:	d418      	bmi.n	8005230 <_ungetc_r+0xde>
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	059b      	lsls	r3, r3, #22
 8005202:	d415      	bmi.n	8005230 <_ungetc_r+0xde>
 8005204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005206:	f7fe fed9 	bl	8003fbc <__retarget_lock_release_recursive>
 800520a:	e011      	b.n	8005230 <_ungetc_r+0xde>
 800520c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800520e:	6920      	ldr	r0, [r4, #16]
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f001 0101 	and.w	r1, r1, #1
 8005216:	b168      	cbz	r0, 8005234 <_ungetc_r+0xe2>
 8005218:	4298      	cmp	r0, r3
 800521a:	d20b      	bcs.n	8005234 <_ungetc_r+0xe2>
 800521c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005220:	42a8      	cmp	r0, r5
 8005222:	d107      	bne.n	8005234 <_ungetc_r+0xe2>
 8005224:	3b01      	subs	r3, #1
 8005226:	3201      	adds	r2, #1
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	6062      	str	r2, [r4, #4]
 800522c:	2900      	cmp	r1, #0
 800522e:	d0e6      	beq.n	80051fe <_ungetc_r+0xac>
 8005230:	4628      	mov	r0, r5
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8005238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800523c:	6363      	str	r3, [r4, #52]	@ 0x34
 800523e:	2303      	movs	r3, #3
 8005240:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005242:	4623      	mov	r3, r4
 8005244:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	2301      	movs	r3, #1
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	e7ed      	b.n	800522c <_ungetc_r+0xda>

08005250 <_fstat_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d07      	ldr	r5, [pc, #28]	@ (8005270 <_fstat_r+0x20>)
 8005254:	2300      	movs	r3, #0
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	f7fe fa96 	bl	800378e <_fstat>
 8005262:	1c43      	adds	r3, r0, #1
 8005264:	d102      	bne.n	800526c <_fstat_r+0x1c>
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	b103      	cbz	r3, 800526c <_fstat_r+0x1c>
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	bd38      	pop	{r3, r4, r5, pc}
 800526e:	bf00      	nop
 8005270:	20000310 	.word	0x20000310

08005274 <_isatty_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d06      	ldr	r5, [pc, #24]	@ (8005290 <_isatty_r+0x1c>)
 8005278:	2300      	movs	r3, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	f7fe fbe8 	bl	8003a54 <_isatty>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_isatty_r+0x1a>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_isatty_r+0x1a>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20000310 	.word	0x20000310

08005294 <_sbrk_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	4d06      	ldr	r5, [pc, #24]	@ (80052b0 <_sbrk_r+0x1c>)
 8005298:	2300      	movs	r3, #0
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fb fdaa 	bl	8000df8 <_sbrk>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_sbrk_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_sbrk_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20000310 	.word	0x20000310

080052b4 <memcpy>:
 80052b4:	440a      	add	r2, r1
 80052b6:	4291      	cmp	r1, r2
 80052b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052bc:	d100      	bne.n	80052c0 <memcpy+0xc>
 80052be:	4770      	bx	lr
 80052c0:	b510      	push	{r4, lr}
 80052c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ca:	4291      	cmp	r1, r2
 80052cc:	d1f9      	bne.n	80052c2 <memcpy+0xe>
 80052ce:	bd10      	pop	{r4, pc}

080052d0 <_realloc_r>:
 80052d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d4:	4680      	mov	r8, r0
 80052d6:	4615      	mov	r5, r2
 80052d8:	460c      	mov	r4, r1
 80052da:	b921      	cbnz	r1, 80052e6 <_realloc_r+0x16>
 80052dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	4611      	mov	r1, r2
 80052e2:	f7fe bed9 	b.w	8004098 <_malloc_r>
 80052e6:	b92a      	cbnz	r2, 80052f4 <_realloc_r+0x24>
 80052e8:	f7fe fe6a 	bl	8003fc0 <_free_r>
 80052ec:	2400      	movs	r4, #0
 80052ee:	4620      	mov	r0, r4
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f4:	f000 f906 	bl	8005504 <_malloc_usable_size_r>
 80052f8:	4285      	cmp	r5, r0
 80052fa:	4606      	mov	r6, r0
 80052fc:	d802      	bhi.n	8005304 <_realloc_r+0x34>
 80052fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005302:	d8f4      	bhi.n	80052ee <_realloc_r+0x1e>
 8005304:	4629      	mov	r1, r5
 8005306:	4640      	mov	r0, r8
 8005308:	f7fe fec6 	bl	8004098 <_malloc_r>
 800530c:	4607      	mov	r7, r0
 800530e:	2800      	cmp	r0, #0
 8005310:	d0ec      	beq.n	80052ec <_realloc_r+0x1c>
 8005312:	42b5      	cmp	r5, r6
 8005314:	462a      	mov	r2, r5
 8005316:	4621      	mov	r1, r4
 8005318:	bf28      	it	cs
 800531a:	4632      	movcs	r2, r6
 800531c:	f7ff ffca 	bl	80052b4 <memcpy>
 8005320:	4621      	mov	r1, r4
 8005322:	4640      	mov	r0, r8
 8005324:	f7fe fe4c 	bl	8003fc0 <_free_r>
 8005328:	463c      	mov	r4, r7
 800532a:	e7e0      	b.n	80052ee <_realloc_r+0x1e>

0800532c <_strtol_l.constprop.0>:
 800532c:	2b24      	cmp	r3, #36	@ 0x24
 800532e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005332:	4686      	mov	lr, r0
 8005334:	4690      	mov	r8, r2
 8005336:	d801      	bhi.n	800533c <_strtol_l.constprop.0+0x10>
 8005338:	2b01      	cmp	r3, #1
 800533a:	d106      	bne.n	800534a <_strtol_l.constprop.0+0x1e>
 800533c:	f7fe fe12 	bl	8003f64 <__errno>
 8005340:	2316      	movs	r3, #22
 8005342:	6003      	str	r3, [r0, #0]
 8005344:	2000      	movs	r0, #0
 8005346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534a:	4834      	ldr	r0, [pc, #208]	@ (800541c <_strtol_l.constprop.0+0xf0>)
 800534c:	460d      	mov	r5, r1
 800534e:	462a      	mov	r2, r5
 8005350:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005354:	5d06      	ldrb	r6, [r0, r4]
 8005356:	f016 0608 	ands.w	r6, r6, #8
 800535a:	d1f8      	bne.n	800534e <_strtol_l.constprop.0+0x22>
 800535c:	2c2d      	cmp	r4, #45	@ 0x2d
 800535e:	d12d      	bne.n	80053bc <_strtol_l.constprop.0+0x90>
 8005360:	782c      	ldrb	r4, [r5, #0]
 8005362:	2601      	movs	r6, #1
 8005364:	1c95      	adds	r5, r2, #2
 8005366:	f033 0210 	bics.w	r2, r3, #16
 800536a:	d109      	bne.n	8005380 <_strtol_l.constprop.0+0x54>
 800536c:	2c30      	cmp	r4, #48	@ 0x30
 800536e:	d12a      	bne.n	80053c6 <_strtol_l.constprop.0+0x9a>
 8005370:	782a      	ldrb	r2, [r5, #0]
 8005372:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005376:	2a58      	cmp	r2, #88	@ 0x58
 8005378:	d125      	bne.n	80053c6 <_strtol_l.constprop.0+0x9a>
 800537a:	786c      	ldrb	r4, [r5, #1]
 800537c:	2310      	movs	r3, #16
 800537e:	3502      	adds	r5, #2
 8005380:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005384:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005388:	2200      	movs	r2, #0
 800538a:	fbbc f9f3 	udiv	r9, ip, r3
 800538e:	4610      	mov	r0, r2
 8005390:	fb03 ca19 	mls	sl, r3, r9, ip
 8005394:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005398:	2f09      	cmp	r7, #9
 800539a:	d81b      	bhi.n	80053d4 <_strtol_l.constprop.0+0xa8>
 800539c:	463c      	mov	r4, r7
 800539e:	42a3      	cmp	r3, r4
 80053a0:	dd27      	ble.n	80053f2 <_strtol_l.constprop.0+0xc6>
 80053a2:	1c57      	adds	r7, r2, #1
 80053a4:	d007      	beq.n	80053b6 <_strtol_l.constprop.0+0x8a>
 80053a6:	4581      	cmp	r9, r0
 80053a8:	d320      	bcc.n	80053ec <_strtol_l.constprop.0+0xc0>
 80053aa:	d101      	bne.n	80053b0 <_strtol_l.constprop.0+0x84>
 80053ac:	45a2      	cmp	sl, r4
 80053ae:	db1d      	blt.n	80053ec <_strtol_l.constprop.0+0xc0>
 80053b0:	fb00 4003 	mla	r0, r0, r3, r4
 80053b4:	2201      	movs	r2, #1
 80053b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053ba:	e7eb      	b.n	8005394 <_strtol_l.constprop.0+0x68>
 80053bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80053be:	bf04      	itt	eq
 80053c0:	782c      	ldrbeq	r4, [r5, #0]
 80053c2:	1c95      	addeq	r5, r2, #2
 80053c4:	e7cf      	b.n	8005366 <_strtol_l.constprop.0+0x3a>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1da      	bne.n	8005380 <_strtol_l.constprop.0+0x54>
 80053ca:	2c30      	cmp	r4, #48	@ 0x30
 80053cc:	bf0c      	ite	eq
 80053ce:	2308      	moveq	r3, #8
 80053d0:	230a      	movne	r3, #10
 80053d2:	e7d5      	b.n	8005380 <_strtol_l.constprop.0+0x54>
 80053d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80053d8:	2f19      	cmp	r7, #25
 80053da:	d801      	bhi.n	80053e0 <_strtol_l.constprop.0+0xb4>
 80053dc:	3c37      	subs	r4, #55	@ 0x37
 80053de:	e7de      	b.n	800539e <_strtol_l.constprop.0+0x72>
 80053e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80053e4:	2f19      	cmp	r7, #25
 80053e6:	d804      	bhi.n	80053f2 <_strtol_l.constprop.0+0xc6>
 80053e8:	3c57      	subs	r4, #87	@ 0x57
 80053ea:	e7d8      	b.n	800539e <_strtol_l.constprop.0+0x72>
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295
 80053f0:	e7e1      	b.n	80053b6 <_strtol_l.constprop.0+0x8a>
 80053f2:	1c53      	adds	r3, r2, #1
 80053f4:	d108      	bne.n	8005408 <_strtol_l.constprop.0+0xdc>
 80053f6:	2322      	movs	r3, #34	@ 0x22
 80053f8:	f8ce 3000 	str.w	r3, [lr]
 80053fc:	4660      	mov	r0, ip
 80053fe:	f1b8 0f00 	cmp.w	r8, #0
 8005402:	d0a0      	beq.n	8005346 <_strtol_l.constprop.0+0x1a>
 8005404:	1e69      	subs	r1, r5, #1
 8005406:	e006      	b.n	8005416 <_strtol_l.constprop.0+0xea>
 8005408:	b106      	cbz	r6, 800540c <_strtol_l.constprop.0+0xe0>
 800540a:	4240      	negs	r0, r0
 800540c:	f1b8 0f00 	cmp.w	r8, #0
 8005410:	d099      	beq.n	8005346 <_strtol_l.constprop.0+0x1a>
 8005412:	2a00      	cmp	r2, #0
 8005414:	d1f6      	bne.n	8005404 <_strtol_l.constprop.0+0xd8>
 8005416:	f8c8 1000 	str.w	r1, [r8]
 800541a:	e794      	b.n	8005346 <_strtol_l.constprop.0+0x1a>
 800541c:	08005611 	.word	0x08005611

08005420 <_strtol_r>:
 8005420:	f7ff bf84 	b.w	800532c <_strtol_l.constprop.0>

08005424 <_strtoul_l.constprop.0>:
 8005424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005428:	4e34      	ldr	r6, [pc, #208]	@ (80054fc <_strtoul_l.constprop.0+0xd8>)
 800542a:	4686      	mov	lr, r0
 800542c:	460d      	mov	r5, r1
 800542e:	4628      	mov	r0, r5
 8005430:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005434:	5d37      	ldrb	r7, [r6, r4]
 8005436:	f017 0708 	ands.w	r7, r7, #8
 800543a:	d1f8      	bne.n	800542e <_strtoul_l.constprop.0+0xa>
 800543c:	2c2d      	cmp	r4, #45	@ 0x2d
 800543e:	d12f      	bne.n	80054a0 <_strtoul_l.constprop.0+0x7c>
 8005440:	782c      	ldrb	r4, [r5, #0]
 8005442:	2701      	movs	r7, #1
 8005444:	1c85      	adds	r5, r0, #2
 8005446:	f033 0010 	bics.w	r0, r3, #16
 800544a:	d109      	bne.n	8005460 <_strtoul_l.constprop.0+0x3c>
 800544c:	2c30      	cmp	r4, #48	@ 0x30
 800544e:	d12c      	bne.n	80054aa <_strtoul_l.constprop.0+0x86>
 8005450:	7828      	ldrb	r0, [r5, #0]
 8005452:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005456:	2858      	cmp	r0, #88	@ 0x58
 8005458:	d127      	bne.n	80054aa <_strtoul_l.constprop.0+0x86>
 800545a:	786c      	ldrb	r4, [r5, #1]
 800545c:	2310      	movs	r3, #16
 800545e:	3502      	adds	r5, #2
 8005460:	f04f 38ff 	mov.w	r8, #4294967295
 8005464:	2600      	movs	r6, #0
 8005466:	fbb8 f8f3 	udiv	r8, r8, r3
 800546a:	fb03 f908 	mul.w	r9, r3, r8
 800546e:	ea6f 0909 	mvn.w	r9, r9
 8005472:	4630      	mov	r0, r6
 8005474:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005478:	f1bc 0f09 	cmp.w	ip, #9
 800547c:	d81c      	bhi.n	80054b8 <_strtoul_l.constprop.0+0x94>
 800547e:	4664      	mov	r4, ip
 8005480:	42a3      	cmp	r3, r4
 8005482:	dd2a      	ble.n	80054da <_strtoul_l.constprop.0+0xb6>
 8005484:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005488:	d007      	beq.n	800549a <_strtoul_l.constprop.0+0x76>
 800548a:	4580      	cmp	r8, r0
 800548c:	d322      	bcc.n	80054d4 <_strtoul_l.constprop.0+0xb0>
 800548e:	d101      	bne.n	8005494 <_strtoul_l.constprop.0+0x70>
 8005490:	45a1      	cmp	r9, r4
 8005492:	db1f      	blt.n	80054d4 <_strtoul_l.constprop.0+0xb0>
 8005494:	fb00 4003 	mla	r0, r0, r3, r4
 8005498:	2601      	movs	r6, #1
 800549a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800549e:	e7e9      	b.n	8005474 <_strtoul_l.constprop.0+0x50>
 80054a0:	2c2b      	cmp	r4, #43	@ 0x2b
 80054a2:	bf04      	itt	eq
 80054a4:	782c      	ldrbeq	r4, [r5, #0]
 80054a6:	1c85      	addeq	r5, r0, #2
 80054a8:	e7cd      	b.n	8005446 <_strtoul_l.constprop.0+0x22>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1d8      	bne.n	8005460 <_strtoul_l.constprop.0+0x3c>
 80054ae:	2c30      	cmp	r4, #48	@ 0x30
 80054b0:	bf0c      	ite	eq
 80054b2:	2308      	moveq	r3, #8
 80054b4:	230a      	movne	r3, #10
 80054b6:	e7d3      	b.n	8005460 <_strtoul_l.constprop.0+0x3c>
 80054b8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80054bc:	f1bc 0f19 	cmp.w	ip, #25
 80054c0:	d801      	bhi.n	80054c6 <_strtoul_l.constprop.0+0xa2>
 80054c2:	3c37      	subs	r4, #55	@ 0x37
 80054c4:	e7dc      	b.n	8005480 <_strtoul_l.constprop.0+0x5c>
 80054c6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80054ca:	f1bc 0f19 	cmp.w	ip, #25
 80054ce:	d804      	bhi.n	80054da <_strtoul_l.constprop.0+0xb6>
 80054d0:	3c57      	subs	r4, #87	@ 0x57
 80054d2:	e7d5      	b.n	8005480 <_strtoul_l.constprop.0+0x5c>
 80054d4:	f04f 36ff 	mov.w	r6, #4294967295
 80054d8:	e7df      	b.n	800549a <_strtoul_l.constprop.0+0x76>
 80054da:	1c73      	adds	r3, r6, #1
 80054dc:	d106      	bne.n	80054ec <_strtoul_l.constprop.0+0xc8>
 80054de:	2322      	movs	r3, #34	@ 0x22
 80054e0:	f8ce 3000 	str.w	r3, [lr]
 80054e4:	4630      	mov	r0, r6
 80054e6:	b932      	cbnz	r2, 80054f6 <_strtoul_l.constprop.0+0xd2>
 80054e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054ec:	b107      	cbz	r7, 80054f0 <_strtoul_l.constprop.0+0xcc>
 80054ee:	4240      	negs	r0, r0
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d0f9      	beq.n	80054e8 <_strtoul_l.constprop.0+0xc4>
 80054f4:	b106      	cbz	r6, 80054f8 <_strtoul_l.constprop.0+0xd4>
 80054f6:	1e69      	subs	r1, r5, #1
 80054f8:	6011      	str	r1, [r2, #0]
 80054fa:	e7f5      	b.n	80054e8 <_strtoul_l.constprop.0+0xc4>
 80054fc:	08005611 	.word	0x08005611

08005500 <_strtoul_r>:
 8005500:	f7ff bf90 	b.w	8005424 <_strtoul_l.constprop.0>

08005504 <_malloc_usable_size_r>:
 8005504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005508:	1f18      	subs	r0, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	bfbc      	itt	lt
 800550e:	580b      	ldrlt	r3, [r1, r0]
 8005510:	18c0      	addlt	r0, r0, r3
 8005512:	4770      	bx	lr

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
