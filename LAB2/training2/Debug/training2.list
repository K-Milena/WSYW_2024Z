
training2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004528  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00005760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00005768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800476c  0800476c  0000576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004770  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  080047e0  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080047e0  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ed6  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001766  00000000  00000000  0000ef76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  000106e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000769  00000000  00000000  00011080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a9a  00000000  00000000  000117e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a714  00000000  00000000  00027283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a452  00000000  00000000  00031997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbde9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  000bbe2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bf148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046b0 	.word	0x080046b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080046b0 	.word	0x080046b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000584:	f003 f888 	bl	8003698 <initialise_monitor_handles>
	printf("semihosting test \n");
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <main+0x3c>)
 800058a:	f003 fa2d 	bl	80039e8 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc65 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f819 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f969 	bl	800086c <MX_GPIO_Init>
  MX_TIM2_Init();
 800059a:	f000 f87f 	bl	800069c <MX_TIM2_Init>
  MX_TIM4_Init();
 800059e:	f000 f8ed 	bl	800077c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start_IT(&htim4);
 80005a2:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <main+0x40>)
 80005a4:	f001 fc30 	bl	8001e08 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <main+0x40>)
 80005ac:	f001 fce8 	bl	8001f80 <HAL_TIM_OC_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80005b0:	2100      	movs	r1, #0
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <main+0x44>)
 80005b4:	f001 fdee 	bl	8002194 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x38>
 80005bc:	080046c8 	.word	0x080046c8
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	2000008c 	.word	0x2000008c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	@ 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fae6 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	4a27      	ldr	r2, [pc, #156]	@ (8000694 <SystemClock_Config+0xcc>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005fc:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <SystemClock_Config+0xd0>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800063c:	23c0      	movs	r3, #192	@ 0xc0
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000640:	2304      	movs	r3, #4
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff27 	bl	80014a0 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 fa76 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2103      	movs	r1, #3
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f988 	bl	8001990 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000686:	f000 fa5f 	bl	8000b48 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006d0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80006d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80006dc:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80006e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f0:	4821      	ldr	r0, [pc, #132]	@ (8000778 <MX_TIM2_Init+0xdc>)
 80006f2:	f001 fb39 	bl	8001d68 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80006fc:	f000 fa24 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000704:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <MX_TIM2_Init+0xdc>)
 800070e:	f002 f843 	bl	8002798 <HAL_TIM_ConfigClockSource>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000718:	f000 fa16 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800071c:	4816      	ldr	r0, [pc, #88]	@ (8000778 <MX_TIM2_Init+0xdc>)
 800071e:	f001 fcdf 	bl	80020e0 <HAL_TIM_IC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000728:	f000 fa0e 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	480f      	ldr	r0, [pc, #60]	@ (8000778 <MX_TIM2_Init+0xdc>)
 800073c:	f002 fd12 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000746:	f000 f9ff 	bl	8000b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800074e:	2301      	movs	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_TIM2_Init+0xdc>)
 8000762:	f001 ff7d 	bl	8002660 <HAL_TIM_IC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800076c:	f000 f9ec 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000008c 	.word	0x2000008c

0800077c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	@ 0x38
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000868 <MX_TIM4_Init+0xec>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80007b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007b4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007c0:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007d4:	4823      	ldr	r0, [pc, #140]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007d6:	f001 fac7 	bl	8001d68 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80007e0:	f000 f9b2 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ee:	4619      	mov	r1, r3
 80007f0:	481c      	ldr	r0, [pc, #112]	@ (8000864 <MX_TIM4_Init+0xe8>)
 80007f2:	f001 ffd1 	bl	8002798 <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80007fc:	f000 f9a4 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000800:	4818      	ldr	r0, [pc, #96]	@ (8000864 <MX_TIM4_Init+0xe8>)
 8000802:	f001 fb63 	bl	8001ecc <HAL_TIM_OC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800080c:	f000 f99c 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4619      	mov	r1, r3
 800081e:	4811      	ldr	r0, [pc, #68]	@ (8000864 <MX_TIM4_Init+0xe8>)
 8000820:	f002 fca0 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800082a:	f000 f98d 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800082e:	2330      	movs	r3, #48	@ 0x30
 8000830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4807      	ldr	r0, [pc, #28]	@ (8000864 <MX_TIM4_Init+0xe8>)
 8000846:	f001 feaf 	bl	80025a8 <HAL_TIM_OC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000850:	f000 f97a 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <MX_TIM4_Init+0xe8>)
 8000856:	f000 fa11 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 800085a:	bf00      	nop
 800085c:	3738      	adds	r7, #56	@ 0x38
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000d4 	.word	0x200000d4
 8000868:	40000800 	.word	0x40000800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	4b9b      	ldr	r3, [pc, #620]	@ (8000af4 <MX_GPIO_Init+0x288>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a9a      	ldr	r2, [pc, #616]	@ (8000af4 <MX_GPIO_Init+0x288>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b98      	ldr	r3, [pc, #608]	@ (8000af4 <MX_GPIO_Init+0x288>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	4b94      	ldr	r3, [pc, #592]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a93      	ldr	r2, [pc, #588]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b91      	ldr	r3, [pc, #580]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b8d      	ldr	r3, [pc, #564]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a8c      	ldr	r2, [pc, #560]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b8a      	ldr	r3, [pc, #552]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b86      	ldr	r3, [pc, #536]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a85      	ldr	r2, [pc, #532]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b83      	ldr	r3, [pc, #524]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b7f      	ldr	r3, [pc, #508]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a7e      	ldr	r2, [pc, #504]	@ (8000af4 <MX_GPIO_Init+0x288>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b7c      	ldr	r3, [pc, #496]	@ (8000af4 <MX_GPIO_Init+0x288>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b78      	ldr	r3, [pc, #480]	@ (8000af4 <MX_GPIO_Init+0x288>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <MX_GPIO_Init+0x288>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b75      	ldr	r3, [pc, #468]	@ (8000af4 <MX_GPIO_Init+0x288>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2108      	movs	r1, #8
 800092e:	4872      	ldr	r0, [pc, #456]	@ (8000af8 <MX_GPIO_Init+0x28c>)
 8000930:	f000 fd9c 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2101      	movs	r1, #1
 8000938:	4870      	ldr	r0, [pc, #448]	@ (8000afc <MX_GPIO_Init+0x290>)
 800093a:	f000 fd97 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8000944:	486e      	ldr	r0, [pc, #440]	@ (8000b00 <MX_GPIO_Init+0x294>)
 8000946:	f000 fd91 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094a:	2304      	movs	r3, #4
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4866      	ldr	r0, [pc, #408]	@ (8000af8 <MX_GPIO_Init+0x28c>)
 800095e:	f000 fc01 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000962:	2308      	movs	r3, #8
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	485f      	ldr	r0, [pc, #380]	@ (8000af8 <MX_GPIO_Init+0x28c>)
 800097a:	f000 fbf3 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800097e:	2332      	movs	r3, #50	@ 0x32
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000982:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4859      	ldr	r0, [pc, #356]	@ (8000af8 <MX_GPIO_Init+0x28c>)
 8000994:	f000 fbe6 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000998:	2301      	movs	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4853      	ldr	r0, [pc, #332]	@ (8000afc <MX_GPIO_Init+0x290>)
 80009b0:	f000 fbd8 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009b4:	2308      	movs	r3, #8
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009c4:	2305      	movs	r3, #5
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	484b      	ldr	r0, [pc, #300]	@ (8000afc <MX_GPIO_Init+0x290>)
 80009d0:	f000 fbc8 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009d4:	2310      	movs	r3, #16
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e4:	2306      	movs	r3, #6
 80009e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4845      	ldr	r0, [pc, #276]	@ (8000b04 <MX_GPIO_Init+0x298>)
 80009f0:	f000 fbb8 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009f4:	23e0      	movs	r3, #224	@ 0xe0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a04:	2305      	movs	r3, #5
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	483d      	ldr	r0, [pc, #244]	@ (8000b04 <MX_GPIO_Init+0x298>)
 8000a10:	f000 fba8 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a26:	2305      	movs	r3, #5
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4835      	ldr	r0, [pc, #212]	@ (8000b08 <MX_GPIO_Init+0x29c>)
 8000a32:	f000 fb97 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000a36:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <MX_GPIO_Init+0x294>)
 8000a50:	f000 fb88 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a54:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a66:	2306      	movs	r3, #6
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4822      	ldr	r0, [pc, #136]	@ (8000afc <MX_GPIO_Init+0x290>)
 8000a72:	f000 fb77 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481e      	ldr	r0, [pc, #120]	@ (8000b04 <MX_GPIO_Init+0x298>)
 8000a8c:	f000 fb6a 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a90:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4815      	ldr	r0, [pc, #84]	@ (8000b04 <MX_GPIO_Init+0x298>)
 8000aae:	f000 fb59 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480e      	ldr	r0, [pc, #56]	@ (8000b00 <MX_GPIO_Init+0x294>)
 8000ac6:	f000 fb4d 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000adc:	2304      	movs	r3, #4
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	@ (8000b08 <MX_GPIO_Init+0x29c>)
 8000ae8:	f000 fb3c 	bl	8001164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	@ 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
uint32_t click_counter = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <HAL_TIM_IC_CaptureCallback+0x30>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d10a      	bne.n	8000b32 <HAL_TIM_IC_CaptureCallback+0x26>
	{
		click_counter++;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000b24:	6013      	str	r3, [r2, #0]
		printf("You clicked the button %d times. \n", click_counter);
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000b2e:	f002 fef3 	bl	8003918 <iprintf>

	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000008c 	.word	0x2000008c
 8000b40:	2000011c 	.word	0x2000011c
 8000b44:	080046dc 	.word	0x080046dc

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 faa4 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc4:	d134      	bne.n	8000c30 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd6:	4b26      	ldr	r3, [pc, #152]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a21      	ldr	r2, [pc, #132]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4816      	ldr	r0, [pc, #88]	@ (8000c74 <HAL_TIM_Base_MspInit+0xd0>)
 8000c1a:	f000 faa3 	bl	8001164 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	201c      	movs	r0, #28
 8000c24:	f000 fa67 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c28:	201c      	movs	r0, #28
 8000c2a:	f000 fa80 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c2e:	e01a      	b.n	8000c66 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM4)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <HAL_TIM_Base_MspInit+0xd4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d115      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a0b      	ldr	r2, [pc, #44]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <HAL_TIM_Base_MspInit+0xcc>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201e      	movs	r0, #30
 8000c5c:	f000 fa4b 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c60:	201e      	movs	r0, #30
 8000c62:	f000 fa64 	bl	800112e <HAL_NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40000800 	.word	0x40000800

08000c7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <HAL_TIM_MspPostInit+0x68>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11e      	bne.n	8000cdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_TIM_MspPostInit+0x6c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <HAL_TIM_MspPostInit+0x70>)
 8000cd8:	f000 fa44 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020c00 	.word	0x40020c00

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f8db 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM2_IRQHandler+0x10>)
 8000d56:	f001 fb37 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000008c 	.word	0x2000008c

08000d64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <TIM4_IRQHandler+0x10>)
 8000d6a:	f001 fb2d 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000d4 	.word	0x200000d4

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f002 ff4c 	bl	8003c44 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000120 	.word	0x20000120
 8000de0:	20000320 	.word	0x20000320

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 ff0b 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fba1 	bl	8000580 <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e4c:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 8000e50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e54:	20000320 	.word	0x20000320

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <HAL_Init+0x40>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_Init+0x40>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x40>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f92b 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fe60 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f943 	bl	800114a <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000124 	.word	0x20000124

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000124 	.word	0x20000124

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	@ 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e159      	b.n	8001434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	f040 8148 	bne.w	800142e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b03      	cmp	r3, #3
 8001222:	d017      	beq.n	8001254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d123      	bne.n	80012a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	220f      	movs	r2, #15
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691a      	ldr	r2, [r3, #16]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	69b9      	ldr	r1, [r7, #24]
 80012a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a2 	beq.w	800142e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b57      	ldr	r3, [pc, #348]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001306:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	220f      	movs	r2, #15
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x202>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a48      	ldr	r2, [pc, #288]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1fe>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a47      	ldr	r2, [pc, #284]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x1fa>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a46      	ldr	r2, [pc, #280]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x1f6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a45      	ldr	r2, [pc, #276]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x1f2>
 8001352:	2304      	movs	r3, #4
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001356:	2307      	movs	r3, #7
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x204>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x204>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001378:	4935      	ldr	r1, [pc, #212]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001386:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d4:	4a24      	ldr	r2, [pc, #144]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <HAL_GPIO_Init+0x304>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_GPIO_Init+0x304>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f aea2 	bls.w	8001180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001488:	e003      	b.n	8001492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e267      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014be:	4b88      	ldr	r3, [pc, #544]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d00c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b85      	ldr	r3, [pc, #532]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d112      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b82      	ldr	r3, [pc, #520]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b7e      	ldr	r3, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e242      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x74>
 8001506:	4b76      	ldr	r3, [pc, #472]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a75      	ldr	r2, [pc, #468]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6f      	ldr	r2, [pc, #444]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6d      	ldr	r3, [pc, #436]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6c      	ldr	r2, [pc, #432]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001538:	4b69      	ldr	r3, [pc, #420]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a68      	ldr	r2, [pc, #416]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fce6 	bl	8000f28 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fce2 	bl	8000f28 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e207      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5b      	ldr	r3, [pc, #364]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xc0>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcd2 	bl	8000f28 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fcce 	bl	8000f28 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1f3      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b51      	ldr	r3, [pc, #324]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015b6:	4b4a      	ldr	r3, [pc, #296]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b44      	ldr	r3, [pc, #272]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c7      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4937      	ldr	r1, [pc, #220]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fc87 	bl	8000f28 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fc83 	bl	8000f28 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1a8      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b28      	ldr	r3, [pc, #160]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4925      	ldr	r1, [pc, #148]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fc66 	bl	8000f28 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fc62 	bl	8000f28 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e187      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d016      	beq.n	80016c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_RCC_OscConfig+0x248>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fc46 	bl	8000f28 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc42 	bl	8000f28 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e167      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <HAL_RCC_OscConfig+0x240>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x200>
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_RCC_OscConfig+0x248>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fc2f 	bl	8000f28 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e00e      	b.n	80016ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc2b 	bl	8000f28 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d907      	bls.n	80016ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e150      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	42470000 	.word	0x42470000
 80016e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ea      	bne.n	80016ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8097 	beq.w	8001834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170a:	4b81      	ldr	r3, [pc, #516]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a7c      	ldr	r2, [pc, #496]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b7a      	ldr	r3, [pc, #488]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001732:	2301      	movs	r3, #1
 8001734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b77      	ldr	r3, [pc, #476]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b74      	ldr	r3, [pc, #464]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a73      	ldr	r2, [pc, #460]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff fbeb 	bl	8000f28 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff fbe7 	bl	8000f28 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e10c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <HAL_RCC_OscConfig+0x474>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x2ea>
 800177c:	4b64      	ldr	r3, [pc, #400]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001780:	4a63      	ldr	r2, [pc, #396]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	@ 0x70
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x30c>
 8001792:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001796:	4a5e      	ldr	r2, [pc, #376]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	@ 0x70
 800179e:	4b5c      	ldr	r3, [pc, #368]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 80017ac:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b0:	4a57      	ldr	r2, [pc, #348]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b8:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017bc:	4a54      	ldr	r2, [pc, #336]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d015      	beq.n	80017f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fbac 	bl	8000f28 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fba8 	bl	8000f28 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0cb      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ee      	beq.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb96 	bl	8000f28 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fb92 	bl	8000f28 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0b5      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ee      	bne.n	8001800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a1 	beq.w	8001980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d05c      	beq.n	8001904 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d141      	bne.n	80018d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb66 	bl	8000f28 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb62 	bl	8000f28 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e087      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	491b      	ldr	r1, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fb3b 	bl	8000f28 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fb37 	bl	8000f28 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e05c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x416>
 80018d4:	e054      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb24 	bl	8000f28 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fb20 	bl	8000f28 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e045      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
 8001902:	e03d      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e038      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000
 8001918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x4ec>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d028      	beq.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d121      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d90c      	bls.n	80019cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b65      	ldr	r3, [pc, #404]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a58      	ldr	r2, [pc, #352]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a52      	ldr	r2, [pc, #328]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d044      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e067      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4934      	ldr	r1, [pc, #208]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff fa52 	bl	8000f28 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff fa4e 	bl	8000f28 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d20c      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b22      	ldr	r3, [pc, #136]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f821 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490a      	ldr	r1, [pc, #40]	@ (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f9b2 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08004700 	.word	0x08004700
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b094      	sub	sp, #80	@ 0x50
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b74:	4b79      	ldr	r3, [pc, #484]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d00d      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	f200 80e1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8e:	e0db      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b94:	e0db      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b73      	ldr	r3, [pc, #460]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b9a:	e0d8      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6139      	str	r1, [r7, #16]
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c00:	4659      	mov	r1, fp
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4651      	mov	r1, sl
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4651      	mov	r1, sl
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ebb2 0801 	subs.w	r8, r2, r1
 8001c14:	4659      	mov	r1, fp
 8001c16:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	eb18 0303 	adds.w	r3, r8, r3
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	eb49 0303 	adc.w	r3, r9, r3
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	024b      	lsls	r3, r1, #9
 8001c52:	4621      	mov	r1, r4
 8001c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c58:	4621      	mov	r1, r4
 8001c5a:	024a      	lsls	r2, r1, #9
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c62:	2200      	movs	r2, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c6c:	f7fe fb10 	bl	8000290 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c78:	e058      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	4611      	mov	r1, r2
 8001c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c94:	4642      	mov	r2, r8
 8001c96:	464b      	mov	r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0159      	lsls	r1, r3, #5
 8001ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca6:	0150      	lsls	r0, r2, #5
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d16:	2200      	movs	r2, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d20:	f7fe fab6 	bl	8000290 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3750      	adds	r7, #80	@ 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e041      	b.n	8001dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe ff08 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 fde6 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d001      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e044      	b.n	8001eaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x6c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e4a:	d013      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x6c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xb4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x6c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x6c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x6c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d010      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	e007      	b.n	8001ea8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40014000 	.word	0x40014000

08001ecc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e041      	b.n	8001f62 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f839 	bl	8001f6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 fd34 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_TIM_OC_Start+0x24>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e022      	b.n	8001fea <HAL_TIM_OC_Start+0x6a>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d109      	bne.n	8001fbe <HAL_TIM_OC_Start+0x3e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	e015      	b.n	8001fea <HAL_TIM_OC_Start+0x6a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d109      	bne.n	8001fd8 <HAL_TIM_OC_Start+0x58>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e008      	b.n	8001fea <HAL_TIM_OC_Start+0x6a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	bf14      	ite	ne
 8001fe4:	2301      	movne	r3, #1
 8001fe6:	2300      	moveq	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e068      	b.n	80020c4 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <HAL_TIM_OC_Start+0x82>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002000:	e013      	b.n	800202a <HAL_TIM_OC_Start+0xaa>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d104      	bne.n	8002012 <HAL_TIM_OC_Start+0x92>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002010:	e00b      	b.n	800202a <HAL_TIM_OC_Start+0xaa>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d104      	bne.n	8002022 <HAL_TIM_OC_Start+0xa2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002020:	e003      	b.n	800202a <HAL_TIM_OC_Start+0xaa>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f001 f870 	bl	8003118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <HAL_TIM_OC_Start+0x14c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d107      	bne.n	8002052 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1d      	ldr	r2, [pc, #116]	@ (80020cc <HAL_TIM_OC_Start+0x14c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d018      	beq.n	800208e <HAL_TIM_OC_Start+0x10e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002064:	d013      	beq.n	800208e <HAL_TIM_OC_Start+0x10e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a19      	ldr	r2, [pc, #100]	@ (80020d0 <HAL_TIM_OC_Start+0x150>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00e      	beq.n	800208e <HAL_TIM_OC_Start+0x10e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <HAL_TIM_OC_Start+0x154>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_TIM_OC_Start+0x10e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_TIM_OC_Start+0x158>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_TIM_OC_Start+0x10e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <HAL_TIM_OC_Start+0x15c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d111      	bne.n	80020b2 <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b06      	cmp	r3, #6
 800209e:	d010      	beq.n	80020c2 <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b0:	e007      	b.n	80020c2 <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40014000 	.word	0x40014000

080020e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e041      	b.n	8002176 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f839 	bl	800217e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f000 fc2a 	bl	8002978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_IC_Start_IT+0x1e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e013      	b.n	80021da <HAL_TIM_IC_Start_IT+0x46>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_IC_Start_IT+0x2e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	e00b      	b.n	80021da <HAL_TIM_IC_Start_IT+0x46>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d104      	bne.n	80021d2 <HAL_TIM_IC_Start_IT+0x3e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	e003      	b.n	80021da <HAL_TIM_IC_Start_IT+0x46>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d104      	bne.n	80021ec <HAL_TIM_IC_Start_IT+0x58>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e013      	b.n	8002214 <HAL_TIM_IC_Start_IT+0x80>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d104      	bne.n	80021fc <HAL_TIM_IC_Start_IT+0x68>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e00b      	b.n	8002214 <HAL_TIM_IC_Start_IT+0x80>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d104      	bne.n	800220c <HAL_TIM_IC_Start_IT+0x78>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e003      	b.n	8002214 <HAL_TIM_IC_Start_IT+0x80>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002212:	b2db      	uxtb	r3, r3
 8002214:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002216:	7bbb      	ldrb	r3, [r7, #14]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800221c:	7b7b      	ldrb	r3, [r7, #13]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0c2      	b.n	80023ac <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_TIM_IC_Start_IT+0xa2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002234:	e013      	b.n	800225e <HAL_TIM_IC_Start_IT+0xca>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d104      	bne.n	8002246 <HAL_TIM_IC_Start_IT+0xb2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002244:	e00b      	b.n	800225e <HAL_TIM_IC_Start_IT+0xca>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d104      	bne.n	8002256 <HAL_TIM_IC_Start_IT+0xc2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002254:	e003      	b.n	800225e <HAL_TIM_IC_Start_IT+0xca>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d104      	bne.n	800226e <HAL_TIM_IC_Start_IT+0xda>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800226c:	e013      	b.n	8002296 <HAL_TIM_IC_Start_IT+0x102>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d104      	bne.n	800227e <HAL_TIM_IC_Start_IT+0xea>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800227c:	e00b      	b.n	8002296 <HAL_TIM_IC_Start_IT+0x102>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d104      	bne.n	800228e <HAL_TIM_IC_Start_IT+0xfa>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800228c:	e003      	b.n	8002296 <HAL_TIM_IC_Start_IT+0x102>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d841      	bhi.n	8002320 <HAL_TIM_IC_Start_IT+0x18c>
 800229c:	a201      	add	r2, pc, #4	@ (adr r2, 80022a4 <HAL_TIM_IC_Start_IT+0x110>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022d9 	.word	0x080022d9
 80022a8:	08002321 	.word	0x08002321
 80022ac:	08002321 	.word	0x08002321
 80022b0:	08002321 	.word	0x08002321
 80022b4:	080022eb 	.word	0x080022eb
 80022b8:	08002321 	.word	0x08002321
 80022bc:	08002321 	.word	0x08002321
 80022c0:	08002321 	.word	0x08002321
 80022c4:	080022fd 	.word	0x080022fd
 80022c8:	08002321 	.word	0x08002321
 80022cc:	08002321 	.word	0x08002321
 80022d0:	08002321 	.word	0x08002321
 80022d4:	0800230f 	.word	0x0800230f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0202 	orr.w	r2, r2, #2
 80022e6:	60da      	str	r2, [r3, #12]
      break;
 80022e8:	e01d      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	60da      	str	r2, [r3, #12]
      break;
 80022fa:	e014      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	60da      	str	r2, [r3, #12]
      break;
 800230c:	e00b      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0210 	orr.w	r2, r2, #16
 800231c:	60da      	str	r2, [r3, #12]
      break;
 800231e:	e002      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      break;
 8002324:	bf00      	nop
  }

  if (status == HAL_OK)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d13e      	bne.n	80023aa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 feef 	bl	8003118 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1d      	ldr	r2, [pc, #116]	@ (80023b4 <HAL_TIM_IC_Start_IT+0x220>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d018      	beq.n	8002376 <HAL_TIM_IC_Start_IT+0x1e2>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234c:	d013      	beq.n	8002376 <HAL_TIM_IC_Start_IT+0x1e2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <HAL_TIM_IC_Start_IT+0x224>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00e      	beq.n	8002376 <HAL_TIM_IC_Start_IT+0x1e2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_TIM_IC_Start_IT+0x228>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d009      	beq.n	8002376 <HAL_TIM_IC_Start_IT+0x1e2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <HAL_TIM_IC_Start_IT+0x22c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_TIM_IC_Start_IT+0x1e2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a14      	ldr	r2, [pc, #80]	@ (80023c4 <HAL_TIM_IC_Start_IT+0x230>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d111      	bne.n	800239a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b06      	cmp	r3, #6
 8002386:	d010      	beq.n	80023aa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002398:	e007      	b.n	80023aa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40014000 	.word	0x40014000

080023c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d020      	beq.n	800242c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0202 	mvn.w	r2, #2
 80023fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fb7a 	bl	8000b0c <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa8d 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fa94 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0204 	mvn.w	r2, #4
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fb54 	bl	8000b0c <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa67 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fa6e 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d020      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0208 	mvn.w	r2, #8
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fb2e 	bl	8000b0c <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa41 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fa48 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d020      	beq.n	8002510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fb08 	bl	8000b0c <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa1b 	bl	800293a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 fa22 	bl	800294e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0201 	mvn.w	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9f9 	bl	8002926 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fe7e 	bl	8003254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9f3 	bl	8002962 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0220 	mvn.w	r2, #32
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fe50 	bl	8003240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e048      	b.n	8002658 <HAL_TIM_OC_ConfigChannel+0xb0>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	d839      	bhi.n	8002648 <HAL_TIM_OC_ConfigChannel+0xa0>
 80025d4:	a201      	add	r2, pc, #4	@ (adr r2, 80025dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	08002611 	.word	0x08002611
 80025e0:	08002649 	.word	0x08002649
 80025e4:	08002649 	.word	0x08002649
 80025e8:	08002649 	.word	0x08002649
 80025ec:	0800261f 	.word	0x0800261f
 80025f0:	08002649 	.word	0x08002649
 80025f4:	08002649 	.word	0x08002649
 80025f8:	08002649 	.word	0x08002649
 80025fc:	0800262d 	.word	0x0800262d
 8002600:	08002649 	.word	0x08002649
 8002604:	08002649 	.word	0x08002649
 8002608:	08002649 	.word	0x08002649
 800260c:	0800263b 	.word	0x0800263b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fa3a 	bl	8002a90 <TIM_OC1_SetConfig>
      break;
 800261c:	e017      	b.n	800264e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fa99 	bl	8002b5c <TIM_OC2_SetConfig>
      break;
 800262a:	e010      	b.n	800264e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fafe 	bl	8002c34 <TIM_OC3_SetConfig>
      break;
 8002638:	e009      	b.n	800264e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fb61 	bl	8002d08 <TIM_OC4_SetConfig>
      break;
 8002646:	e002      	b.n	800264e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	75fb      	strb	r3, [r7, #23]
      break;
 800264c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_TIM_IC_ConfigChannel+0x1e>
 800267a:	2302      	movs	r3, #2
 800267c:	e088      	b.n	8002790 <HAL_TIM_IC_ConfigChannel+0x130>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11b      	bne.n	80026c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800269c:	f000 fb84 	bl	8002da8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 020c 	bic.w	r2, r2, #12
 80026ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6999      	ldr	r1, [r3, #24]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	619a      	str	r2, [r3, #24]
 80026c2:	e060      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d11c      	bne.n	8002704 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026da:	f000 fbfc 	bl	8002ed6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6999      	ldr	r1, [r3, #24]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	021a      	lsls	r2, r3, #8
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	619a      	str	r2, [r3, #24]
 8002702:	e040      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11b      	bne.n	8002742 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800271a:	f000 fc49 	bl	8002fb0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 020c 	bic.w	r2, r2, #12
 800272c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69d9      	ldr	r1, [r3, #28]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
 8002740:	e021      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d11c      	bne.n	8002782 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002758:	f000 fc66 	bl	8003028 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800276a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69d9      	ldr	r1, [r3, #28]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	021a      	lsls	r2, r3, #8
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
 8002780:	e001      	b.n	8002786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_ConfigClockSource+0x1c>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0b4      	b.n	800291e <HAL_TIM_ConfigClockSource+0x186>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027ec:	d03e      	beq.n	800286c <HAL_TIM_ConfigClockSource+0xd4>
 80027ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027f2:	f200 8087 	bhi.w	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027fa:	f000 8086 	beq.w	800290a <HAL_TIM_ConfigClockSource+0x172>
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002802:	d87f      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b70      	cmp	r3, #112	@ 0x70
 8002806:	d01a      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xa6>
 8002808:	2b70      	cmp	r3, #112	@ 0x70
 800280a:	d87b      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b60      	cmp	r3, #96	@ 0x60
 800280e:	d050      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002810:	2b60      	cmp	r3, #96	@ 0x60
 8002812:	d877      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b50      	cmp	r3, #80	@ 0x50
 8002816:	d03c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xfa>
 8002818:	2b50      	cmp	r3, #80	@ 0x50
 800281a:	d873      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b40      	cmp	r3, #64	@ 0x40
 800281e:	d058      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d86f      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b30      	cmp	r3, #48	@ 0x30
 8002826:	d064      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002828:	2b30      	cmp	r3, #48	@ 0x30
 800282a:	d86b      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d060      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d867      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d05c      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002838:	2b10      	cmp	r3, #16
 800283a:	d05a      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	e062      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800284e:	f000 fc43 	bl	80030d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
      break;
 800286a:	e04f      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800287c:	f000 fc2c 	bl	80030d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800288e:	609a      	str	r2, [r3, #8]
      break;
 8002890:	e03c      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 faea 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2150      	movs	r1, #80	@ 0x50
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fbf9 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e02c      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028be:	461a      	mov	r2, r3
 80028c0:	f000 fb46 	bl	8002f50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2160      	movs	r1, #96	@ 0x60
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fbe9 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e01c      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 faca 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2140      	movs	r1, #64	@ 0x40
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fbd9 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 80028f0:	e00c      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 fbd0 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002902:	e003      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e000      	b.n	800290c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800290a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a74 <TIM_Base_SetConfig+0xfc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00f      	beq.n	80029b0 <TIM_Base_SetConfig+0x38>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002996:	d00b      	beq.n	80029b0 <TIM_Base_SetConfig+0x38>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a37      	ldr	r2, [pc, #220]	@ (8002a78 <TIM_Base_SetConfig+0x100>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0x38>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a36      	ldr	r2, [pc, #216]	@ (8002a7c <TIM_Base_SetConfig+0x104>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0x38>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a35      	ldr	r2, [pc, #212]	@ (8002a80 <TIM_Base_SetConfig+0x108>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d108      	bne.n	80029c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <TIM_Base_SetConfig+0xfc>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01b      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d0:	d017      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <TIM_Base_SetConfig+0x100>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a27      	ldr	r2, [pc, #156]	@ (8002a7c <TIM_Base_SetConfig+0x104>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00f      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a26      	ldr	r2, [pc, #152]	@ (8002a80 <TIM_Base_SetConfig+0x108>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00b      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a25      	ldr	r2, [pc, #148]	@ (8002a84 <TIM_Base_SetConfig+0x10c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a24      	ldr	r2, [pc, #144]	@ (8002a88 <TIM_Base_SetConfig+0x110>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_Base_SetConfig+0x8a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a23      	ldr	r2, [pc, #140]	@ (8002a8c <TIM_Base_SetConfig+0x114>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d108      	bne.n	8002a14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a74 <TIM_Base_SetConfig+0xfc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d105      	bne.n	8002a66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f023 0201 	bic.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
  }
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800

08002a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 0201 	bic.w	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0303 	bic.w	r3, r3, #3
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f023 0302 	bic.w	r3, r3, #2
 8002ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b58 <TIM_OC1_SetConfig+0xc8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10c      	bne.n	8002b06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0308 	bic.w	r3, r3, #8
 8002af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 0304 	bic.w	r3, r3, #4
 8002b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a13      	ldr	r2, [pc, #76]	@ (8002b58 <TIM_OC1_SetConfig+0xc8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d111      	bne.n	8002b32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40010000 	.word	0x40010000

08002b5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f023 0210 	bic.w	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0320 	bic.w	r3, r3, #32
 8002ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c30 <TIM_OC2_SetConfig+0xd4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10d      	bne.n	8002bd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a15      	ldr	r2, [pc, #84]	@ (8002c30 <TIM_OC2_SetConfig+0xd4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d113      	bne.n	8002c08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40010000 	.word	0x40010000

08002c34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <TIM_OC3_SetConfig+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10d      	bne.n	8002cae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <TIM_OC3_SetConfig+0xd0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40010000 	.word	0x40010000

08002d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a10      	ldr	r2, [pc, #64]	@ (8002da4 <TIM_OC4_SetConfig+0x9c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000

08002da8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 0201 	bic.w	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a24      	ldr	r2, [pc, #144]	@ (8002e64 <TIM_TI1_SetConfig+0xbc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <TIM_TI1_SetConfig+0x56>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ddc:	d00f      	beq.n	8002dfe <TIM_TI1_SetConfig+0x56>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <TIM_TI1_SetConfig+0xc0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_TI1_SetConfig+0x56>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a20      	ldr	r2, [pc, #128]	@ (8002e6c <TIM_TI1_SetConfig+0xc4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_TI1_SetConfig+0x56>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <TIM_TI1_SetConfig+0xc8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_TI1_SetConfig+0x56>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e74 <TIM_TI1_SetConfig+0xcc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <TIM_TI1_SetConfig+0x5a>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <TIM_TI1_SetConfig+0x5c>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e003      	b.n	8002e22 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f023 030a 	bic.w	r3, r3, #10
 8002e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f003 030a 	and.w	r3, r3, #10
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40000c00 	.word	0x40000c00
 8002e74:	40014000 	.word	0x40014000

08002e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0201 	bic.w	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f023 030a 	bic.w	r3, r3, #10
 8002eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]
}
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b087      	sub	sp, #28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0210 	bic.w	r2, r3, #16
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	031b      	lsls	r3, r3, #12
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	621a      	str	r2, [r3, #32]
}
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	031b      	lsls	r3, r3, #12
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f023 0303 	bic.w	r3, r3, #3
 8002fdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003000:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	621a      	str	r2, [r3, #32]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003054:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003066:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	031b      	lsls	r3, r3, #12
 800306c:	b29b      	uxth	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800307a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	031b      	lsls	r3, r3, #12
 8003080:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 0307 	orr.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2201      	movs	r2, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1a      	ldr	r2, [r3, #32]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e050      	b.n	800321e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1c      	ldr	r2, [pc, #112]	@ (800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d018      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c8:	d013      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a18      	ldr	r2, [pc, #96]	@ (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a16      	ldr	r2, [pc, #88]	@ (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a15      	ldr	r2, [pc, #84]	@ (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a13      	ldr	r2, [pc, #76]	@ (800323c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10c      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00
 800323c:	40014000 	.word	0x40014000

08003240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <findslot>:
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <findslot+0x2c>)
 800326a:	b510      	push	{r4, lr}
 800326c:	4604      	mov	r4, r0
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	b118      	cbz	r0, 800327a <findslot+0x12>
 8003272:	6a03      	ldr	r3, [r0, #32]
 8003274:	b90b      	cbnz	r3, 800327a <findslot+0x12>
 8003276:	f000 fb19 	bl	80038ac <__sinit>
 800327a:	2c13      	cmp	r4, #19
 800327c:	d807      	bhi.n	800328e <findslot+0x26>
 800327e:	4806      	ldr	r0, [pc, #24]	@ (8003298 <findslot+0x30>)
 8003280:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003284:	3201      	adds	r2, #1
 8003286:	d002      	beq.n	800328e <findslot+0x26>
 8003288:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800328c:	bd10      	pop	{r4, pc}
 800328e:	2000      	movs	r0, #0
 8003290:	e7fc      	b.n	800328c <findslot+0x24>
 8003292:	bf00      	nop
 8003294:	20000020 	.word	0x20000020
 8003298:	20000134 	.word	0x20000134

0800329c <error>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	4604      	mov	r4, r0
 80032a0:	f000 fcd0 	bl	8003c44 <__errno>
 80032a4:	2613      	movs	r6, #19
 80032a6:	4605      	mov	r5, r0
 80032a8:	2700      	movs	r7, #0
 80032aa:	4630      	mov	r0, r6
 80032ac:	4639      	mov	r1, r7
 80032ae:	beab      	bkpt	0x00ab
 80032b0:	4606      	mov	r6, r0
 80032b2:	602e      	str	r6, [r5, #0]
 80032b4:	4620      	mov	r0, r4
 80032b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032b8 <checkerror>:
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d101      	bne.n	80032c0 <checkerror+0x8>
 80032bc:	f7ff bfee 	b.w	800329c <error>
 80032c0:	4770      	bx	lr

080032c2 <_swiread>:
 80032c2:	b530      	push	{r4, r5, lr}
 80032c4:	b085      	sub	sp, #20
 80032c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80032ca:	9203      	str	r2, [sp, #12]
 80032cc:	2406      	movs	r4, #6
 80032ce:	ad01      	add	r5, sp, #4
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	beab      	bkpt	0x00ab
 80032d6:	4604      	mov	r4, r0
 80032d8:	4620      	mov	r0, r4
 80032da:	f7ff ffed 	bl	80032b8 <checkerror>
 80032de:	b005      	add	sp, #20
 80032e0:	bd30      	pop	{r4, r5, pc}

080032e2 <_read>:
 80032e2:	b570      	push	{r4, r5, r6, lr}
 80032e4:	460e      	mov	r6, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	f7ff ffbe 	bl	8003268 <findslot>
 80032ec:	4605      	mov	r5, r0
 80032ee:	b930      	cbnz	r0, 80032fe <_read+0x1c>
 80032f0:	f000 fca8 	bl	8003c44 <__errno>
 80032f4:	2309      	movs	r3, #9
 80032f6:	6003      	str	r3, [r0, #0]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	bd70      	pop	{r4, r5, r6, pc}
 80032fe:	6800      	ldr	r0, [r0, #0]
 8003300:	4622      	mov	r2, r4
 8003302:	4631      	mov	r1, r6
 8003304:	f7ff ffdd 	bl	80032c2 <_swiread>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d0f5      	beq.n	80032f8 <_read+0x16>
 800330c:	686b      	ldr	r3, [r5, #4]
 800330e:	1a20      	subs	r0, r4, r0
 8003310:	4403      	add	r3, r0
 8003312:	606b      	str	r3, [r5, #4]
 8003314:	e7f2      	b.n	80032fc <_read+0x1a>

08003316 <_swilseek>:
 8003316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	4616      	mov	r6, r2
 800331c:	f7ff ffa4 	bl	8003268 <findslot>
 8003320:	4605      	mov	r5, r0
 8003322:	b940      	cbnz	r0, 8003336 <_swilseek+0x20>
 8003324:	f000 fc8e 	bl	8003c44 <__errno>
 8003328:	2309      	movs	r3, #9
 800332a:	6003      	str	r3, [r0, #0]
 800332c:	f04f 34ff 	mov.w	r4, #4294967295
 8003330:	4620      	mov	r0, r4
 8003332:	b003      	add	sp, #12
 8003334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003336:	2e02      	cmp	r6, #2
 8003338:	d903      	bls.n	8003342 <_swilseek+0x2c>
 800333a:	f000 fc83 	bl	8003c44 <__errno>
 800333e:	2316      	movs	r3, #22
 8003340:	e7f3      	b.n	800332a <_swilseek+0x14>
 8003342:	2e01      	cmp	r6, #1
 8003344:	d112      	bne.n	800336c <_swilseek+0x56>
 8003346:	6843      	ldr	r3, [r0, #4]
 8003348:	18e4      	adds	r4, r4, r3
 800334a:	d4f6      	bmi.n	800333a <_swilseek+0x24>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	260a      	movs	r6, #10
 8003350:	e9cd 3400 	strd	r3, r4, [sp]
 8003354:	466f      	mov	r7, sp
 8003356:	4630      	mov	r0, r6
 8003358:	4639      	mov	r1, r7
 800335a:	beab      	bkpt	0x00ab
 800335c:	4606      	mov	r6, r0
 800335e:	4630      	mov	r0, r6
 8003360:	f7ff ffaa 	bl	80032b8 <checkerror>
 8003364:	2800      	cmp	r0, #0
 8003366:	dbe1      	blt.n	800332c <_swilseek+0x16>
 8003368:	606c      	str	r4, [r5, #4]
 800336a:	e7e1      	b.n	8003330 <_swilseek+0x1a>
 800336c:	2e02      	cmp	r6, #2
 800336e:	6803      	ldr	r3, [r0, #0]
 8003370:	d1ec      	bne.n	800334c <_swilseek+0x36>
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	260c      	movs	r6, #12
 8003376:	466f      	mov	r7, sp
 8003378:	4630      	mov	r0, r6
 800337a:	4639      	mov	r1, r7
 800337c:	beab      	bkpt	0x00ab
 800337e:	4606      	mov	r6, r0
 8003380:	4630      	mov	r0, r6
 8003382:	f7ff ff99 	bl	80032b8 <checkerror>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d0d0      	beq.n	800332c <_swilseek+0x16>
 800338a:	4404      	add	r4, r0
 800338c:	e7de      	b.n	800334c <_swilseek+0x36>

0800338e <_lseek>:
 800338e:	f7ff bfc2 	b.w	8003316 <_swilseek>

08003392 <_swiwrite>:
 8003392:	b530      	push	{r4, r5, lr}
 8003394:	b085      	sub	sp, #20
 8003396:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800339a:	9203      	str	r2, [sp, #12]
 800339c:	2405      	movs	r4, #5
 800339e:	ad01      	add	r5, sp, #4
 80033a0:	4620      	mov	r0, r4
 80033a2:	4629      	mov	r1, r5
 80033a4:	beab      	bkpt	0x00ab
 80033a6:	4604      	mov	r4, r0
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff ff85 	bl	80032b8 <checkerror>
 80033ae:	b005      	add	sp, #20
 80033b0:	bd30      	pop	{r4, r5, pc}

080033b2 <_write>:
 80033b2:	b570      	push	{r4, r5, r6, lr}
 80033b4:	460e      	mov	r6, r1
 80033b6:	4615      	mov	r5, r2
 80033b8:	f7ff ff56 	bl	8003268 <findslot>
 80033bc:	4604      	mov	r4, r0
 80033be:	b930      	cbnz	r0, 80033ce <_write+0x1c>
 80033c0:	f000 fc40 	bl	8003c44 <__errno>
 80033c4:	2309      	movs	r3, #9
 80033c6:	6003      	str	r3, [r0, #0]
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	6800      	ldr	r0, [r0, #0]
 80033d0:	462a      	mov	r2, r5
 80033d2:	4631      	mov	r1, r6
 80033d4:	f7ff ffdd 	bl	8003392 <_swiwrite>
 80033d8:	1e03      	subs	r3, r0, #0
 80033da:	dbf5      	blt.n	80033c8 <_write+0x16>
 80033dc:	6862      	ldr	r2, [r4, #4]
 80033de:	1ae8      	subs	r0, r5, r3
 80033e0:	4402      	add	r2, r0
 80033e2:	42ab      	cmp	r3, r5
 80033e4:	6062      	str	r2, [r4, #4]
 80033e6:	d1f1      	bne.n	80033cc <_write+0x1a>
 80033e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7ff bf55 	b.w	800329c <error>

080033f2 <_swiclose>:
 80033f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033f4:	2402      	movs	r4, #2
 80033f6:	9001      	str	r0, [sp, #4]
 80033f8:	ad01      	add	r5, sp, #4
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	beab      	bkpt	0x00ab
 8003400:	4604      	mov	r4, r0
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff58 	bl	80032b8 <checkerror>
 8003408:	b003      	add	sp, #12
 800340a:	bd30      	pop	{r4, r5, pc}

0800340c <_close>:
 800340c:	b538      	push	{r3, r4, r5, lr}
 800340e:	4605      	mov	r5, r0
 8003410:	f7ff ff2a 	bl	8003268 <findslot>
 8003414:	4604      	mov	r4, r0
 8003416:	b930      	cbnz	r0, 8003426 <_close+0x1a>
 8003418:	f000 fc14 	bl	8003c44 <__errno>
 800341c:	2309      	movs	r3, #9
 800341e:	6003      	str	r3, [r0, #0]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	bd38      	pop	{r3, r4, r5, pc}
 8003426:	3d01      	subs	r5, #1
 8003428:	2d01      	cmp	r5, #1
 800342a:	d809      	bhi.n	8003440 <_close+0x34>
 800342c:	4b07      	ldr	r3, [pc, #28]	@ (800344c <_close+0x40>)
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	d104      	bne.n	8003440 <_close+0x34>
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	6023      	str	r3, [r4, #0]
 800343c:	2000      	movs	r0, #0
 800343e:	e7f1      	b.n	8003424 <_close+0x18>
 8003440:	6820      	ldr	r0, [r4, #0]
 8003442:	f7ff ffd6 	bl	80033f2 <_swiclose>
 8003446:	2800      	cmp	r0, #0
 8003448:	d0f5      	beq.n	8003436 <_close+0x2a>
 800344a:	e7eb      	b.n	8003424 <_close+0x18>
 800344c:	20000134 	.word	0x20000134

08003450 <_swistat>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	460c      	mov	r4, r1
 8003454:	f7ff ff08 	bl	8003268 <findslot>
 8003458:	4605      	mov	r5, r0
 800345a:	b930      	cbnz	r0, 800346a <_swistat+0x1a>
 800345c:	f000 fbf2 	bl	8003c44 <__errno>
 8003460:	2309      	movs	r3, #9
 8003462:	6003      	str	r3, [r0, #0]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	bd70      	pop	{r4, r5, r6, pc}
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003476:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003478:	260c      	movs	r6, #12
 800347a:	4630      	mov	r0, r6
 800347c:	4629      	mov	r1, r5
 800347e:	beab      	bkpt	0x00ab
 8003480:	4605      	mov	r5, r0
 8003482:	4628      	mov	r0, r5
 8003484:	f7ff ff18 	bl	80032b8 <checkerror>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d0eb      	beq.n	8003464 <_swistat+0x14>
 800348c:	6120      	str	r0, [r4, #16]
 800348e:	2000      	movs	r0, #0
 8003490:	e7ea      	b.n	8003468 <_swistat+0x18>

08003492 <_fstat>:
 8003492:	460b      	mov	r3, r1
 8003494:	b510      	push	{r4, lr}
 8003496:	2100      	movs	r1, #0
 8003498:	4604      	mov	r4, r0
 800349a:	2258      	movs	r2, #88	@ 0x58
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fb83 	bl	8003ba8 <memset>
 80034a2:	4601      	mov	r1, r0
 80034a4:	4620      	mov	r0, r4
 80034a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034aa:	f7ff bfd1 	b.w	8003450 <_swistat>

080034ae <_stat>:
 80034ae:	b538      	push	{r3, r4, r5, lr}
 80034b0:	460d      	mov	r5, r1
 80034b2:	4604      	mov	r4, r0
 80034b4:	2258      	movs	r2, #88	@ 0x58
 80034b6:	2100      	movs	r1, #0
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 fb75 	bl	8003ba8 <memset>
 80034be:	4620      	mov	r0, r4
 80034c0:	2100      	movs	r1, #0
 80034c2:	f000 f811 	bl	80034e8 <_swiopen>
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	4604      	mov	r4, r0
 80034ca:	d00b      	beq.n	80034e4 <_stat+0x36>
 80034cc:	686b      	ldr	r3, [r5, #4]
 80034ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80034d2:	606b      	str	r3, [r5, #4]
 80034d4:	4629      	mov	r1, r5
 80034d6:	f7ff ffbb 	bl	8003450 <_swistat>
 80034da:	4605      	mov	r5, r0
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff ff95 	bl	800340c <_close>
 80034e2:	462c      	mov	r4, r5
 80034e4:	4620      	mov	r0, r4
 80034e6:	bd38      	pop	{r3, r4, r5, pc}

080034e8 <_swiopen>:
 80034e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ec:	4f29      	ldr	r7, [pc, #164]	@ (8003594 <_swiopen+0xac>)
 80034ee:	b096      	sub	sp, #88	@ 0x58
 80034f0:	4682      	mov	sl, r0
 80034f2:	460e      	mov	r6, r1
 80034f4:	2400      	movs	r4, #0
 80034f6:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80034fa:	3301      	adds	r3, #1
 80034fc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003500:	d00c      	beq.n	800351c <_swiopen+0x34>
 8003502:	3401      	adds	r4, #1
 8003504:	2c14      	cmp	r4, #20
 8003506:	d1f6      	bne.n	80034f6 <_swiopen+0xe>
 8003508:	f000 fb9c 	bl	8003c44 <__errno>
 800350c:	2318      	movs	r3, #24
 800350e:	6003      	str	r3, [r0, #0]
 8003510:	f04f 34ff 	mov.w	r4, #4294967295
 8003514:	4620      	mov	r0, r4
 8003516:	b016      	add	sp, #88	@ 0x58
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003520:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003524:	46e9      	mov	r9, sp
 8003526:	d109      	bne.n	800353c <_swiopen+0x54>
 8003528:	4649      	mov	r1, r9
 800352a:	4650      	mov	r0, sl
 800352c:	f7ff ffbf 	bl	80034ae <_stat>
 8003530:	3001      	adds	r0, #1
 8003532:	d003      	beq.n	800353c <_swiopen+0x54>
 8003534:	f000 fb86 	bl	8003c44 <__errno>
 8003538:	2311      	movs	r3, #17
 800353a:	e7e8      	b.n	800350e <_swiopen+0x26>
 800353c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003540:	f240 6301 	movw	r3, #1537	@ 0x601
 8003544:	07b2      	lsls	r2, r6, #30
 8003546:	bf48      	it	mi
 8003548:	f045 0502 	orrmi.w	r5, r5, #2
 800354c:	421e      	tst	r6, r3
 800354e:	bf18      	it	ne
 8003550:	f045 0504 	orrne.w	r5, r5, #4
 8003554:	0733      	lsls	r3, r6, #28
 8003556:	bf48      	it	mi
 8003558:	f025 0504 	bicmi.w	r5, r5, #4
 800355c:	4650      	mov	r0, sl
 800355e:	bf48      	it	mi
 8003560:	f045 0508 	orrmi.w	r5, r5, #8
 8003564:	f8cd a000 	str.w	sl, [sp]
 8003568:	f7fc fe3a 	bl	80001e0 <strlen>
 800356c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003570:	2501      	movs	r5, #1
 8003572:	4628      	mov	r0, r5
 8003574:	4649      	mov	r1, r9
 8003576:	beab      	bkpt	0x00ab
 8003578:	4605      	mov	r5, r0
 800357a:	2d00      	cmp	r5, #0
 800357c:	db05      	blt.n	800358a <_swiopen+0xa2>
 800357e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003582:	4447      	add	r7, r8
 8003584:	2300      	movs	r3, #0
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	e7c4      	b.n	8003514 <_swiopen+0x2c>
 800358a:	4628      	mov	r0, r5
 800358c:	f7ff fe86 	bl	800329c <error>
 8003590:	4604      	mov	r4, r0
 8003592:	e7bf      	b.n	8003514 <_swiopen+0x2c>
 8003594:	20000134 	.word	0x20000134

08003598 <_get_semihosting_exts>:
 8003598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800359c:	4606      	mov	r6, r0
 800359e:	460f      	mov	r7, r1
 80035a0:	4829      	ldr	r0, [pc, #164]	@ (8003648 <_get_semihosting_exts+0xb0>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	4615      	mov	r5, r2
 80035a6:	f7ff ff9f 	bl	80034e8 <_swiopen>
 80035aa:	462a      	mov	r2, r5
 80035ac:	4604      	mov	r4, r0
 80035ae:	2100      	movs	r1, #0
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 faf9 	bl	8003ba8 <memset>
 80035b6:	1c63      	adds	r3, r4, #1
 80035b8:	d014      	beq.n	80035e4 <_get_semihosting_exts+0x4c>
 80035ba:	4620      	mov	r0, r4
 80035bc:	f7ff fe54 	bl	8003268 <findslot>
 80035c0:	f04f 080c 	mov.w	r8, #12
 80035c4:	4681      	mov	r9, r0
 80035c6:	4640      	mov	r0, r8
 80035c8:	4649      	mov	r1, r9
 80035ca:	beab      	bkpt	0x00ab
 80035cc:	4680      	mov	r8, r0
 80035ce:	4640      	mov	r0, r8
 80035d0:	f7ff fe72 	bl	80032b8 <checkerror>
 80035d4:	2803      	cmp	r0, #3
 80035d6:	dd02      	ble.n	80035de <_get_semihosting_exts+0x46>
 80035d8:	1ec3      	subs	r3, r0, #3
 80035da:	42ab      	cmp	r3, r5
 80035dc:	dc07      	bgt.n	80035ee <_get_semihosting_exts+0x56>
 80035de:	4620      	mov	r0, r4
 80035e0:	f7ff ff14 	bl	800340c <_close>
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	b003      	add	sp, #12
 80035ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ee:	2204      	movs	r2, #4
 80035f0:	eb0d 0102 	add.w	r1, sp, r2
 80035f4:	4620      	mov	r0, r4
 80035f6:	f7ff fe74 	bl	80032e2 <_read>
 80035fa:	2803      	cmp	r0, #3
 80035fc:	ddef      	ble.n	80035de <_get_semihosting_exts+0x46>
 80035fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003602:	2b53      	cmp	r3, #83	@ 0x53
 8003604:	d1eb      	bne.n	80035de <_get_semihosting_exts+0x46>
 8003606:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800360a:	2b48      	cmp	r3, #72	@ 0x48
 800360c:	d1e7      	bne.n	80035de <_get_semihosting_exts+0x46>
 800360e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003612:	2b46      	cmp	r3, #70	@ 0x46
 8003614:	d1e3      	bne.n	80035de <_get_semihosting_exts+0x46>
 8003616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800361a:	2b42      	cmp	r3, #66	@ 0x42
 800361c:	d1df      	bne.n	80035de <_get_semihosting_exts+0x46>
 800361e:	2201      	movs	r2, #1
 8003620:	4639      	mov	r1, r7
 8003622:	4620      	mov	r0, r4
 8003624:	f7ff fe77 	bl	8003316 <_swilseek>
 8003628:	2800      	cmp	r0, #0
 800362a:	dbd8      	blt.n	80035de <_get_semihosting_exts+0x46>
 800362c:	462a      	mov	r2, r5
 800362e:	4631      	mov	r1, r6
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff fe56 	bl	80032e2 <_read>
 8003636:	4605      	mov	r5, r0
 8003638:	4620      	mov	r0, r4
 800363a:	f7ff fee7 	bl	800340c <_close>
 800363e:	4628      	mov	r0, r5
 8003640:	f7ff fe3a 	bl	80032b8 <checkerror>
 8003644:	e7d0      	b.n	80035e8 <_get_semihosting_exts+0x50>
 8003646:	bf00      	nop
 8003648:	08004710 	.word	0x08004710

0800364c <initialise_semihosting_exts>:
 800364c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800364e:	4d0a      	ldr	r5, [pc, #40]	@ (8003678 <initialise_semihosting_exts+0x2c>)
 8003650:	4c0a      	ldr	r4, [pc, #40]	@ (800367c <initialise_semihosting_exts+0x30>)
 8003652:	2100      	movs	r1, #0
 8003654:	2201      	movs	r2, #1
 8003656:	a801      	add	r0, sp, #4
 8003658:	6029      	str	r1, [r5, #0]
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	f7ff ff9c 	bl	8003598 <_get_semihosting_exts>
 8003660:	2800      	cmp	r0, #0
 8003662:	dd07      	ble.n	8003674 <initialise_semihosting_exts+0x28>
 8003664:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003668:	f003 0201 	and.w	r2, r3, #1
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	602a      	str	r2, [r5, #0]
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	b003      	add	sp, #12
 8003676:	bd30      	pop	{r4, r5, pc}
 8003678:	20000010 	.word	0x20000010
 800367c:	2000000c 	.word	0x2000000c

08003680 <_has_ext_stdout_stderr>:
 8003680:	b510      	push	{r4, lr}
 8003682:	4c04      	ldr	r4, [pc, #16]	@ (8003694 <_has_ext_stdout_stderr+0x14>)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	da01      	bge.n	800368e <_has_ext_stdout_stderr+0xe>
 800368a:	f7ff ffdf 	bl	800364c <initialise_semihosting_exts>
 800368e:	6820      	ldr	r0, [r4, #0]
 8003690:	bd10      	pop	{r4, pc}
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c

08003698 <initialise_monitor_handles>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	b085      	sub	sp, #20
 800369e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003750 <initialise_monitor_handles+0xb8>
 80036a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80036a6:	2303      	movs	r3, #3
 80036a8:	2400      	movs	r4, #0
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	af01      	add	r7, sp, #4
 80036ae:	9402      	str	r4, [sp, #8]
 80036b0:	2501      	movs	r5, #1
 80036b2:	4628      	mov	r0, r5
 80036b4:	4639      	mov	r1, r7
 80036b6:	beab      	bkpt	0x00ab
 80036b8:	4605      	mov	r5, r0
 80036ba:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003754 <initialise_monitor_handles+0xbc>
 80036be:	4623      	mov	r3, r4
 80036c0:	4c20      	ldr	r4, [pc, #128]	@ (8003744 <initialise_monitor_handles+0xac>)
 80036c2:	f8c8 5000 	str.w	r5, [r8]
 80036c6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ca:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80036ce:	3301      	adds	r3, #1
 80036d0:	2b14      	cmp	r3, #20
 80036d2:	d1fa      	bne.n	80036ca <initialise_monitor_handles+0x32>
 80036d4:	f7ff ffd4 	bl	8003680 <_has_ext_stdout_stderr>
 80036d8:	4d1b      	ldr	r5, [pc, #108]	@ (8003748 <initialise_monitor_handles+0xb0>)
 80036da:	b1d0      	cbz	r0, 8003712 <initialise_monitor_handles+0x7a>
 80036dc:	f04f 0a03 	mov.w	sl, #3
 80036e0:	2304      	movs	r3, #4
 80036e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80036e6:	2601      	movs	r6, #1
 80036e8:	f8cd a00c 	str.w	sl, [sp, #12]
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	4630      	mov	r0, r6
 80036f0:	4639      	mov	r1, r7
 80036f2:	beab      	bkpt	0x00ab
 80036f4:	4683      	mov	fp, r0
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <initialise_monitor_handles+0xb4>)
 80036f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80036fc:	f8c3 b000 	str.w	fp, [r3]
 8003700:	2308      	movs	r3, #8
 8003702:	f8cd a00c 	str.w	sl, [sp, #12]
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	4630      	mov	r0, r6
 800370a:	4639      	mov	r1, r7
 800370c:	beab      	bkpt	0x00ab
 800370e:	4606      	mov	r6, r0
 8003710:	602e      	str	r6, [r5, #0]
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	3301      	adds	r3, #1
 8003716:	bf02      	ittt	eq
 8003718:	4b0c      	ldreq	r3, [pc, #48]	@ (800374c <initialise_monitor_handles+0xb4>)
 800371a:	681b      	ldreq	r3, [r3, #0]
 800371c:	602b      	streq	r3, [r5, #0]
 800371e:	2600      	movs	r6, #0
 8003720:	f8d8 3000 	ldr.w	r3, [r8]
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	6066      	str	r6, [r4, #4]
 8003728:	f7ff ffaa 	bl	8003680 <_has_ext_stdout_stderr>
 800372c:	b130      	cbz	r0, 800373c <initialise_monitor_handles+0xa4>
 800372e:	4b07      	ldr	r3, [pc, #28]	@ (800374c <initialise_monitor_handles+0xb4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003736:	682b      	ldr	r3, [r5, #0]
 8003738:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800373c:	b005      	add	sp, #20
 800373e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	20000134 	.word	0x20000134
 8003748:	20000128 	.word	0x20000128
 800374c:	2000012c 	.word	0x2000012c
 8003750:	08004726 	.word	0x08004726
 8003754:	20000130 	.word	0x20000130

08003758 <_isatty>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	f7ff fd85 	bl	8003268 <findslot>
 800375e:	2409      	movs	r4, #9
 8003760:	4605      	mov	r5, r0
 8003762:	b920      	cbnz	r0, 800376e <_isatty+0x16>
 8003764:	f000 fa6e 	bl	8003c44 <__errno>
 8003768:	6004      	str	r4, [r0, #0]
 800376a:	2000      	movs	r0, #0
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	beab      	bkpt	0x00ab
 8003774:	4604      	mov	r4, r0
 8003776:	2c01      	cmp	r4, #1
 8003778:	4620      	mov	r0, r4
 800377a:	d0f7      	beq.n	800376c <_isatty+0x14>
 800377c:	f000 fa62 	bl	8003c44 <__errno>
 8003780:	2513      	movs	r5, #19
 8003782:	4604      	mov	r4, r0
 8003784:	2600      	movs	r6, #0
 8003786:	4628      	mov	r0, r5
 8003788:	4631      	mov	r1, r6
 800378a:	beab      	bkpt	0x00ab
 800378c:	4605      	mov	r5, r0
 800378e:	6025      	str	r5, [r4, #0]
 8003790:	e7eb      	b.n	800376a <_isatty+0x12>
	...

08003794 <std>:
 8003794:	2300      	movs	r3, #0
 8003796:	b510      	push	{r4, lr}
 8003798:	4604      	mov	r4, r0
 800379a:	e9c0 3300 	strd	r3, r3, [r0]
 800379e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037a2:	6083      	str	r3, [r0, #8]
 80037a4:	8181      	strh	r1, [r0, #12]
 80037a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80037a8:	81c2      	strh	r2, [r0, #14]
 80037aa:	6183      	str	r3, [r0, #24]
 80037ac:	4619      	mov	r1, r3
 80037ae:	2208      	movs	r2, #8
 80037b0:	305c      	adds	r0, #92	@ 0x5c
 80037b2:	f000 f9f9 	bl	8003ba8 <memset>
 80037b6:	4b0d      	ldr	r3, [pc, #52]	@ (80037ec <std+0x58>)
 80037b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <std+0x5c>)
 80037bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <std+0x60>)
 80037c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <std+0x64>)
 80037c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <std+0x68>)
 80037c8:	6224      	str	r4, [r4, #32]
 80037ca:	429c      	cmp	r4, r3
 80037cc:	d006      	beq.n	80037dc <std+0x48>
 80037ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037d2:	4294      	cmp	r4, r2
 80037d4:	d002      	beq.n	80037dc <std+0x48>
 80037d6:	33d0      	adds	r3, #208	@ 0xd0
 80037d8:	429c      	cmp	r4, r3
 80037da:	d105      	bne.n	80037e8 <std+0x54>
 80037dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e4:	f000 ba58 	b.w	8003c98 <__retarget_lock_init_recursive>
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	080039f9 	.word	0x080039f9
 80037f0:	08003a1b 	.word	0x08003a1b
 80037f4:	08003a53 	.word	0x08003a53
 80037f8:	08003a77 	.word	0x08003a77
 80037fc:	200001d4 	.word	0x200001d4

08003800 <stdio_exit_handler>:
 8003800:	4a02      	ldr	r2, [pc, #8]	@ (800380c <stdio_exit_handler+0xc>)
 8003802:	4903      	ldr	r1, [pc, #12]	@ (8003810 <stdio_exit_handler+0x10>)
 8003804:	4803      	ldr	r0, [pc, #12]	@ (8003814 <stdio_exit_handler+0x14>)
 8003806:	f000 b869 	b.w	80038dc <_fwalk_sglue>
 800380a:	bf00      	nop
 800380c:	20000014 	.word	0x20000014
 8003810:	08004539 	.word	0x08004539
 8003814:	20000024 	.word	0x20000024

08003818 <cleanup_stdio>:
 8003818:	6841      	ldr	r1, [r0, #4]
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <cleanup_stdio+0x34>)
 800381c:	4299      	cmp	r1, r3
 800381e:	b510      	push	{r4, lr}
 8003820:	4604      	mov	r4, r0
 8003822:	d001      	beq.n	8003828 <cleanup_stdio+0x10>
 8003824:	f000 fe88 	bl	8004538 <_fflush_r>
 8003828:	68a1      	ldr	r1, [r4, #8]
 800382a:	4b09      	ldr	r3, [pc, #36]	@ (8003850 <cleanup_stdio+0x38>)
 800382c:	4299      	cmp	r1, r3
 800382e:	d002      	beq.n	8003836 <cleanup_stdio+0x1e>
 8003830:	4620      	mov	r0, r4
 8003832:	f000 fe81 	bl	8004538 <_fflush_r>
 8003836:	68e1      	ldr	r1, [r4, #12]
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <cleanup_stdio+0x3c>)
 800383a:	4299      	cmp	r1, r3
 800383c:	d004      	beq.n	8003848 <cleanup_stdio+0x30>
 800383e:	4620      	mov	r0, r4
 8003840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003844:	f000 be78 	b.w	8004538 <_fflush_r>
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	200001d4 	.word	0x200001d4
 8003850:	2000023c 	.word	0x2000023c
 8003854:	200002a4 	.word	0x200002a4

08003858 <global_stdio_init.part.0>:
 8003858:	b510      	push	{r4, lr}
 800385a:	4b0b      	ldr	r3, [pc, #44]	@ (8003888 <global_stdio_init.part.0+0x30>)
 800385c:	4c0b      	ldr	r4, [pc, #44]	@ (800388c <global_stdio_init.part.0+0x34>)
 800385e:	4a0c      	ldr	r2, [pc, #48]	@ (8003890 <global_stdio_init.part.0+0x38>)
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	4620      	mov	r0, r4
 8003864:	2200      	movs	r2, #0
 8003866:	2104      	movs	r1, #4
 8003868:	f7ff ff94 	bl	8003794 <std>
 800386c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003870:	2201      	movs	r2, #1
 8003872:	2109      	movs	r1, #9
 8003874:	f7ff ff8e 	bl	8003794 <std>
 8003878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800387c:	2202      	movs	r2, #2
 800387e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003882:	2112      	movs	r1, #18
 8003884:	f7ff bf86 	b.w	8003794 <std>
 8003888:	2000030c 	.word	0x2000030c
 800388c:	200001d4 	.word	0x200001d4
 8003890:	08003801 	.word	0x08003801

08003894 <__sfp_lock_acquire>:
 8003894:	4801      	ldr	r0, [pc, #4]	@ (800389c <__sfp_lock_acquire+0x8>)
 8003896:	f000 ba00 	b.w	8003c9a <__retarget_lock_acquire_recursive>
 800389a:	bf00      	nop
 800389c:	20000315 	.word	0x20000315

080038a0 <__sfp_lock_release>:
 80038a0:	4801      	ldr	r0, [pc, #4]	@ (80038a8 <__sfp_lock_release+0x8>)
 80038a2:	f000 b9fb 	b.w	8003c9c <__retarget_lock_release_recursive>
 80038a6:	bf00      	nop
 80038a8:	20000315 	.word	0x20000315

080038ac <__sinit>:
 80038ac:	b510      	push	{r4, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	f7ff fff0 	bl	8003894 <__sfp_lock_acquire>
 80038b4:	6a23      	ldr	r3, [r4, #32]
 80038b6:	b11b      	cbz	r3, 80038c0 <__sinit+0x14>
 80038b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038bc:	f7ff bff0 	b.w	80038a0 <__sfp_lock_release>
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <__sinit+0x28>)
 80038c2:	6223      	str	r3, [r4, #32]
 80038c4:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <__sinit+0x2c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f5      	bne.n	80038b8 <__sinit+0xc>
 80038cc:	f7ff ffc4 	bl	8003858 <global_stdio_init.part.0>
 80038d0:	e7f2      	b.n	80038b8 <__sinit+0xc>
 80038d2:	bf00      	nop
 80038d4:	08003819 	.word	0x08003819
 80038d8:	2000030c 	.word	0x2000030c

080038dc <_fwalk_sglue>:
 80038dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e0:	4607      	mov	r7, r0
 80038e2:	4688      	mov	r8, r1
 80038e4:	4614      	mov	r4, r2
 80038e6:	2600      	movs	r6, #0
 80038e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038ec:	f1b9 0901 	subs.w	r9, r9, #1
 80038f0:	d505      	bpl.n	80038fe <_fwalk_sglue+0x22>
 80038f2:	6824      	ldr	r4, [r4, #0]
 80038f4:	2c00      	cmp	r4, #0
 80038f6:	d1f7      	bne.n	80038e8 <_fwalk_sglue+0xc>
 80038f8:	4630      	mov	r0, r6
 80038fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fe:	89ab      	ldrh	r3, [r5, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d907      	bls.n	8003914 <_fwalk_sglue+0x38>
 8003904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003908:	3301      	adds	r3, #1
 800390a:	d003      	beq.n	8003914 <_fwalk_sglue+0x38>
 800390c:	4629      	mov	r1, r5
 800390e:	4638      	mov	r0, r7
 8003910:	47c0      	blx	r8
 8003912:	4306      	orrs	r6, r0
 8003914:	3568      	adds	r5, #104	@ 0x68
 8003916:	e7e9      	b.n	80038ec <_fwalk_sglue+0x10>

08003918 <iprintf>:
 8003918:	b40f      	push	{r0, r1, r2, r3}
 800391a:	b507      	push	{r0, r1, r2, lr}
 800391c:	4906      	ldr	r1, [pc, #24]	@ (8003938 <iprintf+0x20>)
 800391e:	ab04      	add	r3, sp, #16
 8003920:	6808      	ldr	r0, [r1, #0]
 8003922:	f853 2b04 	ldr.w	r2, [r3], #4
 8003926:	6881      	ldr	r1, [r0, #8]
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	f000 fadb 	bl	8003ee4 <_vfiprintf_r>
 800392e:	b003      	add	sp, #12
 8003930:	f85d eb04 	ldr.w	lr, [sp], #4
 8003934:	b004      	add	sp, #16
 8003936:	4770      	bx	lr
 8003938:	20000020 	.word	0x20000020

0800393c <_puts_r>:
 800393c:	6a03      	ldr	r3, [r0, #32]
 800393e:	b570      	push	{r4, r5, r6, lr}
 8003940:	6884      	ldr	r4, [r0, #8]
 8003942:	4605      	mov	r5, r0
 8003944:	460e      	mov	r6, r1
 8003946:	b90b      	cbnz	r3, 800394c <_puts_r+0x10>
 8003948:	f7ff ffb0 	bl	80038ac <__sinit>
 800394c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800394e:	07db      	lsls	r3, r3, #31
 8003950:	d405      	bmi.n	800395e <_puts_r+0x22>
 8003952:	89a3      	ldrh	r3, [r4, #12]
 8003954:	0598      	lsls	r0, r3, #22
 8003956:	d402      	bmi.n	800395e <_puts_r+0x22>
 8003958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800395a:	f000 f99e 	bl	8003c9a <__retarget_lock_acquire_recursive>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	0719      	lsls	r1, r3, #28
 8003962:	d502      	bpl.n	800396a <_puts_r+0x2e>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d135      	bne.n	80039d6 <_puts_r+0x9a>
 800396a:	4621      	mov	r1, r4
 800396c:	4628      	mov	r0, r5
 800396e:	f000 f8c5 	bl	8003afc <__swsetup_r>
 8003972:	b380      	cbz	r0, 80039d6 <_puts_r+0x9a>
 8003974:	f04f 35ff 	mov.w	r5, #4294967295
 8003978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800397a:	07da      	lsls	r2, r3, #31
 800397c:	d405      	bmi.n	800398a <_puts_r+0x4e>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	059b      	lsls	r3, r3, #22
 8003982:	d402      	bmi.n	800398a <_puts_r+0x4e>
 8003984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003986:	f000 f989 	bl	8003c9c <__retarget_lock_release_recursive>
 800398a:	4628      	mov	r0, r5
 800398c:	bd70      	pop	{r4, r5, r6, pc}
 800398e:	2b00      	cmp	r3, #0
 8003990:	da04      	bge.n	800399c <_puts_r+0x60>
 8003992:	69a2      	ldr	r2, [r4, #24]
 8003994:	429a      	cmp	r2, r3
 8003996:	dc17      	bgt.n	80039c8 <_puts_r+0x8c>
 8003998:	290a      	cmp	r1, #10
 800399a:	d015      	beq.n	80039c8 <_puts_r+0x8c>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	6022      	str	r2, [r4, #0]
 80039a2:	7019      	strb	r1, [r3, #0]
 80039a4:	68a3      	ldr	r3, [r4, #8]
 80039a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039aa:	3b01      	subs	r3, #1
 80039ac:	60a3      	str	r3, [r4, #8]
 80039ae:	2900      	cmp	r1, #0
 80039b0:	d1ed      	bne.n	800398e <_puts_r+0x52>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	da11      	bge.n	80039da <_puts_r+0x9e>
 80039b6:	4622      	mov	r2, r4
 80039b8:	210a      	movs	r1, #10
 80039ba:	4628      	mov	r0, r5
 80039bc:	f000 f85f 	bl	8003a7e <__swbuf_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0d7      	beq.n	8003974 <_puts_r+0x38>
 80039c4:	250a      	movs	r5, #10
 80039c6:	e7d7      	b.n	8003978 <_puts_r+0x3c>
 80039c8:	4622      	mov	r2, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 f857 	bl	8003a7e <__swbuf_r>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d1e7      	bne.n	80039a4 <_puts_r+0x68>
 80039d4:	e7ce      	b.n	8003974 <_puts_r+0x38>
 80039d6:	3e01      	subs	r6, #1
 80039d8:	e7e4      	b.n	80039a4 <_puts_r+0x68>
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	6022      	str	r2, [r4, #0]
 80039e0:	220a      	movs	r2, #10
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e7ee      	b.n	80039c4 <_puts_r+0x88>
	...

080039e8 <puts>:
 80039e8:	4b02      	ldr	r3, [pc, #8]	@ (80039f4 <puts+0xc>)
 80039ea:	4601      	mov	r1, r0
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	f7ff bfa5 	b.w	800393c <_puts_r>
 80039f2:	bf00      	nop
 80039f4:	20000020 	.word	0x20000020

080039f8 <__sread>:
 80039f8:	b510      	push	{r4, lr}
 80039fa:	460c      	mov	r4, r1
 80039fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a00:	f000 f8fc 	bl	8003bfc <_read_r>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	bfab      	itete	ge
 8003a08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a0c:	181b      	addge	r3, r3, r0
 8003a0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a12:	bfac      	ite	ge
 8003a14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a16:	81a3      	strhlt	r3, [r4, #12]
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <__swrite>:
 8003a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	461f      	mov	r7, r3
 8003a20:	898b      	ldrh	r3, [r1, #12]
 8003a22:	05db      	lsls	r3, r3, #23
 8003a24:	4605      	mov	r5, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4616      	mov	r6, r2
 8003a2a:	d505      	bpl.n	8003a38 <__swrite+0x1e>
 8003a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a30:	2302      	movs	r3, #2
 8003a32:	2200      	movs	r2, #0
 8003a34:	f000 f8d0 	bl	8003bd8 <_lseek_r>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	4632      	mov	r2, r6
 8003a46:	463b      	mov	r3, r7
 8003a48:	4628      	mov	r0, r5
 8003a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	f000 b8e7 	b.w	8003c20 <_write_r>

08003a52 <__sseek>:
 8003a52:	b510      	push	{r4, lr}
 8003a54:	460c      	mov	r4, r1
 8003a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5a:	f000 f8bd 	bl	8003bd8 <_lseek_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	bf15      	itete	ne
 8003a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a6e:	81a3      	strheq	r3, [r4, #12]
 8003a70:	bf18      	it	ne
 8003a72:	81a3      	strhne	r3, [r4, #12]
 8003a74:	bd10      	pop	{r4, pc}

08003a76 <__sclose>:
 8003a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7a:	f000 b89d 	b.w	8003bb8 <_close_r>

08003a7e <__swbuf_r>:
 8003a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a80:	460e      	mov	r6, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	4605      	mov	r5, r0
 8003a86:	b118      	cbz	r0, 8003a90 <__swbuf_r+0x12>
 8003a88:	6a03      	ldr	r3, [r0, #32]
 8003a8a:	b90b      	cbnz	r3, 8003a90 <__swbuf_r+0x12>
 8003a8c:	f7ff ff0e 	bl	80038ac <__sinit>
 8003a90:	69a3      	ldr	r3, [r4, #24]
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	89a3      	ldrh	r3, [r4, #12]
 8003a96:	071a      	lsls	r2, r3, #28
 8003a98:	d501      	bpl.n	8003a9e <__swbuf_r+0x20>
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	b943      	cbnz	r3, 8003ab0 <__swbuf_r+0x32>
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f000 f82b 	bl	8003afc <__swsetup_r>
 8003aa6:	b118      	cbz	r0, 8003ab0 <__swbuf_r+0x32>
 8003aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8003aac:	4638      	mov	r0, r7
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	6922      	ldr	r2, [r4, #16]
 8003ab4:	1a98      	subs	r0, r3, r2
 8003ab6:	6963      	ldr	r3, [r4, #20]
 8003ab8:	b2f6      	uxtb	r6, r6
 8003aba:	4283      	cmp	r3, r0
 8003abc:	4637      	mov	r7, r6
 8003abe:	dc05      	bgt.n	8003acc <__swbuf_r+0x4e>
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f000 fd38 	bl	8004538 <_fflush_r>
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d1ed      	bne.n	8003aa8 <__swbuf_r+0x2a>
 8003acc:	68a3      	ldr	r3, [r4, #8]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60a3      	str	r3, [r4, #8]
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	6022      	str	r2, [r4, #0]
 8003ad8:	701e      	strb	r6, [r3, #0]
 8003ada:	6962      	ldr	r2, [r4, #20]
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d004      	beq.n	8003aec <__swbuf_r+0x6e>
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	07db      	lsls	r3, r3, #31
 8003ae6:	d5e1      	bpl.n	8003aac <__swbuf_r+0x2e>
 8003ae8:	2e0a      	cmp	r6, #10
 8003aea:	d1df      	bne.n	8003aac <__swbuf_r+0x2e>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4628      	mov	r0, r5
 8003af0:	f000 fd22 	bl	8004538 <_fflush_r>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d0d9      	beq.n	8003aac <__swbuf_r+0x2e>
 8003af8:	e7d6      	b.n	8003aa8 <__swbuf_r+0x2a>
	...

08003afc <__swsetup_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4b29      	ldr	r3, [pc, #164]	@ (8003ba4 <__swsetup_r+0xa8>)
 8003b00:	4605      	mov	r5, r0
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	460c      	mov	r4, r1
 8003b06:	b118      	cbz	r0, 8003b10 <__swsetup_r+0x14>
 8003b08:	6a03      	ldr	r3, [r0, #32]
 8003b0a:	b90b      	cbnz	r3, 8003b10 <__swsetup_r+0x14>
 8003b0c:	f7ff fece 	bl	80038ac <__sinit>
 8003b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b14:	0719      	lsls	r1, r3, #28
 8003b16:	d422      	bmi.n	8003b5e <__swsetup_r+0x62>
 8003b18:	06da      	lsls	r2, r3, #27
 8003b1a:	d407      	bmi.n	8003b2c <__swsetup_r+0x30>
 8003b1c:	2209      	movs	r2, #9
 8003b1e:	602a      	str	r2, [r5, #0]
 8003b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2a:	e033      	b.n	8003b94 <__swsetup_r+0x98>
 8003b2c:	0758      	lsls	r0, r3, #29
 8003b2e:	d512      	bpl.n	8003b56 <__swsetup_r+0x5a>
 8003b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b32:	b141      	cbz	r1, 8003b46 <__swsetup_r+0x4a>
 8003b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d002      	beq.n	8003b42 <__swsetup_r+0x46>
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f000 f8af 	bl	8003ca0 <_free_r>
 8003b42:	2300      	movs	r3, #0
 8003b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6063      	str	r3, [r4, #4]
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	b94b      	cbnz	r3, 8003b76 <__swsetup_r+0x7a>
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6c:	d003      	beq.n	8003b76 <__swsetup_r+0x7a>
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 fd2f 	bl	80045d4 <__smakebuf_r>
 8003b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7a:	f013 0201 	ands.w	r2, r3, #1
 8003b7e:	d00a      	beq.n	8003b96 <__swsetup_r+0x9a>
 8003b80:	2200      	movs	r2, #0
 8003b82:	60a2      	str	r2, [r4, #8]
 8003b84:	6962      	ldr	r2, [r4, #20]
 8003b86:	4252      	negs	r2, r2
 8003b88:	61a2      	str	r2, [r4, #24]
 8003b8a:	6922      	ldr	r2, [r4, #16]
 8003b8c:	b942      	cbnz	r2, 8003ba0 <__swsetup_r+0xa4>
 8003b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b92:	d1c5      	bne.n	8003b20 <__swsetup_r+0x24>
 8003b94:	bd38      	pop	{r3, r4, r5, pc}
 8003b96:	0799      	lsls	r1, r3, #30
 8003b98:	bf58      	it	pl
 8003b9a:	6962      	ldrpl	r2, [r4, #20]
 8003b9c:	60a2      	str	r2, [r4, #8]
 8003b9e:	e7f4      	b.n	8003b8a <__swsetup_r+0x8e>
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	e7f7      	b.n	8003b94 <__swsetup_r+0x98>
 8003ba4:	20000020 	.word	0x20000020

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <_close_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4d06      	ldr	r5, [pc, #24]	@ (8003bd4 <_close_r+0x1c>)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	f7ff fc22 	bl	800340c <_close>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_close_r+0x1a>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_close_r+0x1a>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	20000310 	.word	0x20000310

08003bd8 <_lseek_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d07      	ldr	r5, [pc, #28]	@ (8003bf8 <_lseek_r+0x20>)
 8003bdc:	4604      	mov	r4, r0
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	2200      	movs	r2, #0
 8003be4:	602a      	str	r2, [r5, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7ff fbd1 	bl	800338e <_lseek>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_lseek_r+0x1e>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_lseek_r+0x1e>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20000310 	.word	0x20000310

08003bfc <_read_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4d07      	ldr	r5, [pc, #28]	@ (8003c1c <_read_r+0x20>)
 8003c00:	4604      	mov	r4, r0
 8003c02:	4608      	mov	r0, r1
 8003c04:	4611      	mov	r1, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	602a      	str	r2, [r5, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f7ff fb69 	bl	80032e2 <_read>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_read_r+0x1e>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_read_r+0x1e>
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	20000310 	.word	0x20000310

08003c20 <_write_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d07      	ldr	r5, [pc, #28]	@ (8003c40 <_write_r+0x20>)
 8003c24:	4604      	mov	r4, r0
 8003c26:	4608      	mov	r0, r1
 8003c28:	4611      	mov	r1, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7ff fbbf 	bl	80033b2 <_write>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_write_r+0x1e>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_write_r+0x1e>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	20000310 	.word	0x20000310

08003c44 <__errno>:
 8003c44:	4b01      	ldr	r3, [pc, #4]	@ (8003c4c <__errno+0x8>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000020 	.word	0x20000020

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	@ (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	@ (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	@ (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	@ (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 fd24 	bl	80046b0 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08004768 	.word	0x08004768
 8003c8c:	08004768 	.word	0x08004768
 8003c90:	08004768 	.word	0x08004768
 8003c94:	0800476c 	.word	0x0800476c

08003c98 <__retarget_lock_init_recursive>:
 8003c98:	4770      	bx	lr

08003c9a <__retarget_lock_acquire_recursive>:
 8003c9a:	4770      	bx	lr

08003c9c <__retarget_lock_release_recursive>:
 8003c9c:	4770      	bx	lr
	...

08003ca0 <_free_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d041      	beq.n	8003d2c <_free_r+0x8c>
 8003ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cac:	1f0c      	subs	r4, r1, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfb8      	it	lt
 8003cb2:	18e4      	addlt	r4, r4, r3
 8003cb4:	f000 f8e0 	bl	8003e78 <__malloc_lock>
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <_free_r+0x90>)
 8003cba:	6813      	ldr	r3, [r2, #0]
 8003cbc:	b933      	cbnz	r3, 8003ccc <_free_r+0x2c>
 8003cbe:	6063      	str	r3, [r4, #4]
 8003cc0:	6014      	str	r4, [r2, #0]
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc8:	f000 b8dc 	b.w	8003e84 <__malloc_unlock>
 8003ccc:	42a3      	cmp	r3, r4
 8003cce:	d908      	bls.n	8003ce2 <_free_r+0x42>
 8003cd0:	6820      	ldr	r0, [r4, #0]
 8003cd2:	1821      	adds	r1, r4, r0
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	bf01      	itttt	eq
 8003cd8:	6819      	ldreq	r1, [r3, #0]
 8003cda:	685b      	ldreq	r3, [r3, #4]
 8003cdc:	1809      	addeq	r1, r1, r0
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	e7ed      	b.n	8003cbe <_free_r+0x1e>
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b10b      	cbz	r3, 8003cec <_free_r+0x4c>
 8003ce8:	42a3      	cmp	r3, r4
 8003cea:	d9fa      	bls.n	8003ce2 <_free_r+0x42>
 8003cec:	6811      	ldr	r1, [r2, #0]
 8003cee:	1850      	adds	r0, r2, r1
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d10b      	bne.n	8003d0c <_free_r+0x6c>
 8003cf4:	6820      	ldr	r0, [r4, #0]
 8003cf6:	4401      	add	r1, r0
 8003cf8:	1850      	adds	r0, r2, r1
 8003cfa:	4283      	cmp	r3, r0
 8003cfc:	6011      	str	r1, [r2, #0]
 8003cfe:	d1e0      	bne.n	8003cc2 <_free_r+0x22>
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	6053      	str	r3, [r2, #4]
 8003d06:	4408      	add	r0, r1
 8003d08:	6010      	str	r0, [r2, #0]
 8003d0a:	e7da      	b.n	8003cc2 <_free_r+0x22>
 8003d0c:	d902      	bls.n	8003d14 <_free_r+0x74>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	e7d6      	b.n	8003cc2 <_free_r+0x22>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	1821      	adds	r1, r4, r0
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	bf04      	itt	eq
 8003d1c:	6819      	ldreq	r1, [r3, #0]
 8003d1e:	685b      	ldreq	r3, [r3, #4]
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	bf04      	itt	eq
 8003d24:	1809      	addeq	r1, r1, r0
 8003d26:	6021      	streq	r1, [r4, #0]
 8003d28:	6054      	str	r4, [r2, #4]
 8003d2a:	e7ca      	b.n	8003cc2 <_free_r+0x22>
 8003d2c:	bd38      	pop	{r3, r4, r5, pc}
 8003d2e:	bf00      	nop
 8003d30:	2000031c 	.word	0x2000031c

08003d34 <sbrk_aligned>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4e0f      	ldr	r6, [pc, #60]	@ (8003d74 <sbrk_aligned+0x40>)
 8003d38:	460c      	mov	r4, r1
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	b911      	cbnz	r1, 8003d46 <sbrk_aligned+0x12>
 8003d40:	f000 fca6 	bl	8004690 <_sbrk_r>
 8003d44:	6030      	str	r0, [r6, #0]
 8003d46:	4621      	mov	r1, r4
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f000 fca1 	bl	8004690 <_sbrk_r>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	d103      	bne.n	8003d5a <sbrk_aligned+0x26>
 8003d52:	f04f 34ff 	mov.w	r4, #4294967295
 8003d56:	4620      	mov	r0, r4
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	1cc4      	adds	r4, r0, #3
 8003d5c:	f024 0403 	bic.w	r4, r4, #3
 8003d60:	42a0      	cmp	r0, r4
 8003d62:	d0f8      	beq.n	8003d56 <sbrk_aligned+0x22>
 8003d64:	1a21      	subs	r1, r4, r0
 8003d66:	4628      	mov	r0, r5
 8003d68:	f000 fc92 	bl	8004690 <_sbrk_r>
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d1f2      	bne.n	8003d56 <sbrk_aligned+0x22>
 8003d70:	e7ef      	b.n	8003d52 <sbrk_aligned+0x1e>
 8003d72:	bf00      	nop
 8003d74:	20000318 	.word	0x20000318

08003d78 <_malloc_r>:
 8003d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	1ccd      	adds	r5, r1, #3
 8003d7e:	f025 0503 	bic.w	r5, r5, #3
 8003d82:	3508      	adds	r5, #8
 8003d84:	2d0c      	cmp	r5, #12
 8003d86:	bf38      	it	cc
 8003d88:	250c      	movcc	r5, #12
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	db01      	blt.n	8003d94 <_malloc_r+0x1c>
 8003d90:	42a9      	cmp	r1, r5
 8003d92:	d904      	bls.n	8003d9e <_malloc_r+0x26>
 8003d94:	230c      	movs	r3, #12
 8003d96:	6033      	str	r3, [r6, #0]
 8003d98:	2000      	movs	r0, #0
 8003d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e74 <_malloc_r+0xfc>
 8003da2:	f000 f869 	bl	8003e78 <__malloc_lock>
 8003da6:	f8d8 3000 	ldr.w	r3, [r8]
 8003daa:	461c      	mov	r4, r3
 8003dac:	bb44      	cbnz	r4, 8003e00 <_malloc_r+0x88>
 8003dae:	4629      	mov	r1, r5
 8003db0:	4630      	mov	r0, r6
 8003db2:	f7ff ffbf 	bl	8003d34 <sbrk_aligned>
 8003db6:	1c43      	adds	r3, r0, #1
 8003db8:	4604      	mov	r4, r0
 8003dba:	d158      	bne.n	8003e6e <_malloc_r+0xf6>
 8003dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8003dc0:	4627      	mov	r7, r4
 8003dc2:	2f00      	cmp	r7, #0
 8003dc4:	d143      	bne.n	8003e4e <_malloc_r+0xd6>
 8003dc6:	2c00      	cmp	r4, #0
 8003dc8:	d04b      	beq.n	8003e62 <_malloc_r+0xea>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	4639      	mov	r1, r7
 8003dce:	4630      	mov	r0, r6
 8003dd0:	eb04 0903 	add.w	r9, r4, r3
 8003dd4:	f000 fc5c 	bl	8004690 <_sbrk_r>
 8003dd8:	4581      	cmp	r9, r0
 8003dda:	d142      	bne.n	8003e62 <_malloc_r+0xea>
 8003ddc:	6821      	ldr	r1, [r4, #0]
 8003dde:	1a6d      	subs	r5, r5, r1
 8003de0:	4629      	mov	r1, r5
 8003de2:	4630      	mov	r0, r6
 8003de4:	f7ff ffa6 	bl	8003d34 <sbrk_aligned>
 8003de8:	3001      	adds	r0, #1
 8003dea:	d03a      	beq.n	8003e62 <_malloc_r+0xea>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	442b      	add	r3, r5
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	f8d8 3000 	ldr.w	r3, [r8]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	bb62      	cbnz	r2, 8003e54 <_malloc_r+0xdc>
 8003dfa:	f8c8 7000 	str.w	r7, [r8]
 8003dfe:	e00f      	b.n	8003e20 <_malloc_r+0xa8>
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	1b52      	subs	r2, r2, r5
 8003e04:	d420      	bmi.n	8003e48 <_malloc_r+0xd0>
 8003e06:	2a0b      	cmp	r2, #11
 8003e08:	d917      	bls.n	8003e3a <_malloc_r+0xc2>
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	6025      	str	r5, [r4, #0]
 8003e10:	bf18      	it	ne
 8003e12:	6059      	strne	r1, [r3, #4]
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	bf08      	it	eq
 8003e18:	f8c8 1000 	streq.w	r1, [r8]
 8003e1c:	5162      	str	r2, [r4, r5]
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	4630      	mov	r0, r6
 8003e22:	f000 f82f 	bl	8003e84 <__malloc_unlock>
 8003e26:	f104 000b 	add.w	r0, r4, #11
 8003e2a:	1d23      	adds	r3, r4, #4
 8003e2c:	f020 0007 	bic.w	r0, r0, #7
 8003e30:	1ac2      	subs	r2, r0, r3
 8003e32:	bf1c      	itt	ne
 8003e34:	1a1b      	subne	r3, r3, r0
 8003e36:	50a3      	strne	r3, [r4, r2]
 8003e38:	e7af      	b.n	8003d9a <_malloc_r+0x22>
 8003e3a:	6862      	ldr	r2, [r4, #4]
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	bf0c      	ite	eq
 8003e40:	f8c8 2000 	streq.w	r2, [r8]
 8003e44:	605a      	strne	r2, [r3, #4]
 8003e46:	e7eb      	b.n	8003e20 <_malloc_r+0xa8>
 8003e48:	4623      	mov	r3, r4
 8003e4a:	6864      	ldr	r4, [r4, #4]
 8003e4c:	e7ae      	b.n	8003dac <_malloc_r+0x34>
 8003e4e:	463c      	mov	r4, r7
 8003e50:	687f      	ldr	r7, [r7, #4]
 8003e52:	e7b6      	b.n	8003dc2 <_malloc_r+0x4a>
 8003e54:	461a      	mov	r2, r3
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	42a3      	cmp	r3, r4
 8003e5a:	d1fb      	bne.n	8003e54 <_malloc_r+0xdc>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6053      	str	r3, [r2, #4]
 8003e60:	e7de      	b.n	8003e20 <_malloc_r+0xa8>
 8003e62:	230c      	movs	r3, #12
 8003e64:	6033      	str	r3, [r6, #0]
 8003e66:	4630      	mov	r0, r6
 8003e68:	f000 f80c 	bl	8003e84 <__malloc_unlock>
 8003e6c:	e794      	b.n	8003d98 <_malloc_r+0x20>
 8003e6e:	6005      	str	r5, [r0, #0]
 8003e70:	e7d6      	b.n	8003e20 <_malloc_r+0xa8>
 8003e72:	bf00      	nop
 8003e74:	2000031c 	.word	0x2000031c

08003e78 <__malloc_lock>:
 8003e78:	4801      	ldr	r0, [pc, #4]	@ (8003e80 <__malloc_lock+0x8>)
 8003e7a:	f7ff bf0e 	b.w	8003c9a <__retarget_lock_acquire_recursive>
 8003e7e:	bf00      	nop
 8003e80:	20000314 	.word	0x20000314

08003e84 <__malloc_unlock>:
 8003e84:	4801      	ldr	r0, [pc, #4]	@ (8003e8c <__malloc_unlock+0x8>)
 8003e86:	f7ff bf09 	b.w	8003c9c <__retarget_lock_release_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	20000314 	.word	0x20000314

08003e90 <__sfputc_r>:
 8003e90:	6893      	ldr	r3, [r2, #8]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	b410      	push	{r4}
 8003e98:	6093      	str	r3, [r2, #8]
 8003e9a:	da08      	bge.n	8003eae <__sfputc_r+0x1e>
 8003e9c:	6994      	ldr	r4, [r2, #24]
 8003e9e:	42a3      	cmp	r3, r4
 8003ea0:	db01      	blt.n	8003ea6 <__sfputc_r+0x16>
 8003ea2:	290a      	cmp	r1, #10
 8003ea4:	d103      	bne.n	8003eae <__sfputc_r+0x1e>
 8003ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eaa:	f7ff bde8 	b.w	8003a7e <__swbuf_r>
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	1c58      	adds	r0, r3, #1
 8003eb2:	6010      	str	r0, [r2, #0]
 8003eb4:	7019      	strb	r1, [r3, #0]
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <__sfputs_r>:
 8003ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	18d5      	adds	r5, r2, r3
 8003ec8:	42ac      	cmp	r4, r5
 8003eca:	d101      	bne.n	8003ed0 <__sfputs_r+0x12>
 8003ecc:	2000      	movs	r0, #0
 8003ece:	e007      	b.n	8003ee0 <__sfputs_r+0x22>
 8003ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed4:	463a      	mov	r2, r7
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f7ff ffda 	bl	8003e90 <__sfputc_r>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d1f3      	bne.n	8003ec8 <__sfputs_r+0xa>
 8003ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ee4 <_vfiprintf_r>:
 8003ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee8:	460d      	mov	r5, r1
 8003eea:	b09d      	sub	sp, #116	@ 0x74
 8003eec:	4614      	mov	r4, r2
 8003eee:	4698      	mov	r8, r3
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	b118      	cbz	r0, 8003efc <_vfiprintf_r+0x18>
 8003ef4:	6a03      	ldr	r3, [r0, #32]
 8003ef6:	b90b      	cbnz	r3, 8003efc <_vfiprintf_r+0x18>
 8003ef8:	f7ff fcd8 	bl	80038ac <__sinit>
 8003efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003efe:	07d9      	lsls	r1, r3, #31
 8003f00:	d405      	bmi.n	8003f0e <_vfiprintf_r+0x2a>
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	059a      	lsls	r2, r3, #22
 8003f06:	d402      	bmi.n	8003f0e <_vfiprintf_r+0x2a>
 8003f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f0a:	f7ff fec6 	bl	8003c9a <__retarget_lock_acquire_recursive>
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	071b      	lsls	r3, r3, #28
 8003f12:	d501      	bpl.n	8003f18 <_vfiprintf_r+0x34>
 8003f14:	692b      	ldr	r3, [r5, #16]
 8003f16:	b99b      	cbnz	r3, 8003f40 <_vfiprintf_r+0x5c>
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f7ff fdee 	bl	8003afc <__swsetup_r>
 8003f20:	b170      	cbz	r0, 8003f40 <_vfiprintf_r+0x5c>
 8003f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f24:	07dc      	lsls	r4, r3, #31
 8003f26:	d504      	bpl.n	8003f32 <_vfiprintf_r+0x4e>
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	b01d      	add	sp, #116	@ 0x74
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f32:	89ab      	ldrh	r3, [r5, #12]
 8003f34:	0598      	lsls	r0, r3, #22
 8003f36:	d4f7      	bmi.n	8003f28 <_vfiprintf_r+0x44>
 8003f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f3a:	f7ff feaf 	bl	8003c9c <__retarget_lock_release_recursive>
 8003f3e:	e7f3      	b.n	8003f28 <_vfiprintf_r+0x44>
 8003f40:	2300      	movs	r3, #0
 8003f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f44:	2320      	movs	r3, #32
 8003f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f4e:	2330      	movs	r3, #48	@ 0x30
 8003f50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004100 <_vfiprintf_r+0x21c>
 8003f54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f58:	f04f 0901 	mov.w	r9, #1
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	469a      	mov	sl, r3
 8003f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f64:	b10a      	cbz	r2, 8003f6a <_vfiprintf_r+0x86>
 8003f66:	2a25      	cmp	r2, #37	@ 0x25
 8003f68:	d1f9      	bne.n	8003f5e <_vfiprintf_r+0x7a>
 8003f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8003f6e:	d00b      	beq.n	8003f88 <_vfiprintf_r+0xa4>
 8003f70:	465b      	mov	r3, fp
 8003f72:	4622      	mov	r2, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	4630      	mov	r0, r6
 8003f78:	f7ff ffa1 	bl	8003ebe <__sfputs_r>
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	f000 80a7 	beq.w	80040d0 <_vfiprintf_r+0x1ec>
 8003f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f84:	445a      	add	r2, fp
 8003f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f88:	f89a 3000 	ldrb.w	r3, [sl]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 809f 	beq.w	80040d0 <_vfiprintf_r+0x1ec>
 8003f92:	2300      	movs	r3, #0
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f9c:	f10a 0a01 	add.w	sl, sl, #1
 8003fa0:	9304      	str	r3, [sp, #16]
 8003fa2:	9307      	str	r3, [sp, #28]
 8003fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003faa:	4654      	mov	r4, sl
 8003fac:	2205      	movs	r2, #5
 8003fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb2:	4853      	ldr	r0, [pc, #332]	@ (8004100 <_vfiprintf_r+0x21c>)
 8003fb4:	f7fc f91c 	bl	80001f0 <memchr>
 8003fb8:	9a04      	ldr	r2, [sp, #16]
 8003fba:	b9d8      	cbnz	r0, 8003ff4 <_vfiprintf_r+0x110>
 8003fbc:	06d1      	lsls	r1, r2, #27
 8003fbe:	bf44      	itt	mi
 8003fc0:	2320      	movmi	r3, #32
 8003fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fc6:	0713      	lsls	r3, r2, #28
 8003fc8:	bf44      	itt	mi
 8003fca:	232b      	movmi	r3, #43	@ 0x2b
 8003fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fd6:	d015      	beq.n	8004004 <_vfiprintf_r+0x120>
 8003fd8:	9a07      	ldr	r2, [sp, #28]
 8003fda:	4654      	mov	r4, sl
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f04f 0c0a 	mov.w	ip, #10
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fe8:	3b30      	subs	r3, #48	@ 0x30
 8003fea:	2b09      	cmp	r3, #9
 8003fec:	d94b      	bls.n	8004086 <_vfiprintf_r+0x1a2>
 8003fee:	b1b0      	cbz	r0, 800401e <_vfiprintf_r+0x13a>
 8003ff0:	9207      	str	r2, [sp, #28]
 8003ff2:	e014      	b.n	800401e <_vfiprintf_r+0x13a>
 8003ff4:	eba0 0308 	sub.w	r3, r0, r8
 8003ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	9304      	str	r3, [sp, #16]
 8004000:	46a2      	mov	sl, r4
 8004002:	e7d2      	b.n	8003faa <_vfiprintf_r+0xc6>
 8004004:	9b03      	ldr	r3, [sp, #12]
 8004006:	1d19      	adds	r1, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	9103      	str	r1, [sp, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfbb      	ittet	lt
 8004010:	425b      	neglt	r3, r3
 8004012:	f042 0202 	orrlt.w	r2, r2, #2
 8004016:	9307      	strge	r3, [sp, #28]
 8004018:	9307      	strlt	r3, [sp, #28]
 800401a:	bfb8      	it	lt
 800401c:	9204      	strlt	r2, [sp, #16]
 800401e:	7823      	ldrb	r3, [r4, #0]
 8004020:	2b2e      	cmp	r3, #46	@ 0x2e
 8004022:	d10a      	bne.n	800403a <_vfiprintf_r+0x156>
 8004024:	7863      	ldrb	r3, [r4, #1]
 8004026:	2b2a      	cmp	r3, #42	@ 0x2a
 8004028:	d132      	bne.n	8004090 <_vfiprintf_r+0x1ac>
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	1d1a      	adds	r2, r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	9203      	str	r2, [sp, #12]
 8004032:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004036:	3402      	adds	r4, #2
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004110 <_vfiprintf_r+0x22c>
 800403e:	7821      	ldrb	r1, [r4, #0]
 8004040:	2203      	movs	r2, #3
 8004042:	4650      	mov	r0, sl
 8004044:	f7fc f8d4 	bl	80001f0 <memchr>
 8004048:	b138      	cbz	r0, 800405a <_vfiprintf_r+0x176>
 800404a:	9b04      	ldr	r3, [sp, #16]
 800404c:	eba0 000a 	sub.w	r0, r0, sl
 8004050:	2240      	movs	r2, #64	@ 0x40
 8004052:	4082      	lsls	r2, r0
 8004054:	4313      	orrs	r3, r2
 8004056:	3401      	adds	r4, #1
 8004058:	9304      	str	r3, [sp, #16]
 800405a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405e:	4829      	ldr	r0, [pc, #164]	@ (8004104 <_vfiprintf_r+0x220>)
 8004060:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004064:	2206      	movs	r2, #6
 8004066:	f7fc f8c3 	bl	80001f0 <memchr>
 800406a:	2800      	cmp	r0, #0
 800406c:	d03f      	beq.n	80040ee <_vfiprintf_r+0x20a>
 800406e:	4b26      	ldr	r3, [pc, #152]	@ (8004108 <_vfiprintf_r+0x224>)
 8004070:	bb1b      	cbnz	r3, 80040ba <_vfiprintf_r+0x1d6>
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	3307      	adds	r3, #7
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	3308      	adds	r3, #8
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004080:	443b      	add	r3, r7
 8004082:	9309      	str	r3, [sp, #36]	@ 0x24
 8004084:	e76a      	b.n	8003f5c <_vfiprintf_r+0x78>
 8004086:	fb0c 3202 	mla	r2, ip, r2, r3
 800408a:	460c      	mov	r4, r1
 800408c:	2001      	movs	r0, #1
 800408e:	e7a8      	b.n	8003fe2 <_vfiprintf_r+0xfe>
 8004090:	2300      	movs	r3, #0
 8004092:	3401      	adds	r4, #1
 8004094:	9305      	str	r3, [sp, #20]
 8004096:	4619      	mov	r1, r3
 8004098:	f04f 0c0a 	mov.w	ip, #10
 800409c:	4620      	mov	r0, r4
 800409e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040a2:	3a30      	subs	r2, #48	@ 0x30
 80040a4:	2a09      	cmp	r2, #9
 80040a6:	d903      	bls.n	80040b0 <_vfiprintf_r+0x1cc>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0c6      	beq.n	800403a <_vfiprintf_r+0x156>
 80040ac:	9105      	str	r1, [sp, #20]
 80040ae:	e7c4      	b.n	800403a <_vfiprintf_r+0x156>
 80040b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b4:	4604      	mov	r4, r0
 80040b6:	2301      	movs	r3, #1
 80040b8:	e7f0      	b.n	800409c <_vfiprintf_r+0x1b8>
 80040ba:	ab03      	add	r3, sp, #12
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	462a      	mov	r2, r5
 80040c0:	4b12      	ldr	r3, [pc, #72]	@ (800410c <_vfiprintf_r+0x228>)
 80040c2:	a904      	add	r1, sp, #16
 80040c4:	4630      	mov	r0, r6
 80040c6:	f3af 8000 	nop.w
 80040ca:	4607      	mov	r7, r0
 80040cc:	1c78      	adds	r0, r7, #1
 80040ce:	d1d6      	bne.n	800407e <_vfiprintf_r+0x19a>
 80040d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040d2:	07d9      	lsls	r1, r3, #31
 80040d4:	d405      	bmi.n	80040e2 <_vfiprintf_r+0x1fe>
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	059a      	lsls	r2, r3, #22
 80040da:	d402      	bmi.n	80040e2 <_vfiprintf_r+0x1fe>
 80040dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040de:	f7ff fddd 	bl	8003c9c <__retarget_lock_release_recursive>
 80040e2:	89ab      	ldrh	r3, [r5, #12]
 80040e4:	065b      	lsls	r3, r3, #25
 80040e6:	f53f af1f 	bmi.w	8003f28 <_vfiprintf_r+0x44>
 80040ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040ec:	e71e      	b.n	8003f2c <_vfiprintf_r+0x48>
 80040ee:	ab03      	add	r3, sp, #12
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	462a      	mov	r2, r5
 80040f4:	4b05      	ldr	r3, [pc, #20]	@ (800410c <_vfiprintf_r+0x228>)
 80040f6:	a904      	add	r1, sp, #16
 80040f8:	4630      	mov	r0, r6
 80040fa:	f000 f879 	bl	80041f0 <_printf_i>
 80040fe:	e7e4      	b.n	80040ca <_vfiprintf_r+0x1e6>
 8004100:	0800472a 	.word	0x0800472a
 8004104:	08004734 	.word	0x08004734
 8004108:	00000000 	.word	0x00000000
 800410c:	08003ebf 	.word	0x08003ebf
 8004110:	08004730 	.word	0x08004730

08004114 <_printf_common>:
 8004114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004118:	4616      	mov	r6, r2
 800411a:	4698      	mov	r8, r3
 800411c:	688a      	ldr	r2, [r1, #8]
 800411e:	690b      	ldr	r3, [r1, #16]
 8004120:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004124:	4293      	cmp	r3, r2
 8004126:	bfb8      	it	lt
 8004128:	4613      	movlt	r3, r2
 800412a:	6033      	str	r3, [r6, #0]
 800412c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004130:	4607      	mov	r7, r0
 8004132:	460c      	mov	r4, r1
 8004134:	b10a      	cbz	r2, 800413a <_printf_common+0x26>
 8004136:	3301      	adds	r3, #1
 8004138:	6033      	str	r3, [r6, #0]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	0699      	lsls	r1, r3, #26
 800413e:	bf42      	ittt	mi
 8004140:	6833      	ldrmi	r3, [r6, #0]
 8004142:	3302      	addmi	r3, #2
 8004144:	6033      	strmi	r3, [r6, #0]
 8004146:	6825      	ldr	r5, [r4, #0]
 8004148:	f015 0506 	ands.w	r5, r5, #6
 800414c:	d106      	bne.n	800415c <_printf_common+0x48>
 800414e:	f104 0a19 	add.w	sl, r4, #25
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	6832      	ldr	r2, [r6, #0]
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	42ab      	cmp	r3, r5
 800415a:	dc26      	bgt.n	80041aa <_printf_common+0x96>
 800415c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	3b00      	subs	r3, #0
 8004164:	bf18      	it	ne
 8004166:	2301      	movne	r3, #1
 8004168:	0692      	lsls	r2, r2, #26
 800416a:	d42b      	bmi.n	80041c4 <_printf_common+0xb0>
 800416c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004170:	4641      	mov	r1, r8
 8004172:	4638      	mov	r0, r7
 8004174:	47c8      	blx	r9
 8004176:	3001      	adds	r0, #1
 8004178:	d01e      	beq.n	80041b8 <_printf_common+0xa4>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	6922      	ldr	r2, [r4, #16]
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	2b04      	cmp	r3, #4
 8004184:	bf02      	ittt	eq
 8004186:	68e5      	ldreq	r5, [r4, #12]
 8004188:	6833      	ldreq	r3, [r6, #0]
 800418a:	1aed      	subeq	r5, r5, r3
 800418c:	68a3      	ldr	r3, [r4, #8]
 800418e:	bf0c      	ite	eq
 8004190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004194:	2500      	movne	r5, #0
 8004196:	4293      	cmp	r3, r2
 8004198:	bfc4      	itt	gt
 800419a:	1a9b      	subgt	r3, r3, r2
 800419c:	18ed      	addgt	r5, r5, r3
 800419e:	2600      	movs	r6, #0
 80041a0:	341a      	adds	r4, #26
 80041a2:	42b5      	cmp	r5, r6
 80041a4:	d11a      	bne.n	80041dc <_printf_common+0xc8>
 80041a6:	2000      	movs	r0, #0
 80041a8:	e008      	b.n	80041bc <_printf_common+0xa8>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4652      	mov	r2, sl
 80041ae:	4641      	mov	r1, r8
 80041b0:	4638      	mov	r0, r7
 80041b2:	47c8      	blx	r9
 80041b4:	3001      	adds	r0, #1
 80041b6:	d103      	bne.n	80041c0 <_printf_common+0xac>
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c0:	3501      	adds	r5, #1
 80041c2:	e7c6      	b.n	8004152 <_printf_common+0x3e>
 80041c4:	18e1      	adds	r1, r4, r3
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	2030      	movs	r0, #48	@ 0x30
 80041ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041ce:	4422      	add	r2, r4
 80041d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041d8:	3302      	adds	r3, #2
 80041da:	e7c7      	b.n	800416c <_printf_common+0x58>
 80041dc:	2301      	movs	r3, #1
 80041de:	4622      	mov	r2, r4
 80041e0:	4641      	mov	r1, r8
 80041e2:	4638      	mov	r0, r7
 80041e4:	47c8      	blx	r9
 80041e6:	3001      	adds	r0, #1
 80041e8:	d0e6      	beq.n	80041b8 <_printf_common+0xa4>
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7d9      	b.n	80041a2 <_printf_common+0x8e>
	...

080041f0 <_printf_i>:
 80041f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	7e0f      	ldrb	r7, [r1, #24]
 80041f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041f8:	2f78      	cmp	r7, #120	@ 0x78
 80041fa:	4691      	mov	r9, r2
 80041fc:	4680      	mov	r8, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	469a      	mov	sl, r3
 8004202:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004206:	d807      	bhi.n	8004218 <_printf_i+0x28>
 8004208:	2f62      	cmp	r7, #98	@ 0x62
 800420a:	d80a      	bhi.n	8004222 <_printf_i+0x32>
 800420c:	2f00      	cmp	r7, #0
 800420e:	f000 80d2 	beq.w	80043b6 <_printf_i+0x1c6>
 8004212:	2f58      	cmp	r7, #88	@ 0x58
 8004214:	f000 80b9 	beq.w	800438a <_printf_i+0x19a>
 8004218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800421c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004220:	e03a      	b.n	8004298 <_printf_i+0xa8>
 8004222:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004226:	2b15      	cmp	r3, #21
 8004228:	d8f6      	bhi.n	8004218 <_printf_i+0x28>
 800422a:	a101      	add	r1, pc, #4	@ (adr r1, 8004230 <_printf_i+0x40>)
 800422c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004230:	08004289 	.word	0x08004289
 8004234:	0800429d 	.word	0x0800429d
 8004238:	08004219 	.word	0x08004219
 800423c:	08004219 	.word	0x08004219
 8004240:	08004219 	.word	0x08004219
 8004244:	08004219 	.word	0x08004219
 8004248:	0800429d 	.word	0x0800429d
 800424c:	08004219 	.word	0x08004219
 8004250:	08004219 	.word	0x08004219
 8004254:	08004219 	.word	0x08004219
 8004258:	08004219 	.word	0x08004219
 800425c:	0800439d 	.word	0x0800439d
 8004260:	080042c7 	.word	0x080042c7
 8004264:	08004357 	.word	0x08004357
 8004268:	08004219 	.word	0x08004219
 800426c:	08004219 	.word	0x08004219
 8004270:	080043bf 	.word	0x080043bf
 8004274:	08004219 	.word	0x08004219
 8004278:	080042c7 	.word	0x080042c7
 800427c:	08004219 	.word	0x08004219
 8004280:	08004219 	.word	0x08004219
 8004284:	0800435f 	.word	0x0800435f
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	1d1a      	adds	r2, r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6032      	str	r2, [r6, #0]
 8004290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004294:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004298:	2301      	movs	r3, #1
 800429a:	e09d      	b.n	80043d8 <_printf_i+0x1e8>
 800429c:	6833      	ldr	r3, [r6, #0]
 800429e:	6820      	ldr	r0, [r4, #0]
 80042a0:	1d19      	adds	r1, r3, #4
 80042a2:	6031      	str	r1, [r6, #0]
 80042a4:	0606      	lsls	r6, r0, #24
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0xbc>
 80042a8:	681d      	ldr	r5, [r3, #0]
 80042aa:	e003      	b.n	80042b4 <_printf_i+0xc4>
 80042ac:	0645      	lsls	r5, r0, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0xb8>
 80042b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042b4:	2d00      	cmp	r5, #0
 80042b6:	da03      	bge.n	80042c0 <_printf_i+0xd0>
 80042b8:	232d      	movs	r3, #45	@ 0x2d
 80042ba:	426d      	negs	r5, r5
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042c0:	4859      	ldr	r0, [pc, #356]	@ (8004428 <_printf_i+0x238>)
 80042c2:	230a      	movs	r3, #10
 80042c4:	e011      	b.n	80042ea <_printf_i+0xfa>
 80042c6:	6821      	ldr	r1, [r4, #0]
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	0608      	lsls	r0, r1, #24
 80042cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80042d0:	d402      	bmi.n	80042d8 <_printf_i+0xe8>
 80042d2:	0649      	lsls	r1, r1, #25
 80042d4:	bf48      	it	mi
 80042d6:	b2ad      	uxthmi	r5, r5
 80042d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80042da:	4853      	ldr	r0, [pc, #332]	@ (8004428 <_printf_i+0x238>)
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	bf14      	ite	ne
 80042e0:	230a      	movne	r3, #10
 80042e2:	2308      	moveq	r3, #8
 80042e4:	2100      	movs	r1, #0
 80042e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ea:	6866      	ldr	r6, [r4, #4]
 80042ec:	60a6      	str	r6, [r4, #8]
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	bfa2      	ittt	ge
 80042f2:	6821      	ldrge	r1, [r4, #0]
 80042f4:	f021 0104 	bicge.w	r1, r1, #4
 80042f8:	6021      	strge	r1, [r4, #0]
 80042fa:	b90d      	cbnz	r5, 8004300 <_printf_i+0x110>
 80042fc:	2e00      	cmp	r6, #0
 80042fe:	d04b      	beq.n	8004398 <_printf_i+0x1a8>
 8004300:	4616      	mov	r6, r2
 8004302:	fbb5 f1f3 	udiv	r1, r5, r3
 8004306:	fb03 5711 	mls	r7, r3, r1, r5
 800430a:	5dc7      	ldrb	r7, [r0, r7]
 800430c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004310:	462f      	mov	r7, r5
 8004312:	42bb      	cmp	r3, r7
 8004314:	460d      	mov	r5, r1
 8004316:	d9f4      	bls.n	8004302 <_printf_i+0x112>
 8004318:	2b08      	cmp	r3, #8
 800431a:	d10b      	bne.n	8004334 <_printf_i+0x144>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	07df      	lsls	r7, r3, #31
 8004320:	d508      	bpl.n	8004334 <_printf_i+0x144>
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	6861      	ldr	r1, [r4, #4]
 8004326:	4299      	cmp	r1, r3
 8004328:	bfde      	ittt	le
 800432a:	2330      	movle	r3, #48	@ 0x30
 800432c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004334:	1b92      	subs	r2, r2, r6
 8004336:	6122      	str	r2, [r4, #16]
 8004338:	f8cd a000 	str.w	sl, [sp]
 800433c:	464b      	mov	r3, r9
 800433e:	aa03      	add	r2, sp, #12
 8004340:	4621      	mov	r1, r4
 8004342:	4640      	mov	r0, r8
 8004344:	f7ff fee6 	bl	8004114 <_printf_common>
 8004348:	3001      	adds	r0, #1
 800434a:	d14a      	bne.n	80043e2 <_printf_i+0x1f2>
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	b004      	add	sp, #16
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	f043 0320 	orr.w	r3, r3, #32
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	4833      	ldr	r0, [pc, #204]	@ (800442c <_printf_i+0x23c>)
 8004360:	2778      	movs	r7, #120	@ 0x78
 8004362:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	6831      	ldr	r1, [r6, #0]
 800436a:	061f      	lsls	r7, r3, #24
 800436c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004370:	d402      	bmi.n	8004378 <_printf_i+0x188>
 8004372:	065f      	lsls	r7, r3, #25
 8004374:	bf48      	it	mi
 8004376:	b2ad      	uxthmi	r5, r5
 8004378:	6031      	str	r1, [r6, #0]
 800437a:	07d9      	lsls	r1, r3, #31
 800437c:	bf44      	itt	mi
 800437e:	f043 0320 	orrmi.w	r3, r3, #32
 8004382:	6023      	strmi	r3, [r4, #0]
 8004384:	b11d      	cbz	r5, 800438e <_printf_i+0x19e>
 8004386:	2310      	movs	r3, #16
 8004388:	e7ac      	b.n	80042e4 <_printf_i+0xf4>
 800438a:	4827      	ldr	r0, [pc, #156]	@ (8004428 <_printf_i+0x238>)
 800438c:	e7e9      	b.n	8004362 <_printf_i+0x172>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	f023 0320 	bic.w	r3, r3, #32
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	e7f6      	b.n	8004386 <_printf_i+0x196>
 8004398:	4616      	mov	r6, r2
 800439a:	e7bd      	b.n	8004318 <_printf_i+0x128>
 800439c:	6833      	ldr	r3, [r6, #0]
 800439e:	6825      	ldr	r5, [r4, #0]
 80043a0:	6961      	ldr	r1, [r4, #20]
 80043a2:	1d18      	adds	r0, r3, #4
 80043a4:	6030      	str	r0, [r6, #0]
 80043a6:	062e      	lsls	r6, r5, #24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0x1c0>
 80043ac:	6019      	str	r1, [r3, #0]
 80043ae:	e002      	b.n	80043b6 <_printf_i+0x1c6>
 80043b0:	0668      	lsls	r0, r5, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0x1bc>
 80043b4:	8019      	strh	r1, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	4616      	mov	r6, r2
 80043bc:	e7bc      	b.n	8004338 <_printf_i+0x148>
 80043be:	6833      	ldr	r3, [r6, #0]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	6032      	str	r2, [r6, #0]
 80043c4:	681e      	ldr	r6, [r3, #0]
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	2100      	movs	r1, #0
 80043ca:	4630      	mov	r0, r6
 80043cc:	f7fb ff10 	bl	80001f0 <memchr>
 80043d0:	b108      	cbz	r0, 80043d6 <_printf_i+0x1e6>
 80043d2:	1b80      	subs	r0, r0, r6
 80043d4:	6060      	str	r0, [r4, #4]
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	2300      	movs	r3, #0
 80043dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e0:	e7aa      	b.n	8004338 <_printf_i+0x148>
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	4632      	mov	r2, r6
 80043e6:	4649      	mov	r1, r9
 80043e8:	4640      	mov	r0, r8
 80043ea:	47d0      	blx	sl
 80043ec:	3001      	adds	r0, #1
 80043ee:	d0ad      	beq.n	800434c <_printf_i+0x15c>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	079b      	lsls	r3, r3, #30
 80043f4:	d413      	bmi.n	800441e <_printf_i+0x22e>
 80043f6:	68e0      	ldr	r0, [r4, #12]
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	4298      	cmp	r0, r3
 80043fc:	bfb8      	it	lt
 80043fe:	4618      	movlt	r0, r3
 8004400:	e7a6      	b.n	8004350 <_printf_i+0x160>
 8004402:	2301      	movs	r3, #1
 8004404:	4632      	mov	r2, r6
 8004406:	4649      	mov	r1, r9
 8004408:	4640      	mov	r0, r8
 800440a:	47d0      	blx	sl
 800440c:	3001      	adds	r0, #1
 800440e:	d09d      	beq.n	800434c <_printf_i+0x15c>
 8004410:	3501      	adds	r5, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	9903      	ldr	r1, [sp, #12]
 8004416:	1a5b      	subs	r3, r3, r1
 8004418:	42ab      	cmp	r3, r5
 800441a:	dcf2      	bgt.n	8004402 <_printf_i+0x212>
 800441c:	e7eb      	b.n	80043f6 <_printf_i+0x206>
 800441e:	2500      	movs	r5, #0
 8004420:	f104 0619 	add.w	r6, r4, #25
 8004424:	e7f5      	b.n	8004412 <_printf_i+0x222>
 8004426:	bf00      	nop
 8004428:	0800473b 	.word	0x0800473b
 800442c:	0800474c 	.word	0x0800474c

08004430 <__sflush_r>:
 8004430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004438:	0716      	lsls	r6, r2, #28
 800443a:	4605      	mov	r5, r0
 800443c:	460c      	mov	r4, r1
 800443e:	d454      	bmi.n	80044ea <__sflush_r+0xba>
 8004440:	684b      	ldr	r3, [r1, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	dc02      	bgt.n	800444c <__sflush_r+0x1c>
 8004446:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	dd48      	ble.n	80044de <__sflush_r+0xae>
 800444c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800444e:	2e00      	cmp	r6, #0
 8004450:	d045      	beq.n	80044de <__sflush_r+0xae>
 8004452:	2300      	movs	r3, #0
 8004454:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004458:	682f      	ldr	r7, [r5, #0]
 800445a:	6a21      	ldr	r1, [r4, #32]
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	d030      	beq.n	80044c2 <__sflush_r+0x92>
 8004460:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	0759      	lsls	r1, r3, #29
 8004466:	d505      	bpl.n	8004474 <__sflush_r+0x44>
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800446e:	b10b      	cbz	r3, 8004474 <__sflush_r+0x44>
 8004470:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004472:	1ad2      	subs	r2, r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004478:	6a21      	ldr	r1, [r4, #32]
 800447a:	4628      	mov	r0, r5
 800447c:	47b0      	blx	r6
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	d106      	bne.n	8004492 <__sflush_r+0x62>
 8004484:	6829      	ldr	r1, [r5, #0]
 8004486:	291d      	cmp	r1, #29
 8004488:	d82b      	bhi.n	80044e2 <__sflush_r+0xb2>
 800448a:	4a2a      	ldr	r2, [pc, #168]	@ (8004534 <__sflush_r+0x104>)
 800448c:	410a      	asrs	r2, r1
 800448e:	07d6      	lsls	r6, r2, #31
 8004490:	d427      	bmi.n	80044e2 <__sflush_r+0xb2>
 8004492:	2200      	movs	r2, #0
 8004494:	6062      	str	r2, [r4, #4]
 8004496:	04d9      	lsls	r1, r3, #19
 8004498:	6922      	ldr	r2, [r4, #16]
 800449a:	6022      	str	r2, [r4, #0]
 800449c:	d504      	bpl.n	80044a8 <__sflush_r+0x78>
 800449e:	1c42      	adds	r2, r0, #1
 80044a0:	d101      	bne.n	80044a6 <__sflush_r+0x76>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	b903      	cbnz	r3, 80044a8 <__sflush_r+0x78>
 80044a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80044a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044aa:	602f      	str	r7, [r5, #0]
 80044ac:	b1b9      	cbz	r1, 80044de <__sflush_r+0xae>
 80044ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044b2:	4299      	cmp	r1, r3
 80044b4:	d002      	beq.n	80044bc <__sflush_r+0x8c>
 80044b6:	4628      	mov	r0, r5
 80044b8:	f7ff fbf2 	bl	8003ca0 <_free_r>
 80044bc:	2300      	movs	r3, #0
 80044be:	6363      	str	r3, [r4, #52]	@ 0x34
 80044c0:	e00d      	b.n	80044de <__sflush_r+0xae>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b0      	blx	r6
 80044c8:	4602      	mov	r2, r0
 80044ca:	1c50      	adds	r0, r2, #1
 80044cc:	d1c9      	bne.n	8004462 <__sflush_r+0x32>
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0c6      	beq.n	8004462 <__sflush_r+0x32>
 80044d4:	2b1d      	cmp	r3, #29
 80044d6:	d001      	beq.n	80044dc <__sflush_r+0xac>
 80044d8:	2b16      	cmp	r3, #22
 80044da:	d11e      	bne.n	800451a <__sflush_r+0xea>
 80044dc:	602f      	str	r7, [r5, #0]
 80044de:	2000      	movs	r0, #0
 80044e0:	e022      	b.n	8004528 <__sflush_r+0xf8>
 80044e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044e6:	b21b      	sxth	r3, r3
 80044e8:	e01b      	b.n	8004522 <__sflush_r+0xf2>
 80044ea:	690f      	ldr	r7, [r1, #16]
 80044ec:	2f00      	cmp	r7, #0
 80044ee:	d0f6      	beq.n	80044de <__sflush_r+0xae>
 80044f0:	0793      	lsls	r3, r2, #30
 80044f2:	680e      	ldr	r6, [r1, #0]
 80044f4:	bf08      	it	eq
 80044f6:	694b      	ldreq	r3, [r1, #20]
 80044f8:	600f      	str	r7, [r1, #0]
 80044fa:	bf18      	it	ne
 80044fc:	2300      	movne	r3, #0
 80044fe:	eba6 0807 	sub.w	r8, r6, r7
 8004502:	608b      	str	r3, [r1, #8]
 8004504:	f1b8 0f00 	cmp.w	r8, #0
 8004508:	dde9      	ble.n	80044de <__sflush_r+0xae>
 800450a:	6a21      	ldr	r1, [r4, #32]
 800450c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800450e:	4643      	mov	r3, r8
 8004510:	463a      	mov	r2, r7
 8004512:	4628      	mov	r0, r5
 8004514:	47b0      	blx	r6
 8004516:	2800      	cmp	r0, #0
 8004518:	dc08      	bgt.n	800452c <__sflush_r+0xfc>
 800451a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800452c:	4407      	add	r7, r0
 800452e:	eba8 0800 	sub.w	r8, r8, r0
 8004532:	e7e7      	b.n	8004504 <__sflush_r+0xd4>
 8004534:	dfbffffe 	.word	0xdfbffffe

08004538 <_fflush_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	690b      	ldr	r3, [r1, #16]
 800453c:	4605      	mov	r5, r0
 800453e:	460c      	mov	r4, r1
 8004540:	b913      	cbnz	r3, 8004548 <_fflush_r+0x10>
 8004542:	2500      	movs	r5, #0
 8004544:	4628      	mov	r0, r5
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	b118      	cbz	r0, 8004552 <_fflush_r+0x1a>
 800454a:	6a03      	ldr	r3, [r0, #32]
 800454c:	b90b      	cbnz	r3, 8004552 <_fflush_r+0x1a>
 800454e:	f7ff f9ad 	bl	80038ac <__sinit>
 8004552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f3      	beq.n	8004542 <_fflush_r+0xa>
 800455a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800455c:	07d0      	lsls	r0, r2, #31
 800455e:	d404      	bmi.n	800456a <_fflush_r+0x32>
 8004560:	0599      	lsls	r1, r3, #22
 8004562:	d402      	bmi.n	800456a <_fflush_r+0x32>
 8004564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004566:	f7ff fb98 	bl	8003c9a <__retarget_lock_acquire_recursive>
 800456a:	4628      	mov	r0, r5
 800456c:	4621      	mov	r1, r4
 800456e:	f7ff ff5f 	bl	8004430 <__sflush_r>
 8004572:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004574:	07da      	lsls	r2, r3, #31
 8004576:	4605      	mov	r5, r0
 8004578:	d4e4      	bmi.n	8004544 <_fflush_r+0xc>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	059b      	lsls	r3, r3, #22
 800457e:	d4e1      	bmi.n	8004544 <_fflush_r+0xc>
 8004580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004582:	f7ff fb8b 	bl	8003c9c <__retarget_lock_release_recursive>
 8004586:	e7dd      	b.n	8004544 <_fflush_r+0xc>

08004588 <__swhatbuf_r>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	460c      	mov	r4, r1
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	2900      	cmp	r1, #0
 8004592:	b096      	sub	sp, #88	@ 0x58
 8004594:	4615      	mov	r5, r2
 8004596:	461e      	mov	r6, r3
 8004598:	da0d      	bge.n	80045b6 <__swhatbuf_r+0x2e>
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2340      	movne	r3, #64	@ 0x40
 80045a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80045ac:	2000      	movs	r0, #0
 80045ae:	6031      	str	r1, [r6, #0]
 80045b0:	602b      	str	r3, [r5, #0]
 80045b2:	b016      	add	sp, #88	@ 0x58
 80045b4:	bd70      	pop	{r4, r5, r6, pc}
 80045b6:	466a      	mov	r2, sp
 80045b8:	f000 f848 	bl	800464c <_fstat_r>
 80045bc:	2800      	cmp	r0, #0
 80045be:	dbec      	blt.n	800459a <__swhatbuf_r+0x12>
 80045c0:	9901      	ldr	r1, [sp, #4]
 80045c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045ca:	4259      	negs	r1, r3
 80045cc:	4159      	adcs	r1, r3
 80045ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045d2:	e7eb      	b.n	80045ac <__swhatbuf_r+0x24>

080045d4 <__smakebuf_r>:
 80045d4:	898b      	ldrh	r3, [r1, #12]
 80045d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045d8:	079d      	lsls	r5, r3, #30
 80045da:	4606      	mov	r6, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	d507      	bpl.n	80045f0 <__smakebuf_r+0x1c>
 80045e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	6123      	str	r3, [r4, #16]
 80045e8:	2301      	movs	r3, #1
 80045ea:	6163      	str	r3, [r4, #20]
 80045ec:	b003      	add	sp, #12
 80045ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f0:	ab01      	add	r3, sp, #4
 80045f2:	466a      	mov	r2, sp
 80045f4:	f7ff ffc8 	bl	8004588 <__swhatbuf_r>
 80045f8:	9f00      	ldr	r7, [sp, #0]
 80045fa:	4605      	mov	r5, r0
 80045fc:	4639      	mov	r1, r7
 80045fe:	4630      	mov	r0, r6
 8004600:	f7ff fbba 	bl	8003d78 <_malloc_r>
 8004604:	b948      	cbnz	r0, 800461a <__smakebuf_r+0x46>
 8004606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460a:	059a      	lsls	r2, r3, #22
 800460c:	d4ee      	bmi.n	80045ec <__smakebuf_r+0x18>
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	f043 0302 	orr.w	r3, r3, #2
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	e7e2      	b.n	80045e0 <__smakebuf_r+0xc>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	6020      	str	r0, [r4, #0]
 800461e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	9b01      	ldr	r3, [sp, #4]
 8004626:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800462a:	b15b      	cbz	r3, 8004644 <__smakebuf_r+0x70>
 800462c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f81d 	bl	8004670 <_isatty_r>
 8004636:	b128      	cbz	r0, 8004644 <__smakebuf_r+0x70>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	431d      	orrs	r5, r3
 8004648:	81a5      	strh	r5, [r4, #12]
 800464a:	e7cf      	b.n	80045ec <__smakebuf_r+0x18>

0800464c <_fstat_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	4d07      	ldr	r5, [pc, #28]	@ (800466c <_fstat_r+0x20>)
 8004650:	2300      	movs	r3, #0
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	4611      	mov	r1, r2
 8004658:	602b      	str	r3, [r5, #0]
 800465a:	f7fe ff1a 	bl	8003492 <_fstat>
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	d102      	bne.n	8004668 <_fstat_r+0x1c>
 8004662:	682b      	ldr	r3, [r5, #0]
 8004664:	b103      	cbz	r3, 8004668 <_fstat_r+0x1c>
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	20000310 	.word	0x20000310

08004670 <_isatty_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d06      	ldr	r5, [pc, #24]	@ (800468c <_isatty_r+0x1c>)
 8004674:	2300      	movs	r3, #0
 8004676:	4604      	mov	r4, r0
 8004678:	4608      	mov	r0, r1
 800467a:	602b      	str	r3, [r5, #0]
 800467c:	f7ff f86c 	bl	8003758 <_isatty>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_isatty_r+0x1a>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_isatty_r+0x1a>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	20000310 	.word	0x20000310

08004690 <_sbrk_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4d06      	ldr	r5, [pc, #24]	@ (80046ac <_sbrk_r+0x1c>)
 8004694:	2300      	movs	r3, #0
 8004696:	4604      	mov	r4, r0
 8004698:	4608      	mov	r0, r1
 800469a:	602b      	str	r3, [r5, #0]
 800469c:	f7fc fb6c 	bl	8000d78 <_sbrk>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_sbrk_r+0x1a>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_sbrk_r+0x1a>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000310 	.word	0x20000310

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
