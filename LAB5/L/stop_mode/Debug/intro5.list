
intro5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004818  08004818  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004820  08004820  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004820  08004820  00005820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004824  08004824  00005824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004828  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000070  08004898  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004898  00006320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000985e  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001973  00000000  00000000  0000f8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00011278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e4  00000000  00000000  00011cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c76  00000000  00000000  000124a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b01b  00000000  00000000  0002811a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a67d  00000000  00000000  00033135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd7b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  000bd7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000c0da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800472c 	.word	0x0800472c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800472c 	.word	0x0800472c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000586:	f003 f8c5 	bl	8003714 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fca3 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f839 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f98b 	bl	80008ac <MX_GPIO_Init>
  MX_TIM4_Init();
 8000596:	f000 f911 	bl	80007bc <MX_TIM4_Init>
  MX_TIM3_Init();
 800059a:	f000 f89d 	bl	80006d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 800059e:	4813      	ldr	r0, [pc, #76]	@ (80005ec <main+0x6c>)
 80005a0:	f001 fd24 	bl	8001fec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //zielona dioda
 80005a4:	2100      	movs	r1, #0
 80005a6:	4812      	ldr	r0, [pc, #72]	@ (80005f0 <main+0x70>)
 80005a8:	f001 fddc 	bl	8002164 <HAL_TIM_PWM_Start>

  int wartosc = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
HAL_SuspendTick();
 80005b0:	f000 fd26 	bl	8001000 <HAL_SuspendTick>
printf("Gasmy swiatlo\n");
 80005b4:	480f      	ldr	r0, [pc, #60]	@ (80005f4 <main+0x74>)
 80005b6:	f003 fa55 	bl	8003a64 <puts>

//HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI); //T = 1s, delay po 5 sekundach
HAL_PWR_EnterSTOPMode(0, PWR_STOPENTRY_WFI); //T = wiecej! niz 1s , podczas klikania tylko s? nie wychodzi ze stopa?
 80005ba:	2101      	movs	r1, #1
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 f821 	bl	8001604 <HAL_PWR_EnterSTOPMode>
//jak my ustalilismy. od nowa musimy inicjalizowac nasze zegarki
//rozwazanie:
//SystemClock_Config();


HAL_ResumeTick();
 80005c2:	f000 fd2d 	bl	8001020 <HAL_ResumeTick>

printf("zapalamy switlo.%d\n", wartosc);
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <main+0x78>)
 80005ca:	f003 f9e3 	bl	8003994 <iprintf>

__BKPT();
 80005ce:	be00      	bkpt	0x0000

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
printf("wchodzimy w delay\n");
 80005d0:	480a      	ldr	r0, [pc, #40]	@ (80005fc <main+0x7c>)
 80005d2:	f003 fa47 	bl	8003a64 <puts>
  while (1)
  {
	  HAL_Delay(5000);
 80005d6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005da:	f000 fced 	bl	8000fb8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e2:	4807      	ldr	r0, [pc, #28]	@ (8000600 <main+0x80>)
 80005e4:	f000 ffdb 	bl	800159e <HAL_GPIO_TogglePin>
	  HAL_Delay(5000);
 80005e8:	bf00      	nop
 80005ea:	e7f4      	b.n	80005d6 <main+0x56>
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	200000d4 	.word	0x200000d4
 80005f4:	08004744 	.word	0x08004744
 80005f8:	08004754 	.word	0x08004754
 80005fc:	08004768 	.word	0x08004768
 8000600:	40020c00 	.word	0x40020c00

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	@ 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fb06 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000678:	23c0      	movs	r3, #192	@ 0xc0
 800067a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fffb 	bl	8001684 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fa9e 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2103      	movs	r1, #3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fa5c 	bl	8001b74 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 fa87 	bl	8000bd4 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000704:	4a2c      	ldr	r2, [pc, #176]	@ (80007b8 <MX_TIM3_Init+0xe0>)
 8000706:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 800070a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800070e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800071c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800072a:	4822      	ldr	r0, [pc, #136]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 800072c:	f001 fc0e 	bl	8001f4c <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000736:	f000 fa4d 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	4619      	mov	r1, r3
 8000746:	481b      	ldr	r0, [pc, #108]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000748:	f002 f864 	bl	8002814 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000752:	f000 fa3f 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000756:	4817      	ldr	r0, [pc, #92]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000758:	f001 fdb4 	bl	80022c4 <HAL_TIM_IC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000762:	f000 fa37 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 8000776:	f002 fd33 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000780:	f000 fa28 	bl	8000bd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000788:	2301      	movs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_TIM3_Init+0xdc>)
 800079c:	f001 fedb 	bl	8002556 <HAL_TIM_IC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80007a6:	f000 fa15 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	@ 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	40000400 	.word	0x40000400

080007bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	@ 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ec:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 80007ee:	4a2e      	ldr	r2, [pc, #184]	@ (80008a8 <MX_TIM4_Init+0xec>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80007f2:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 80007f4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80007f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000800:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000802:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000806:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000814:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000816:	f001 fb99 	bl	8001f4c <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000820:	f000 f9d8 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082e:	4619      	mov	r1, r3
 8000830:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000832:	f001 ffef 	bl	8002814 <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800083c:	f000 f9ca 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000840:	4818      	ldr	r0, [pc, #96]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000842:	f001 fc35 	bl	80020b0 <HAL_TIM_PWM_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800084c:	f000 f9c2 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4619      	mov	r1, r3
 800085e:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000860:	f002 fcbe 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800086a:	f000 f9b3 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	2360      	movs	r3, #96	@ 0x60
 8000870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000872:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000888:	f001 ff02 	bl	8002690 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000892:	f000 f99f 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <MX_TIM4_Init+0xe8>)
 8000898:	f000 fa30 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3738      	adds	r7, #56	@ 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000d4 	.word	0x200000d4
 80008a8:	40000800 	.word	0x40000800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4ba6      	ldr	r3, [pc, #664]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4aa5      	ldr	r2, [pc, #660]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4ba3      	ldr	r3, [pc, #652]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b9f      	ldr	r3, [pc, #636]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a9e      	ldr	r2, [pc, #632]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b9c      	ldr	r3, [pc, #624]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b98      	ldr	r3, [pc, #608]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a97      	ldr	r2, [pc, #604]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b95      	ldr	r3, [pc, #596]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b91      	ldr	r3, [pc, #580]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a90      	ldr	r2, [pc, #576]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b8e      	ldr	r3, [pc, #568]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b8a      	ldr	r3, [pc, #552]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a89      	ldr	r2, [pc, #548]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b87      	ldr	r3, [pc, #540]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b83      	ldr	r3, [pc, #524]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a82      	ldr	r2, [pc, #520]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b80      	ldr	r3, [pc, #512]	@ (8000b60 <MX_GPIO_Init+0x2b4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2108      	movs	r1, #8
 800096e:	487d      	ldr	r0, [pc, #500]	@ (8000b64 <MX_GPIO_Init+0x2b8>)
 8000970:	f000 fdfc 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2101      	movs	r1, #1
 8000978:	487b      	ldr	r0, [pc, #492]	@ (8000b68 <MX_GPIO_Init+0x2bc>)
 800097a:	f000 fdf7 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8000984:	4879      	ldr	r0, [pc, #484]	@ (8000b6c <MX_GPIO_Init+0x2c0>)
 8000986:	f000 fdf1 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800098a:	2304      	movs	r3, #4
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4871      	ldr	r0, [pc, #452]	@ (8000b64 <MX_GPIO_Init+0x2b8>)
 800099e:	f000 fc61 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009a2:	2308      	movs	r3, #8
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	486a      	ldr	r0, [pc, #424]	@ (8000b64 <MX_GPIO_Init+0x2b8>)
 80009ba:	f000 fc53 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80009be:	2332      	movs	r3, #50	@ 0x32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4864      	ldr	r0, [pc, #400]	@ (8000b64 <MX_GPIO_Init+0x2b8>)
 80009d4:	f000 fc46 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009d8:	2301      	movs	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	485e      	ldr	r0, [pc, #376]	@ (8000b68 <MX_GPIO_Init+0x2bc>)
 80009f0:	f000 fc38 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009f4:	2308      	movs	r3, #8
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a04:	2305      	movs	r3, #5
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4856      	ldr	r0, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x2bc>)
 8000a10:	f000 fc28 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4851      	ldr	r0, [pc, #324]	@ (8000b70 <MX_GPIO_Init+0x2c4>)
 8000a2a:	f000 fc1b 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a3e:	2306      	movs	r3, #6
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4849      	ldr	r0, [pc, #292]	@ (8000b70 <MX_GPIO_Init+0x2c4>)
 8000a4a:	f000 fc0b 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a4e:	23e0      	movs	r3, #224	@ 0xe0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a5e:	2305      	movs	r3, #5
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4841      	ldr	r0, [pc, #260]	@ (8000b70 <MX_GPIO_Init+0x2c4>)
 8000a6a:	f000 fbfb 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a80:	2305      	movs	r3, #5
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	483a      	ldr	r0, [pc, #232]	@ (8000b74 <MX_GPIO_Init+0x2c8>)
 8000a8c:	f000 fbea 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000a90:	f24e 0310 	movw	r3, #57360	@ 0xe010
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4830      	ldr	r0, [pc, #192]	@ (8000b6c <MX_GPIO_Init+0x2c0>)
 8000aaa:	f000 fbdb 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aae:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4827      	ldr	r0, [pc, #156]	@ (8000b68 <MX_GPIO_Init+0x2bc>)
 8000acc:	f000 fbca 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4822      	ldr	r0, [pc, #136]	@ (8000b70 <MX_GPIO_Init+0x2c4>)
 8000ae6:	f000 fbbd 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000aea:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000afc:	230a      	movs	r3, #10
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	481a      	ldr	r0, [pc, #104]	@ (8000b70 <MX_GPIO_Init+0x2c4>)
 8000b08:	f000 fbac 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <MX_GPIO_Init+0x2c0>)
 8000b20:	f000 fba0 	bl	8001264 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b24:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2a:	2312      	movs	r3, #18
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b36:	2304      	movs	r3, #4
 8000b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <MX_GPIO_Init+0x2c8>)
 8000b42:	f000 fb8f 	bl	8001264 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2006      	movs	r0, #6
 8000b4c:	f000 fb53 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b50:	2006      	movs	r0, #6
 8000b52:	f000 fb6c 	bl	800122e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3730      	adds	r7, #48	@ 0x30
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400

08000b78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
int call_number = 0;
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
	printf("wcisnieto przycisk: %d \n", call_number); //2
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4808      	ldr	r0, [pc, #32]	@ (8000bac <HAL_GPIO_EXTI_Callback+0x34>)
 8000b8a:	f002 ff03 	bl	8003994 <iprintf>
	printf("wywolano przerwanie przyciskiem\n");
 8000b8e:	4808      	ldr	r0, [pc, #32]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0x38>)
 8000b90:	f002 ff68 	bl	8003a64 <puts>
	call_number++;
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a03      	ldr	r2, [pc, #12]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b9c:	6013      	str	r3, [r2, #0]
	//HAL_PWR_EnableSleepOnExit(); //wylaczone bo chcemy wybudzic go przyciskiem
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000011c 	.word	0x2000011c
 8000bac:	0800477c 	.word	0x0800477c
 8000bb0:	08004798 	.word	0x08004798

08000bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //wyjscie ze sleepa i stop timera
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d101      	bne.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x14>
		HAL_PWR_DisableSleepOnExit(); //
 8000bc4:	f000 fd4e 	bl	8001664 <HAL_PWR_DisableSleepOnExit>
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000008c 	.word	0x2000008c

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1e:	2007      	movs	r0, #7
 8000c20:	f000 fade 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a27      	ldr	r2, [pc, #156]	@ (8000cec <HAL_TIM_Base_MspInit+0xbc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d134      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	4a25      	ldr	r2, [pc, #148]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c8a:	2340      	movs	r3, #64	@ 0x40
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4813      	ldr	r0, [pc, #76]	@ (8000cf4 <HAL_TIM_Base_MspInit+0xc4>)
 8000ca6:	f000 fadd 	bl	8001264 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	201d      	movs	r0, #29
 8000cb0:	f000 faa1 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cb4:	201d      	movs	r0, #29
 8000cb6:	f000 faba 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cba:	e012      	b.n	8000ce2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <HAL_TIM_Base_MspInit+0xc8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40000400 	.word	0x40000400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40000800 	.word	0x40000800

08000cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <HAL_TIM_MspPostInit+0x68>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d11e      	bne.n	8000d5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_TIM_MspPostInit+0x6c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <HAL_TIM_MspPostInit+0x70>)
 8000d58:	f000 fa84 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40000800 	.word	0x40000800
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020c00 	.word	0x40020c00

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <NMI_Handler+0x4>

08000d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <MemManage_Handler+0x4>

08000d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f8d7 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fbfe 	bl	80015d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000de0:	4802      	ldr	r0, [pc, #8]	@ (8000dec <TIM3_IRQHandler+0x10>)
 8000de2:	f001 fac8 	bl	8002376 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000008c 	.word	0x2000008c

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	@ (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f002 ff4e 	bl	8003cc0 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20020000 	.word	0x20020000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000120 	.word	0x20000120
 8000e58:	20000320 	.word	0x20000320

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	@ (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e84:	f7ff ffea 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 ff0d 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb65 	bl	8000580 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec4:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 8000ec8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ecc:	20000320 	.word	0x20000320

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f96f 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fe6a 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f987 	bl	800124a <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f94f 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000124 	.word	0x20000124

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000124 	.word	0x20000124

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008

08001000 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_SuspendTick+0x1c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_SuspendTick+0x1c>)
 800100a:	f023 0302 	bic.w	r3, r3, #2
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <HAL_ResumeTick+0x1c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_ResumeTick+0x1c>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e159      	b.n	8001534 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	429a      	cmp	r2, r3
 800129a:	f040 8148 	bne.w	800152e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d130      	bne.n	8001318 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	f003 0201 	and.w	r2, r3, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b03      	cmp	r3, #3
 8001322:	d017      	beq.n	8001354 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d123      	bne.n	80013a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	220f      	movs	r2, #15
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	08da      	lsrs	r2, r3, #3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3208      	adds	r2, #8
 80013a2:	69b9      	ldr	r1, [r7, #24]
 80013a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a2 	beq.w	800152e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <HAL_GPIO_Init+0x2e8>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	4a56      	ldr	r2, [pc, #344]	@ (800154c <HAL_GPIO_Init+0x2e8>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fa:	4b54      	ldr	r3, [pc, #336]	@ (800154c <HAL_GPIO_Init+0x2e8>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001406:	4a52      	ldr	r2, [pc, #328]	@ (8001550 <HAL_GPIO_Init+0x2ec>)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a49      	ldr	r2, [pc, #292]	@ (8001554 <HAL_GPIO_Init+0x2f0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x202>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a48      	ldr	r2, [pc, #288]	@ (8001558 <HAL_GPIO_Init+0x2f4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x1fe>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a47      	ldr	r2, [pc, #284]	@ (800155c <HAL_GPIO_Init+0x2f8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x1fa>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a46      	ldr	r2, [pc, #280]	@ (8001560 <HAL_GPIO_Init+0x2fc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x1f6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a45      	ldr	r2, [pc, #276]	@ (8001564 <HAL_GPIO_Init+0x300>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x1f2>
 8001452:	2304      	movs	r3, #4
 8001454:	e008      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001456:	2307      	movs	r3, #7
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x204>
 800145a:	2303      	movs	r3, #3
 800145c:	e004      	b.n	8001468 <HAL_GPIO_Init+0x204>
 800145e:	2302      	movs	r3, #2
 8001460:	e002      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x204>
 8001466:	2300      	movs	r3, #0
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	4093      	lsls	r3, r2
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001478:	4935      	ldr	r1, [pc, #212]	@ (8001550 <HAL_GPIO_Init+0x2ec>)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a24      	ldr	r2, [pc, #144]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014da:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_GPIO_Init+0x304>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001504:	4b18      	ldr	r3, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x304>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001528:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_GPIO_Init+0x304>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	f67f aea2 	bls.w	8001280 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	@ 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	40013800 	.word	0x40013800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40020800 	.word	0x40020800
 8001560:	40020c00 	.word	0x40020c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40013c00 	.word	0x40013c00

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b0:	887a      	ldrh	r2, [r7, #2]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	041a      	lsls	r2, r3, #16
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	400b      	ands	r3, r1
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fac0 	bl	8000b78 <HAL_GPIO_EXTI_Callback>
  }
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_PWR_EnterSTOPMode+0x58>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 0203 	bic.w	r2, r3, #3
 8001618:	4910      	ldr	r1, [pc, #64]	@ (800165c <HAL_PWR_EnterSTOPMode+0x58>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001632:	bf30      	wfi
 8001634:	e005      	b.n	8001642 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d001      	beq.n	8001640 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 800163c:	bf40      	sev
      __WFE();
 800163e:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 8001640:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <HAL_PWR_EnterSTOPMode+0x5c>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6113      	str	r3, [r2, #16]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40007000 	.word	0x40007000
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800166e:	f023 0302 	bic.w	r3, r3, #2
 8001672:	6113      	str	r3, [r2, #16]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e267      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016a2:	4b88      	ldr	r3, [pc, #544]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b85      	ldr	r3, [pc, #532]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b7e      	ldr	r3, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e242      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b76      	ldr	r3, [pc, #472]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a75      	ldr	r2, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b70      	ldr	r3, [pc, #448]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6f      	ldr	r2, [pc, #444]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b6d      	ldr	r3, [pc, #436]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6c      	ldr	r2, [pc, #432]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b69      	ldr	r3, [pc, #420]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a68      	ldr	r2, [pc, #416]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b66      	ldr	r3, [pc, #408]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a65      	ldr	r2, [pc, #404]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fc30 	bl	8000fa0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fc2c 	bl	8000fa0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	@ 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e207      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b5b      	ldr	r3, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fc1c 	bl	8000fa0 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc18 	bl	8000fa0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	@ 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1f3      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b51      	ldr	r3, [pc, #324]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800179a:	4b4a      	ldr	r3, [pc, #296]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b47      	ldr	r3, [pc, #284]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b44      	ldr	r3, [pc, #272]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1c7      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4937      	ldr	r1, [pc, #220]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b34      	ldr	r3, [pc, #208]	@ (80018c8 <HAL_RCC_OscConfig+0x244>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fbd1 	bl	8000fa0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fbcd 	bl	8000fa0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1a8      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4925      	ldr	r1, [pc, #148]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <HAL_RCC_OscConfig+0x244>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fbb0 	bl	8000fa0 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fbac 	bl	8000fa0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e187      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d036      	beq.n	80018dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <HAL_RCC_OscConfig+0x248>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fb90 	bl	8000fa0 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fb8c 	bl	8000fa0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e167      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
 80018a2:	e01b      	b.n	80018dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_RCC_OscConfig+0x248>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fb79 	bl	8000fa0 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e00e      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb75 	bl	8000fa0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d907      	bls.n	80018d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e150      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	42470000 	.word	0x42470000
 80018cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b88      	ldr	r3, [pc, #544]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ea      	bne.n	80018b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8097 	beq.w	8001a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b81      	ldr	r3, [pc, #516]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b7d      	ldr	r3, [pc, #500]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	4a7c      	ldr	r2, [pc, #496]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	@ 0x40
 800190a:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b77      	ldr	r3, [pc, #476]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b74      	ldr	r3, [pc, #464]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a73      	ldr	r2, [pc, #460]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb35 	bl	8000fa0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff fb31 	bl	8000fa0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e10c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <HAL_RCC_OscConfig+0x474>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x2ea>
 8001960:	4b64      	ldr	r3, [pc, #400]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001964:	4a63      	ldr	r2, [pc, #396]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	@ 0x70
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x324>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x30c>
 8001976:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197a:	4a5e      	ldr	r2, [pc, #376]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6713      	str	r3, [r2, #112]	@ 0x70
 8001982:	4b5c      	ldr	r3, [pc, #368]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001986:	4a5b      	ldr	r2, [pc, #364]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	@ 0x70
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x324>
 8001990:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001994:	4a57      	ldr	r2, [pc, #348]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	@ 0x70
 800199c:	4b55      	ldr	r3, [pc, #340]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff faf6 	bl	8000fa0 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff faf2 	bl	8000fa0 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0cb      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	4b49      	ldr	r3, [pc, #292]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ee      	beq.n	80019b8 <HAL_RCC_OscConfig+0x334>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fae0 	bl	8000fa0 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff fadc 	bl	8000fa0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0b5      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	4b3e      	ldr	r3, [pc, #248]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ee      	bne.n	80019e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	4a38      	ldr	r2, [pc, #224]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a1 	beq.w	8001b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a22:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d05c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d141      	bne.n	8001aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <HAL_RCC_OscConfig+0x478>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fab0 	bl	8000fa0 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff faac 	bl	8000fa0 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e087      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	491b      	ldr	r1, [pc, #108]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x478>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa85 	bl	8000fa0 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fa81 	bl	8000fa0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e05c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x416>
 8001ab8:	e054      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_RCC_OscConfig+0x478>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa6e 	bl	8000fa0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff fa6a 	bl	8000fa0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e045      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
 8001ae6:	e03d      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e038      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d028      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d121      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0cc      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b68      	ldr	r3, [pc, #416]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d90c      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d044      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e067      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4934      	ldr	r1, [pc, #208]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff f99c 	bl	8000fa0 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f998 	bl	8000fa0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2b      	ldr	r3, [pc, #172]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d20c      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	490a      	ldr	r1, [pc, #40]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f8fc 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	080047b8 	.word	0x080047b8
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b094      	sub	sp, #80	@ 0x50
 8001d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d58:	4b79      	ldr	r3, [pc, #484]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x40>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f200 80e1 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d72:	e0db      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d78:	e0db      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d7e:	e0d8      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b6f      	ldr	r3, [pc, #444]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001db2:	4622      	mov	r2, r4
 8001db4:	462b      	mov	r3, r5
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	0159      	lsls	r1, r3, #5
 8001dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc4:	0150      	lsls	r0, r2, #5
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4621      	mov	r1, r4
 8001dcc:	1a51      	subs	r1, r2, r1
 8001dce:	6139      	str	r1, [r7, #16]
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de4:	4659      	mov	r1, fp
 8001de6:	018b      	lsls	r3, r1, #6
 8001de8:	4651      	mov	r1, sl
 8001dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dee:	4651      	mov	r1, sl
 8001df0:	018a      	lsls	r2, r1, #6
 8001df2:	4651      	mov	r1, sl
 8001df4:	ebb2 0801 	subs.w	r8, r2, r1
 8001df8:	4659      	mov	r1, fp
 8001dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e12:	4690      	mov	r8, r2
 8001e14:	4699      	mov	r9, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	eb18 0303 	adds.w	r3, r8, r3
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	462b      	mov	r3, r5
 8001e20:	eb49 0303 	adc.w	r3, r9, r3
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e32:	4629      	mov	r1, r5
 8001e34:	024b      	lsls	r3, r1, #9
 8001e36:	4621      	mov	r1, r4
 8001e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	024a      	lsls	r2, r1, #9
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e46:	2200      	movs	r2, #0
 8001e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e50:	f7fe fa1e 	bl	8000290 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e5c:	e058      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	4611      	mov	r1, r2
 8001e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e78:	4642      	mov	r2, r8
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0159      	lsls	r1, r3, #5
 8001e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8a:	0150      	lsls	r0, r2, #5
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4641      	mov	r1, r8
 8001e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e96:	4649      	mov	r1, r9
 8001e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	00eb      	lsls	r3, r5, #3
 8001ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	4614      	mov	r4, r2
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	eb45 0303 	adc.w	r3, r5, r3
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	028b      	lsls	r3, r1, #10
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	028a      	lsls	r2, r1, #10
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001efa:	2200      	movs	r2, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	61fa      	str	r2, [r7, #28]
 8001f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f04:	f7fe f9c4 	bl	8000290 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3750      	adds	r7, #80	@ 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	007a1200 	.word	0x007a1200

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fe5c 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fd32 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e044      	b.n	800208e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_TIM_Base_Start_IT+0xb0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800202e:	d013      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	@ (80020a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	@ (80020a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x6c>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_TIM_Base_Start_IT+0xc0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d111      	bne.n	800207c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d010      	beq.n	800208c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207a:	e007      	b.n	800208c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40014000 	.word	0x40014000

080020b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e041      	b.n	8002146 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f839 	bl	800214e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4610      	mov	r0, r2
 80020f0:	f000 fc80 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_TIM_PWM_Start+0x24>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	bf14      	ite	ne
 8002180:	2301      	movne	r3, #1
 8002182:	2300      	moveq	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e022      	b.n	80021ce <HAL_TIM_PWM_Start+0x6a>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d109      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x3e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	bf14      	ite	ne
 800219a:	2301      	movne	r3, #1
 800219c:	2300      	moveq	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e015      	b.n	80021ce <HAL_TIM_PWM_Start+0x6a>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d109      	bne.n	80021bc <HAL_TIM_PWM_Start+0x58>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e008      	b.n	80021ce <HAL_TIM_PWM_Start+0x6a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e068      	b.n	80022a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x82>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e4:	e013      	b.n	800220e <HAL_TIM_PWM_Start+0xaa>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_PWM_Start+0x92>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f4:	e00b      	b.n	800220e <HAL_TIM_PWM_Start+0xaa>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_PWM_Start+0xa2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002204:	e003      	b.n	800220e <HAL_TIM_PWM_Start+0xaa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2201      	movs	r2, #1
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 ffbc 	bl	8003194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a23      	ldr	r2, [pc, #140]	@ (80022b0 <HAL_TIM_PWM_Start+0x14c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d107      	bne.n	8002236 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002234:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <HAL_TIM_PWM_Start+0x14c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_TIM_PWM_Start+0x10e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	d013      	beq.n	8002272 <HAL_TIM_PWM_Start+0x10e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <HAL_TIM_PWM_Start+0x150>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_TIM_PWM_Start+0x10e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <HAL_TIM_PWM_Start+0x154>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_TIM_PWM_Start+0x10e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <HAL_TIM_PWM_Start+0x158>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_TIM_PWM_Start+0x10e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a14      	ldr	r2, [pc, #80]	@ (80022c0 <HAL_TIM_PWM_Start+0x15c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d111      	bne.n	8002296 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b06      	cmp	r3, #6
 8002282:	d010      	beq.n	80022a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002294:	e007      	b.n	80022a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40000c00 	.word	0x40000c00
 80022c0:	40014000 	.word	0x40014000

080022c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e041      	b.n	800235a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f839 	bl	8002362 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f000 fb76 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01b      	beq.n	80023da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f06f 0202 	mvn.w	r2, #2
 80023aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 faf8 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80023c6:	e005      	b.n	80023d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 faea 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fafb 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01b      	beq.n	8002426 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0204 	mvn.w	r2, #4
 80023f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fad2 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 8002412:	e005      	b.n	8002420 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fac4 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fad5 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d01b      	beq.n	8002472 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f06f 0208 	mvn.w	r2, #8
 8002442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2204      	movs	r2, #4
 8002448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 faac 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 800245e:	e005      	b.n	800246c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fa9e 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 faaf 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01b      	beq.n	80024be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0210 	mvn.w	r2, #16
 800248e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2208      	movs	r2, #8
 8002494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa86 	bl	80029b6 <HAL_TIM_IC_CaptureCallback>
 80024aa:	e005      	b.n	80024b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa78 	bl	80029a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa89 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f06f 0201 	mvn.w	r2, #1
 80024da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7fe fb69 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fee5 	bl	80032d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fa5a 	bl	80029de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00c      	beq.n	800254e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f06f 0220 	mvn.w	r2, #32
 8002546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 feb7 	bl	80032bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002570:	2302      	movs	r3, #2
 8002572:	e088      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x130>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11b      	bne.n	80025ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002592:	f000 fc47 	bl	8002e24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 020c 	bic.w	r2, r2, #12
 80025a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6999      	ldr	r1, [r3, #24]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	619a      	str	r2, [r3, #24]
 80025b8:	e060      	b.n	800267c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11c      	bne.n	80025fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80025d0:	f000 fcbf 	bl	8002f52 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6999      	ldr	r1, [r3, #24]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	021a      	lsls	r2, r3, #8
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]
 80025f8:	e040      	b.n	800267c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002610:	f000 fd0c 	bl	800302c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 020c 	bic.w	r2, r2, #12
 8002622:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69d9      	ldr	r1, [r3, #28]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	61da      	str	r2, [r3, #28]
 8002636:	e021      	b.n	800267c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d11c      	bne.n	8002678 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800264e:	f000 fd29 	bl	80030a4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002660:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69d9      	ldr	r1, [r3, #28]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	021a      	lsls	r2, r3, #8
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	61da      	str	r2, [r3, #28]
 8002676:	e001      	b.n	800267c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002684:	7dfb      	ldrb	r3, [r7, #23]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0ae      	b.n	800280c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	f200 809f 	bhi.w	80027fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026be:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	080026f9 	.word	0x080026f9
 80026c8:	080027fd 	.word	0x080027fd
 80026cc:	080027fd 	.word	0x080027fd
 80026d0:	080027fd 	.word	0x080027fd
 80026d4:	08002739 	.word	0x08002739
 80026d8:	080027fd 	.word	0x080027fd
 80026dc:	080027fd 	.word	0x080027fd
 80026e0:	080027fd 	.word	0x080027fd
 80026e4:	0800277b 	.word	0x0800277b
 80026e8:	080027fd 	.word	0x080027fd
 80026ec:	080027fd 	.word	0x080027fd
 80026f0:	080027fd 	.word	0x080027fd
 80026f4:	080027bb 	.word	0x080027bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fa04 	bl	8002b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0208 	orr.w	r2, r2, #8
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	619a      	str	r2, [r3, #24]
      break;
 8002736:	e064      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fa4a 	bl	8002bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6999      	ldr	r1, [r3, #24]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	021a      	lsls	r2, r3, #8
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	619a      	str	r2, [r3, #24]
      break;
 8002778:	e043      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fa95 	bl	8002cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0208 	orr.w	r2, r2, #8
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0204 	bic.w	r2, r2, #4
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
      break;
 80027b8:	e023      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fadf 	bl	8002d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69d9      	ldr	r1, [r3, #28]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	021a      	lsls	r2, r3, #8
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	61da      	str	r2, [r3, #28]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800280a:	7dfb      	ldrb	r3, [r7, #23]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_TIM_ConfigClockSource+0x1c>
 800282c:	2302      	movs	r3, #2
 800282e:	e0b4      	b.n	800299a <HAL_TIM_ConfigClockSource+0x186>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800284e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002868:	d03e      	beq.n	80028e8 <HAL_TIM_ConfigClockSource+0xd4>
 800286a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800286e:	f200 8087 	bhi.w	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 8002872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002876:	f000 8086 	beq.w	8002986 <HAL_TIM_ConfigClockSource+0x172>
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287e:	d87f      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b70      	cmp	r3, #112	@ 0x70
 8002882:	d01a      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0xa6>
 8002884:	2b70      	cmp	r3, #112	@ 0x70
 8002886:	d87b      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b60      	cmp	r3, #96	@ 0x60
 800288a:	d050      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x11a>
 800288c:	2b60      	cmp	r3, #96	@ 0x60
 800288e:	d877      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b50      	cmp	r3, #80	@ 0x50
 8002892:	d03c      	beq.n	800290e <HAL_TIM_ConfigClockSource+0xfa>
 8002894:	2b50      	cmp	r3, #80	@ 0x50
 8002896:	d873      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b40      	cmp	r3, #64	@ 0x40
 800289a:	d058      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x13a>
 800289c:	2b40      	cmp	r3, #64	@ 0x40
 800289e:	d86f      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b30      	cmp	r3, #48	@ 0x30
 80028a2:	d064      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x15a>
 80028a4:	2b30      	cmp	r3, #48	@ 0x30
 80028a6:	d86b      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d060      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x15a>
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d867      	bhi.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d05c      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b10      	cmp	r3, #16
 80028b6:	d05a      	beq.n	800296e <HAL_TIM_ConfigClockSource+0x15a>
 80028b8:	e062      	b.n	8002980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ca:	f000 fc43 	bl	8003154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	609a      	str	r2, [r3, #8]
      break;
 80028e6:	e04f      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f8:	f000 fc2c 	bl	8003154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800290a:	609a      	str	r2, [r3, #8]
      break;
 800290c:	e03c      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800291a:	461a      	mov	r2, r3
 800291c:	f000 faea 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2150      	movs	r1, #80	@ 0x50
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fbf9 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 800292c:	e02c      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800293a:	461a      	mov	r2, r3
 800293c:	f000 fb46 	bl	8002fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2160      	movs	r1, #96	@ 0x60
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fbe9 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 800294c:	e01c      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800295a:	461a      	mov	r2, r3
 800295c:	f000 faca 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2140      	movs	r1, #64	@ 0x40
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fbd9 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 800296c:	e00c      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f000 fbd0 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 800297e:	e003      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e000      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3a      	ldr	r2, [pc, #232]	@ (8002af0 <TIM_Base_SetConfig+0xfc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00f      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a12:	d00b      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a37      	ldr	r2, [pc, #220]	@ (8002af4 <TIM_Base_SetConfig+0x100>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a36      	ldr	r2, [pc, #216]	@ (8002af8 <TIM_Base_SetConfig+0x104>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x38>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a35      	ldr	r2, [pc, #212]	@ (8002afc <TIM_Base_SetConfig+0x108>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2b      	ldr	r2, [pc, #172]	@ (8002af0 <TIM_Base_SetConfig+0xfc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01b      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4c:	d017      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a28      	ldr	r2, [pc, #160]	@ (8002af4 <TIM_Base_SetConfig+0x100>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a27      	ldr	r2, [pc, #156]	@ (8002af8 <TIM_Base_SetConfig+0x104>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00f      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a26      	ldr	r2, [pc, #152]	@ (8002afc <TIM_Base_SetConfig+0x108>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a25      	ldr	r2, [pc, #148]	@ (8002b00 <TIM_Base_SetConfig+0x10c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a24      	ldr	r2, [pc, #144]	@ (8002b04 <TIM_Base_SetConfig+0x110>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0x8a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a23      	ldr	r2, [pc, #140]	@ (8002b08 <TIM_Base_SetConfig+0x114>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8002af0 <TIM_Base_SetConfig+0xfc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f023 0201 	bic.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	611a      	str	r2, [r3, #16]
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800
 8002afc:	40000c00 	.word	0x40000c00
 8002b00:	40014000 	.word	0x40014000
 8002b04:	40014400 	.word	0x40014400
 8002b08:	40014800 	.word	0x40014800

08002b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f023 0201 	bic.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 0302 	bic.w	r3, r3, #2
 8002b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <TIM_OC1_SetConfig+0xc8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10c      	bne.n	8002b82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0308 	bic.w	r3, r3, #8
 8002b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <TIM_OC1_SetConfig+0xc8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d111      	bne.n	8002bae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40010000 	.word	0x40010000

08002bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 0210 	bic.w	r2, r3, #16
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0320 	bic.w	r3, r3, #32
 8002c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <TIM_OC2_SetConfig+0xd4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10d      	bne.n	8002c54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <TIM_OC2_SetConfig+0xd4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d113      	bne.n	8002c84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40010000 	.word	0x40010000

08002cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <TIM_OC3_SetConfig+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10d      	bne.n	8002d2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <TIM_OC3_SetConfig+0xd0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d113      	bne.n	8002d5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40010000 	.word	0x40010000

08002d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a10      	ldr	r2, [pc, #64]	@ (8002e20 <TIM_OC4_SetConfig+0x9c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d109      	bne.n	8002df8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40010000 	.word	0x40010000

08002e24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f023 0201 	bic.w	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ee0 <TIM_TI1_SetConfig+0xbc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <TIM_TI1_SetConfig+0x56>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e58:	d00f      	beq.n	8002e7a <TIM_TI1_SetConfig+0x56>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <TIM_TI1_SetConfig+0xc0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_TI1_SetConfig+0x56>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4a20      	ldr	r2, [pc, #128]	@ (8002ee8 <TIM_TI1_SetConfig+0xc4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_TI1_SetConfig+0x56>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002eec <TIM_TI1_SetConfig+0xc8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_TI1_SetConfig+0x56>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef0 <TIM_TI1_SetConfig+0xcc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <TIM_TI1_SetConfig+0x5a>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <TIM_TI1_SetConfig+0x5c>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e003      	b.n	8002e9e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f023 030a 	bic.w	r3, r3, #10
 8002eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 030a 	and.w	r3, r3, #10
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40014000 	.word	0x40014000

08002ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 030a 	bic.w	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0210 	bic.w	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	621a      	str	r2, [r3, #32]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0210 	bic.w	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	031b      	lsls	r3, r3, #12
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003008:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	621a      	str	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f023 0303 	bic.w	r3, r3, #3
 8003058:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003068:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	b2db      	uxtb	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800307c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	031b      	lsls	r3, r3, #12
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80030f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	031b      	lsls	r3, r3, #12
 80030fc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	f043 0307 	orr.w	r3, r3, #7
 8003140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	609a      	str	r2, [r3, #8]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	431a      	orrs	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2201      	movs	r2, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e050      	b.n	800329a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800321e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003244:	d013      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a18      	ldr	r2, [pc, #96]	@ (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a16      	ldr	r2, [pc, #88]	@ (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a15      	ldr	r2, [pc, #84]	@ (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a13      	ldr	r2, [pc, #76]	@ (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10c      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40000400 	.word	0x40000400
 80032b0:	40000800 	.word	0x40000800
 80032b4:	40000c00 	.word	0x40000c00
 80032b8:	40014000 	.word	0x40014000

080032bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <findslot>:
 80032e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <findslot+0x2c>)
 80032e6:	b510      	push	{r4, lr}
 80032e8:	4604      	mov	r4, r0
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	b118      	cbz	r0, 80032f6 <findslot+0x12>
 80032ee:	6a03      	ldr	r3, [r0, #32]
 80032f0:	b90b      	cbnz	r3, 80032f6 <findslot+0x12>
 80032f2:	f000 fb19 	bl	8003928 <__sinit>
 80032f6:	2c13      	cmp	r4, #19
 80032f8:	d807      	bhi.n	800330a <findslot+0x26>
 80032fa:	4806      	ldr	r0, [pc, #24]	@ (8003314 <findslot+0x30>)
 80032fc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003300:	3201      	adds	r2, #1
 8003302:	d002      	beq.n	800330a <findslot+0x26>
 8003304:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003308:	bd10      	pop	{r4, pc}
 800330a:	2000      	movs	r0, #0
 800330c:	e7fc      	b.n	8003308 <findslot+0x24>
 800330e:	bf00      	nop
 8003310:	20000020 	.word	0x20000020
 8003314:	20000134 	.word	0x20000134

08003318 <error>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	f000 fcd0 	bl	8003cc0 <__errno>
 8003320:	2613      	movs	r6, #19
 8003322:	4605      	mov	r5, r0
 8003324:	2700      	movs	r7, #0
 8003326:	4630      	mov	r0, r6
 8003328:	4639      	mov	r1, r7
 800332a:	beab      	bkpt	0x00ab
 800332c:	4606      	mov	r6, r0
 800332e:	602e      	str	r6, [r5, #0]
 8003330:	4620      	mov	r0, r4
 8003332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003334 <checkerror>:
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d101      	bne.n	800333c <checkerror+0x8>
 8003338:	f7ff bfee 	b.w	8003318 <error>
 800333c:	4770      	bx	lr

0800333e <_swiread>:
 800333e:	b530      	push	{r4, r5, lr}
 8003340:	b085      	sub	sp, #20
 8003342:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003346:	9203      	str	r2, [sp, #12]
 8003348:	2406      	movs	r4, #6
 800334a:	ad01      	add	r5, sp, #4
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	beab      	bkpt	0x00ab
 8003352:	4604      	mov	r4, r0
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff ffed 	bl	8003334 <checkerror>
 800335a:	b005      	add	sp, #20
 800335c:	bd30      	pop	{r4, r5, pc}

0800335e <_read>:
 800335e:	b570      	push	{r4, r5, r6, lr}
 8003360:	460e      	mov	r6, r1
 8003362:	4614      	mov	r4, r2
 8003364:	f7ff ffbe 	bl	80032e4 <findslot>
 8003368:	4605      	mov	r5, r0
 800336a:	b930      	cbnz	r0, 800337a <_read+0x1c>
 800336c:	f000 fca8 	bl	8003cc0 <__errno>
 8003370:	2309      	movs	r3, #9
 8003372:	6003      	str	r3, [r0, #0]
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	4622      	mov	r2, r4
 800337e:	4631      	mov	r1, r6
 8003380:	f7ff ffdd 	bl	800333e <_swiread>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d0f5      	beq.n	8003374 <_read+0x16>
 8003388:	686b      	ldr	r3, [r5, #4]
 800338a:	1a20      	subs	r0, r4, r0
 800338c:	4403      	add	r3, r0
 800338e:	606b      	str	r3, [r5, #4]
 8003390:	e7f2      	b.n	8003378 <_read+0x1a>

08003392 <_swilseek>:
 8003392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003394:	460c      	mov	r4, r1
 8003396:	4616      	mov	r6, r2
 8003398:	f7ff ffa4 	bl	80032e4 <findslot>
 800339c:	4605      	mov	r5, r0
 800339e:	b940      	cbnz	r0, 80033b2 <_swilseek+0x20>
 80033a0:	f000 fc8e 	bl	8003cc0 <__errno>
 80033a4:	2309      	movs	r3, #9
 80033a6:	6003      	str	r3, [r0, #0]
 80033a8:	f04f 34ff 	mov.w	r4, #4294967295
 80033ac:	4620      	mov	r0, r4
 80033ae:	b003      	add	sp, #12
 80033b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b2:	2e02      	cmp	r6, #2
 80033b4:	d903      	bls.n	80033be <_swilseek+0x2c>
 80033b6:	f000 fc83 	bl	8003cc0 <__errno>
 80033ba:	2316      	movs	r3, #22
 80033bc:	e7f3      	b.n	80033a6 <_swilseek+0x14>
 80033be:	2e01      	cmp	r6, #1
 80033c0:	d112      	bne.n	80033e8 <_swilseek+0x56>
 80033c2:	6843      	ldr	r3, [r0, #4]
 80033c4:	18e4      	adds	r4, r4, r3
 80033c6:	d4f6      	bmi.n	80033b6 <_swilseek+0x24>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	260a      	movs	r6, #10
 80033cc:	e9cd 3400 	strd	r3, r4, [sp]
 80033d0:	466f      	mov	r7, sp
 80033d2:	4630      	mov	r0, r6
 80033d4:	4639      	mov	r1, r7
 80033d6:	beab      	bkpt	0x00ab
 80033d8:	4606      	mov	r6, r0
 80033da:	4630      	mov	r0, r6
 80033dc:	f7ff ffaa 	bl	8003334 <checkerror>
 80033e0:	2800      	cmp	r0, #0
 80033e2:	dbe1      	blt.n	80033a8 <_swilseek+0x16>
 80033e4:	606c      	str	r4, [r5, #4]
 80033e6:	e7e1      	b.n	80033ac <_swilseek+0x1a>
 80033e8:	2e02      	cmp	r6, #2
 80033ea:	6803      	ldr	r3, [r0, #0]
 80033ec:	d1ec      	bne.n	80033c8 <_swilseek+0x36>
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	260c      	movs	r6, #12
 80033f2:	466f      	mov	r7, sp
 80033f4:	4630      	mov	r0, r6
 80033f6:	4639      	mov	r1, r7
 80033f8:	beab      	bkpt	0x00ab
 80033fa:	4606      	mov	r6, r0
 80033fc:	4630      	mov	r0, r6
 80033fe:	f7ff ff99 	bl	8003334 <checkerror>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	d0d0      	beq.n	80033a8 <_swilseek+0x16>
 8003406:	4404      	add	r4, r0
 8003408:	e7de      	b.n	80033c8 <_swilseek+0x36>

0800340a <_lseek>:
 800340a:	f7ff bfc2 	b.w	8003392 <_swilseek>

0800340e <_swiwrite>:
 800340e:	b530      	push	{r4, r5, lr}
 8003410:	b085      	sub	sp, #20
 8003412:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003416:	9203      	str	r2, [sp, #12]
 8003418:	2405      	movs	r4, #5
 800341a:	ad01      	add	r5, sp, #4
 800341c:	4620      	mov	r0, r4
 800341e:	4629      	mov	r1, r5
 8003420:	beab      	bkpt	0x00ab
 8003422:	4604      	mov	r4, r0
 8003424:	4620      	mov	r0, r4
 8003426:	f7ff ff85 	bl	8003334 <checkerror>
 800342a:	b005      	add	sp, #20
 800342c:	bd30      	pop	{r4, r5, pc}

0800342e <_write>:
 800342e:	b570      	push	{r4, r5, r6, lr}
 8003430:	460e      	mov	r6, r1
 8003432:	4615      	mov	r5, r2
 8003434:	f7ff ff56 	bl	80032e4 <findslot>
 8003438:	4604      	mov	r4, r0
 800343a:	b930      	cbnz	r0, 800344a <_write+0x1c>
 800343c:	f000 fc40 	bl	8003cc0 <__errno>
 8003440:	2309      	movs	r3, #9
 8003442:	6003      	str	r3, [r0, #0]
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	6800      	ldr	r0, [r0, #0]
 800344c:	462a      	mov	r2, r5
 800344e:	4631      	mov	r1, r6
 8003450:	f7ff ffdd 	bl	800340e <_swiwrite>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	dbf5      	blt.n	8003444 <_write+0x16>
 8003458:	6862      	ldr	r2, [r4, #4]
 800345a:	1ae8      	subs	r0, r5, r3
 800345c:	4402      	add	r2, r0
 800345e:	42ab      	cmp	r3, r5
 8003460:	6062      	str	r2, [r4, #4]
 8003462:	d1f1      	bne.n	8003448 <_write+0x1a>
 8003464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003468:	2000      	movs	r0, #0
 800346a:	f7ff bf55 	b.w	8003318 <error>

0800346e <_swiclose>:
 800346e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003470:	2402      	movs	r4, #2
 8003472:	9001      	str	r0, [sp, #4]
 8003474:	ad01      	add	r5, sp, #4
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	beab      	bkpt	0x00ab
 800347c:	4604      	mov	r4, r0
 800347e:	4620      	mov	r0, r4
 8003480:	f7ff ff58 	bl	8003334 <checkerror>
 8003484:	b003      	add	sp, #12
 8003486:	bd30      	pop	{r4, r5, pc}

08003488 <_close>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4605      	mov	r5, r0
 800348c:	f7ff ff2a 	bl	80032e4 <findslot>
 8003490:	4604      	mov	r4, r0
 8003492:	b930      	cbnz	r0, 80034a2 <_close+0x1a>
 8003494:	f000 fc14 	bl	8003cc0 <__errno>
 8003498:	2309      	movs	r3, #9
 800349a:	6003      	str	r3, [r0, #0]
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	bd38      	pop	{r3, r4, r5, pc}
 80034a2:	3d01      	subs	r5, #1
 80034a4:	2d01      	cmp	r5, #1
 80034a6:	d809      	bhi.n	80034bc <_close+0x34>
 80034a8:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <_close+0x40>)
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d104      	bne.n	80034bc <_close+0x34>
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	2000      	movs	r0, #0
 80034ba:	e7f1      	b.n	80034a0 <_close+0x18>
 80034bc:	6820      	ldr	r0, [r4, #0]
 80034be:	f7ff ffd6 	bl	800346e <_swiclose>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d0f5      	beq.n	80034b2 <_close+0x2a>
 80034c6:	e7eb      	b.n	80034a0 <_close+0x18>
 80034c8:	20000134 	.word	0x20000134

080034cc <_swistat>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	460c      	mov	r4, r1
 80034d0:	f7ff ff08 	bl	80032e4 <findslot>
 80034d4:	4605      	mov	r5, r0
 80034d6:	b930      	cbnz	r0, 80034e6 <_swistat+0x1a>
 80034d8:	f000 fbf2 	bl	8003cc0 <__errno>
 80034dc:	2309      	movs	r3, #9
 80034de:	6003      	str	r3, [r0, #0]
 80034e0:	f04f 30ff 	mov.w	r0, #4294967295
 80034e4:	bd70      	pop	{r4, r5, r6, pc}
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034ec:	6063      	str	r3, [r4, #4]
 80034ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034f2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80034f4:	260c      	movs	r6, #12
 80034f6:	4630      	mov	r0, r6
 80034f8:	4629      	mov	r1, r5
 80034fa:	beab      	bkpt	0x00ab
 80034fc:	4605      	mov	r5, r0
 80034fe:	4628      	mov	r0, r5
 8003500:	f7ff ff18 	bl	8003334 <checkerror>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d0eb      	beq.n	80034e0 <_swistat+0x14>
 8003508:	6120      	str	r0, [r4, #16]
 800350a:	2000      	movs	r0, #0
 800350c:	e7ea      	b.n	80034e4 <_swistat+0x18>

0800350e <_fstat>:
 800350e:	460b      	mov	r3, r1
 8003510:	b510      	push	{r4, lr}
 8003512:	2100      	movs	r1, #0
 8003514:	4604      	mov	r4, r0
 8003516:	2258      	movs	r2, #88	@ 0x58
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fb83 	bl	8003c24 <memset>
 800351e:	4601      	mov	r1, r0
 8003520:	4620      	mov	r0, r4
 8003522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003526:	f7ff bfd1 	b.w	80034cc <_swistat>

0800352a <_stat>:
 800352a:	b538      	push	{r3, r4, r5, lr}
 800352c:	460d      	mov	r5, r1
 800352e:	4604      	mov	r4, r0
 8003530:	2258      	movs	r2, #88	@ 0x58
 8003532:	2100      	movs	r1, #0
 8003534:	4628      	mov	r0, r5
 8003536:	f000 fb75 	bl	8003c24 <memset>
 800353a:	4620      	mov	r0, r4
 800353c:	2100      	movs	r1, #0
 800353e:	f000 f811 	bl	8003564 <_swiopen>
 8003542:	1c43      	adds	r3, r0, #1
 8003544:	4604      	mov	r4, r0
 8003546:	d00b      	beq.n	8003560 <_stat+0x36>
 8003548:	686b      	ldr	r3, [r5, #4]
 800354a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800354e:	606b      	str	r3, [r5, #4]
 8003550:	4629      	mov	r1, r5
 8003552:	f7ff ffbb 	bl	80034cc <_swistat>
 8003556:	4605      	mov	r5, r0
 8003558:	4620      	mov	r0, r4
 800355a:	f7ff ff95 	bl	8003488 <_close>
 800355e:	462c      	mov	r4, r5
 8003560:	4620      	mov	r0, r4
 8003562:	bd38      	pop	{r3, r4, r5, pc}

08003564 <_swiopen>:
 8003564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003568:	4f29      	ldr	r7, [pc, #164]	@ (8003610 <_swiopen+0xac>)
 800356a:	b096      	sub	sp, #88	@ 0x58
 800356c:	4682      	mov	sl, r0
 800356e:	460e      	mov	r6, r1
 8003570:	2400      	movs	r4, #0
 8003572:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8003576:	3301      	adds	r3, #1
 8003578:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800357c:	d00c      	beq.n	8003598 <_swiopen+0x34>
 800357e:	3401      	adds	r4, #1
 8003580:	2c14      	cmp	r4, #20
 8003582:	d1f6      	bne.n	8003572 <_swiopen+0xe>
 8003584:	f000 fb9c 	bl	8003cc0 <__errno>
 8003588:	2318      	movs	r3, #24
 800358a:	6003      	str	r3, [r0, #0]
 800358c:	f04f 34ff 	mov.w	r4, #4294967295
 8003590:	4620      	mov	r0, r4
 8003592:	b016      	add	sp, #88	@ 0x58
 8003594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003598:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800359c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80035a0:	46e9      	mov	r9, sp
 80035a2:	d109      	bne.n	80035b8 <_swiopen+0x54>
 80035a4:	4649      	mov	r1, r9
 80035a6:	4650      	mov	r0, sl
 80035a8:	f7ff ffbf 	bl	800352a <_stat>
 80035ac:	3001      	adds	r0, #1
 80035ae:	d003      	beq.n	80035b8 <_swiopen+0x54>
 80035b0:	f000 fb86 	bl	8003cc0 <__errno>
 80035b4:	2311      	movs	r3, #17
 80035b6:	e7e8      	b.n	800358a <_swiopen+0x26>
 80035b8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80035bc:	f240 6301 	movw	r3, #1537	@ 0x601
 80035c0:	07b2      	lsls	r2, r6, #30
 80035c2:	bf48      	it	mi
 80035c4:	f045 0502 	orrmi.w	r5, r5, #2
 80035c8:	421e      	tst	r6, r3
 80035ca:	bf18      	it	ne
 80035cc:	f045 0504 	orrne.w	r5, r5, #4
 80035d0:	0733      	lsls	r3, r6, #28
 80035d2:	bf48      	it	mi
 80035d4:	f025 0504 	bicmi.w	r5, r5, #4
 80035d8:	4650      	mov	r0, sl
 80035da:	bf48      	it	mi
 80035dc:	f045 0508 	orrmi.w	r5, r5, #8
 80035e0:	f8cd a000 	str.w	sl, [sp]
 80035e4:	f7fc fdfc 	bl	80001e0 <strlen>
 80035e8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80035ec:	2501      	movs	r5, #1
 80035ee:	4628      	mov	r0, r5
 80035f0:	4649      	mov	r1, r9
 80035f2:	beab      	bkpt	0x00ab
 80035f4:	4605      	mov	r5, r0
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	db05      	blt.n	8003606 <_swiopen+0xa2>
 80035fa:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80035fe:	4447      	add	r7, r8
 8003600:	2300      	movs	r3, #0
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	e7c4      	b.n	8003590 <_swiopen+0x2c>
 8003606:	4628      	mov	r0, r5
 8003608:	f7ff fe86 	bl	8003318 <error>
 800360c:	4604      	mov	r4, r0
 800360e:	e7bf      	b.n	8003590 <_swiopen+0x2c>
 8003610:	20000134 	.word	0x20000134

08003614 <_get_semihosting_exts>:
 8003614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003618:	4606      	mov	r6, r0
 800361a:	460f      	mov	r7, r1
 800361c:	4829      	ldr	r0, [pc, #164]	@ (80036c4 <_get_semihosting_exts+0xb0>)
 800361e:	2100      	movs	r1, #0
 8003620:	4615      	mov	r5, r2
 8003622:	f7ff ff9f 	bl	8003564 <_swiopen>
 8003626:	462a      	mov	r2, r5
 8003628:	4604      	mov	r4, r0
 800362a:	2100      	movs	r1, #0
 800362c:	4630      	mov	r0, r6
 800362e:	f000 faf9 	bl	8003c24 <memset>
 8003632:	1c63      	adds	r3, r4, #1
 8003634:	d014      	beq.n	8003660 <_get_semihosting_exts+0x4c>
 8003636:	4620      	mov	r0, r4
 8003638:	f7ff fe54 	bl	80032e4 <findslot>
 800363c:	f04f 080c 	mov.w	r8, #12
 8003640:	4681      	mov	r9, r0
 8003642:	4640      	mov	r0, r8
 8003644:	4649      	mov	r1, r9
 8003646:	beab      	bkpt	0x00ab
 8003648:	4680      	mov	r8, r0
 800364a:	4640      	mov	r0, r8
 800364c:	f7ff fe72 	bl	8003334 <checkerror>
 8003650:	2803      	cmp	r0, #3
 8003652:	dd02      	ble.n	800365a <_get_semihosting_exts+0x46>
 8003654:	1ec3      	subs	r3, r0, #3
 8003656:	42ab      	cmp	r3, r5
 8003658:	dc07      	bgt.n	800366a <_get_semihosting_exts+0x56>
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff ff14 	bl	8003488 <_close>
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	b003      	add	sp, #12
 8003666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800366a:	2204      	movs	r2, #4
 800366c:	eb0d 0102 	add.w	r1, sp, r2
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff fe74 	bl	800335e <_read>
 8003676:	2803      	cmp	r0, #3
 8003678:	ddef      	ble.n	800365a <_get_semihosting_exts+0x46>
 800367a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800367e:	2b53      	cmp	r3, #83	@ 0x53
 8003680:	d1eb      	bne.n	800365a <_get_semihosting_exts+0x46>
 8003682:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003686:	2b48      	cmp	r3, #72	@ 0x48
 8003688:	d1e7      	bne.n	800365a <_get_semihosting_exts+0x46>
 800368a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800368e:	2b46      	cmp	r3, #70	@ 0x46
 8003690:	d1e3      	bne.n	800365a <_get_semihosting_exts+0x46>
 8003692:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003696:	2b42      	cmp	r3, #66	@ 0x42
 8003698:	d1df      	bne.n	800365a <_get_semihosting_exts+0x46>
 800369a:	2201      	movs	r2, #1
 800369c:	4639      	mov	r1, r7
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff fe77 	bl	8003392 <_swilseek>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	dbd8      	blt.n	800365a <_get_semihosting_exts+0x46>
 80036a8:	462a      	mov	r2, r5
 80036aa:	4631      	mov	r1, r6
 80036ac:	4620      	mov	r0, r4
 80036ae:	f7ff fe56 	bl	800335e <_read>
 80036b2:	4605      	mov	r5, r0
 80036b4:	4620      	mov	r0, r4
 80036b6:	f7ff fee7 	bl	8003488 <_close>
 80036ba:	4628      	mov	r0, r5
 80036bc:	f7ff fe3a 	bl	8003334 <checkerror>
 80036c0:	e7d0      	b.n	8003664 <_get_semihosting_exts+0x50>
 80036c2:	bf00      	nop
 80036c4:	080047c8 	.word	0x080047c8

080036c8 <initialise_semihosting_exts>:
 80036c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ca:	4d0a      	ldr	r5, [pc, #40]	@ (80036f4 <initialise_semihosting_exts+0x2c>)
 80036cc:	4c0a      	ldr	r4, [pc, #40]	@ (80036f8 <initialise_semihosting_exts+0x30>)
 80036ce:	2100      	movs	r1, #0
 80036d0:	2201      	movs	r2, #1
 80036d2:	a801      	add	r0, sp, #4
 80036d4:	6029      	str	r1, [r5, #0]
 80036d6:	6022      	str	r2, [r4, #0]
 80036d8:	f7ff ff9c 	bl	8003614 <_get_semihosting_exts>
 80036dc:	2800      	cmp	r0, #0
 80036de:	dd07      	ble.n	80036f0 <initialise_semihosting_exts+0x28>
 80036e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80036e4:	f003 0201 	and.w	r2, r3, #1
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	602a      	str	r2, [r5, #0]
 80036ee:	6023      	str	r3, [r4, #0]
 80036f0:	b003      	add	sp, #12
 80036f2:	bd30      	pop	{r4, r5, pc}
 80036f4:	20000010 	.word	0x20000010
 80036f8:	2000000c 	.word	0x2000000c

080036fc <_has_ext_stdout_stderr>:
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4c04      	ldr	r4, [pc, #16]	@ (8003710 <_has_ext_stdout_stderr+0x14>)
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	da01      	bge.n	800370a <_has_ext_stdout_stderr+0xe>
 8003706:	f7ff ffdf 	bl	80036c8 <initialise_semihosting_exts>
 800370a:	6820      	ldr	r0, [r4, #0]
 800370c:	bd10      	pop	{r4, pc}
 800370e:	bf00      	nop
 8003710:	2000000c 	.word	0x2000000c

08003714 <initialise_monitor_handles>:
 8003714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	b085      	sub	sp, #20
 800371a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80037cc <initialise_monitor_handles+0xb8>
 800371e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003722:	2303      	movs	r3, #3
 8003724:	2400      	movs	r4, #0
 8003726:	9303      	str	r3, [sp, #12]
 8003728:	af01      	add	r7, sp, #4
 800372a:	9402      	str	r4, [sp, #8]
 800372c:	2501      	movs	r5, #1
 800372e:	4628      	mov	r0, r5
 8003730:	4639      	mov	r1, r7
 8003732:	beab      	bkpt	0x00ab
 8003734:	4605      	mov	r5, r0
 8003736:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80037d0 <initialise_monitor_handles+0xbc>
 800373a:	4623      	mov	r3, r4
 800373c:	4c20      	ldr	r4, [pc, #128]	@ (80037c0 <initialise_monitor_handles+0xac>)
 800373e:	f8c8 5000 	str.w	r5, [r8]
 8003742:	f04f 32ff 	mov.w	r2, #4294967295
 8003746:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800374a:	3301      	adds	r3, #1
 800374c:	2b14      	cmp	r3, #20
 800374e:	d1fa      	bne.n	8003746 <initialise_monitor_handles+0x32>
 8003750:	f7ff ffd4 	bl	80036fc <_has_ext_stdout_stderr>
 8003754:	4d1b      	ldr	r5, [pc, #108]	@ (80037c4 <initialise_monitor_handles+0xb0>)
 8003756:	b1d0      	cbz	r0, 800378e <initialise_monitor_handles+0x7a>
 8003758:	f04f 0a03 	mov.w	sl, #3
 800375c:	2304      	movs	r3, #4
 800375e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003762:	2601      	movs	r6, #1
 8003764:	f8cd a00c 	str.w	sl, [sp, #12]
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	4630      	mov	r0, r6
 800376c:	4639      	mov	r1, r7
 800376e:	beab      	bkpt	0x00ab
 8003770:	4683      	mov	fp, r0
 8003772:	4b15      	ldr	r3, [pc, #84]	@ (80037c8 <initialise_monitor_handles+0xb4>)
 8003774:	f8cd 9004 	str.w	r9, [sp, #4]
 8003778:	f8c3 b000 	str.w	fp, [r3]
 800377c:	2308      	movs	r3, #8
 800377e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	4630      	mov	r0, r6
 8003786:	4639      	mov	r1, r7
 8003788:	beab      	bkpt	0x00ab
 800378a:	4606      	mov	r6, r0
 800378c:	602e      	str	r6, [r5, #0]
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	3301      	adds	r3, #1
 8003792:	bf02      	ittt	eq
 8003794:	4b0c      	ldreq	r3, [pc, #48]	@ (80037c8 <initialise_monitor_handles+0xb4>)
 8003796:	681b      	ldreq	r3, [r3, #0]
 8003798:	602b      	streq	r3, [r5, #0]
 800379a:	2600      	movs	r6, #0
 800379c:	f8d8 3000 	ldr.w	r3, [r8]
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	6066      	str	r6, [r4, #4]
 80037a4:	f7ff ffaa 	bl	80036fc <_has_ext_stdout_stderr>
 80037a8:	b130      	cbz	r0, 80037b8 <initialise_monitor_handles+0xa4>
 80037aa:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <initialise_monitor_handles+0xb4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80037b2:	682b      	ldr	r3, [r5, #0]
 80037b4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80037b8:	b005      	add	sp, #20
 80037ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037be:	bf00      	nop
 80037c0:	20000134 	.word	0x20000134
 80037c4:	20000128 	.word	0x20000128
 80037c8:	2000012c 	.word	0x2000012c
 80037cc:	080047de 	.word	0x080047de
 80037d0:	20000130 	.word	0x20000130

080037d4 <_isatty>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	f7ff fd85 	bl	80032e4 <findslot>
 80037da:	2409      	movs	r4, #9
 80037dc:	4605      	mov	r5, r0
 80037de:	b920      	cbnz	r0, 80037ea <_isatty+0x16>
 80037e0:	f000 fa6e 	bl	8003cc0 <__errno>
 80037e4:	6004      	str	r4, [r0, #0]
 80037e6:	2000      	movs	r0, #0
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	beab      	bkpt	0x00ab
 80037f0:	4604      	mov	r4, r0
 80037f2:	2c01      	cmp	r4, #1
 80037f4:	4620      	mov	r0, r4
 80037f6:	d0f7      	beq.n	80037e8 <_isatty+0x14>
 80037f8:	f000 fa62 	bl	8003cc0 <__errno>
 80037fc:	2513      	movs	r5, #19
 80037fe:	4604      	mov	r4, r0
 8003800:	2600      	movs	r6, #0
 8003802:	4628      	mov	r0, r5
 8003804:	4631      	mov	r1, r6
 8003806:	beab      	bkpt	0x00ab
 8003808:	4605      	mov	r5, r0
 800380a:	6025      	str	r5, [r4, #0]
 800380c:	e7eb      	b.n	80037e6 <_isatty+0x12>
	...

08003810 <std>:
 8003810:	2300      	movs	r3, #0
 8003812:	b510      	push	{r4, lr}
 8003814:	4604      	mov	r4, r0
 8003816:	e9c0 3300 	strd	r3, r3, [r0]
 800381a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800381e:	6083      	str	r3, [r0, #8]
 8003820:	8181      	strh	r1, [r0, #12]
 8003822:	6643      	str	r3, [r0, #100]	@ 0x64
 8003824:	81c2      	strh	r2, [r0, #14]
 8003826:	6183      	str	r3, [r0, #24]
 8003828:	4619      	mov	r1, r3
 800382a:	2208      	movs	r2, #8
 800382c:	305c      	adds	r0, #92	@ 0x5c
 800382e:	f000 f9f9 	bl	8003c24 <memset>
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <std+0x58>)
 8003834:	6263      	str	r3, [r4, #36]	@ 0x24
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <std+0x5c>)
 8003838:	62a3      	str	r3, [r4, #40]	@ 0x28
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <std+0x60>)
 800383c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800383e:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <std+0x64>)
 8003840:	6323      	str	r3, [r4, #48]	@ 0x30
 8003842:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <std+0x68>)
 8003844:	6224      	str	r4, [r4, #32]
 8003846:	429c      	cmp	r4, r3
 8003848:	d006      	beq.n	8003858 <std+0x48>
 800384a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800384e:	4294      	cmp	r4, r2
 8003850:	d002      	beq.n	8003858 <std+0x48>
 8003852:	33d0      	adds	r3, #208	@ 0xd0
 8003854:	429c      	cmp	r4, r3
 8003856:	d105      	bne.n	8003864 <std+0x54>
 8003858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003860:	f000 ba58 	b.w	8003d14 <__retarget_lock_init_recursive>
 8003864:	bd10      	pop	{r4, pc}
 8003866:	bf00      	nop
 8003868:	08003a75 	.word	0x08003a75
 800386c:	08003a97 	.word	0x08003a97
 8003870:	08003acf 	.word	0x08003acf
 8003874:	08003af3 	.word	0x08003af3
 8003878:	200001d4 	.word	0x200001d4

0800387c <stdio_exit_handler>:
 800387c:	4a02      	ldr	r2, [pc, #8]	@ (8003888 <stdio_exit_handler+0xc>)
 800387e:	4903      	ldr	r1, [pc, #12]	@ (800388c <stdio_exit_handler+0x10>)
 8003880:	4803      	ldr	r0, [pc, #12]	@ (8003890 <stdio_exit_handler+0x14>)
 8003882:	f000 b869 	b.w	8003958 <_fwalk_sglue>
 8003886:	bf00      	nop
 8003888:	20000014 	.word	0x20000014
 800388c:	080045b5 	.word	0x080045b5
 8003890:	20000024 	.word	0x20000024

08003894 <cleanup_stdio>:
 8003894:	6841      	ldr	r1, [r0, #4]
 8003896:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <cleanup_stdio+0x34>)
 8003898:	4299      	cmp	r1, r3
 800389a:	b510      	push	{r4, lr}
 800389c:	4604      	mov	r4, r0
 800389e:	d001      	beq.n	80038a4 <cleanup_stdio+0x10>
 80038a0:	f000 fe88 	bl	80045b4 <_fflush_r>
 80038a4:	68a1      	ldr	r1, [r4, #8]
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <cleanup_stdio+0x38>)
 80038a8:	4299      	cmp	r1, r3
 80038aa:	d002      	beq.n	80038b2 <cleanup_stdio+0x1e>
 80038ac:	4620      	mov	r0, r4
 80038ae:	f000 fe81 	bl	80045b4 <_fflush_r>
 80038b2:	68e1      	ldr	r1, [r4, #12]
 80038b4:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <cleanup_stdio+0x3c>)
 80038b6:	4299      	cmp	r1, r3
 80038b8:	d004      	beq.n	80038c4 <cleanup_stdio+0x30>
 80038ba:	4620      	mov	r0, r4
 80038bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038c0:	f000 be78 	b.w	80045b4 <_fflush_r>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	bf00      	nop
 80038c8:	200001d4 	.word	0x200001d4
 80038cc:	2000023c 	.word	0x2000023c
 80038d0:	200002a4 	.word	0x200002a4

080038d4 <global_stdio_init.part.0>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <global_stdio_init.part.0+0x30>)
 80038d8:	4c0b      	ldr	r4, [pc, #44]	@ (8003908 <global_stdio_init.part.0+0x34>)
 80038da:	4a0c      	ldr	r2, [pc, #48]	@ (800390c <global_stdio_init.part.0+0x38>)
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	4620      	mov	r0, r4
 80038e0:	2200      	movs	r2, #0
 80038e2:	2104      	movs	r1, #4
 80038e4:	f7ff ff94 	bl	8003810 <std>
 80038e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038ec:	2201      	movs	r2, #1
 80038ee:	2109      	movs	r1, #9
 80038f0:	f7ff ff8e 	bl	8003810 <std>
 80038f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038f8:	2202      	movs	r2, #2
 80038fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fe:	2112      	movs	r1, #18
 8003900:	f7ff bf86 	b.w	8003810 <std>
 8003904:	2000030c 	.word	0x2000030c
 8003908:	200001d4 	.word	0x200001d4
 800390c:	0800387d 	.word	0x0800387d

08003910 <__sfp_lock_acquire>:
 8003910:	4801      	ldr	r0, [pc, #4]	@ (8003918 <__sfp_lock_acquire+0x8>)
 8003912:	f000 ba00 	b.w	8003d16 <__retarget_lock_acquire_recursive>
 8003916:	bf00      	nop
 8003918:	20000315 	.word	0x20000315

0800391c <__sfp_lock_release>:
 800391c:	4801      	ldr	r0, [pc, #4]	@ (8003924 <__sfp_lock_release+0x8>)
 800391e:	f000 b9fb 	b.w	8003d18 <__retarget_lock_release_recursive>
 8003922:	bf00      	nop
 8003924:	20000315 	.word	0x20000315

08003928 <__sinit>:
 8003928:	b510      	push	{r4, lr}
 800392a:	4604      	mov	r4, r0
 800392c:	f7ff fff0 	bl	8003910 <__sfp_lock_acquire>
 8003930:	6a23      	ldr	r3, [r4, #32]
 8003932:	b11b      	cbz	r3, 800393c <__sinit+0x14>
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003938:	f7ff bff0 	b.w	800391c <__sfp_lock_release>
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <__sinit+0x28>)
 800393e:	6223      	str	r3, [r4, #32]
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <__sinit+0x2c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f5      	bne.n	8003934 <__sinit+0xc>
 8003948:	f7ff ffc4 	bl	80038d4 <global_stdio_init.part.0>
 800394c:	e7f2      	b.n	8003934 <__sinit+0xc>
 800394e:	bf00      	nop
 8003950:	08003895 	.word	0x08003895
 8003954:	2000030c 	.word	0x2000030c

08003958 <_fwalk_sglue>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	4607      	mov	r7, r0
 800395e:	4688      	mov	r8, r1
 8003960:	4614      	mov	r4, r2
 8003962:	2600      	movs	r6, #0
 8003964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003968:	f1b9 0901 	subs.w	r9, r9, #1
 800396c:	d505      	bpl.n	800397a <_fwalk_sglue+0x22>
 800396e:	6824      	ldr	r4, [r4, #0]
 8003970:	2c00      	cmp	r4, #0
 8003972:	d1f7      	bne.n	8003964 <_fwalk_sglue+0xc>
 8003974:	4630      	mov	r0, r6
 8003976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397a:	89ab      	ldrh	r3, [r5, #12]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d907      	bls.n	8003990 <_fwalk_sglue+0x38>
 8003980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003984:	3301      	adds	r3, #1
 8003986:	d003      	beq.n	8003990 <_fwalk_sglue+0x38>
 8003988:	4629      	mov	r1, r5
 800398a:	4638      	mov	r0, r7
 800398c:	47c0      	blx	r8
 800398e:	4306      	orrs	r6, r0
 8003990:	3568      	adds	r5, #104	@ 0x68
 8003992:	e7e9      	b.n	8003968 <_fwalk_sglue+0x10>

08003994 <iprintf>:
 8003994:	b40f      	push	{r0, r1, r2, r3}
 8003996:	b507      	push	{r0, r1, r2, lr}
 8003998:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <iprintf+0x20>)
 800399a:	ab04      	add	r3, sp, #16
 800399c:	6808      	ldr	r0, [r1, #0]
 800399e:	f853 2b04 	ldr.w	r2, [r3], #4
 80039a2:	6881      	ldr	r1, [r0, #8]
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	f000 fadb 	bl	8003f60 <_vfiprintf_r>
 80039aa:	b003      	add	sp, #12
 80039ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80039b0:	b004      	add	sp, #16
 80039b2:	4770      	bx	lr
 80039b4:	20000020 	.word	0x20000020

080039b8 <_puts_r>:
 80039b8:	6a03      	ldr	r3, [r0, #32]
 80039ba:	b570      	push	{r4, r5, r6, lr}
 80039bc:	6884      	ldr	r4, [r0, #8]
 80039be:	4605      	mov	r5, r0
 80039c0:	460e      	mov	r6, r1
 80039c2:	b90b      	cbnz	r3, 80039c8 <_puts_r+0x10>
 80039c4:	f7ff ffb0 	bl	8003928 <__sinit>
 80039c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d405      	bmi.n	80039da <_puts_r+0x22>
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	0598      	lsls	r0, r3, #22
 80039d2:	d402      	bmi.n	80039da <_puts_r+0x22>
 80039d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039d6:	f000 f99e 	bl	8003d16 <__retarget_lock_acquire_recursive>
 80039da:	89a3      	ldrh	r3, [r4, #12]
 80039dc:	0719      	lsls	r1, r3, #28
 80039de:	d502      	bpl.n	80039e6 <_puts_r+0x2e>
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d135      	bne.n	8003a52 <_puts_r+0x9a>
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f8c5 	bl	8003b78 <__swsetup_r>
 80039ee:	b380      	cbz	r0, 8003a52 <_puts_r+0x9a>
 80039f0:	f04f 35ff 	mov.w	r5, #4294967295
 80039f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039f6:	07da      	lsls	r2, r3, #31
 80039f8:	d405      	bmi.n	8003a06 <_puts_r+0x4e>
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	059b      	lsls	r3, r3, #22
 80039fe:	d402      	bmi.n	8003a06 <_puts_r+0x4e>
 8003a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a02:	f000 f989 	bl	8003d18 <__retarget_lock_release_recursive>
 8003a06:	4628      	mov	r0, r5
 8003a08:	bd70      	pop	{r4, r5, r6, pc}
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	da04      	bge.n	8003a18 <_puts_r+0x60>
 8003a0e:	69a2      	ldr	r2, [r4, #24]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	dc17      	bgt.n	8003a44 <_puts_r+0x8c>
 8003a14:	290a      	cmp	r1, #10
 8003a16:	d015      	beq.n	8003a44 <_puts_r+0x8c>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	6022      	str	r2, [r4, #0]
 8003a1e:	7019      	strb	r1, [r3, #0]
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a26:	3b01      	subs	r3, #1
 8003a28:	60a3      	str	r3, [r4, #8]
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	d1ed      	bne.n	8003a0a <_puts_r+0x52>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da11      	bge.n	8003a56 <_puts_r+0x9e>
 8003a32:	4622      	mov	r2, r4
 8003a34:	210a      	movs	r1, #10
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 f85f 	bl	8003afa <__swbuf_r>
 8003a3c:	3001      	adds	r0, #1
 8003a3e:	d0d7      	beq.n	80039f0 <_puts_r+0x38>
 8003a40:	250a      	movs	r5, #10
 8003a42:	e7d7      	b.n	80039f4 <_puts_r+0x3c>
 8003a44:	4622      	mov	r2, r4
 8003a46:	4628      	mov	r0, r5
 8003a48:	f000 f857 	bl	8003afa <__swbuf_r>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d1e7      	bne.n	8003a20 <_puts_r+0x68>
 8003a50:	e7ce      	b.n	80039f0 <_puts_r+0x38>
 8003a52:	3e01      	subs	r6, #1
 8003a54:	e7e4      	b.n	8003a20 <_puts_r+0x68>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	6022      	str	r2, [r4, #0]
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e7ee      	b.n	8003a40 <_puts_r+0x88>
	...

08003a64 <puts>:
 8003a64:	4b02      	ldr	r3, [pc, #8]	@ (8003a70 <puts+0xc>)
 8003a66:	4601      	mov	r1, r0
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	f7ff bfa5 	b.w	80039b8 <_puts_r>
 8003a6e:	bf00      	nop
 8003a70:	20000020 	.word	0x20000020

08003a74 <__sread>:
 8003a74:	b510      	push	{r4, lr}
 8003a76:	460c      	mov	r4, r1
 8003a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7c:	f000 f8fc 	bl	8003c78 <_read_r>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	bfab      	itete	ge
 8003a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a86:	89a3      	ldrhlt	r3, [r4, #12]
 8003a88:	181b      	addge	r3, r3, r0
 8003a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a8e:	bfac      	ite	ge
 8003a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a92:	81a3      	strhlt	r3, [r4, #12]
 8003a94:	bd10      	pop	{r4, pc}

08003a96 <__swrite>:
 8003a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	461f      	mov	r7, r3
 8003a9c:	898b      	ldrh	r3, [r1, #12]
 8003a9e:	05db      	lsls	r3, r3, #23
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	d505      	bpl.n	8003ab4 <__swrite+0x1e>
 8003aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aac:	2302      	movs	r3, #2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f000 f8d0 	bl	8003c54 <_lseek_r>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aca:	f000 b8e7 	b.w	8003c9c <_write_r>

08003ace <__sseek>:
 8003ace:	b510      	push	{r4, lr}
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad6:	f000 f8bd 	bl	8003c54 <_lseek_r>
 8003ada:	1c43      	adds	r3, r0, #1
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	bf15      	itete	ne
 8003ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003aea:	81a3      	strheq	r3, [r4, #12]
 8003aec:	bf18      	it	ne
 8003aee:	81a3      	strhne	r3, [r4, #12]
 8003af0:	bd10      	pop	{r4, pc}

08003af2 <__sclose>:
 8003af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af6:	f000 b89d 	b.w	8003c34 <_close_r>

08003afa <__swbuf_r>:
 8003afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afc:	460e      	mov	r6, r1
 8003afe:	4614      	mov	r4, r2
 8003b00:	4605      	mov	r5, r0
 8003b02:	b118      	cbz	r0, 8003b0c <__swbuf_r+0x12>
 8003b04:	6a03      	ldr	r3, [r0, #32]
 8003b06:	b90b      	cbnz	r3, 8003b0c <__swbuf_r+0x12>
 8003b08:	f7ff ff0e 	bl	8003928 <__sinit>
 8003b0c:	69a3      	ldr	r3, [r4, #24]
 8003b0e:	60a3      	str	r3, [r4, #8]
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	071a      	lsls	r2, r3, #28
 8003b14:	d501      	bpl.n	8003b1a <__swbuf_r+0x20>
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	b943      	cbnz	r3, 8003b2c <__swbuf_r+0x32>
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	f000 f82b 	bl	8003b78 <__swsetup_r>
 8003b22:	b118      	cbz	r0, 8003b2c <__swbuf_r+0x32>
 8003b24:	f04f 37ff 	mov.w	r7, #4294967295
 8003b28:	4638      	mov	r0, r7
 8003b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	6922      	ldr	r2, [r4, #16]
 8003b30:	1a98      	subs	r0, r3, r2
 8003b32:	6963      	ldr	r3, [r4, #20]
 8003b34:	b2f6      	uxtb	r6, r6
 8003b36:	4283      	cmp	r3, r0
 8003b38:	4637      	mov	r7, r6
 8003b3a:	dc05      	bgt.n	8003b48 <__swbuf_r+0x4e>
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	4628      	mov	r0, r5
 8003b40:	f000 fd38 	bl	80045b4 <_fflush_r>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d1ed      	bne.n	8003b24 <__swbuf_r+0x2a>
 8003b48:	68a3      	ldr	r3, [r4, #8]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	60a3      	str	r3, [r4, #8]
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	6022      	str	r2, [r4, #0]
 8003b54:	701e      	strb	r6, [r3, #0]
 8003b56:	6962      	ldr	r2, [r4, #20]
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d004      	beq.n	8003b68 <__swbuf_r+0x6e>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	07db      	lsls	r3, r3, #31
 8003b62:	d5e1      	bpl.n	8003b28 <__swbuf_r+0x2e>
 8003b64:	2e0a      	cmp	r6, #10
 8003b66:	d1df      	bne.n	8003b28 <__swbuf_r+0x2e>
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	f000 fd22 	bl	80045b4 <_fflush_r>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d0d9      	beq.n	8003b28 <__swbuf_r+0x2e>
 8003b74:	e7d6      	b.n	8003b24 <__swbuf_r+0x2a>
	...

08003b78 <__swsetup_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <__swsetup_r+0xa8>)
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	460c      	mov	r4, r1
 8003b82:	b118      	cbz	r0, 8003b8c <__swsetup_r+0x14>
 8003b84:	6a03      	ldr	r3, [r0, #32]
 8003b86:	b90b      	cbnz	r3, 8003b8c <__swsetup_r+0x14>
 8003b88:	f7ff fece 	bl	8003928 <__sinit>
 8003b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b90:	0719      	lsls	r1, r3, #28
 8003b92:	d422      	bmi.n	8003bda <__swsetup_r+0x62>
 8003b94:	06da      	lsls	r2, r3, #27
 8003b96:	d407      	bmi.n	8003ba8 <__swsetup_r+0x30>
 8003b98:	2209      	movs	r2, #9
 8003b9a:	602a      	str	r2, [r5, #0]
 8003b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ba0:	81a3      	strh	r3, [r4, #12]
 8003ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba6:	e033      	b.n	8003c10 <__swsetup_r+0x98>
 8003ba8:	0758      	lsls	r0, r3, #29
 8003baa:	d512      	bpl.n	8003bd2 <__swsetup_r+0x5a>
 8003bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bae:	b141      	cbz	r1, 8003bc2 <__swsetup_r+0x4a>
 8003bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	d002      	beq.n	8003bbe <__swsetup_r+0x46>
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 f8af 	bl	8003d1c <_free_r>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bc2:	89a3      	ldrh	r3, [r4, #12]
 8003bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	6063      	str	r3, [r4, #4]
 8003bce:	6923      	ldr	r3, [r4, #16]
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	f043 0308 	orr.w	r3, r3, #8
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	b94b      	cbnz	r3, 8003bf2 <__swsetup_r+0x7a>
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be8:	d003      	beq.n	8003bf2 <__swsetup_r+0x7a>
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 fd2f 	bl	8004650 <__smakebuf_r>
 8003bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bf6:	f013 0201 	ands.w	r2, r3, #1
 8003bfa:	d00a      	beq.n	8003c12 <__swsetup_r+0x9a>
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	60a2      	str	r2, [r4, #8]
 8003c00:	6962      	ldr	r2, [r4, #20]
 8003c02:	4252      	negs	r2, r2
 8003c04:	61a2      	str	r2, [r4, #24]
 8003c06:	6922      	ldr	r2, [r4, #16]
 8003c08:	b942      	cbnz	r2, 8003c1c <__swsetup_r+0xa4>
 8003c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c0e:	d1c5      	bne.n	8003b9c <__swsetup_r+0x24>
 8003c10:	bd38      	pop	{r3, r4, r5, pc}
 8003c12:	0799      	lsls	r1, r3, #30
 8003c14:	bf58      	it	pl
 8003c16:	6962      	ldrpl	r2, [r4, #20]
 8003c18:	60a2      	str	r2, [r4, #8]
 8003c1a:	e7f4      	b.n	8003c06 <__swsetup_r+0x8e>
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	e7f7      	b.n	8003c10 <__swsetup_r+0x98>
 8003c20:	20000020 	.word	0x20000020

08003c24 <memset>:
 8003c24:	4402      	add	r2, r0
 8003c26:	4603      	mov	r3, r0
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <_close_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d06      	ldr	r5, [pc, #24]	@ (8003c50 <_close_r+0x1c>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7ff fc22 	bl	8003488 <_close>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_close_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_close_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20000310 	.word	0x20000310

08003c54 <_lseek_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d07      	ldr	r5, [pc, #28]	@ (8003c74 <_lseek_r+0x20>)
 8003c58:	4604      	mov	r4, r0
 8003c5a:	4608      	mov	r0, r1
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	2200      	movs	r2, #0
 8003c60:	602a      	str	r2, [r5, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f7ff fbd1 	bl	800340a <_lseek>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_lseek_r+0x1e>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_lseek_r+0x1e>
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20000310 	.word	0x20000310

08003c78 <_read_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d07      	ldr	r5, [pc, #28]	@ (8003c98 <_read_r+0x20>)
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4608      	mov	r0, r1
 8003c80:	4611      	mov	r1, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7ff fb69 	bl	800335e <_read>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_read_r+0x1e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_read_r+0x1e>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20000310 	.word	0x20000310

08003c9c <_write_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4d07      	ldr	r5, [pc, #28]	@ (8003cbc <_write_r+0x20>)
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7ff fbbf 	bl	800342e <_write>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_write_r+0x1e>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_write_r+0x1e>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	20000310 	.word	0x20000310

08003cc0 <__errno>:
 8003cc0:	4b01      	ldr	r3, [pc, #4]	@ (8003cc8 <__errno+0x8>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000020 	.word	0x20000020

08003ccc <__libc_init_array>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4d0d      	ldr	r5, [pc, #52]	@ (8003d04 <__libc_init_array+0x38>)
 8003cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8003d08 <__libc_init_array+0x3c>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	42a6      	cmp	r6, r4
 8003cda:	d109      	bne.n	8003cf0 <__libc_init_array+0x24>
 8003cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8003d0c <__libc_init_array+0x40>)
 8003cde:	4c0c      	ldr	r4, [pc, #48]	@ (8003d10 <__libc_init_array+0x44>)
 8003ce0:	f000 fd24 	bl	800472c <_init>
 8003ce4:	1b64      	subs	r4, r4, r5
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	2600      	movs	r6, #0
 8003cea:	42a6      	cmp	r6, r4
 8003cec:	d105      	bne.n	8003cfa <__libc_init_array+0x2e>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf4:	4798      	blx	r3
 8003cf6:	3601      	adds	r6, #1
 8003cf8:	e7ee      	b.n	8003cd8 <__libc_init_array+0xc>
 8003cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfe:	4798      	blx	r3
 8003d00:	3601      	adds	r6, #1
 8003d02:	e7f2      	b.n	8003cea <__libc_init_array+0x1e>
 8003d04:	08004820 	.word	0x08004820
 8003d08:	08004820 	.word	0x08004820
 8003d0c:	08004820 	.word	0x08004820
 8003d10:	08004824 	.word	0x08004824

08003d14 <__retarget_lock_init_recursive>:
 8003d14:	4770      	bx	lr

08003d16 <__retarget_lock_acquire_recursive>:
 8003d16:	4770      	bx	lr

08003d18 <__retarget_lock_release_recursive>:
 8003d18:	4770      	bx	lr
	...

08003d1c <_free_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4605      	mov	r5, r0
 8003d20:	2900      	cmp	r1, #0
 8003d22:	d041      	beq.n	8003da8 <_free_r+0x8c>
 8003d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d28:	1f0c      	subs	r4, r1, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bfb8      	it	lt
 8003d2e:	18e4      	addlt	r4, r4, r3
 8003d30:	f000 f8e0 	bl	8003ef4 <__malloc_lock>
 8003d34:	4a1d      	ldr	r2, [pc, #116]	@ (8003dac <_free_r+0x90>)
 8003d36:	6813      	ldr	r3, [r2, #0]
 8003d38:	b933      	cbnz	r3, 8003d48 <_free_r+0x2c>
 8003d3a:	6063      	str	r3, [r4, #4]
 8003d3c:	6014      	str	r4, [r2, #0]
 8003d3e:	4628      	mov	r0, r5
 8003d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d44:	f000 b8dc 	b.w	8003f00 <__malloc_unlock>
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d908      	bls.n	8003d5e <_free_r+0x42>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	1821      	adds	r1, r4, r0
 8003d50:	428b      	cmp	r3, r1
 8003d52:	bf01      	itttt	eq
 8003d54:	6819      	ldreq	r1, [r3, #0]
 8003d56:	685b      	ldreq	r3, [r3, #4]
 8003d58:	1809      	addeq	r1, r1, r0
 8003d5a:	6021      	streq	r1, [r4, #0]
 8003d5c:	e7ed      	b.n	8003d3a <_free_r+0x1e>
 8003d5e:	461a      	mov	r2, r3
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b10b      	cbz	r3, 8003d68 <_free_r+0x4c>
 8003d64:	42a3      	cmp	r3, r4
 8003d66:	d9fa      	bls.n	8003d5e <_free_r+0x42>
 8003d68:	6811      	ldr	r1, [r2, #0]
 8003d6a:	1850      	adds	r0, r2, r1
 8003d6c:	42a0      	cmp	r0, r4
 8003d6e:	d10b      	bne.n	8003d88 <_free_r+0x6c>
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	4401      	add	r1, r0
 8003d74:	1850      	adds	r0, r2, r1
 8003d76:	4283      	cmp	r3, r0
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	d1e0      	bne.n	8003d3e <_free_r+0x22>
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	6053      	str	r3, [r2, #4]
 8003d82:	4408      	add	r0, r1
 8003d84:	6010      	str	r0, [r2, #0]
 8003d86:	e7da      	b.n	8003d3e <_free_r+0x22>
 8003d88:	d902      	bls.n	8003d90 <_free_r+0x74>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	e7d6      	b.n	8003d3e <_free_r+0x22>
 8003d90:	6820      	ldr	r0, [r4, #0]
 8003d92:	1821      	adds	r1, r4, r0
 8003d94:	428b      	cmp	r3, r1
 8003d96:	bf04      	itt	eq
 8003d98:	6819      	ldreq	r1, [r3, #0]
 8003d9a:	685b      	ldreq	r3, [r3, #4]
 8003d9c:	6063      	str	r3, [r4, #4]
 8003d9e:	bf04      	itt	eq
 8003da0:	1809      	addeq	r1, r1, r0
 8003da2:	6021      	streq	r1, [r4, #0]
 8003da4:	6054      	str	r4, [r2, #4]
 8003da6:	e7ca      	b.n	8003d3e <_free_r+0x22>
 8003da8:	bd38      	pop	{r3, r4, r5, pc}
 8003daa:	bf00      	nop
 8003dac:	2000031c 	.word	0x2000031c

08003db0 <sbrk_aligned>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	4e0f      	ldr	r6, [pc, #60]	@ (8003df0 <sbrk_aligned+0x40>)
 8003db4:	460c      	mov	r4, r1
 8003db6:	6831      	ldr	r1, [r6, #0]
 8003db8:	4605      	mov	r5, r0
 8003dba:	b911      	cbnz	r1, 8003dc2 <sbrk_aligned+0x12>
 8003dbc:	f000 fca6 	bl	800470c <_sbrk_r>
 8003dc0:	6030      	str	r0, [r6, #0]
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f000 fca1 	bl	800470c <_sbrk_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d103      	bne.n	8003dd6 <sbrk_aligned+0x26>
 8003dce:	f04f 34ff 	mov.w	r4, #4294967295
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
 8003dd6:	1cc4      	adds	r4, r0, #3
 8003dd8:	f024 0403 	bic.w	r4, r4, #3
 8003ddc:	42a0      	cmp	r0, r4
 8003dde:	d0f8      	beq.n	8003dd2 <sbrk_aligned+0x22>
 8003de0:	1a21      	subs	r1, r4, r0
 8003de2:	4628      	mov	r0, r5
 8003de4:	f000 fc92 	bl	800470c <_sbrk_r>
 8003de8:	3001      	adds	r0, #1
 8003dea:	d1f2      	bne.n	8003dd2 <sbrk_aligned+0x22>
 8003dec:	e7ef      	b.n	8003dce <sbrk_aligned+0x1e>
 8003dee:	bf00      	nop
 8003df0:	20000318 	.word	0x20000318

08003df4 <_malloc_r>:
 8003df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df8:	1ccd      	adds	r5, r1, #3
 8003dfa:	f025 0503 	bic.w	r5, r5, #3
 8003dfe:	3508      	adds	r5, #8
 8003e00:	2d0c      	cmp	r5, #12
 8003e02:	bf38      	it	cc
 8003e04:	250c      	movcc	r5, #12
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	4606      	mov	r6, r0
 8003e0a:	db01      	blt.n	8003e10 <_malloc_r+0x1c>
 8003e0c:	42a9      	cmp	r1, r5
 8003e0e:	d904      	bls.n	8003e1a <_malloc_r+0x26>
 8003e10:	230c      	movs	r3, #12
 8003e12:	6033      	str	r3, [r6, #0]
 8003e14:	2000      	movs	r0, #0
 8003e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ef0 <_malloc_r+0xfc>
 8003e1e:	f000 f869 	bl	8003ef4 <__malloc_lock>
 8003e22:	f8d8 3000 	ldr.w	r3, [r8]
 8003e26:	461c      	mov	r4, r3
 8003e28:	bb44      	cbnz	r4, 8003e7c <_malloc_r+0x88>
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f7ff ffbf 	bl	8003db0 <sbrk_aligned>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	4604      	mov	r4, r0
 8003e36:	d158      	bne.n	8003eea <_malloc_r+0xf6>
 8003e38:	f8d8 4000 	ldr.w	r4, [r8]
 8003e3c:	4627      	mov	r7, r4
 8003e3e:	2f00      	cmp	r7, #0
 8003e40:	d143      	bne.n	8003eca <_malloc_r+0xd6>
 8003e42:	2c00      	cmp	r4, #0
 8003e44:	d04b      	beq.n	8003ede <_malloc_r+0xea>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	4639      	mov	r1, r7
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	eb04 0903 	add.w	r9, r4, r3
 8003e50:	f000 fc5c 	bl	800470c <_sbrk_r>
 8003e54:	4581      	cmp	r9, r0
 8003e56:	d142      	bne.n	8003ede <_malloc_r+0xea>
 8003e58:	6821      	ldr	r1, [r4, #0]
 8003e5a:	1a6d      	subs	r5, r5, r1
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f7ff ffa6 	bl	8003db0 <sbrk_aligned>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d03a      	beq.n	8003ede <_malloc_r+0xea>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	442b      	add	r3, r5
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	bb62      	cbnz	r2, 8003ed0 <_malloc_r+0xdc>
 8003e76:	f8c8 7000 	str.w	r7, [r8]
 8003e7a:	e00f      	b.n	8003e9c <_malloc_r+0xa8>
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	1b52      	subs	r2, r2, r5
 8003e80:	d420      	bmi.n	8003ec4 <_malloc_r+0xd0>
 8003e82:	2a0b      	cmp	r2, #11
 8003e84:	d917      	bls.n	8003eb6 <_malloc_r+0xc2>
 8003e86:	1961      	adds	r1, r4, r5
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	6025      	str	r5, [r4, #0]
 8003e8c:	bf18      	it	ne
 8003e8e:	6059      	strne	r1, [r3, #4]
 8003e90:	6863      	ldr	r3, [r4, #4]
 8003e92:	bf08      	it	eq
 8003e94:	f8c8 1000 	streq.w	r1, [r8]
 8003e98:	5162      	str	r2, [r4, r5]
 8003e9a:	604b      	str	r3, [r1, #4]
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f000 f82f 	bl	8003f00 <__malloc_unlock>
 8003ea2:	f104 000b 	add.w	r0, r4, #11
 8003ea6:	1d23      	adds	r3, r4, #4
 8003ea8:	f020 0007 	bic.w	r0, r0, #7
 8003eac:	1ac2      	subs	r2, r0, r3
 8003eae:	bf1c      	itt	ne
 8003eb0:	1a1b      	subne	r3, r3, r0
 8003eb2:	50a3      	strne	r3, [r4, r2]
 8003eb4:	e7af      	b.n	8003e16 <_malloc_r+0x22>
 8003eb6:	6862      	ldr	r2, [r4, #4]
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	bf0c      	ite	eq
 8003ebc:	f8c8 2000 	streq.w	r2, [r8]
 8003ec0:	605a      	strne	r2, [r3, #4]
 8003ec2:	e7eb      	b.n	8003e9c <_malloc_r+0xa8>
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	6864      	ldr	r4, [r4, #4]
 8003ec8:	e7ae      	b.n	8003e28 <_malloc_r+0x34>
 8003eca:	463c      	mov	r4, r7
 8003ecc:	687f      	ldr	r7, [r7, #4]
 8003ece:	e7b6      	b.n	8003e3e <_malloc_r+0x4a>
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	42a3      	cmp	r3, r4
 8003ed6:	d1fb      	bne.n	8003ed0 <_malloc_r+0xdc>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	6053      	str	r3, [r2, #4]
 8003edc:	e7de      	b.n	8003e9c <_malloc_r+0xa8>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f000 f80c 	bl	8003f00 <__malloc_unlock>
 8003ee8:	e794      	b.n	8003e14 <_malloc_r+0x20>
 8003eea:	6005      	str	r5, [r0, #0]
 8003eec:	e7d6      	b.n	8003e9c <_malloc_r+0xa8>
 8003eee:	bf00      	nop
 8003ef0:	2000031c 	.word	0x2000031c

08003ef4 <__malloc_lock>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	@ (8003efc <__malloc_lock+0x8>)
 8003ef6:	f7ff bf0e 	b.w	8003d16 <__retarget_lock_acquire_recursive>
 8003efa:	bf00      	nop
 8003efc:	20000314 	.word	0x20000314

08003f00 <__malloc_unlock>:
 8003f00:	4801      	ldr	r0, [pc, #4]	@ (8003f08 <__malloc_unlock+0x8>)
 8003f02:	f7ff bf09 	b.w	8003d18 <__retarget_lock_release_recursive>
 8003f06:	bf00      	nop
 8003f08:	20000314 	.word	0x20000314

08003f0c <__sfputc_r>:
 8003f0c:	6893      	ldr	r3, [r2, #8]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	b410      	push	{r4}
 8003f14:	6093      	str	r3, [r2, #8]
 8003f16:	da08      	bge.n	8003f2a <__sfputc_r+0x1e>
 8003f18:	6994      	ldr	r4, [r2, #24]
 8003f1a:	42a3      	cmp	r3, r4
 8003f1c:	db01      	blt.n	8003f22 <__sfputc_r+0x16>
 8003f1e:	290a      	cmp	r1, #10
 8003f20:	d103      	bne.n	8003f2a <__sfputc_r+0x1e>
 8003f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f26:	f7ff bde8 	b.w	8003afa <__swbuf_r>
 8003f2a:	6813      	ldr	r3, [r2, #0]
 8003f2c:	1c58      	adds	r0, r3, #1
 8003f2e:	6010      	str	r0, [r2, #0]
 8003f30:	7019      	strb	r1, [r3, #0]
 8003f32:	4608      	mov	r0, r1
 8003f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <__sfputs_r>:
 8003f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	460f      	mov	r7, r1
 8003f40:	4614      	mov	r4, r2
 8003f42:	18d5      	adds	r5, r2, r3
 8003f44:	42ac      	cmp	r4, r5
 8003f46:	d101      	bne.n	8003f4c <__sfputs_r+0x12>
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e007      	b.n	8003f5c <__sfputs_r+0x22>
 8003f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f50:	463a      	mov	r2, r7
 8003f52:	4630      	mov	r0, r6
 8003f54:	f7ff ffda 	bl	8003f0c <__sfputc_r>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	d1f3      	bne.n	8003f44 <__sfputs_r+0xa>
 8003f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f60 <_vfiprintf_r>:
 8003f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	460d      	mov	r5, r1
 8003f66:	b09d      	sub	sp, #116	@ 0x74
 8003f68:	4614      	mov	r4, r2
 8003f6a:	4698      	mov	r8, r3
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	b118      	cbz	r0, 8003f78 <_vfiprintf_r+0x18>
 8003f70:	6a03      	ldr	r3, [r0, #32]
 8003f72:	b90b      	cbnz	r3, 8003f78 <_vfiprintf_r+0x18>
 8003f74:	f7ff fcd8 	bl	8003928 <__sinit>
 8003f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f7a:	07d9      	lsls	r1, r3, #31
 8003f7c:	d405      	bmi.n	8003f8a <_vfiprintf_r+0x2a>
 8003f7e:	89ab      	ldrh	r3, [r5, #12]
 8003f80:	059a      	lsls	r2, r3, #22
 8003f82:	d402      	bmi.n	8003f8a <_vfiprintf_r+0x2a>
 8003f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f86:	f7ff fec6 	bl	8003d16 <__retarget_lock_acquire_recursive>
 8003f8a:	89ab      	ldrh	r3, [r5, #12]
 8003f8c:	071b      	lsls	r3, r3, #28
 8003f8e:	d501      	bpl.n	8003f94 <_vfiprintf_r+0x34>
 8003f90:	692b      	ldr	r3, [r5, #16]
 8003f92:	b99b      	cbnz	r3, 8003fbc <_vfiprintf_r+0x5c>
 8003f94:	4629      	mov	r1, r5
 8003f96:	4630      	mov	r0, r6
 8003f98:	f7ff fdee 	bl	8003b78 <__swsetup_r>
 8003f9c:	b170      	cbz	r0, 8003fbc <_vfiprintf_r+0x5c>
 8003f9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fa0:	07dc      	lsls	r4, r3, #31
 8003fa2:	d504      	bpl.n	8003fae <_vfiprintf_r+0x4e>
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	b01d      	add	sp, #116	@ 0x74
 8003faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fae:	89ab      	ldrh	r3, [r5, #12]
 8003fb0:	0598      	lsls	r0, r3, #22
 8003fb2:	d4f7      	bmi.n	8003fa4 <_vfiprintf_r+0x44>
 8003fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fb6:	f7ff feaf 	bl	8003d18 <__retarget_lock_release_recursive>
 8003fba:	e7f3      	b.n	8003fa4 <_vfiprintf_r+0x44>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fca:	2330      	movs	r3, #48	@ 0x30
 8003fcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800417c <_vfiprintf_r+0x21c>
 8003fd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fd4:	f04f 0901 	mov.w	r9, #1
 8003fd8:	4623      	mov	r3, r4
 8003fda:	469a      	mov	sl, r3
 8003fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe0:	b10a      	cbz	r2, 8003fe6 <_vfiprintf_r+0x86>
 8003fe2:	2a25      	cmp	r2, #37	@ 0x25
 8003fe4:	d1f9      	bne.n	8003fda <_vfiprintf_r+0x7a>
 8003fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8003fea:	d00b      	beq.n	8004004 <_vfiprintf_r+0xa4>
 8003fec:	465b      	mov	r3, fp
 8003fee:	4622      	mov	r2, r4
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f7ff ffa1 	bl	8003f3a <__sfputs_r>
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f000 80a7 	beq.w	800414c <_vfiprintf_r+0x1ec>
 8003ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004000:	445a      	add	r2, fp
 8004002:	9209      	str	r2, [sp, #36]	@ 0x24
 8004004:	f89a 3000 	ldrb.w	r3, [sl]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 809f 	beq.w	800414c <_vfiprintf_r+0x1ec>
 800400e:	2300      	movs	r3, #0
 8004010:	f04f 32ff 	mov.w	r2, #4294967295
 8004014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004018:	f10a 0a01 	add.w	sl, sl, #1
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	9307      	str	r3, [sp, #28]
 8004020:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004024:	931a      	str	r3, [sp, #104]	@ 0x68
 8004026:	4654      	mov	r4, sl
 8004028:	2205      	movs	r2, #5
 800402a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800402e:	4853      	ldr	r0, [pc, #332]	@ (800417c <_vfiprintf_r+0x21c>)
 8004030:	f7fc f8de 	bl	80001f0 <memchr>
 8004034:	9a04      	ldr	r2, [sp, #16]
 8004036:	b9d8      	cbnz	r0, 8004070 <_vfiprintf_r+0x110>
 8004038:	06d1      	lsls	r1, r2, #27
 800403a:	bf44      	itt	mi
 800403c:	2320      	movmi	r3, #32
 800403e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004042:	0713      	lsls	r3, r2, #28
 8004044:	bf44      	itt	mi
 8004046:	232b      	movmi	r3, #43	@ 0x2b
 8004048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800404c:	f89a 3000 	ldrb.w	r3, [sl]
 8004050:	2b2a      	cmp	r3, #42	@ 0x2a
 8004052:	d015      	beq.n	8004080 <_vfiprintf_r+0x120>
 8004054:	9a07      	ldr	r2, [sp, #28]
 8004056:	4654      	mov	r4, sl
 8004058:	2000      	movs	r0, #0
 800405a:	f04f 0c0a 	mov.w	ip, #10
 800405e:	4621      	mov	r1, r4
 8004060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004064:	3b30      	subs	r3, #48	@ 0x30
 8004066:	2b09      	cmp	r3, #9
 8004068:	d94b      	bls.n	8004102 <_vfiprintf_r+0x1a2>
 800406a:	b1b0      	cbz	r0, 800409a <_vfiprintf_r+0x13a>
 800406c:	9207      	str	r2, [sp, #28]
 800406e:	e014      	b.n	800409a <_vfiprintf_r+0x13a>
 8004070:	eba0 0308 	sub.w	r3, r0, r8
 8004074:	fa09 f303 	lsl.w	r3, r9, r3
 8004078:	4313      	orrs	r3, r2
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	46a2      	mov	sl, r4
 800407e:	e7d2      	b.n	8004026 <_vfiprintf_r+0xc6>
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	1d19      	adds	r1, r3, #4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	9103      	str	r1, [sp, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	bfbb      	ittet	lt
 800408c:	425b      	neglt	r3, r3
 800408e:	f042 0202 	orrlt.w	r2, r2, #2
 8004092:	9307      	strge	r3, [sp, #28]
 8004094:	9307      	strlt	r3, [sp, #28]
 8004096:	bfb8      	it	lt
 8004098:	9204      	strlt	r2, [sp, #16]
 800409a:	7823      	ldrb	r3, [r4, #0]
 800409c:	2b2e      	cmp	r3, #46	@ 0x2e
 800409e:	d10a      	bne.n	80040b6 <_vfiprintf_r+0x156>
 80040a0:	7863      	ldrb	r3, [r4, #1]
 80040a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040a4:	d132      	bne.n	800410c <_vfiprintf_r+0x1ac>
 80040a6:	9b03      	ldr	r3, [sp, #12]
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	9203      	str	r2, [sp, #12]
 80040ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040b2:	3402      	adds	r4, #2
 80040b4:	9305      	str	r3, [sp, #20]
 80040b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800418c <_vfiprintf_r+0x22c>
 80040ba:	7821      	ldrb	r1, [r4, #0]
 80040bc:	2203      	movs	r2, #3
 80040be:	4650      	mov	r0, sl
 80040c0:	f7fc f896 	bl	80001f0 <memchr>
 80040c4:	b138      	cbz	r0, 80040d6 <_vfiprintf_r+0x176>
 80040c6:	9b04      	ldr	r3, [sp, #16]
 80040c8:	eba0 000a 	sub.w	r0, r0, sl
 80040cc:	2240      	movs	r2, #64	@ 0x40
 80040ce:	4082      	lsls	r2, r0
 80040d0:	4313      	orrs	r3, r2
 80040d2:	3401      	adds	r4, #1
 80040d4:	9304      	str	r3, [sp, #16]
 80040d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040da:	4829      	ldr	r0, [pc, #164]	@ (8004180 <_vfiprintf_r+0x220>)
 80040dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040e0:	2206      	movs	r2, #6
 80040e2:	f7fc f885 	bl	80001f0 <memchr>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d03f      	beq.n	800416a <_vfiprintf_r+0x20a>
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <_vfiprintf_r+0x224>)
 80040ec:	bb1b      	cbnz	r3, 8004136 <_vfiprintf_r+0x1d6>
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	3307      	adds	r3, #7
 80040f2:	f023 0307 	bic.w	r3, r3, #7
 80040f6:	3308      	adds	r3, #8
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040fc:	443b      	add	r3, r7
 80040fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004100:	e76a      	b.n	8003fd8 <_vfiprintf_r+0x78>
 8004102:	fb0c 3202 	mla	r2, ip, r2, r3
 8004106:	460c      	mov	r4, r1
 8004108:	2001      	movs	r0, #1
 800410a:	e7a8      	b.n	800405e <_vfiprintf_r+0xfe>
 800410c:	2300      	movs	r3, #0
 800410e:	3401      	adds	r4, #1
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	4619      	mov	r1, r3
 8004114:	f04f 0c0a 	mov.w	ip, #10
 8004118:	4620      	mov	r0, r4
 800411a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800411e:	3a30      	subs	r2, #48	@ 0x30
 8004120:	2a09      	cmp	r2, #9
 8004122:	d903      	bls.n	800412c <_vfiprintf_r+0x1cc>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0c6      	beq.n	80040b6 <_vfiprintf_r+0x156>
 8004128:	9105      	str	r1, [sp, #20]
 800412a:	e7c4      	b.n	80040b6 <_vfiprintf_r+0x156>
 800412c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004130:	4604      	mov	r4, r0
 8004132:	2301      	movs	r3, #1
 8004134:	e7f0      	b.n	8004118 <_vfiprintf_r+0x1b8>
 8004136:	ab03      	add	r3, sp, #12
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	462a      	mov	r2, r5
 800413c:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <_vfiprintf_r+0x228>)
 800413e:	a904      	add	r1, sp, #16
 8004140:	4630      	mov	r0, r6
 8004142:	f3af 8000 	nop.w
 8004146:	4607      	mov	r7, r0
 8004148:	1c78      	adds	r0, r7, #1
 800414a:	d1d6      	bne.n	80040fa <_vfiprintf_r+0x19a>
 800414c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800414e:	07d9      	lsls	r1, r3, #31
 8004150:	d405      	bmi.n	800415e <_vfiprintf_r+0x1fe>
 8004152:	89ab      	ldrh	r3, [r5, #12]
 8004154:	059a      	lsls	r2, r3, #22
 8004156:	d402      	bmi.n	800415e <_vfiprintf_r+0x1fe>
 8004158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800415a:	f7ff fddd 	bl	8003d18 <__retarget_lock_release_recursive>
 800415e:	89ab      	ldrh	r3, [r5, #12]
 8004160:	065b      	lsls	r3, r3, #25
 8004162:	f53f af1f 	bmi.w	8003fa4 <_vfiprintf_r+0x44>
 8004166:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004168:	e71e      	b.n	8003fa8 <_vfiprintf_r+0x48>
 800416a:	ab03      	add	r3, sp, #12
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	462a      	mov	r2, r5
 8004170:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <_vfiprintf_r+0x228>)
 8004172:	a904      	add	r1, sp, #16
 8004174:	4630      	mov	r0, r6
 8004176:	f000 f879 	bl	800426c <_printf_i>
 800417a:	e7e4      	b.n	8004146 <_vfiprintf_r+0x1e6>
 800417c:	080047e2 	.word	0x080047e2
 8004180:	080047ec 	.word	0x080047ec
 8004184:	00000000 	.word	0x00000000
 8004188:	08003f3b 	.word	0x08003f3b
 800418c:	080047e8 	.word	0x080047e8

08004190 <_printf_common>:
 8004190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004194:	4616      	mov	r6, r2
 8004196:	4698      	mov	r8, r3
 8004198:	688a      	ldr	r2, [r1, #8]
 800419a:	690b      	ldr	r3, [r1, #16]
 800419c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bfb8      	it	lt
 80041a4:	4613      	movlt	r3, r2
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041ac:	4607      	mov	r7, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	b10a      	cbz	r2, 80041b6 <_printf_common+0x26>
 80041b2:	3301      	adds	r3, #1
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	0699      	lsls	r1, r3, #26
 80041ba:	bf42      	ittt	mi
 80041bc:	6833      	ldrmi	r3, [r6, #0]
 80041be:	3302      	addmi	r3, #2
 80041c0:	6033      	strmi	r3, [r6, #0]
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	f015 0506 	ands.w	r5, r5, #6
 80041c8:	d106      	bne.n	80041d8 <_printf_common+0x48>
 80041ca:	f104 0a19 	add.w	sl, r4, #25
 80041ce:	68e3      	ldr	r3, [r4, #12]
 80041d0:	6832      	ldr	r2, [r6, #0]
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	42ab      	cmp	r3, r5
 80041d6:	dc26      	bgt.n	8004226 <_printf_common+0x96>
 80041d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	3b00      	subs	r3, #0
 80041e0:	bf18      	it	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	0692      	lsls	r2, r2, #26
 80041e6:	d42b      	bmi.n	8004240 <_printf_common+0xb0>
 80041e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041ec:	4641      	mov	r1, r8
 80041ee:	4638      	mov	r0, r7
 80041f0:	47c8      	blx	r9
 80041f2:	3001      	adds	r0, #1
 80041f4:	d01e      	beq.n	8004234 <_printf_common+0xa4>
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	f003 0306 	and.w	r3, r3, #6
 80041fe:	2b04      	cmp	r3, #4
 8004200:	bf02      	ittt	eq
 8004202:	68e5      	ldreq	r5, [r4, #12]
 8004204:	6833      	ldreq	r3, [r6, #0]
 8004206:	1aed      	subeq	r5, r5, r3
 8004208:	68a3      	ldr	r3, [r4, #8]
 800420a:	bf0c      	ite	eq
 800420c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004210:	2500      	movne	r5, #0
 8004212:	4293      	cmp	r3, r2
 8004214:	bfc4      	itt	gt
 8004216:	1a9b      	subgt	r3, r3, r2
 8004218:	18ed      	addgt	r5, r5, r3
 800421a:	2600      	movs	r6, #0
 800421c:	341a      	adds	r4, #26
 800421e:	42b5      	cmp	r5, r6
 8004220:	d11a      	bne.n	8004258 <_printf_common+0xc8>
 8004222:	2000      	movs	r0, #0
 8004224:	e008      	b.n	8004238 <_printf_common+0xa8>
 8004226:	2301      	movs	r3, #1
 8004228:	4652      	mov	r2, sl
 800422a:	4641      	mov	r1, r8
 800422c:	4638      	mov	r0, r7
 800422e:	47c8      	blx	r9
 8004230:	3001      	adds	r0, #1
 8004232:	d103      	bne.n	800423c <_printf_common+0xac>
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423c:	3501      	adds	r5, #1
 800423e:	e7c6      	b.n	80041ce <_printf_common+0x3e>
 8004240:	18e1      	adds	r1, r4, r3
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	2030      	movs	r0, #48	@ 0x30
 8004246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800424a:	4422      	add	r2, r4
 800424c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004254:	3302      	adds	r3, #2
 8004256:	e7c7      	b.n	80041e8 <_printf_common+0x58>
 8004258:	2301      	movs	r3, #1
 800425a:	4622      	mov	r2, r4
 800425c:	4641      	mov	r1, r8
 800425e:	4638      	mov	r0, r7
 8004260:	47c8      	blx	r9
 8004262:	3001      	adds	r0, #1
 8004264:	d0e6      	beq.n	8004234 <_printf_common+0xa4>
 8004266:	3601      	adds	r6, #1
 8004268:	e7d9      	b.n	800421e <_printf_common+0x8e>
	...

0800426c <_printf_i>:
 800426c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004270:	7e0f      	ldrb	r7, [r1, #24]
 8004272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004274:	2f78      	cmp	r7, #120	@ 0x78
 8004276:	4691      	mov	r9, r2
 8004278:	4680      	mov	r8, r0
 800427a:	460c      	mov	r4, r1
 800427c:	469a      	mov	sl, r3
 800427e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004282:	d807      	bhi.n	8004294 <_printf_i+0x28>
 8004284:	2f62      	cmp	r7, #98	@ 0x62
 8004286:	d80a      	bhi.n	800429e <_printf_i+0x32>
 8004288:	2f00      	cmp	r7, #0
 800428a:	f000 80d2 	beq.w	8004432 <_printf_i+0x1c6>
 800428e:	2f58      	cmp	r7, #88	@ 0x58
 8004290:	f000 80b9 	beq.w	8004406 <_printf_i+0x19a>
 8004294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800429c:	e03a      	b.n	8004314 <_printf_i+0xa8>
 800429e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042a2:	2b15      	cmp	r3, #21
 80042a4:	d8f6      	bhi.n	8004294 <_printf_i+0x28>
 80042a6:	a101      	add	r1, pc, #4	@ (adr r1, 80042ac <_printf_i+0x40>)
 80042a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042ac:	08004305 	.word	0x08004305
 80042b0:	08004319 	.word	0x08004319
 80042b4:	08004295 	.word	0x08004295
 80042b8:	08004295 	.word	0x08004295
 80042bc:	08004295 	.word	0x08004295
 80042c0:	08004295 	.word	0x08004295
 80042c4:	08004319 	.word	0x08004319
 80042c8:	08004295 	.word	0x08004295
 80042cc:	08004295 	.word	0x08004295
 80042d0:	08004295 	.word	0x08004295
 80042d4:	08004295 	.word	0x08004295
 80042d8:	08004419 	.word	0x08004419
 80042dc:	08004343 	.word	0x08004343
 80042e0:	080043d3 	.word	0x080043d3
 80042e4:	08004295 	.word	0x08004295
 80042e8:	08004295 	.word	0x08004295
 80042ec:	0800443b 	.word	0x0800443b
 80042f0:	08004295 	.word	0x08004295
 80042f4:	08004343 	.word	0x08004343
 80042f8:	08004295 	.word	0x08004295
 80042fc:	08004295 	.word	0x08004295
 8004300:	080043db 	.word	0x080043db
 8004304:	6833      	ldr	r3, [r6, #0]
 8004306:	1d1a      	adds	r2, r3, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6032      	str	r2, [r6, #0]
 800430c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004314:	2301      	movs	r3, #1
 8004316:	e09d      	b.n	8004454 <_printf_i+0x1e8>
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	1d19      	adds	r1, r3, #4
 800431e:	6031      	str	r1, [r6, #0]
 8004320:	0606      	lsls	r6, r0, #24
 8004322:	d501      	bpl.n	8004328 <_printf_i+0xbc>
 8004324:	681d      	ldr	r5, [r3, #0]
 8004326:	e003      	b.n	8004330 <_printf_i+0xc4>
 8004328:	0645      	lsls	r5, r0, #25
 800432a:	d5fb      	bpl.n	8004324 <_printf_i+0xb8>
 800432c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004330:	2d00      	cmp	r5, #0
 8004332:	da03      	bge.n	800433c <_printf_i+0xd0>
 8004334:	232d      	movs	r3, #45	@ 0x2d
 8004336:	426d      	negs	r5, r5
 8004338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800433c:	4859      	ldr	r0, [pc, #356]	@ (80044a4 <_printf_i+0x238>)
 800433e:	230a      	movs	r3, #10
 8004340:	e011      	b.n	8004366 <_printf_i+0xfa>
 8004342:	6821      	ldr	r1, [r4, #0]
 8004344:	6833      	ldr	r3, [r6, #0]
 8004346:	0608      	lsls	r0, r1, #24
 8004348:	f853 5b04 	ldr.w	r5, [r3], #4
 800434c:	d402      	bmi.n	8004354 <_printf_i+0xe8>
 800434e:	0649      	lsls	r1, r1, #25
 8004350:	bf48      	it	mi
 8004352:	b2ad      	uxthmi	r5, r5
 8004354:	2f6f      	cmp	r7, #111	@ 0x6f
 8004356:	4853      	ldr	r0, [pc, #332]	@ (80044a4 <_printf_i+0x238>)
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	bf14      	ite	ne
 800435c:	230a      	movne	r3, #10
 800435e:	2308      	moveq	r3, #8
 8004360:	2100      	movs	r1, #0
 8004362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004366:	6866      	ldr	r6, [r4, #4]
 8004368:	60a6      	str	r6, [r4, #8]
 800436a:	2e00      	cmp	r6, #0
 800436c:	bfa2      	ittt	ge
 800436e:	6821      	ldrge	r1, [r4, #0]
 8004370:	f021 0104 	bicge.w	r1, r1, #4
 8004374:	6021      	strge	r1, [r4, #0]
 8004376:	b90d      	cbnz	r5, 800437c <_printf_i+0x110>
 8004378:	2e00      	cmp	r6, #0
 800437a:	d04b      	beq.n	8004414 <_printf_i+0x1a8>
 800437c:	4616      	mov	r6, r2
 800437e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004382:	fb03 5711 	mls	r7, r3, r1, r5
 8004386:	5dc7      	ldrb	r7, [r0, r7]
 8004388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800438c:	462f      	mov	r7, r5
 800438e:	42bb      	cmp	r3, r7
 8004390:	460d      	mov	r5, r1
 8004392:	d9f4      	bls.n	800437e <_printf_i+0x112>
 8004394:	2b08      	cmp	r3, #8
 8004396:	d10b      	bne.n	80043b0 <_printf_i+0x144>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	07df      	lsls	r7, r3, #31
 800439c:	d508      	bpl.n	80043b0 <_printf_i+0x144>
 800439e:	6923      	ldr	r3, [r4, #16]
 80043a0:	6861      	ldr	r1, [r4, #4]
 80043a2:	4299      	cmp	r1, r3
 80043a4:	bfde      	ittt	le
 80043a6:	2330      	movle	r3, #48	@ 0x30
 80043a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043b0:	1b92      	subs	r2, r2, r6
 80043b2:	6122      	str	r2, [r4, #16]
 80043b4:	f8cd a000 	str.w	sl, [sp]
 80043b8:	464b      	mov	r3, r9
 80043ba:	aa03      	add	r2, sp, #12
 80043bc:	4621      	mov	r1, r4
 80043be:	4640      	mov	r0, r8
 80043c0:	f7ff fee6 	bl	8004190 <_printf_common>
 80043c4:	3001      	adds	r0, #1
 80043c6:	d14a      	bne.n	800445e <_printf_i+0x1f2>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	b004      	add	sp, #16
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f043 0320 	orr.w	r3, r3, #32
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	4833      	ldr	r0, [pc, #204]	@ (80044a8 <_printf_i+0x23c>)
 80043dc:	2778      	movs	r7, #120	@ 0x78
 80043de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	6831      	ldr	r1, [r6, #0]
 80043e6:	061f      	lsls	r7, r3, #24
 80043e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80043ec:	d402      	bmi.n	80043f4 <_printf_i+0x188>
 80043ee:	065f      	lsls	r7, r3, #25
 80043f0:	bf48      	it	mi
 80043f2:	b2ad      	uxthmi	r5, r5
 80043f4:	6031      	str	r1, [r6, #0]
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	bf44      	itt	mi
 80043fa:	f043 0320 	orrmi.w	r3, r3, #32
 80043fe:	6023      	strmi	r3, [r4, #0]
 8004400:	b11d      	cbz	r5, 800440a <_printf_i+0x19e>
 8004402:	2310      	movs	r3, #16
 8004404:	e7ac      	b.n	8004360 <_printf_i+0xf4>
 8004406:	4827      	ldr	r0, [pc, #156]	@ (80044a4 <_printf_i+0x238>)
 8004408:	e7e9      	b.n	80043de <_printf_i+0x172>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f023 0320 	bic.w	r3, r3, #32
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	e7f6      	b.n	8004402 <_printf_i+0x196>
 8004414:	4616      	mov	r6, r2
 8004416:	e7bd      	b.n	8004394 <_printf_i+0x128>
 8004418:	6833      	ldr	r3, [r6, #0]
 800441a:	6825      	ldr	r5, [r4, #0]
 800441c:	6961      	ldr	r1, [r4, #20]
 800441e:	1d18      	adds	r0, r3, #4
 8004420:	6030      	str	r0, [r6, #0]
 8004422:	062e      	lsls	r6, r5, #24
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	d501      	bpl.n	800442c <_printf_i+0x1c0>
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	e002      	b.n	8004432 <_printf_i+0x1c6>
 800442c:	0668      	lsls	r0, r5, #25
 800442e:	d5fb      	bpl.n	8004428 <_printf_i+0x1bc>
 8004430:	8019      	strh	r1, [r3, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	4616      	mov	r6, r2
 8004438:	e7bc      	b.n	80043b4 <_printf_i+0x148>
 800443a:	6833      	ldr	r3, [r6, #0]
 800443c:	1d1a      	adds	r2, r3, #4
 800443e:	6032      	str	r2, [r6, #0]
 8004440:	681e      	ldr	r6, [r3, #0]
 8004442:	6862      	ldr	r2, [r4, #4]
 8004444:	2100      	movs	r1, #0
 8004446:	4630      	mov	r0, r6
 8004448:	f7fb fed2 	bl	80001f0 <memchr>
 800444c:	b108      	cbz	r0, 8004452 <_printf_i+0x1e6>
 800444e:	1b80      	subs	r0, r0, r6
 8004450:	6060      	str	r0, [r4, #4]
 8004452:	6863      	ldr	r3, [r4, #4]
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	2300      	movs	r3, #0
 8004458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800445c:	e7aa      	b.n	80043b4 <_printf_i+0x148>
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	4632      	mov	r2, r6
 8004462:	4649      	mov	r1, r9
 8004464:	4640      	mov	r0, r8
 8004466:	47d0      	blx	sl
 8004468:	3001      	adds	r0, #1
 800446a:	d0ad      	beq.n	80043c8 <_printf_i+0x15c>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	079b      	lsls	r3, r3, #30
 8004470:	d413      	bmi.n	800449a <_printf_i+0x22e>
 8004472:	68e0      	ldr	r0, [r4, #12]
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	4298      	cmp	r0, r3
 8004478:	bfb8      	it	lt
 800447a:	4618      	movlt	r0, r3
 800447c:	e7a6      	b.n	80043cc <_printf_i+0x160>
 800447e:	2301      	movs	r3, #1
 8004480:	4632      	mov	r2, r6
 8004482:	4649      	mov	r1, r9
 8004484:	4640      	mov	r0, r8
 8004486:	47d0      	blx	sl
 8004488:	3001      	adds	r0, #1
 800448a:	d09d      	beq.n	80043c8 <_printf_i+0x15c>
 800448c:	3501      	adds	r5, #1
 800448e:	68e3      	ldr	r3, [r4, #12]
 8004490:	9903      	ldr	r1, [sp, #12]
 8004492:	1a5b      	subs	r3, r3, r1
 8004494:	42ab      	cmp	r3, r5
 8004496:	dcf2      	bgt.n	800447e <_printf_i+0x212>
 8004498:	e7eb      	b.n	8004472 <_printf_i+0x206>
 800449a:	2500      	movs	r5, #0
 800449c:	f104 0619 	add.w	r6, r4, #25
 80044a0:	e7f5      	b.n	800448e <_printf_i+0x222>
 80044a2:	bf00      	nop
 80044a4:	080047f3 	.word	0x080047f3
 80044a8:	08004804 	.word	0x08004804

080044ac <__sflush_r>:
 80044ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b4:	0716      	lsls	r6, r2, #28
 80044b6:	4605      	mov	r5, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	d454      	bmi.n	8004566 <__sflush_r+0xba>
 80044bc:	684b      	ldr	r3, [r1, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	dc02      	bgt.n	80044c8 <__sflush_r+0x1c>
 80044c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	dd48      	ble.n	800455a <__sflush_r+0xae>
 80044c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044ca:	2e00      	cmp	r6, #0
 80044cc:	d045      	beq.n	800455a <__sflush_r+0xae>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044d4:	682f      	ldr	r7, [r5, #0]
 80044d6:	6a21      	ldr	r1, [r4, #32]
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	d030      	beq.n	800453e <__sflush_r+0x92>
 80044dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	0759      	lsls	r1, r3, #29
 80044e2:	d505      	bpl.n	80044f0 <__sflush_r+0x44>
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	1ad2      	subs	r2, r2, r3
 80044e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044ea:	b10b      	cbz	r3, 80044f0 <__sflush_r+0x44>
 80044ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044f4:	6a21      	ldr	r1, [r4, #32]
 80044f6:	4628      	mov	r0, r5
 80044f8:	47b0      	blx	r6
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	d106      	bne.n	800450e <__sflush_r+0x62>
 8004500:	6829      	ldr	r1, [r5, #0]
 8004502:	291d      	cmp	r1, #29
 8004504:	d82b      	bhi.n	800455e <__sflush_r+0xb2>
 8004506:	4a2a      	ldr	r2, [pc, #168]	@ (80045b0 <__sflush_r+0x104>)
 8004508:	410a      	asrs	r2, r1
 800450a:	07d6      	lsls	r6, r2, #31
 800450c:	d427      	bmi.n	800455e <__sflush_r+0xb2>
 800450e:	2200      	movs	r2, #0
 8004510:	6062      	str	r2, [r4, #4]
 8004512:	04d9      	lsls	r1, r3, #19
 8004514:	6922      	ldr	r2, [r4, #16]
 8004516:	6022      	str	r2, [r4, #0]
 8004518:	d504      	bpl.n	8004524 <__sflush_r+0x78>
 800451a:	1c42      	adds	r2, r0, #1
 800451c:	d101      	bne.n	8004522 <__sflush_r+0x76>
 800451e:	682b      	ldr	r3, [r5, #0]
 8004520:	b903      	cbnz	r3, 8004524 <__sflush_r+0x78>
 8004522:	6560      	str	r0, [r4, #84]	@ 0x54
 8004524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004526:	602f      	str	r7, [r5, #0]
 8004528:	b1b9      	cbz	r1, 800455a <__sflush_r+0xae>
 800452a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800452e:	4299      	cmp	r1, r3
 8004530:	d002      	beq.n	8004538 <__sflush_r+0x8c>
 8004532:	4628      	mov	r0, r5
 8004534:	f7ff fbf2 	bl	8003d1c <_free_r>
 8004538:	2300      	movs	r3, #0
 800453a:	6363      	str	r3, [r4, #52]	@ 0x34
 800453c:	e00d      	b.n	800455a <__sflush_r+0xae>
 800453e:	2301      	movs	r3, #1
 8004540:	4628      	mov	r0, r5
 8004542:	47b0      	blx	r6
 8004544:	4602      	mov	r2, r0
 8004546:	1c50      	adds	r0, r2, #1
 8004548:	d1c9      	bne.n	80044de <__sflush_r+0x32>
 800454a:	682b      	ldr	r3, [r5, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0c6      	beq.n	80044de <__sflush_r+0x32>
 8004550:	2b1d      	cmp	r3, #29
 8004552:	d001      	beq.n	8004558 <__sflush_r+0xac>
 8004554:	2b16      	cmp	r3, #22
 8004556:	d11e      	bne.n	8004596 <__sflush_r+0xea>
 8004558:	602f      	str	r7, [r5, #0]
 800455a:	2000      	movs	r0, #0
 800455c:	e022      	b.n	80045a4 <__sflush_r+0xf8>
 800455e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004562:	b21b      	sxth	r3, r3
 8004564:	e01b      	b.n	800459e <__sflush_r+0xf2>
 8004566:	690f      	ldr	r7, [r1, #16]
 8004568:	2f00      	cmp	r7, #0
 800456a:	d0f6      	beq.n	800455a <__sflush_r+0xae>
 800456c:	0793      	lsls	r3, r2, #30
 800456e:	680e      	ldr	r6, [r1, #0]
 8004570:	bf08      	it	eq
 8004572:	694b      	ldreq	r3, [r1, #20]
 8004574:	600f      	str	r7, [r1, #0]
 8004576:	bf18      	it	ne
 8004578:	2300      	movne	r3, #0
 800457a:	eba6 0807 	sub.w	r8, r6, r7
 800457e:	608b      	str	r3, [r1, #8]
 8004580:	f1b8 0f00 	cmp.w	r8, #0
 8004584:	dde9      	ble.n	800455a <__sflush_r+0xae>
 8004586:	6a21      	ldr	r1, [r4, #32]
 8004588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800458a:	4643      	mov	r3, r8
 800458c:	463a      	mov	r2, r7
 800458e:	4628      	mov	r0, r5
 8004590:	47b0      	blx	r6
 8004592:	2800      	cmp	r0, #0
 8004594:	dc08      	bgt.n	80045a8 <__sflush_r+0xfc>
 8004596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800459a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	4407      	add	r7, r0
 80045aa:	eba8 0800 	sub.w	r8, r8, r0
 80045ae:	e7e7      	b.n	8004580 <__sflush_r+0xd4>
 80045b0:	dfbffffe 	.word	0xdfbffffe

080045b4 <_fflush_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	690b      	ldr	r3, [r1, #16]
 80045b8:	4605      	mov	r5, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	b913      	cbnz	r3, 80045c4 <_fflush_r+0x10>
 80045be:	2500      	movs	r5, #0
 80045c0:	4628      	mov	r0, r5
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	b118      	cbz	r0, 80045ce <_fflush_r+0x1a>
 80045c6:	6a03      	ldr	r3, [r0, #32]
 80045c8:	b90b      	cbnz	r3, 80045ce <_fflush_r+0x1a>
 80045ca:	f7ff f9ad 	bl	8003928 <__sinit>
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f3      	beq.n	80045be <_fflush_r+0xa>
 80045d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045d8:	07d0      	lsls	r0, r2, #31
 80045da:	d404      	bmi.n	80045e6 <_fflush_r+0x32>
 80045dc:	0599      	lsls	r1, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_fflush_r+0x32>
 80045e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045e2:	f7ff fb98 	bl	8003d16 <__retarget_lock_acquire_recursive>
 80045e6:	4628      	mov	r0, r5
 80045e8:	4621      	mov	r1, r4
 80045ea:	f7ff ff5f 	bl	80044ac <__sflush_r>
 80045ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045f0:	07da      	lsls	r2, r3, #31
 80045f2:	4605      	mov	r5, r0
 80045f4:	d4e4      	bmi.n	80045c0 <_fflush_r+0xc>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	059b      	lsls	r3, r3, #22
 80045fa:	d4e1      	bmi.n	80045c0 <_fflush_r+0xc>
 80045fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045fe:	f7ff fb8b 	bl	8003d18 <__retarget_lock_release_recursive>
 8004602:	e7dd      	b.n	80045c0 <_fflush_r+0xc>

08004604 <__swhatbuf_r>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	460c      	mov	r4, r1
 8004608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460c:	2900      	cmp	r1, #0
 800460e:	b096      	sub	sp, #88	@ 0x58
 8004610:	4615      	mov	r5, r2
 8004612:	461e      	mov	r6, r3
 8004614:	da0d      	bge.n	8004632 <__swhatbuf_r+0x2e>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	bf14      	ite	ne
 8004622:	2340      	movne	r3, #64	@ 0x40
 8004624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004628:	2000      	movs	r0, #0
 800462a:	6031      	str	r1, [r6, #0]
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	b016      	add	sp, #88	@ 0x58
 8004630:	bd70      	pop	{r4, r5, r6, pc}
 8004632:	466a      	mov	r2, sp
 8004634:	f000 f848 	bl	80046c8 <_fstat_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	dbec      	blt.n	8004616 <__swhatbuf_r+0x12>
 800463c:	9901      	ldr	r1, [sp, #4]
 800463e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004646:	4259      	negs	r1, r3
 8004648:	4159      	adcs	r1, r3
 800464a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800464e:	e7eb      	b.n	8004628 <__swhatbuf_r+0x24>

08004650 <__smakebuf_r>:
 8004650:	898b      	ldrh	r3, [r1, #12]
 8004652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004654:	079d      	lsls	r5, r3, #30
 8004656:	4606      	mov	r6, r0
 8004658:	460c      	mov	r4, r1
 800465a:	d507      	bpl.n	800466c <__smakebuf_r+0x1c>
 800465c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	6123      	str	r3, [r4, #16]
 8004664:	2301      	movs	r3, #1
 8004666:	6163      	str	r3, [r4, #20]
 8004668:	b003      	add	sp, #12
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800466c:	ab01      	add	r3, sp, #4
 800466e:	466a      	mov	r2, sp
 8004670:	f7ff ffc8 	bl	8004604 <__swhatbuf_r>
 8004674:	9f00      	ldr	r7, [sp, #0]
 8004676:	4605      	mov	r5, r0
 8004678:	4639      	mov	r1, r7
 800467a:	4630      	mov	r0, r6
 800467c:	f7ff fbba 	bl	8003df4 <_malloc_r>
 8004680:	b948      	cbnz	r0, 8004696 <__smakebuf_r+0x46>
 8004682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004686:	059a      	lsls	r2, r3, #22
 8004688:	d4ee      	bmi.n	8004668 <__smakebuf_r+0x18>
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	e7e2      	b.n	800465c <__smakebuf_r+0xc>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	6020      	str	r0, [r4, #0]
 800469a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046a6:	b15b      	cbz	r3, 80046c0 <__smakebuf_r+0x70>
 80046a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f81d 	bl	80046ec <_isatty_r>
 80046b2:	b128      	cbz	r0, 80046c0 <__smakebuf_r+0x70>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f023 0303 	bic.w	r3, r3, #3
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	81a3      	strh	r3, [r4, #12]
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	431d      	orrs	r5, r3
 80046c4:	81a5      	strh	r5, [r4, #12]
 80046c6:	e7cf      	b.n	8004668 <__smakebuf_r+0x18>

080046c8 <_fstat_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	4d07      	ldr	r5, [pc, #28]	@ (80046e8 <_fstat_r+0x20>)
 80046cc:	2300      	movs	r3, #0
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	f7fe ff1a 	bl	800350e <_fstat>
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	d102      	bne.n	80046e4 <_fstat_r+0x1c>
 80046de:	682b      	ldr	r3, [r5, #0]
 80046e0:	b103      	cbz	r3, 80046e4 <_fstat_r+0x1c>
 80046e2:	6023      	str	r3, [r4, #0]
 80046e4:	bd38      	pop	{r3, r4, r5, pc}
 80046e6:	bf00      	nop
 80046e8:	20000310 	.word	0x20000310

080046ec <_isatty_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	@ (8004708 <_isatty_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7ff f86c 	bl	80037d4 <_isatty>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_isatty_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_isatty_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	20000310 	.word	0x20000310

0800470c <_sbrk_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d06      	ldr	r5, [pc, #24]	@ (8004728 <_sbrk_r+0x1c>)
 8004710:	2300      	movs	r3, #0
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	602b      	str	r3, [r5, #0]
 8004718:	f7fc fb6a 	bl	8000df0 <_sbrk>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_sbrk_r+0x1a>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_sbrk_r+0x1a>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000310 	.word	0x20000310

0800472c <_init>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr

08004738 <_fini>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr
