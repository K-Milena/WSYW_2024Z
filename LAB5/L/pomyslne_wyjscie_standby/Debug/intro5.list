
intro5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002fb8  08002fb8  00003fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003038  08003038  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003040  08003040  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003040  08003040  00004040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003044  08003044  00004044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003048  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  080030b8  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080030b8  000052ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a09  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001851  00000000  00000000  0000baa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000555  00000000  00000000  0000da40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d5b  00000000  00000000  0000df95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f6a  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088146  00000000  00000000  0002cc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4da0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002598  00000000  00000000  000b4de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fa0 	.word	0x08002fa0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08002fa0 	.word	0x08002fa0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80004dc:	f002 f836 	bl	800254c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb52 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f846 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8d6 	bl	8000698 <MX_GPIO_Init>
  MX_RTC_Init();
 80004ec:	f000 f8ae 	bl	800064c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1); //PA0 - przycisk
 80004f0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80004f4:	f000 fecc 	bl	8001290 <HAL_PWR_EnableWakeUpPin>

if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB)!= RESET)
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <main+0x80>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f003 0302 	and.w	r3, r3, #2
 8000500:	2b02      	cmp	r3, #2
 8000502:	d10d      	bne.n	8000520 <main+0x48>
{
	printf("zostal wybudzony ze standby\n");
 8000504:	4815      	ldr	r0, [pc, #84]	@ (800055c <main+0x84>)
 8000506:	f002 f9b7 	bl	8002878 <puts>
	__HAL_PWR_GET_FLAG(PWR_FLAG_SB);
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <main+0x80>)
 800050c:	685b      	ldr	r3, [r3, #4]
	__HAL_PWR_GET_FLAG(PWR_FLAG_WU);
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <main+0x80>)
 8000510:	685b      	ldr	r3, [r3, #4]
	 __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB | PWR_FLAG_WU);
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <main+0x80>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <main+0x80>)
 8000518:	f043 030c 	orr.w	r3, r3, #12
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e00a      	b.n	8000536 <main+0x5e>
}
else
{
	printf("Gasmy swiatlo\n");
 8000520:	480f      	ldr	r0, [pc, #60]	@ (8000560 <main+0x88>)
 8000522:	f002 f9a9 	bl	8002878 <puts>

	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10000, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000526:	2200      	movs	r2, #0
 8000528:	f242 7110 	movw	r1, #10000	@ 0x2710
 800052c:	480d      	ldr	r0, [pc, #52]	@ (8000564 <main+0x8c>)
 800052e:	f001 fd33 	bl	8001f98 <HAL_RTCEx_SetWakeUpTimer_IT>

	HAL_PWR_EnterSTANDBYMode();
 8000532:	f000 febf 	bl	80012b4 <HAL_PWR_EnterSTANDBYMode>

//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, zachowany);

//HAL_PWR_EnterSTANDBYMode(); //wykonuje od nowa wszystkie instrukcje z main

printf("zapalamy switlo.\n");
 8000536:	480c      	ldr	r0, [pc, #48]	@ (8000568 <main+0x90>)
 8000538:	f002 f99e 	bl	8002878 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
printf("wchodzimy w delay\n");
 800053c:	480b      	ldr	r0, [pc, #44]	@ (800056c <main+0x94>)
 800053e:	f002 f99b 	bl	8002878 <puts>
  while (1)
  {
	  HAL_Delay(500);
 8000542:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000546:	f000 fb91 	bl	8000c6c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800054a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054e:	4808      	ldr	r0, [pc, #32]	@ (8000570 <main+0x98>)
 8000550:	f000 fe5f 	bl	8001212 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000554:	bf00      	nop
 8000556:	e7f4      	b.n	8000542 <main+0x6a>
 8000558:	40007000 	.word	0x40007000
 800055c:	08002fb8 	.word	0x08002fb8
 8000560:	08002fd4 	.word	0x08002fd4
 8000564:	2000008c 	.word	0x2000008c
 8000568:	08002fe4 	.word	0x08002fe4
 800056c:	08002ff8 	.word	0x08002ff8
 8000570:	40020c00 	.word	0x40020c00

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fa58 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a28      	ldr	r2, [pc, #160]	@ (8000644 <SystemClock_Config+0xd0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b26      	ldr	r3, [pc, #152]	@ (8000644 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b23      	ldr	r3, [pc, #140]	@ (8000648 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a22      	ldr	r2, [pc, #136]	@ (8000648 <SystemClock_Config+0xd4>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005d0:	230a      	movs	r3, #10
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005ec:	23c0      	movs	r3, #192	@ 0xc0
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fe71 	bl	80012e4 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 f9bc 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000618:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8d2 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000636:	f000 f9a5 	bl	8000984 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_RTC_Init+0x44>)
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <MX_RTC_Init+0x48>)
 8000654:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_RTC_Init+0x44>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_RTC_Init+0x44>)
 800065e:	227f      	movs	r2, #127	@ 0x7f
 8000660:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_RTC_Init+0x44>)
 8000664:	22ff      	movs	r2, #255	@ 0xff
 8000666:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_RTC_Init+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_RTC_Init+0x44>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_RTC_Init+0x44>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <MX_RTC_Init+0x44>)
 800067c:	f001 fb86 	bl	8001d8c <HAL_RTC_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000686:	f000 f97d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c
 8000694:	40002800 	.word	0x40002800

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	@ 0x30
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4bae      	ldr	r3, [pc, #696]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4aad      	ldr	r2, [pc, #692]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006b8:	f043 0310 	orr.w	r3, r3, #16
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4bab      	ldr	r3, [pc, #684]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4ba7      	ldr	r3, [pc, #668]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4aa6      	ldr	r2, [pc, #664]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4ba4      	ldr	r3, [pc, #656]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4ba0      	ldr	r3, [pc, #640]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a9f      	ldr	r2, [pc, #636]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b9d      	ldr	r3, [pc, #628]	@ (800096c <MX_GPIO_Init+0x2d4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b99      	ldr	r3, [pc, #612]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a98      	ldr	r2, [pc, #608]	@ (800096c <MX_GPIO_Init+0x2d4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b96      	ldr	r3, [pc, #600]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b92      	ldr	r3, [pc, #584]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a91      	ldr	r2, [pc, #580]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b8f      	ldr	r3, [pc, #572]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b8b      	ldr	r3, [pc, #556]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a8a      	ldr	r2, [pc, #552]	@ (800096c <MX_GPIO_Init+0x2d4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b88      	ldr	r3, [pc, #544]	@ (800096c <MX_GPIO_Init+0x2d4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	4885      	ldr	r0, [pc, #532]	@ (8000970 <MX_GPIO_Init+0x2d8>)
 800075c:	f000 fd40 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	4883      	ldr	r0, [pc, #524]	@ (8000974 <MX_GPIO_Init+0x2dc>)
 8000766:	f000 fd3b 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8000770:	4881      	ldr	r0, [pc, #516]	@ (8000978 <MX_GPIO_Init+0x2e0>)
 8000772:	f000 fd35 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000776:	2304      	movs	r3, #4
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4879      	ldr	r0, [pc, #484]	@ (8000970 <MX_GPIO_Init+0x2d8>)
 800078a:	f000 fba5 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800078e:	2308      	movs	r3, #8
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4872      	ldr	r0, [pc, #456]	@ (8000970 <MX_GPIO_Init+0x2d8>)
 80007a6:	f000 fb97 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80007aa:	2332      	movs	r3, #50	@ 0x32
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	486c      	ldr	r0, [pc, #432]	@ (8000970 <MX_GPIO_Init+0x2d8>)
 80007c0:	f000 fb8a 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4866      	ldr	r0, [pc, #408]	@ (8000974 <MX_GPIO_Init+0x2dc>)
 80007dc:	f000 fb7c 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007e0:	2308      	movs	r3, #8
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f0:	2305      	movs	r3, #5
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	485e      	ldr	r0, [pc, #376]	@ (8000974 <MX_GPIO_Init+0x2dc>)
 80007fc:	f000 fb6c 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000800:	2301      	movs	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4859      	ldr	r0, [pc, #356]	@ (800097c <MX_GPIO_Init+0x2e4>)
 8000816:	f000 fb5f 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800081a:	2310      	movs	r3, #16
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082a:	2306      	movs	r3, #6
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4851      	ldr	r0, [pc, #324]	@ (800097c <MX_GPIO_Init+0x2e4>)
 8000836:	f000 fb4f 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800083a:	23e0      	movs	r3, #224	@ 0xe0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4849      	ldr	r0, [pc, #292]	@ (800097c <MX_GPIO_Init+0x2e4>)
 8000856:	f000 fb3f 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800085a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086c:	2305      	movs	r3, #5
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4842      	ldr	r0, [pc, #264]	@ (8000980 <MX_GPIO_Init+0x2e8>)
 8000878:	f000 fb2e 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800088e:	2302      	movs	r3, #2
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4837      	ldr	r0, [pc, #220]	@ (8000978 <MX_GPIO_Init+0x2e0>)
 800089a:	f000 fb1d 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 800089e:	f24e 0310 	movw	r3, #57360	@ 0xe010
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4830      	ldr	r0, [pc, #192]	@ (8000978 <MX_GPIO_Init+0x2e0>)
 80008b8:	f000 fb0e 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008bc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ce:	2306      	movs	r3, #6
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4826      	ldr	r0, [pc, #152]	@ (8000974 <MX_GPIO_Init+0x2dc>)
 80008da:	f000 fafd 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4822      	ldr	r0, [pc, #136]	@ (800097c <MX_GPIO_Init+0x2e4>)
 80008f4:	f000 faf0 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80008f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090a:	230a      	movs	r3, #10
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4819      	ldr	r0, [pc, #100]	@ (800097c <MX_GPIO_Init+0x2e4>)
 8000916:	f000 fadf 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800091a:	2320      	movs	r3, #32
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_GPIO_Init+0x2e0>)
 800092e:	f000 fad3 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000932:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000944:	2304      	movs	r3, #4
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_GPIO_Init+0x2e8>)
 8000950:	f000 fac2 	bl	8000ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2006      	movs	r0, #6
 800095a:	f000 fa86 	bl	8000e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800095e:	2006      	movs	r0, #6
 8000960:	f000 fa9f 	bl	8000ea2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	@ 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40020800 	.word	0x40020800
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fa40 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <HAL_RTC_MspInit+0x50>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d111      	bne.n	8000a28 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 f8ca 	bl	8001bac <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000a1e:	f7ff ffb1 	bl	8000984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a22:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <HAL_RTC_MspInit+0x54>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40002800 	.word	0x40002800
 8000a34:	42470e3c 	.word	0x42470e3c

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f8cd 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fbd4 	bl	8001248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f001 fffe 	bl	8002ad4 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000ac 	.word	0x200000ac
 8000b0c:	200002b0 	.word	0x200002b0

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f001 ffbd 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fcb7 	bl	80004d8 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b78:	08003048 	.word	0x08003048
  ldr r2, =_sbss
 8000b7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b80:	200002ac 	.word	0x200002ac

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f94f 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fee8 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f967 	bl	8000ebe <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f92f 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200000b0 	.word	0x200000b0

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000b0 	.word	0x200000b0

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e159      	b.n	80011a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8148 	bne.w	80011a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a2 	beq.w	80011a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b57      	ldr	r3, [pc, #348]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a56      	ldr	r2, [pc, #344]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <HAL_GPIO_Init+0x2e8>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a52      	ldr	r2, [pc, #328]	@ (80011c4 <HAL_GPIO_Init+0x2ec>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a49      	ldr	r2, [pc, #292]	@ (80011c8 <HAL_GPIO_Init+0x2f0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x202>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a48      	ldr	r2, [pc, #288]	@ (80011cc <HAL_GPIO_Init+0x2f4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1fe>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a47      	ldr	r2, [pc, #284]	@ (80011d0 <HAL_GPIO_Init+0x2f8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1fa>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a46      	ldr	r2, [pc, #280]	@ (80011d4 <HAL_GPIO_Init+0x2fc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1f6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a45      	ldr	r2, [pc, #276]	@ (80011d8 <HAL_GPIO_Init+0x300>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1f2>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4935      	ldr	r1, [pc, #212]	@ (80011c4 <HAL_GPIO_Init+0x2ec>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <HAL_GPIO_Init+0x304>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800111e:	4a2f      	ldr	r2, [pc, #188]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001148:	4a24      	ldr	r2, [pc, #144]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001172:	4a1a      	ldr	r2, [pc, #104]	@ (80011dc <HAL_GPIO_Init+0x304>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119c:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_GPIO_Init+0x304>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f aea2 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3724      	adds	r7, #36	@ 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40013c00 	.word	0x40013c00

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	041a      	lsls	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	619a      	str	r2, [r3, #24]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001212:	b480      	push	{r7}
 8001214:	b085      	sub	sp, #20
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	041a      	lsls	r2, r3, #16
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43d9      	mvns	r1, r3
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	400b      	ands	r3, r1
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125e:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f806 	bl	8001278 <HAL_GPIO_EXTI_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4904      	ldr	r1, [pc, #16]	@ (80012b0 <HAL_PWR_EnableWakeUpPin+0x20>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40007000 	.word	0x40007000

080012b4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_PWR_EnterSTANDBYMode+0x28>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80012d0:	bf30      	wfi
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40007000 	.word	0x40007000
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e267      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d075      	beq.n	80013ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001302:	4b88      	ldr	r3, [pc, #544]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b04      	cmp	r3, #4
 800130c:	d00c      	beq.n	8001328 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130e:	4b85      	ldr	r3, [pc, #532]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001316:	2b08      	cmp	r3, #8
 8001318:	d112      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4b7e      	ldr	r3, [pc, #504]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d05b      	beq.n	80013ec <HAL_RCC_OscConfig+0x108>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d157      	bne.n	80013ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e242      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x74>
 800134a:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a75      	ldr	r2, [pc, #468]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e01d      	b.n	8001394 <HAL_RCC_OscConfig+0xb0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x98>
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a6f      	ldr	r2, [pc, #444]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6c      	ldr	r2, [pc, #432]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0xb0>
 800137c:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a68      	ldr	r2, [pc, #416]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a65      	ldr	r2, [pc, #404]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc5a 	bl	8000c54 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fc56 	bl	8000c54 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e207      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0xc0>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc46 	bl	8000c54 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013cc:	f7ff fc42 	bl	8000c54 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b64      	cmp	r3, #100	@ 0x64
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e1f3      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	4b51      	ldr	r3, [pc, #324]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0xe8>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d063      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800140e:	2b08      	cmp	r3, #8
 8001410:	d11c      	bne.n	800144c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b44      	ldr	r3, [pc, #272]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d116      	bne.n	800144c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <HAL_RCC_OscConfig+0x152>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e1c7      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4937      	ldr	r1, [pc, #220]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	e03a      	b.n	80014c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d020      	beq.n	8001496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001454:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_RCC_OscConfig+0x244>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145a:	f7ff fbfb 	bl	8000c54 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff fbf7 	bl	8000c54 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e1a8      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4925      	ldr	r1, [pc, #148]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_RCC_OscConfig+0x244>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fbda 	bl	8000c54 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a4:	f7ff fbd6 	bl	8000c54 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e187      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d036      	beq.n	800153c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d016      	beq.n	8001504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_RCC_OscConfig+0x248>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbba 	bl	8000c54 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fbb6 	bl	8000c54 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e167      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <HAL_RCC_OscConfig+0x240>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x200>
 8001502:	e01b      	b.n	800153c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_OscConfig+0x248>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7ff fba3 	bl	8000c54 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	e00e      	b.n	8001530 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001512:	f7ff fb9f 	bl	8000c54 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d907      	bls.n	8001530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e150      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
 8001524:	40023800 	.word	0x40023800
 8001528:	42470000 	.word	0x42470000
 800152c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4b88      	ldr	r3, [pc, #544]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ea      	bne.n	8001512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8097 	beq.w	8001678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154e:	4b81      	ldr	r3, [pc, #516]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b7d      	ldr	r3, [pc, #500]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a7c      	ldr	r2, [pc, #496]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b7a      	ldr	r3, [pc, #488]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b77      	ldr	r3, [pc, #476]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b74      	ldr	r3, [pc, #464]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a73      	ldr	r2, [pc, #460]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fb5f 	bl	8000c54 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fb5b 	bl	8000c54 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e10c      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <HAL_RCC_OscConfig+0x474>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x2ea>
 80015c0:	4b64      	ldr	r3, [pc, #400]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c4:	4a63      	ldr	r2, [pc, #396]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80015cc:	e01c      	b.n	8001608 <HAL_RCC_OscConfig+0x324>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x30c>
 80015d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015da:	4a5e      	ldr	r2, [pc, #376]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ee:	e00b      	b.n	8001608 <HAL_RCC_OscConfig+0x324>
 80015f0:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f4:	4a57      	ldr	r2, [pc, #348]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fc:	4b55      	ldr	r3, [pc, #340]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	4a54      	ldr	r2, [pc, #336]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fb20 	bl	8000c54 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fb1c 	bl	8000c54 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0cb      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	4b49      	ldr	r3, [pc, #292]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0ee      	beq.n	8001618 <HAL_RCC_OscConfig+0x334>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff fb0a 	bl	8000c54 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fb06 	bl	8000c54 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0b5      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ee      	bne.n	8001644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a38      	ldr	r2, [pc, #224]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a1 	beq.w	80017c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001682:	4b34      	ldr	r3, [pc, #208]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d05c      	beq.n	8001748 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d141      	bne.n	800171a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b31      	ldr	r3, [pc, #196]	@ (800175c <HAL_RCC_OscConfig+0x478>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fada 	bl	8000c54 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fad6 	bl	8000c54 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e087      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	3b01      	subs	r3, #1
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	491b      	ldr	r1, [pc, #108]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x478>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff faaf 	bl	8000c54 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff faab 	bl	8000c54 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e05c      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x416>
 8001718:	e054      	b.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_RCC_OscConfig+0x478>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fa98 	bl	8000c54 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fa94 	bl	8000c54 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e045      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_RCC_OscConfig+0x470>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x444>
 8001746:	e03d      	b.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e038      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
 8001754:	40023800 	.word	0x40023800
 8001758:	40007000 	.word	0x40007000
 800175c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x4ec>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d028      	beq.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d121      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d11a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001798:	4293      	cmp	r3, r2
 800179a:	d111      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	085b      	lsrs	r3, r3, #1
 80017a8:	3b01      	subs	r3, #1
 80017aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0cc      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b68      	ldr	r3, [pc, #416]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d90c      	bls.n	8001810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b65      	ldr	r3, [pc, #404]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a52      	ldr	r2, [pc, #328]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800184a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d044      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d119      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e067      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4934      	ldr	r1, [pc, #208]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f9c6 	bl	8000c54 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f9c2 	bl	8000c54 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b25      	ldr	r3, [pc, #148]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d20c      	bcs.n	800191c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b22      	ldr	r3, [pc, #136]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f821 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	@ (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f926 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	40023800 	.word	0x40023800
 8001994:	0800300c 	.word	0x0800300c
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a4:	b094      	sub	sp, #80	@ 0x50
 80019a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	4b79      	ldr	r3, [pc, #484]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d00d      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x40>
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	f200 80e1 	bhi.w	8001b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d003      	beq.n	80019da <HAL_RCC_GetSysClockFreq+0x3a>
 80019d2:	e0db      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d4:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019d8:	e0db      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019da:	4b73      	ldr	r3, [pc, #460]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019de:	e0d8      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d063      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	099b      	lsrs	r3, r3, #6
 80019fc:	2200      	movs	r2, #0
 80019fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a12:	4622      	mov	r2, r4
 8001a14:	462b      	mov	r3, r5
 8001a16:	f04f 0000 	mov.w	r0, #0
 8001a1a:	f04f 0100 	mov.w	r1, #0
 8001a1e:	0159      	lsls	r1, r3, #5
 8001a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a24:	0150      	lsls	r0, r2, #5
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	1a51      	subs	r1, r2, r1
 8001a2e:	6139      	str	r1, [r7, #16]
 8001a30:	4629      	mov	r1, r5
 8001a32:	eb63 0301 	sbc.w	r3, r3, r1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a44:	4659      	mov	r1, fp
 8001a46:	018b      	lsls	r3, r1, #6
 8001a48:	4651      	mov	r1, sl
 8001a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4e:	4651      	mov	r1, sl
 8001a50:	018a      	lsls	r2, r1, #6
 8001a52:	4651      	mov	r1, sl
 8001a54:	ebb2 0801 	subs.w	r8, r2, r1
 8001a58:	4659      	mov	r1, fp
 8001a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a72:	4690      	mov	r8, r2
 8001a74:	4699      	mov	r9, r3
 8001a76:	4623      	mov	r3, r4
 8001a78:	eb18 0303 	adds.w	r3, r8, r3
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	462b      	mov	r3, r5
 8001a80:	eb49 0303 	adc.w	r3, r9, r3
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a92:	4629      	mov	r1, r5
 8001a94:	024b      	lsls	r3, r1, #9
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	024a      	lsls	r2, r1, #9
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ab0:	f7fe fb9a 	bl	80001e8 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001abc:	e058      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b38      	ldr	r3, [pc, #224]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4611      	mov	r1, r2
 8001aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ad8:	4642      	mov	r2, r8
 8001ada:	464b      	mov	r3, r9
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0159      	lsls	r1, r3, #5
 8001ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aea:	0150      	lsls	r0, r2, #5
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4641      	mov	r1, r8
 8001af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001af6:	4649      	mov	r1, r9
 8001af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b10:	ebb2 040a 	subs.w	r4, r2, sl
 8001b14:	eb63 050b 	sbc.w	r5, r3, fp
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	00eb      	lsls	r3, r5, #3
 8001b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b26:	00e2      	lsls	r2, r4, #3
 8001b28:	4614      	mov	r4, r2
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	18e3      	adds	r3, r4, r3
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	464b      	mov	r3, r9
 8001b34:	eb45 0303 	adc.w	r3, r5, r3
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b46:	4629      	mov	r1, r5
 8001b48:	028b      	lsls	r3, r1, #10
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b50:	4621      	mov	r1, r4
 8001b52:	028a      	lsls	r2, r1, #10
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	61fa      	str	r2, [r7, #28]
 8001b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b64:	f7fe fb40 	bl	80001e8 <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3750      	adds	r7, #80	@ 0x50
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	007a1200 	.word	0x007a1200

08001bac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d038      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bd4:	4b68      	ldr	r3, [pc, #416]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bda:	f7ff f83b 	bl	8000c54 <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001be2:	f7ff f837 	bl	8000c54 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0bd      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bf4:	4b61      	ldr	r3, [pc, #388]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	019b      	lsls	r3, r3, #6
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	071b      	lsls	r3, r3, #28
 8001c12:	495a      	ldr	r1, [pc, #360]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c1a:	4b57      	ldr	r3, [pc, #348]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff f818 	bl	8000c54 <HAL_GetTick>
 8001c24:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c28:	f7ff f814 	bl	8000c54 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e09a      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c3a:	4b50      	ldr	r3, [pc, #320]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8083 	beq.w	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b48      	ldr	r3, [pc, #288]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a47      	ldr	r2, [pc, #284]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c64:	4b45      	ldr	r3, [pc, #276]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a42      	ldr	r2, [pc, #264]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7fe ffea 	bl	8000c54 <HAL_GetTick>
 8001c80:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7fe ffe6 	bl	8000c54 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e06c      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c96:	4b3a      	ldr	r3, [pc, #232]	@ (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ca2:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001caa:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02f      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d028      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cc8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cca:	4b2e      	ldr	r3, [pc, #184]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001cd6:	4a29      	ldr	r2, [pc, #164]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cdc:	4b27      	ldr	r3, [pc, #156]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d114      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe ffb4 	bl	8000c54 <HAL_GetTick>
 8001cec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7fe ffb0 	bl	8000c54 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e034      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ee      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d1e:	d10d      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d34:	4911      	ldr	r1, [pc, #68]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
 8001d3a:	e005      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d46:	6093      	str	r3, [r2, #8]
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	4909      	ldr	r1, [pc, #36]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7d1a      	ldrb	r2, [r3, #20]
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	42470068 	.word	0x42470068
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40007000 	.word	0x40007000
 8001d84:	42470e40 	.word	0x42470e40
 8001d88:	424711e0 	.word	0x424711e0

08001d8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e073      	b.n	8001e8a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7f5b      	ldrb	r3, [r3, #29]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fe14 	bl	80009e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d055      	beq.n	8001e78 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	22ca      	movs	r2, #202	@ 0xca
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2253      	movs	r2, #83	@ 0x53
 8001dda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f87f 	bl	8001ee0 <RTC_EnterInitMode>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12c      	bne.n	8001e46 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001dfe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6899      	ldr	r1, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	041a      	lsls	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f886 	bl	8001f4e <RTC_ExitInitMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d110      	bne.n	8001e6e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	22ff      	movs	r2, #255	@ 0xff
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e76:	e001      	b.n	8001e7c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8001edc <HAL_RTC_WaitForSynchro+0x48>)
 8001ea6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea8:	f7fe fed4 	bl	8000c54 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001eae:	e009      	b.n	8001ec4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001eb0:	f7fe fed0 	bl	8000c54 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e007      	b.n	8001ed4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0ee      	beq.n	8001eb0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	00013f5f 	.word	0x00013f5f

08001ee0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d122      	bne.n	8001f44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f0e:	f7fe fea1 	bl	8000c54 <HAL_GetTick>
 8001f12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001f14:	e00c      	b.n	8001f30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f16:	f7fe fe9d 	bl	8000c54 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f24:	d904      	bls.n	8001f30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2204      	movs	r2, #4
 8001f2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <RTC_EnterInitMode+0x64>
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d1e8      	bne.n	8001f16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff8b 	bl	8001e94 <HAL_RTC_WaitForSynchro>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2204      	movs	r2, #4
 8001f88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8001fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8002110 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5a      	ldr	r2, [pc, #360]	@ (8002114 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0adb      	lsrs	r3, r3, #11
 8001fb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	7f1b      	ldrb	r3, [r3, #28]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e09d      	b.n	8002102 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	22ca      	movs	r2, #202	@ 0xca
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2253      	movs	r2, #83	@ 0x53
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d018      	beq.n	8002022 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	22ff      	movs	r2, #255	@ 0xff
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2203      	movs	r2, #3
 8002008:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e076      	b.n	8002102 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1e6      	bne.n	8001ff0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002030:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002042:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002044:	4b32      	ldr	r3, [pc, #200]	@ (8002110 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a32      	ldr	r2, [pc, #200]	@ (8002114 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3b01      	subs	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	22ff      	movs	r2, #255	@ 0xff
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2203      	movs	r2, #3
 8002072:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e041      	b.n	8002102 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0e6      	beq.n	800205a <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0207 	bic.w	r2, r2, #7
 800209a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80020ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020be:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80020c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020ca:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020da:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020ea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	22ff      	movs	r2, #255	@ 0xff
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000
 8002114:	10624dd3 	.word	0x10624dd3
 8002118:	40013c00 	.word	0x40013c00

0800211c <findslot>:
 800211c:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <findslot+0x2c>)
 800211e:	b510      	push	{r4, lr}
 8002120:	4604      	mov	r4, r0
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	b118      	cbz	r0, 800212e <findslot+0x12>
 8002126:	6a03      	ldr	r3, [r0, #32]
 8002128:	b90b      	cbnz	r3, 800212e <findslot+0x12>
 800212a:	f000 fb19 	bl	8002760 <__sinit>
 800212e:	2c13      	cmp	r4, #19
 8002130:	d807      	bhi.n	8002142 <findslot+0x26>
 8002132:	4806      	ldr	r0, [pc, #24]	@ (800214c <findslot+0x30>)
 8002134:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002138:	3201      	adds	r2, #1
 800213a:	d002      	beq.n	8002142 <findslot+0x26>
 800213c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002140:	bd10      	pop	{r4, pc}
 8002142:	2000      	movs	r0, #0
 8002144:	e7fc      	b.n	8002140 <findslot+0x24>
 8002146:	bf00      	nop
 8002148:	20000020 	.word	0x20000020
 800214c:	200000c0 	.word	0x200000c0

08002150 <error>:
 8002150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002152:	4604      	mov	r4, r0
 8002154:	f000 fcbe 	bl	8002ad4 <__errno>
 8002158:	2613      	movs	r6, #19
 800215a:	4605      	mov	r5, r0
 800215c:	2700      	movs	r7, #0
 800215e:	4630      	mov	r0, r6
 8002160:	4639      	mov	r1, r7
 8002162:	beab      	bkpt	0x00ab
 8002164:	4606      	mov	r6, r0
 8002166:	602e      	str	r6, [r5, #0]
 8002168:	4620      	mov	r0, r4
 800216a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800216c <checkerror>:
 800216c:	1c43      	adds	r3, r0, #1
 800216e:	d101      	bne.n	8002174 <checkerror+0x8>
 8002170:	f7ff bfee 	b.w	8002150 <error>
 8002174:	4770      	bx	lr

08002176 <_swiread>:
 8002176:	b530      	push	{r4, r5, lr}
 8002178:	b085      	sub	sp, #20
 800217a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800217e:	9203      	str	r2, [sp, #12]
 8002180:	2406      	movs	r4, #6
 8002182:	ad01      	add	r5, sp, #4
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	beab      	bkpt	0x00ab
 800218a:	4604      	mov	r4, r0
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ffed 	bl	800216c <checkerror>
 8002192:	b005      	add	sp, #20
 8002194:	bd30      	pop	{r4, r5, pc}

08002196 <_read>:
 8002196:	b570      	push	{r4, r5, r6, lr}
 8002198:	460e      	mov	r6, r1
 800219a:	4614      	mov	r4, r2
 800219c:	f7ff ffbe 	bl	800211c <findslot>
 80021a0:	4605      	mov	r5, r0
 80021a2:	b930      	cbnz	r0, 80021b2 <_read+0x1c>
 80021a4:	f000 fc96 	bl	8002ad4 <__errno>
 80021a8:	2309      	movs	r3, #9
 80021aa:	6003      	str	r3, [r0, #0]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	6800      	ldr	r0, [r0, #0]
 80021b4:	4622      	mov	r2, r4
 80021b6:	4631      	mov	r1, r6
 80021b8:	f7ff ffdd 	bl	8002176 <_swiread>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d0f5      	beq.n	80021ac <_read+0x16>
 80021c0:	686b      	ldr	r3, [r5, #4]
 80021c2:	1a20      	subs	r0, r4, r0
 80021c4:	4403      	add	r3, r0
 80021c6:	606b      	str	r3, [r5, #4]
 80021c8:	e7f2      	b.n	80021b0 <_read+0x1a>

080021ca <_swilseek>:
 80021ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021cc:	460c      	mov	r4, r1
 80021ce:	4616      	mov	r6, r2
 80021d0:	f7ff ffa4 	bl	800211c <findslot>
 80021d4:	4605      	mov	r5, r0
 80021d6:	b940      	cbnz	r0, 80021ea <_swilseek+0x20>
 80021d8:	f000 fc7c 	bl	8002ad4 <__errno>
 80021dc:	2309      	movs	r3, #9
 80021de:	6003      	str	r3, [r0, #0]
 80021e0:	f04f 34ff 	mov.w	r4, #4294967295
 80021e4:	4620      	mov	r0, r4
 80021e6:	b003      	add	sp, #12
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	2e02      	cmp	r6, #2
 80021ec:	d903      	bls.n	80021f6 <_swilseek+0x2c>
 80021ee:	f000 fc71 	bl	8002ad4 <__errno>
 80021f2:	2316      	movs	r3, #22
 80021f4:	e7f3      	b.n	80021de <_swilseek+0x14>
 80021f6:	2e01      	cmp	r6, #1
 80021f8:	d112      	bne.n	8002220 <_swilseek+0x56>
 80021fa:	6843      	ldr	r3, [r0, #4]
 80021fc:	18e4      	adds	r4, r4, r3
 80021fe:	d4f6      	bmi.n	80021ee <_swilseek+0x24>
 8002200:	682b      	ldr	r3, [r5, #0]
 8002202:	260a      	movs	r6, #10
 8002204:	e9cd 3400 	strd	r3, r4, [sp]
 8002208:	466f      	mov	r7, sp
 800220a:	4630      	mov	r0, r6
 800220c:	4639      	mov	r1, r7
 800220e:	beab      	bkpt	0x00ab
 8002210:	4606      	mov	r6, r0
 8002212:	4630      	mov	r0, r6
 8002214:	f7ff ffaa 	bl	800216c <checkerror>
 8002218:	2800      	cmp	r0, #0
 800221a:	dbe1      	blt.n	80021e0 <_swilseek+0x16>
 800221c:	606c      	str	r4, [r5, #4]
 800221e:	e7e1      	b.n	80021e4 <_swilseek+0x1a>
 8002220:	2e02      	cmp	r6, #2
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	d1ec      	bne.n	8002200 <_swilseek+0x36>
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	260c      	movs	r6, #12
 800222a:	466f      	mov	r7, sp
 800222c:	4630      	mov	r0, r6
 800222e:	4639      	mov	r1, r7
 8002230:	beab      	bkpt	0x00ab
 8002232:	4606      	mov	r6, r0
 8002234:	4630      	mov	r0, r6
 8002236:	f7ff ff99 	bl	800216c <checkerror>
 800223a:	1c43      	adds	r3, r0, #1
 800223c:	d0d0      	beq.n	80021e0 <_swilseek+0x16>
 800223e:	4404      	add	r4, r0
 8002240:	e7de      	b.n	8002200 <_swilseek+0x36>

08002242 <_lseek>:
 8002242:	f7ff bfc2 	b.w	80021ca <_swilseek>

08002246 <_swiwrite>:
 8002246:	b530      	push	{r4, r5, lr}
 8002248:	b085      	sub	sp, #20
 800224a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800224e:	9203      	str	r2, [sp, #12]
 8002250:	2405      	movs	r4, #5
 8002252:	ad01      	add	r5, sp, #4
 8002254:	4620      	mov	r0, r4
 8002256:	4629      	mov	r1, r5
 8002258:	beab      	bkpt	0x00ab
 800225a:	4604      	mov	r4, r0
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff ff85 	bl	800216c <checkerror>
 8002262:	b005      	add	sp, #20
 8002264:	bd30      	pop	{r4, r5, pc}

08002266 <_write>:
 8002266:	b570      	push	{r4, r5, r6, lr}
 8002268:	460e      	mov	r6, r1
 800226a:	4615      	mov	r5, r2
 800226c:	f7ff ff56 	bl	800211c <findslot>
 8002270:	4604      	mov	r4, r0
 8002272:	b930      	cbnz	r0, 8002282 <_write+0x1c>
 8002274:	f000 fc2e 	bl	8002ad4 <__errno>
 8002278:	2309      	movs	r3, #9
 800227a:	6003      	str	r3, [r0, #0]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	bd70      	pop	{r4, r5, r6, pc}
 8002282:	6800      	ldr	r0, [r0, #0]
 8002284:	462a      	mov	r2, r5
 8002286:	4631      	mov	r1, r6
 8002288:	f7ff ffdd 	bl	8002246 <_swiwrite>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	dbf5      	blt.n	800227c <_write+0x16>
 8002290:	6862      	ldr	r2, [r4, #4]
 8002292:	1ae8      	subs	r0, r5, r3
 8002294:	4402      	add	r2, r0
 8002296:	42ab      	cmp	r3, r5
 8002298:	6062      	str	r2, [r4, #4]
 800229a:	d1f1      	bne.n	8002280 <_write+0x1a>
 800229c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff bf55 	b.w	8002150 <error>

080022a6 <_swiclose>:
 80022a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022a8:	2402      	movs	r4, #2
 80022aa:	9001      	str	r0, [sp, #4]
 80022ac:	ad01      	add	r5, sp, #4
 80022ae:	4620      	mov	r0, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	beab      	bkpt	0x00ab
 80022b4:	4604      	mov	r4, r0
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff ff58 	bl	800216c <checkerror>
 80022bc:	b003      	add	sp, #12
 80022be:	bd30      	pop	{r4, r5, pc}

080022c0 <_close>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4605      	mov	r5, r0
 80022c4:	f7ff ff2a 	bl	800211c <findslot>
 80022c8:	4604      	mov	r4, r0
 80022ca:	b930      	cbnz	r0, 80022da <_close+0x1a>
 80022cc:	f000 fc02 	bl	8002ad4 <__errno>
 80022d0:	2309      	movs	r3, #9
 80022d2:	6003      	str	r3, [r0, #0]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	bd38      	pop	{r3, r4, r5, pc}
 80022da:	3d01      	subs	r5, #1
 80022dc:	2d01      	cmp	r5, #1
 80022de:	d809      	bhi.n	80022f4 <_close+0x34>
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <_close+0x40>)
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d104      	bne.n	80022f4 <_close+0x34>
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	6023      	str	r3, [r4, #0]
 80022f0:	2000      	movs	r0, #0
 80022f2:	e7f1      	b.n	80022d8 <_close+0x18>
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f7ff ffd6 	bl	80022a6 <_swiclose>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d0f5      	beq.n	80022ea <_close+0x2a>
 80022fe:	e7eb      	b.n	80022d8 <_close+0x18>
 8002300:	200000c0 	.word	0x200000c0

08002304 <_swistat>:
 8002304:	b570      	push	{r4, r5, r6, lr}
 8002306:	460c      	mov	r4, r1
 8002308:	f7ff ff08 	bl	800211c <findslot>
 800230c:	4605      	mov	r5, r0
 800230e:	b930      	cbnz	r0, 800231e <_swistat+0x1a>
 8002310:	f000 fbe0 	bl	8002ad4 <__errno>
 8002314:	2309      	movs	r3, #9
 8002316:	6003      	str	r3, [r0, #0]
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	bd70      	pop	{r4, r5, r6, pc}
 800231e:	6863      	ldr	r3, [r4, #4]
 8002320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002324:	6063      	str	r3, [r4, #4]
 8002326:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800232a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800232c:	260c      	movs	r6, #12
 800232e:	4630      	mov	r0, r6
 8002330:	4629      	mov	r1, r5
 8002332:	beab      	bkpt	0x00ab
 8002334:	4605      	mov	r5, r0
 8002336:	4628      	mov	r0, r5
 8002338:	f7ff ff18 	bl	800216c <checkerror>
 800233c:	1c43      	adds	r3, r0, #1
 800233e:	d0eb      	beq.n	8002318 <_swistat+0x14>
 8002340:	6120      	str	r0, [r4, #16]
 8002342:	2000      	movs	r0, #0
 8002344:	e7ea      	b.n	800231c <_swistat+0x18>

08002346 <_fstat>:
 8002346:	460b      	mov	r3, r1
 8002348:	b510      	push	{r4, lr}
 800234a:	2100      	movs	r1, #0
 800234c:	4604      	mov	r4, r0
 800234e:	2258      	movs	r2, #88	@ 0x58
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fb71 	bl	8002a38 <memset>
 8002356:	4601      	mov	r1, r0
 8002358:	4620      	mov	r0, r4
 800235a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800235e:	f7ff bfd1 	b.w	8002304 <_swistat>

08002362 <_stat>:
 8002362:	b538      	push	{r3, r4, r5, lr}
 8002364:	460d      	mov	r5, r1
 8002366:	4604      	mov	r4, r0
 8002368:	2258      	movs	r2, #88	@ 0x58
 800236a:	2100      	movs	r1, #0
 800236c:	4628      	mov	r0, r5
 800236e:	f000 fb63 	bl	8002a38 <memset>
 8002372:	4620      	mov	r0, r4
 8002374:	2100      	movs	r1, #0
 8002376:	f000 f811 	bl	800239c <_swiopen>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	4604      	mov	r4, r0
 800237e:	d00b      	beq.n	8002398 <_stat+0x36>
 8002380:	686b      	ldr	r3, [r5, #4]
 8002382:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002386:	606b      	str	r3, [r5, #4]
 8002388:	4629      	mov	r1, r5
 800238a:	f7ff ffbb 	bl	8002304 <_swistat>
 800238e:	4605      	mov	r5, r0
 8002390:	4620      	mov	r0, r4
 8002392:	f7ff ff95 	bl	80022c0 <_close>
 8002396:	462c      	mov	r4, r5
 8002398:	4620      	mov	r0, r4
 800239a:	bd38      	pop	{r3, r4, r5, pc}

0800239c <_swiopen>:
 800239c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023a0:	4f29      	ldr	r7, [pc, #164]	@ (8002448 <_swiopen+0xac>)
 80023a2:	b096      	sub	sp, #88	@ 0x58
 80023a4:	4682      	mov	sl, r0
 80023a6:	460e      	mov	r6, r1
 80023a8:	2400      	movs	r4, #0
 80023aa:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80023ae:	3301      	adds	r3, #1
 80023b0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80023b4:	d00c      	beq.n	80023d0 <_swiopen+0x34>
 80023b6:	3401      	adds	r4, #1
 80023b8:	2c14      	cmp	r4, #20
 80023ba:	d1f6      	bne.n	80023aa <_swiopen+0xe>
 80023bc:	f000 fb8a 	bl	8002ad4 <__errno>
 80023c0:	2318      	movs	r3, #24
 80023c2:	6003      	str	r3, [r0, #0]
 80023c4:	f04f 34ff 	mov.w	r4, #4294967295
 80023c8:	4620      	mov	r0, r4
 80023ca:	b016      	add	sp, #88	@ 0x58
 80023cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023d0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80023d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80023d8:	46e9      	mov	r9, sp
 80023da:	d109      	bne.n	80023f0 <_swiopen+0x54>
 80023dc:	4649      	mov	r1, r9
 80023de:	4650      	mov	r0, sl
 80023e0:	f7ff ffbf 	bl	8002362 <_stat>
 80023e4:	3001      	adds	r0, #1
 80023e6:	d003      	beq.n	80023f0 <_swiopen+0x54>
 80023e8:	f000 fb74 	bl	8002ad4 <__errno>
 80023ec:	2311      	movs	r3, #17
 80023ee:	e7e8      	b.n	80023c2 <_swiopen+0x26>
 80023f0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80023f4:	f240 6301 	movw	r3, #1537	@ 0x601
 80023f8:	07b2      	lsls	r2, r6, #30
 80023fa:	bf48      	it	mi
 80023fc:	f045 0502 	orrmi.w	r5, r5, #2
 8002400:	421e      	tst	r6, r3
 8002402:	bf18      	it	ne
 8002404:	f045 0504 	orrne.w	r5, r5, #4
 8002408:	0733      	lsls	r3, r6, #28
 800240a:	bf48      	it	mi
 800240c:	f025 0504 	bicmi.w	r5, r5, #4
 8002410:	4650      	mov	r0, sl
 8002412:	bf48      	it	mi
 8002414:	f045 0508 	orrmi.w	r5, r5, #8
 8002418:	f8cd a000 	str.w	sl, [sp]
 800241c:	f7fd fedc 	bl	80001d8 <strlen>
 8002420:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002424:	2501      	movs	r5, #1
 8002426:	4628      	mov	r0, r5
 8002428:	4649      	mov	r1, r9
 800242a:	beab      	bkpt	0x00ab
 800242c:	4605      	mov	r5, r0
 800242e:	2d00      	cmp	r5, #0
 8002430:	db05      	blt.n	800243e <_swiopen+0xa2>
 8002432:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002436:	4447      	add	r7, r8
 8002438:	2300      	movs	r3, #0
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	e7c4      	b.n	80023c8 <_swiopen+0x2c>
 800243e:	4628      	mov	r0, r5
 8002440:	f7ff fe86 	bl	8002150 <error>
 8002444:	4604      	mov	r4, r0
 8002446:	e7bf      	b.n	80023c8 <_swiopen+0x2c>
 8002448:	200000c0 	.word	0x200000c0

0800244c <_get_semihosting_exts>:
 800244c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002450:	4606      	mov	r6, r0
 8002452:	460f      	mov	r7, r1
 8002454:	4829      	ldr	r0, [pc, #164]	@ (80024fc <_get_semihosting_exts+0xb0>)
 8002456:	2100      	movs	r1, #0
 8002458:	4615      	mov	r5, r2
 800245a:	f7ff ff9f 	bl	800239c <_swiopen>
 800245e:	462a      	mov	r2, r5
 8002460:	4604      	mov	r4, r0
 8002462:	2100      	movs	r1, #0
 8002464:	4630      	mov	r0, r6
 8002466:	f000 fae7 	bl	8002a38 <memset>
 800246a:	1c63      	adds	r3, r4, #1
 800246c:	d014      	beq.n	8002498 <_get_semihosting_exts+0x4c>
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff fe54 	bl	800211c <findslot>
 8002474:	f04f 080c 	mov.w	r8, #12
 8002478:	4681      	mov	r9, r0
 800247a:	4640      	mov	r0, r8
 800247c:	4649      	mov	r1, r9
 800247e:	beab      	bkpt	0x00ab
 8002480:	4680      	mov	r8, r0
 8002482:	4640      	mov	r0, r8
 8002484:	f7ff fe72 	bl	800216c <checkerror>
 8002488:	2803      	cmp	r0, #3
 800248a:	dd02      	ble.n	8002492 <_get_semihosting_exts+0x46>
 800248c:	1ec3      	subs	r3, r0, #3
 800248e:	42ab      	cmp	r3, r5
 8002490:	dc07      	bgt.n	80024a2 <_get_semihosting_exts+0x56>
 8002492:	4620      	mov	r0, r4
 8002494:	f7ff ff14 	bl	80022c0 <_close>
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	b003      	add	sp, #12
 800249e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024a2:	2204      	movs	r2, #4
 80024a4:	eb0d 0102 	add.w	r1, sp, r2
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff fe74 	bl	8002196 <_read>
 80024ae:	2803      	cmp	r0, #3
 80024b0:	ddef      	ble.n	8002492 <_get_semihosting_exts+0x46>
 80024b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024b6:	2b53      	cmp	r3, #83	@ 0x53
 80024b8:	d1eb      	bne.n	8002492 <_get_semihosting_exts+0x46>
 80024ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80024be:	2b48      	cmp	r3, #72	@ 0x48
 80024c0:	d1e7      	bne.n	8002492 <_get_semihosting_exts+0x46>
 80024c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80024c6:	2b46      	cmp	r3, #70	@ 0x46
 80024c8:	d1e3      	bne.n	8002492 <_get_semihosting_exts+0x46>
 80024ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024ce:	2b42      	cmp	r3, #66	@ 0x42
 80024d0:	d1df      	bne.n	8002492 <_get_semihosting_exts+0x46>
 80024d2:	2201      	movs	r2, #1
 80024d4:	4639      	mov	r1, r7
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff fe77 	bl	80021ca <_swilseek>
 80024dc:	2800      	cmp	r0, #0
 80024de:	dbd8      	blt.n	8002492 <_get_semihosting_exts+0x46>
 80024e0:	462a      	mov	r2, r5
 80024e2:	4631      	mov	r1, r6
 80024e4:	4620      	mov	r0, r4
 80024e6:	f7ff fe56 	bl	8002196 <_read>
 80024ea:	4605      	mov	r5, r0
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff fee7 	bl	80022c0 <_close>
 80024f2:	4628      	mov	r0, r5
 80024f4:	f7ff fe3a 	bl	800216c <checkerror>
 80024f8:	e7d0      	b.n	800249c <_get_semihosting_exts+0x50>
 80024fa:	bf00      	nop
 80024fc:	0800301c 	.word	0x0800301c

08002500 <initialise_semihosting_exts>:
 8002500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002502:	4d0a      	ldr	r5, [pc, #40]	@ (800252c <initialise_semihosting_exts+0x2c>)
 8002504:	4c0a      	ldr	r4, [pc, #40]	@ (8002530 <initialise_semihosting_exts+0x30>)
 8002506:	2100      	movs	r1, #0
 8002508:	2201      	movs	r2, #1
 800250a:	a801      	add	r0, sp, #4
 800250c:	6029      	str	r1, [r5, #0]
 800250e:	6022      	str	r2, [r4, #0]
 8002510:	f7ff ff9c 	bl	800244c <_get_semihosting_exts>
 8002514:	2800      	cmp	r0, #0
 8002516:	dd07      	ble.n	8002528 <initialise_semihosting_exts+0x28>
 8002518:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800251c:	f003 0201 	and.w	r2, r3, #1
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	602a      	str	r2, [r5, #0]
 8002526:	6023      	str	r3, [r4, #0]
 8002528:	b003      	add	sp, #12
 800252a:	bd30      	pop	{r4, r5, pc}
 800252c:	20000010 	.word	0x20000010
 8002530:	2000000c 	.word	0x2000000c

08002534 <_has_ext_stdout_stderr>:
 8002534:	b510      	push	{r4, lr}
 8002536:	4c04      	ldr	r4, [pc, #16]	@ (8002548 <_has_ext_stdout_stderr+0x14>)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	da01      	bge.n	8002542 <_has_ext_stdout_stderr+0xe>
 800253e:	f7ff ffdf 	bl	8002500 <initialise_semihosting_exts>
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	bd10      	pop	{r4, pc}
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c

0800254c <initialise_monitor_handles>:
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	b085      	sub	sp, #20
 8002552:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002604 <initialise_monitor_handles+0xb8>
 8002556:	f8cd 9004 	str.w	r9, [sp, #4]
 800255a:	2303      	movs	r3, #3
 800255c:	2400      	movs	r4, #0
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	af01      	add	r7, sp, #4
 8002562:	9402      	str	r4, [sp, #8]
 8002564:	2501      	movs	r5, #1
 8002566:	4628      	mov	r0, r5
 8002568:	4639      	mov	r1, r7
 800256a:	beab      	bkpt	0x00ab
 800256c:	4605      	mov	r5, r0
 800256e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002608 <initialise_monitor_handles+0xbc>
 8002572:	4623      	mov	r3, r4
 8002574:	4c20      	ldr	r4, [pc, #128]	@ (80025f8 <initialise_monitor_handles+0xac>)
 8002576:	f8c8 5000 	str.w	r5, [r8]
 800257a:	f04f 32ff 	mov.w	r2, #4294967295
 800257e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002582:	3301      	adds	r3, #1
 8002584:	2b14      	cmp	r3, #20
 8002586:	d1fa      	bne.n	800257e <initialise_monitor_handles+0x32>
 8002588:	f7ff ffd4 	bl	8002534 <_has_ext_stdout_stderr>
 800258c:	4d1b      	ldr	r5, [pc, #108]	@ (80025fc <initialise_monitor_handles+0xb0>)
 800258e:	b1d0      	cbz	r0, 80025c6 <initialise_monitor_handles+0x7a>
 8002590:	f04f 0a03 	mov.w	sl, #3
 8002594:	2304      	movs	r3, #4
 8002596:	f8cd 9004 	str.w	r9, [sp, #4]
 800259a:	2601      	movs	r6, #1
 800259c:	f8cd a00c 	str.w	sl, [sp, #12]
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	4630      	mov	r0, r6
 80025a4:	4639      	mov	r1, r7
 80025a6:	beab      	bkpt	0x00ab
 80025a8:	4683      	mov	fp, r0
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <initialise_monitor_handles+0xb4>)
 80025ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80025b0:	f8c3 b000 	str.w	fp, [r3]
 80025b4:	2308      	movs	r3, #8
 80025b6:	f8cd a00c 	str.w	sl, [sp, #12]
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	4630      	mov	r0, r6
 80025be:	4639      	mov	r1, r7
 80025c0:	beab      	bkpt	0x00ab
 80025c2:	4606      	mov	r6, r0
 80025c4:	602e      	str	r6, [r5, #0]
 80025c6:	682b      	ldr	r3, [r5, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	bf02      	ittt	eq
 80025cc:	4b0c      	ldreq	r3, [pc, #48]	@ (8002600 <initialise_monitor_handles+0xb4>)
 80025ce:	681b      	ldreq	r3, [r3, #0]
 80025d0:	602b      	streq	r3, [r5, #0]
 80025d2:	2600      	movs	r6, #0
 80025d4:	f8d8 3000 	ldr.w	r3, [r8]
 80025d8:	6023      	str	r3, [r4, #0]
 80025da:	6066      	str	r6, [r4, #4]
 80025dc:	f7ff ffaa 	bl	8002534 <_has_ext_stdout_stderr>
 80025e0:	b130      	cbz	r0, 80025f0 <initialise_monitor_handles+0xa4>
 80025e2:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <initialise_monitor_handles+0xb4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80025f0:	b005      	add	sp, #20
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f6:	bf00      	nop
 80025f8:	200000c0 	.word	0x200000c0
 80025fc:	200000b4 	.word	0x200000b4
 8002600:	200000b8 	.word	0x200000b8
 8002604:	08003032 	.word	0x08003032
 8002608:	200000bc 	.word	0x200000bc

0800260c <_isatty>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	f7ff fd85 	bl	800211c <findslot>
 8002612:	2409      	movs	r4, #9
 8002614:	4605      	mov	r5, r0
 8002616:	b920      	cbnz	r0, 8002622 <_isatty+0x16>
 8002618:	f000 fa5c 	bl	8002ad4 <__errno>
 800261c:	6004      	str	r4, [r0, #0]
 800261e:	2000      	movs	r0, #0
 8002620:	bd70      	pop	{r4, r5, r6, pc}
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	beab      	bkpt	0x00ab
 8002628:	4604      	mov	r4, r0
 800262a:	2c01      	cmp	r4, #1
 800262c:	4620      	mov	r0, r4
 800262e:	d0f7      	beq.n	8002620 <_isatty+0x14>
 8002630:	f000 fa50 	bl	8002ad4 <__errno>
 8002634:	2513      	movs	r5, #19
 8002636:	4604      	mov	r4, r0
 8002638:	2600      	movs	r6, #0
 800263a:	4628      	mov	r0, r5
 800263c:	4631      	mov	r1, r6
 800263e:	beab      	bkpt	0x00ab
 8002640:	4605      	mov	r5, r0
 8002642:	6025      	str	r5, [r4, #0]
 8002644:	e7eb      	b.n	800261e <_isatty+0x12>
	...

08002648 <std>:
 8002648:	2300      	movs	r3, #0
 800264a:	b510      	push	{r4, lr}
 800264c:	4604      	mov	r4, r0
 800264e:	e9c0 3300 	strd	r3, r3, [r0]
 8002652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002656:	6083      	str	r3, [r0, #8]
 8002658:	8181      	strh	r1, [r0, #12]
 800265a:	6643      	str	r3, [r0, #100]	@ 0x64
 800265c:	81c2      	strh	r2, [r0, #14]
 800265e:	6183      	str	r3, [r0, #24]
 8002660:	4619      	mov	r1, r3
 8002662:	2208      	movs	r2, #8
 8002664:	305c      	adds	r0, #92	@ 0x5c
 8002666:	f000 f9e7 	bl	8002a38 <memset>
 800266a:	4b0d      	ldr	r3, [pc, #52]	@ (80026a0 <std+0x58>)
 800266c:	6263      	str	r3, [r4, #36]	@ 0x24
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <std+0x5c>)
 8002670:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <std+0x60>)
 8002674:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <std+0x64>)
 8002678:	6323      	str	r3, [r4, #48]	@ 0x30
 800267a:	4b0d      	ldr	r3, [pc, #52]	@ (80026b0 <std+0x68>)
 800267c:	6224      	str	r4, [r4, #32]
 800267e:	429c      	cmp	r4, r3
 8002680:	d006      	beq.n	8002690 <std+0x48>
 8002682:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002686:	4294      	cmp	r4, r2
 8002688:	d002      	beq.n	8002690 <std+0x48>
 800268a:	33d0      	adds	r3, #208	@ 0xd0
 800268c:	429c      	cmp	r4, r3
 800268e:	d105      	bne.n	800269c <std+0x54>
 8002690:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002698:	f000 ba46 	b.w	8002b28 <__retarget_lock_init_recursive>
 800269c:	bd10      	pop	{r4, pc}
 800269e:	bf00      	nop
 80026a0:	08002889 	.word	0x08002889
 80026a4:	080028ab 	.word	0x080028ab
 80026a8:	080028e3 	.word	0x080028e3
 80026ac:	08002907 	.word	0x08002907
 80026b0:	20000160 	.word	0x20000160

080026b4 <stdio_exit_handler>:
 80026b4:	4a02      	ldr	r2, [pc, #8]	@ (80026c0 <stdio_exit_handler+0xc>)
 80026b6:	4903      	ldr	r1, [pc, #12]	@ (80026c4 <stdio_exit_handler+0x10>)
 80026b8:	4803      	ldr	r0, [pc, #12]	@ (80026c8 <stdio_exit_handler+0x14>)
 80026ba:	f000 b869 	b.w	8002790 <_fwalk_sglue>
 80026be:	bf00      	nop
 80026c0:	20000014 	.word	0x20000014
 80026c4:	08002e29 	.word	0x08002e29
 80026c8:	20000024 	.word	0x20000024

080026cc <cleanup_stdio>:
 80026cc:	6841      	ldr	r1, [r0, #4]
 80026ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <cleanup_stdio+0x34>)
 80026d0:	4299      	cmp	r1, r3
 80026d2:	b510      	push	{r4, lr}
 80026d4:	4604      	mov	r4, r0
 80026d6:	d001      	beq.n	80026dc <cleanup_stdio+0x10>
 80026d8:	f000 fba6 	bl	8002e28 <_fflush_r>
 80026dc:	68a1      	ldr	r1, [r4, #8]
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <cleanup_stdio+0x38>)
 80026e0:	4299      	cmp	r1, r3
 80026e2:	d002      	beq.n	80026ea <cleanup_stdio+0x1e>
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 fb9f 	bl	8002e28 <_fflush_r>
 80026ea:	68e1      	ldr	r1, [r4, #12]
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <cleanup_stdio+0x3c>)
 80026ee:	4299      	cmp	r1, r3
 80026f0:	d004      	beq.n	80026fc <cleanup_stdio+0x30>
 80026f2:	4620      	mov	r0, r4
 80026f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026f8:	f000 bb96 	b.w	8002e28 <_fflush_r>
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	bf00      	nop
 8002700:	20000160 	.word	0x20000160
 8002704:	200001c8 	.word	0x200001c8
 8002708:	20000230 	.word	0x20000230

0800270c <global_stdio_init.part.0>:
 800270c:	b510      	push	{r4, lr}
 800270e:	4b0b      	ldr	r3, [pc, #44]	@ (800273c <global_stdio_init.part.0+0x30>)
 8002710:	4c0b      	ldr	r4, [pc, #44]	@ (8002740 <global_stdio_init.part.0+0x34>)
 8002712:	4a0c      	ldr	r2, [pc, #48]	@ (8002744 <global_stdio_init.part.0+0x38>)
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	4620      	mov	r0, r4
 8002718:	2200      	movs	r2, #0
 800271a:	2104      	movs	r1, #4
 800271c:	f7ff ff94 	bl	8002648 <std>
 8002720:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002724:	2201      	movs	r2, #1
 8002726:	2109      	movs	r1, #9
 8002728:	f7ff ff8e 	bl	8002648 <std>
 800272c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002730:	2202      	movs	r2, #2
 8002732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002736:	2112      	movs	r1, #18
 8002738:	f7ff bf86 	b.w	8002648 <std>
 800273c:	20000298 	.word	0x20000298
 8002740:	20000160 	.word	0x20000160
 8002744:	080026b5 	.word	0x080026b5

08002748 <__sfp_lock_acquire>:
 8002748:	4801      	ldr	r0, [pc, #4]	@ (8002750 <__sfp_lock_acquire+0x8>)
 800274a:	f000 b9ee 	b.w	8002b2a <__retarget_lock_acquire_recursive>
 800274e:	bf00      	nop
 8002750:	200002a1 	.word	0x200002a1

08002754 <__sfp_lock_release>:
 8002754:	4801      	ldr	r0, [pc, #4]	@ (800275c <__sfp_lock_release+0x8>)
 8002756:	f000 b9e9 	b.w	8002b2c <__retarget_lock_release_recursive>
 800275a:	bf00      	nop
 800275c:	200002a1 	.word	0x200002a1

08002760 <__sinit>:
 8002760:	b510      	push	{r4, lr}
 8002762:	4604      	mov	r4, r0
 8002764:	f7ff fff0 	bl	8002748 <__sfp_lock_acquire>
 8002768:	6a23      	ldr	r3, [r4, #32]
 800276a:	b11b      	cbz	r3, 8002774 <__sinit+0x14>
 800276c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002770:	f7ff bff0 	b.w	8002754 <__sfp_lock_release>
 8002774:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <__sinit+0x28>)
 8002776:	6223      	str	r3, [r4, #32]
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <__sinit+0x2c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f5      	bne.n	800276c <__sinit+0xc>
 8002780:	f7ff ffc4 	bl	800270c <global_stdio_init.part.0>
 8002784:	e7f2      	b.n	800276c <__sinit+0xc>
 8002786:	bf00      	nop
 8002788:	080026cd 	.word	0x080026cd
 800278c:	20000298 	.word	0x20000298

08002790 <_fwalk_sglue>:
 8002790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002794:	4607      	mov	r7, r0
 8002796:	4688      	mov	r8, r1
 8002798:	4614      	mov	r4, r2
 800279a:	2600      	movs	r6, #0
 800279c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027a0:	f1b9 0901 	subs.w	r9, r9, #1
 80027a4:	d505      	bpl.n	80027b2 <_fwalk_sglue+0x22>
 80027a6:	6824      	ldr	r4, [r4, #0]
 80027a8:	2c00      	cmp	r4, #0
 80027aa:	d1f7      	bne.n	800279c <_fwalk_sglue+0xc>
 80027ac:	4630      	mov	r0, r6
 80027ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027b2:	89ab      	ldrh	r3, [r5, #12]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d907      	bls.n	80027c8 <_fwalk_sglue+0x38>
 80027b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027bc:	3301      	adds	r3, #1
 80027be:	d003      	beq.n	80027c8 <_fwalk_sglue+0x38>
 80027c0:	4629      	mov	r1, r5
 80027c2:	4638      	mov	r0, r7
 80027c4:	47c0      	blx	r8
 80027c6:	4306      	orrs	r6, r0
 80027c8:	3568      	adds	r5, #104	@ 0x68
 80027ca:	e7e9      	b.n	80027a0 <_fwalk_sglue+0x10>

080027cc <_puts_r>:
 80027cc:	6a03      	ldr	r3, [r0, #32]
 80027ce:	b570      	push	{r4, r5, r6, lr}
 80027d0:	6884      	ldr	r4, [r0, #8]
 80027d2:	4605      	mov	r5, r0
 80027d4:	460e      	mov	r6, r1
 80027d6:	b90b      	cbnz	r3, 80027dc <_puts_r+0x10>
 80027d8:	f7ff ffc2 	bl	8002760 <__sinit>
 80027dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027de:	07db      	lsls	r3, r3, #31
 80027e0:	d405      	bmi.n	80027ee <_puts_r+0x22>
 80027e2:	89a3      	ldrh	r3, [r4, #12]
 80027e4:	0598      	lsls	r0, r3, #22
 80027e6:	d402      	bmi.n	80027ee <_puts_r+0x22>
 80027e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027ea:	f000 f99e 	bl	8002b2a <__retarget_lock_acquire_recursive>
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	0719      	lsls	r1, r3, #28
 80027f2:	d502      	bpl.n	80027fa <_puts_r+0x2e>
 80027f4:	6923      	ldr	r3, [r4, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d135      	bne.n	8002866 <_puts_r+0x9a>
 80027fa:	4621      	mov	r1, r4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 f8c5 	bl	800298c <__swsetup_r>
 8002802:	b380      	cbz	r0, 8002866 <_puts_r+0x9a>
 8002804:	f04f 35ff 	mov.w	r5, #4294967295
 8002808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800280a:	07da      	lsls	r2, r3, #31
 800280c:	d405      	bmi.n	800281a <_puts_r+0x4e>
 800280e:	89a3      	ldrh	r3, [r4, #12]
 8002810:	059b      	lsls	r3, r3, #22
 8002812:	d402      	bmi.n	800281a <_puts_r+0x4e>
 8002814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002816:	f000 f989 	bl	8002b2c <__retarget_lock_release_recursive>
 800281a:	4628      	mov	r0, r5
 800281c:	bd70      	pop	{r4, r5, r6, pc}
 800281e:	2b00      	cmp	r3, #0
 8002820:	da04      	bge.n	800282c <_puts_r+0x60>
 8002822:	69a2      	ldr	r2, [r4, #24]
 8002824:	429a      	cmp	r2, r3
 8002826:	dc17      	bgt.n	8002858 <_puts_r+0x8c>
 8002828:	290a      	cmp	r1, #10
 800282a:	d015      	beq.n	8002858 <_puts_r+0x8c>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	6022      	str	r2, [r4, #0]
 8002832:	7019      	strb	r1, [r3, #0]
 8002834:	68a3      	ldr	r3, [r4, #8]
 8002836:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800283a:	3b01      	subs	r3, #1
 800283c:	60a3      	str	r3, [r4, #8]
 800283e:	2900      	cmp	r1, #0
 8002840:	d1ed      	bne.n	800281e <_puts_r+0x52>
 8002842:	2b00      	cmp	r3, #0
 8002844:	da11      	bge.n	800286a <_puts_r+0x9e>
 8002846:	4622      	mov	r2, r4
 8002848:	210a      	movs	r1, #10
 800284a:	4628      	mov	r0, r5
 800284c:	f000 f85f 	bl	800290e <__swbuf_r>
 8002850:	3001      	adds	r0, #1
 8002852:	d0d7      	beq.n	8002804 <_puts_r+0x38>
 8002854:	250a      	movs	r5, #10
 8002856:	e7d7      	b.n	8002808 <_puts_r+0x3c>
 8002858:	4622      	mov	r2, r4
 800285a:	4628      	mov	r0, r5
 800285c:	f000 f857 	bl	800290e <__swbuf_r>
 8002860:	3001      	adds	r0, #1
 8002862:	d1e7      	bne.n	8002834 <_puts_r+0x68>
 8002864:	e7ce      	b.n	8002804 <_puts_r+0x38>
 8002866:	3e01      	subs	r6, #1
 8002868:	e7e4      	b.n	8002834 <_puts_r+0x68>
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	6022      	str	r2, [r4, #0]
 8002870:	220a      	movs	r2, #10
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e7ee      	b.n	8002854 <_puts_r+0x88>
	...

08002878 <puts>:
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <puts+0xc>)
 800287a:	4601      	mov	r1, r0
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	f7ff bfa5 	b.w	80027cc <_puts_r>
 8002882:	bf00      	nop
 8002884:	20000020 	.word	0x20000020

08002888 <__sread>:
 8002888:	b510      	push	{r4, lr}
 800288a:	460c      	mov	r4, r1
 800288c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002890:	f000 f8fc 	bl	8002a8c <_read_r>
 8002894:	2800      	cmp	r0, #0
 8002896:	bfab      	itete	ge
 8002898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800289a:	89a3      	ldrhlt	r3, [r4, #12]
 800289c:	181b      	addge	r3, r3, r0
 800289e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80028a2:	bfac      	ite	ge
 80028a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80028a6:	81a3      	strhlt	r3, [r4, #12]
 80028a8:	bd10      	pop	{r4, pc}

080028aa <__swrite>:
 80028aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ae:	461f      	mov	r7, r3
 80028b0:	898b      	ldrh	r3, [r1, #12]
 80028b2:	05db      	lsls	r3, r3, #23
 80028b4:	4605      	mov	r5, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	4616      	mov	r6, r2
 80028ba:	d505      	bpl.n	80028c8 <__swrite+0x1e>
 80028bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c0:	2302      	movs	r3, #2
 80028c2:	2200      	movs	r2, #0
 80028c4:	f000 f8d0 	bl	8002a68 <_lseek_r>
 80028c8:	89a3      	ldrh	r3, [r4, #12]
 80028ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d2:	81a3      	strh	r3, [r4, #12]
 80028d4:	4632      	mov	r2, r6
 80028d6:	463b      	mov	r3, r7
 80028d8:	4628      	mov	r0, r5
 80028da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028de:	f000 b8e7 	b.w	8002ab0 <_write_r>

080028e2 <__sseek>:
 80028e2:	b510      	push	{r4, lr}
 80028e4:	460c      	mov	r4, r1
 80028e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028ea:	f000 f8bd 	bl	8002a68 <_lseek_r>
 80028ee:	1c43      	adds	r3, r0, #1
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	bf15      	itete	ne
 80028f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80028f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80028fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80028fe:	81a3      	strheq	r3, [r4, #12]
 8002900:	bf18      	it	ne
 8002902:	81a3      	strhne	r3, [r4, #12]
 8002904:	bd10      	pop	{r4, pc}

08002906 <__sclose>:
 8002906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800290a:	f000 b89d 	b.w	8002a48 <_close_r>

0800290e <__swbuf_r>:
 800290e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002910:	460e      	mov	r6, r1
 8002912:	4614      	mov	r4, r2
 8002914:	4605      	mov	r5, r0
 8002916:	b118      	cbz	r0, 8002920 <__swbuf_r+0x12>
 8002918:	6a03      	ldr	r3, [r0, #32]
 800291a:	b90b      	cbnz	r3, 8002920 <__swbuf_r+0x12>
 800291c:	f7ff ff20 	bl	8002760 <__sinit>
 8002920:	69a3      	ldr	r3, [r4, #24]
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	89a3      	ldrh	r3, [r4, #12]
 8002926:	071a      	lsls	r2, r3, #28
 8002928:	d501      	bpl.n	800292e <__swbuf_r+0x20>
 800292a:	6923      	ldr	r3, [r4, #16]
 800292c:	b943      	cbnz	r3, 8002940 <__swbuf_r+0x32>
 800292e:	4621      	mov	r1, r4
 8002930:	4628      	mov	r0, r5
 8002932:	f000 f82b 	bl	800298c <__swsetup_r>
 8002936:	b118      	cbz	r0, 8002940 <__swbuf_r+0x32>
 8002938:	f04f 37ff 	mov.w	r7, #4294967295
 800293c:	4638      	mov	r0, r7
 800293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	6922      	ldr	r2, [r4, #16]
 8002944:	1a98      	subs	r0, r3, r2
 8002946:	6963      	ldr	r3, [r4, #20]
 8002948:	b2f6      	uxtb	r6, r6
 800294a:	4283      	cmp	r3, r0
 800294c:	4637      	mov	r7, r6
 800294e:	dc05      	bgt.n	800295c <__swbuf_r+0x4e>
 8002950:	4621      	mov	r1, r4
 8002952:	4628      	mov	r0, r5
 8002954:	f000 fa68 	bl	8002e28 <_fflush_r>
 8002958:	2800      	cmp	r0, #0
 800295a:	d1ed      	bne.n	8002938 <__swbuf_r+0x2a>
 800295c:	68a3      	ldr	r3, [r4, #8]
 800295e:	3b01      	subs	r3, #1
 8002960:	60a3      	str	r3, [r4, #8]
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	6022      	str	r2, [r4, #0]
 8002968:	701e      	strb	r6, [r3, #0]
 800296a:	6962      	ldr	r2, [r4, #20]
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	429a      	cmp	r2, r3
 8002970:	d004      	beq.n	800297c <__swbuf_r+0x6e>
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	07db      	lsls	r3, r3, #31
 8002976:	d5e1      	bpl.n	800293c <__swbuf_r+0x2e>
 8002978:	2e0a      	cmp	r6, #10
 800297a:	d1df      	bne.n	800293c <__swbuf_r+0x2e>
 800297c:	4621      	mov	r1, r4
 800297e:	4628      	mov	r0, r5
 8002980:	f000 fa52 	bl	8002e28 <_fflush_r>
 8002984:	2800      	cmp	r0, #0
 8002986:	d0d9      	beq.n	800293c <__swbuf_r+0x2e>
 8002988:	e7d6      	b.n	8002938 <__swbuf_r+0x2a>
	...

0800298c <__swsetup_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <__swsetup_r+0xa8>)
 8002990:	4605      	mov	r5, r0
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	460c      	mov	r4, r1
 8002996:	b118      	cbz	r0, 80029a0 <__swsetup_r+0x14>
 8002998:	6a03      	ldr	r3, [r0, #32]
 800299a:	b90b      	cbnz	r3, 80029a0 <__swsetup_r+0x14>
 800299c:	f7ff fee0 	bl	8002760 <__sinit>
 80029a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a4:	0719      	lsls	r1, r3, #28
 80029a6:	d422      	bmi.n	80029ee <__swsetup_r+0x62>
 80029a8:	06da      	lsls	r2, r3, #27
 80029aa:	d407      	bmi.n	80029bc <__swsetup_r+0x30>
 80029ac:	2209      	movs	r2, #9
 80029ae:	602a      	str	r2, [r5, #0]
 80029b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029b4:	81a3      	strh	r3, [r4, #12]
 80029b6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ba:	e033      	b.n	8002a24 <__swsetup_r+0x98>
 80029bc:	0758      	lsls	r0, r3, #29
 80029be:	d512      	bpl.n	80029e6 <__swsetup_r+0x5a>
 80029c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029c2:	b141      	cbz	r1, 80029d6 <__swsetup_r+0x4a>
 80029c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029c8:	4299      	cmp	r1, r3
 80029ca:	d002      	beq.n	80029d2 <__swsetup_r+0x46>
 80029cc:	4628      	mov	r0, r5
 80029ce:	f000 f8af 	bl	8002b30 <_free_r>
 80029d2:	2300      	movs	r3, #0
 80029d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	6063      	str	r3, [r4, #4]
 80029e2:	6923      	ldr	r3, [r4, #16]
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	89a3      	ldrh	r3, [r4, #12]
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	81a3      	strh	r3, [r4, #12]
 80029ee:	6923      	ldr	r3, [r4, #16]
 80029f0:	b94b      	cbnz	r3, 8002a06 <__swsetup_r+0x7a>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029fc:	d003      	beq.n	8002a06 <__swsetup_r+0x7a>
 80029fe:	4621      	mov	r1, r4
 8002a00:	4628      	mov	r0, r5
 8002a02:	f000 fa5f 	bl	8002ec4 <__smakebuf_r>
 8002a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a0a:	f013 0201 	ands.w	r2, r3, #1
 8002a0e:	d00a      	beq.n	8002a26 <__swsetup_r+0x9a>
 8002a10:	2200      	movs	r2, #0
 8002a12:	60a2      	str	r2, [r4, #8]
 8002a14:	6962      	ldr	r2, [r4, #20]
 8002a16:	4252      	negs	r2, r2
 8002a18:	61a2      	str	r2, [r4, #24]
 8002a1a:	6922      	ldr	r2, [r4, #16]
 8002a1c:	b942      	cbnz	r2, 8002a30 <__swsetup_r+0xa4>
 8002a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002a22:	d1c5      	bne.n	80029b0 <__swsetup_r+0x24>
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
 8002a26:	0799      	lsls	r1, r3, #30
 8002a28:	bf58      	it	pl
 8002a2a:	6962      	ldrpl	r2, [r4, #20]
 8002a2c:	60a2      	str	r2, [r4, #8]
 8002a2e:	e7f4      	b.n	8002a1a <__swsetup_r+0x8e>
 8002a30:	2000      	movs	r0, #0
 8002a32:	e7f7      	b.n	8002a24 <__swsetup_r+0x98>
 8002a34:	20000020 	.word	0x20000020

08002a38 <memset>:
 8002a38:	4402      	add	r2, r0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <_close_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4d06      	ldr	r5, [pc, #24]	@ (8002a64 <_close_r+0x1c>)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	4604      	mov	r4, r0
 8002a50:	4608      	mov	r0, r1
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f7ff fc34 	bl	80022c0 <_close>
 8002a58:	1c43      	adds	r3, r0, #1
 8002a5a:	d102      	bne.n	8002a62 <_close_r+0x1a>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	b103      	cbz	r3, 8002a62 <_close_r+0x1a>
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
 8002a64:	2000029c 	.word	0x2000029c

08002a68 <_lseek_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4d07      	ldr	r5, [pc, #28]	@ (8002a88 <_lseek_r+0x20>)
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	4608      	mov	r0, r1
 8002a70:	4611      	mov	r1, r2
 8002a72:	2200      	movs	r2, #0
 8002a74:	602a      	str	r2, [r5, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f7ff fbe3 	bl	8002242 <_lseek>
 8002a7c:	1c43      	adds	r3, r0, #1
 8002a7e:	d102      	bne.n	8002a86 <_lseek_r+0x1e>
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	b103      	cbz	r3, 8002a86 <_lseek_r+0x1e>
 8002a84:	6023      	str	r3, [r4, #0]
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	2000029c 	.word	0x2000029c

08002a8c <_read_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	4d07      	ldr	r5, [pc, #28]	@ (8002aac <_read_r+0x20>)
 8002a90:	4604      	mov	r4, r0
 8002a92:	4608      	mov	r0, r1
 8002a94:	4611      	mov	r1, r2
 8002a96:	2200      	movs	r2, #0
 8002a98:	602a      	str	r2, [r5, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f7ff fb7b 	bl	8002196 <_read>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d102      	bne.n	8002aaa <_read_r+0x1e>
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	b103      	cbz	r3, 8002aaa <_read_r+0x1e>
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	bd38      	pop	{r3, r4, r5, pc}
 8002aac:	2000029c 	.word	0x2000029c

08002ab0 <_write_r>:
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	4d07      	ldr	r5, [pc, #28]	@ (8002ad0 <_write_r+0x20>)
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	4608      	mov	r0, r1
 8002ab8:	4611      	mov	r1, r2
 8002aba:	2200      	movs	r2, #0
 8002abc:	602a      	str	r2, [r5, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f7ff fbd1 	bl	8002266 <_write>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_write_r+0x1e>
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_write_r+0x1e>
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	2000029c 	.word	0x2000029c

08002ad4 <__errno>:
 8002ad4:	4b01      	ldr	r3, [pc, #4]	@ (8002adc <__errno+0x8>)
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000020 	.word	0x20000020

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8002b18 <__libc_init_array+0x38>)
 8002ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8002b1c <__libc_init_array+0x3c>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	2600      	movs	r6, #0
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	4d0b      	ldr	r5, [pc, #44]	@ (8002b20 <__libc_init_array+0x40>)
 8002af2:	4c0c      	ldr	r4, [pc, #48]	@ (8002b24 <__libc_init_array+0x44>)
 8002af4:	f000 fa54 	bl	8002fa0 <_init>
 8002af8:	1b64      	subs	r4, r4, r5
 8002afa:	10a4      	asrs	r4, r4, #2
 8002afc:	2600      	movs	r6, #0
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08003040 	.word	0x08003040
 8002b1c:	08003040 	.word	0x08003040
 8002b20:	08003040 	.word	0x08003040
 8002b24:	08003044 	.word	0x08003044

08002b28 <__retarget_lock_init_recursive>:
 8002b28:	4770      	bx	lr

08002b2a <__retarget_lock_acquire_recursive>:
 8002b2a:	4770      	bx	lr

08002b2c <__retarget_lock_release_recursive>:
 8002b2c:	4770      	bx	lr
	...

08002b30 <_free_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4605      	mov	r5, r0
 8002b34:	2900      	cmp	r1, #0
 8002b36:	d041      	beq.n	8002bbc <_free_r+0x8c>
 8002b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b3c:	1f0c      	subs	r4, r1, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bfb8      	it	lt
 8002b42:	18e4      	addlt	r4, r4, r3
 8002b44:	f000 f8e0 	bl	8002d08 <__malloc_lock>
 8002b48:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <_free_r+0x90>)
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	b933      	cbnz	r3, 8002b5c <_free_r+0x2c>
 8002b4e:	6063      	str	r3, [r4, #4]
 8002b50:	6014      	str	r4, [r2, #0]
 8002b52:	4628      	mov	r0, r5
 8002b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b58:	f000 b8dc 	b.w	8002d14 <__malloc_unlock>
 8002b5c:	42a3      	cmp	r3, r4
 8002b5e:	d908      	bls.n	8002b72 <_free_r+0x42>
 8002b60:	6820      	ldr	r0, [r4, #0]
 8002b62:	1821      	adds	r1, r4, r0
 8002b64:	428b      	cmp	r3, r1
 8002b66:	bf01      	itttt	eq
 8002b68:	6819      	ldreq	r1, [r3, #0]
 8002b6a:	685b      	ldreq	r3, [r3, #4]
 8002b6c:	1809      	addeq	r1, r1, r0
 8002b6e:	6021      	streq	r1, [r4, #0]
 8002b70:	e7ed      	b.n	8002b4e <_free_r+0x1e>
 8002b72:	461a      	mov	r2, r3
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	b10b      	cbz	r3, 8002b7c <_free_r+0x4c>
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	d9fa      	bls.n	8002b72 <_free_r+0x42>
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	1850      	adds	r0, r2, r1
 8002b80:	42a0      	cmp	r0, r4
 8002b82:	d10b      	bne.n	8002b9c <_free_r+0x6c>
 8002b84:	6820      	ldr	r0, [r4, #0]
 8002b86:	4401      	add	r1, r0
 8002b88:	1850      	adds	r0, r2, r1
 8002b8a:	4283      	cmp	r3, r0
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	d1e0      	bne.n	8002b52 <_free_r+0x22>
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	6053      	str	r3, [r2, #4]
 8002b96:	4408      	add	r0, r1
 8002b98:	6010      	str	r0, [r2, #0]
 8002b9a:	e7da      	b.n	8002b52 <_free_r+0x22>
 8002b9c:	d902      	bls.n	8002ba4 <_free_r+0x74>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	e7d6      	b.n	8002b52 <_free_r+0x22>
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	1821      	adds	r1, r4, r0
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	bf04      	itt	eq
 8002bac:	6819      	ldreq	r1, [r3, #0]
 8002bae:	685b      	ldreq	r3, [r3, #4]
 8002bb0:	6063      	str	r3, [r4, #4]
 8002bb2:	bf04      	itt	eq
 8002bb4:	1809      	addeq	r1, r1, r0
 8002bb6:	6021      	streq	r1, [r4, #0]
 8002bb8:	6054      	str	r4, [r2, #4]
 8002bba:	e7ca      	b.n	8002b52 <_free_r+0x22>
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200002a8 	.word	0x200002a8

08002bc4 <sbrk_aligned>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0f      	ldr	r6, [pc, #60]	@ (8002c04 <sbrk_aligned+0x40>)
 8002bc8:	460c      	mov	r4, r1
 8002bca:	6831      	ldr	r1, [r6, #0]
 8002bcc:	4605      	mov	r5, r0
 8002bce:	b911      	cbnz	r1, 8002bd6 <sbrk_aligned+0x12>
 8002bd0:	f000 f9d6 	bl	8002f80 <_sbrk_r>
 8002bd4:	6030      	str	r0, [r6, #0]
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f000 f9d1 	bl	8002f80 <_sbrk_r>
 8002bde:	1c43      	adds	r3, r0, #1
 8002be0:	d103      	bne.n	8002bea <sbrk_aligned+0x26>
 8002be2:	f04f 34ff 	mov.w	r4, #4294967295
 8002be6:	4620      	mov	r0, r4
 8002be8:	bd70      	pop	{r4, r5, r6, pc}
 8002bea:	1cc4      	adds	r4, r0, #3
 8002bec:	f024 0403 	bic.w	r4, r4, #3
 8002bf0:	42a0      	cmp	r0, r4
 8002bf2:	d0f8      	beq.n	8002be6 <sbrk_aligned+0x22>
 8002bf4:	1a21      	subs	r1, r4, r0
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f000 f9c2 	bl	8002f80 <_sbrk_r>
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	d1f2      	bne.n	8002be6 <sbrk_aligned+0x22>
 8002c00:	e7ef      	b.n	8002be2 <sbrk_aligned+0x1e>
 8002c02:	bf00      	nop
 8002c04:	200002a4 	.word	0x200002a4

08002c08 <_malloc_r>:
 8002c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c0c:	1ccd      	adds	r5, r1, #3
 8002c0e:	f025 0503 	bic.w	r5, r5, #3
 8002c12:	3508      	adds	r5, #8
 8002c14:	2d0c      	cmp	r5, #12
 8002c16:	bf38      	it	cc
 8002c18:	250c      	movcc	r5, #12
 8002c1a:	2d00      	cmp	r5, #0
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	db01      	blt.n	8002c24 <_malloc_r+0x1c>
 8002c20:	42a9      	cmp	r1, r5
 8002c22:	d904      	bls.n	8002c2e <_malloc_r+0x26>
 8002c24:	230c      	movs	r3, #12
 8002c26:	6033      	str	r3, [r6, #0]
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d04 <_malloc_r+0xfc>
 8002c32:	f000 f869 	bl	8002d08 <__malloc_lock>
 8002c36:	f8d8 3000 	ldr.w	r3, [r8]
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	bb44      	cbnz	r4, 8002c90 <_malloc_r+0x88>
 8002c3e:	4629      	mov	r1, r5
 8002c40:	4630      	mov	r0, r6
 8002c42:	f7ff ffbf 	bl	8002bc4 <sbrk_aligned>
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	4604      	mov	r4, r0
 8002c4a:	d158      	bne.n	8002cfe <_malloc_r+0xf6>
 8002c4c:	f8d8 4000 	ldr.w	r4, [r8]
 8002c50:	4627      	mov	r7, r4
 8002c52:	2f00      	cmp	r7, #0
 8002c54:	d143      	bne.n	8002cde <_malloc_r+0xd6>
 8002c56:	2c00      	cmp	r4, #0
 8002c58:	d04b      	beq.n	8002cf2 <_malloc_r+0xea>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4639      	mov	r1, r7
 8002c5e:	4630      	mov	r0, r6
 8002c60:	eb04 0903 	add.w	r9, r4, r3
 8002c64:	f000 f98c 	bl	8002f80 <_sbrk_r>
 8002c68:	4581      	cmp	r9, r0
 8002c6a:	d142      	bne.n	8002cf2 <_malloc_r+0xea>
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	1a6d      	subs	r5, r5, r1
 8002c70:	4629      	mov	r1, r5
 8002c72:	4630      	mov	r0, r6
 8002c74:	f7ff ffa6 	bl	8002bc4 <sbrk_aligned>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	d03a      	beq.n	8002cf2 <_malloc_r+0xea>
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	442b      	add	r3, r5
 8002c80:	6023      	str	r3, [r4, #0]
 8002c82:	f8d8 3000 	ldr.w	r3, [r8]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	bb62      	cbnz	r2, 8002ce4 <_malloc_r+0xdc>
 8002c8a:	f8c8 7000 	str.w	r7, [r8]
 8002c8e:	e00f      	b.n	8002cb0 <_malloc_r+0xa8>
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	1b52      	subs	r2, r2, r5
 8002c94:	d420      	bmi.n	8002cd8 <_malloc_r+0xd0>
 8002c96:	2a0b      	cmp	r2, #11
 8002c98:	d917      	bls.n	8002cca <_malloc_r+0xc2>
 8002c9a:	1961      	adds	r1, r4, r5
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	6025      	str	r5, [r4, #0]
 8002ca0:	bf18      	it	ne
 8002ca2:	6059      	strne	r1, [r3, #4]
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	bf08      	it	eq
 8002ca8:	f8c8 1000 	streq.w	r1, [r8]
 8002cac:	5162      	str	r2, [r4, r5]
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	4630      	mov	r0, r6
 8002cb2:	f000 f82f 	bl	8002d14 <__malloc_unlock>
 8002cb6:	f104 000b 	add.w	r0, r4, #11
 8002cba:	1d23      	adds	r3, r4, #4
 8002cbc:	f020 0007 	bic.w	r0, r0, #7
 8002cc0:	1ac2      	subs	r2, r0, r3
 8002cc2:	bf1c      	itt	ne
 8002cc4:	1a1b      	subne	r3, r3, r0
 8002cc6:	50a3      	strne	r3, [r4, r2]
 8002cc8:	e7af      	b.n	8002c2a <_malloc_r+0x22>
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	bf0c      	ite	eq
 8002cd0:	f8c8 2000 	streq.w	r2, [r8]
 8002cd4:	605a      	strne	r2, [r3, #4]
 8002cd6:	e7eb      	b.n	8002cb0 <_malloc_r+0xa8>
 8002cd8:	4623      	mov	r3, r4
 8002cda:	6864      	ldr	r4, [r4, #4]
 8002cdc:	e7ae      	b.n	8002c3c <_malloc_r+0x34>
 8002cde:	463c      	mov	r4, r7
 8002ce0:	687f      	ldr	r7, [r7, #4]
 8002ce2:	e7b6      	b.n	8002c52 <_malloc_r+0x4a>
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d1fb      	bne.n	8002ce4 <_malloc_r+0xdc>
 8002cec:	2300      	movs	r3, #0
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e7de      	b.n	8002cb0 <_malloc_r+0xa8>
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	6033      	str	r3, [r6, #0]
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f000 f80c 	bl	8002d14 <__malloc_unlock>
 8002cfc:	e794      	b.n	8002c28 <_malloc_r+0x20>
 8002cfe:	6005      	str	r5, [r0, #0]
 8002d00:	e7d6      	b.n	8002cb0 <_malloc_r+0xa8>
 8002d02:	bf00      	nop
 8002d04:	200002a8 	.word	0x200002a8

08002d08 <__malloc_lock>:
 8002d08:	4801      	ldr	r0, [pc, #4]	@ (8002d10 <__malloc_lock+0x8>)
 8002d0a:	f7ff bf0e 	b.w	8002b2a <__retarget_lock_acquire_recursive>
 8002d0e:	bf00      	nop
 8002d10:	200002a0 	.word	0x200002a0

08002d14 <__malloc_unlock>:
 8002d14:	4801      	ldr	r0, [pc, #4]	@ (8002d1c <__malloc_unlock+0x8>)
 8002d16:	f7ff bf09 	b.w	8002b2c <__retarget_lock_release_recursive>
 8002d1a:	bf00      	nop
 8002d1c:	200002a0 	.word	0x200002a0

08002d20 <__sflush_r>:
 8002d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d28:	0716      	lsls	r6, r2, #28
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	d454      	bmi.n	8002dda <__sflush_r+0xba>
 8002d30:	684b      	ldr	r3, [r1, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	dc02      	bgt.n	8002d3c <__sflush_r+0x1c>
 8002d36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	dd48      	ble.n	8002dce <__sflush_r+0xae>
 8002d3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d3e:	2e00      	cmp	r6, #0
 8002d40:	d045      	beq.n	8002dce <__sflush_r+0xae>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d48:	682f      	ldr	r7, [r5, #0]
 8002d4a:	6a21      	ldr	r1, [r4, #32]
 8002d4c:	602b      	str	r3, [r5, #0]
 8002d4e:	d030      	beq.n	8002db2 <__sflush_r+0x92>
 8002d50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d52:	89a3      	ldrh	r3, [r4, #12]
 8002d54:	0759      	lsls	r1, r3, #29
 8002d56:	d505      	bpl.n	8002d64 <__sflush_r+0x44>
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	1ad2      	subs	r2, r2, r3
 8002d5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d5e:	b10b      	cbz	r3, 8002d64 <__sflush_r+0x44>
 8002d60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d68:	6a21      	ldr	r1, [r4, #32]
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	47b0      	blx	r6
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	d106      	bne.n	8002d82 <__sflush_r+0x62>
 8002d74:	6829      	ldr	r1, [r5, #0]
 8002d76:	291d      	cmp	r1, #29
 8002d78:	d82b      	bhi.n	8002dd2 <__sflush_r+0xb2>
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002e24 <__sflush_r+0x104>)
 8002d7c:	410a      	asrs	r2, r1
 8002d7e:	07d6      	lsls	r6, r2, #31
 8002d80:	d427      	bmi.n	8002dd2 <__sflush_r+0xb2>
 8002d82:	2200      	movs	r2, #0
 8002d84:	6062      	str	r2, [r4, #4]
 8002d86:	04d9      	lsls	r1, r3, #19
 8002d88:	6922      	ldr	r2, [r4, #16]
 8002d8a:	6022      	str	r2, [r4, #0]
 8002d8c:	d504      	bpl.n	8002d98 <__sflush_r+0x78>
 8002d8e:	1c42      	adds	r2, r0, #1
 8002d90:	d101      	bne.n	8002d96 <__sflush_r+0x76>
 8002d92:	682b      	ldr	r3, [r5, #0]
 8002d94:	b903      	cbnz	r3, 8002d98 <__sflush_r+0x78>
 8002d96:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d9a:	602f      	str	r7, [r5, #0]
 8002d9c:	b1b9      	cbz	r1, 8002dce <__sflush_r+0xae>
 8002d9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002da2:	4299      	cmp	r1, r3
 8002da4:	d002      	beq.n	8002dac <__sflush_r+0x8c>
 8002da6:	4628      	mov	r0, r5
 8002da8:	f7ff fec2 	bl	8002b30 <_free_r>
 8002dac:	2300      	movs	r3, #0
 8002dae:	6363      	str	r3, [r4, #52]	@ 0x34
 8002db0:	e00d      	b.n	8002dce <__sflush_r+0xae>
 8002db2:	2301      	movs	r3, #1
 8002db4:	4628      	mov	r0, r5
 8002db6:	47b0      	blx	r6
 8002db8:	4602      	mov	r2, r0
 8002dba:	1c50      	adds	r0, r2, #1
 8002dbc:	d1c9      	bne.n	8002d52 <__sflush_r+0x32>
 8002dbe:	682b      	ldr	r3, [r5, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0c6      	beq.n	8002d52 <__sflush_r+0x32>
 8002dc4:	2b1d      	cmp	r3, #29
 8002dc6:	d001      	beq.n	8002dcc <__sflush_r+0xac>
 8002dc8:	2b16      	cmp	r3, #22
 8002dca:	d11e      	bne.n	8002e0a <__sflush_r+0xea>
 8002dcc:	602f      	str	r7, [r5, #0]
 8002dce:	2000      	movs	r0, #0
 8002dd0:	e022      	b.n	8002e18 <__sflush_r+0xf8>
 8002dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	e01b      	b.n	8002e12 <__sflush_r+0xf2>
 8002dda:	690f      	ldr	r7, [r1, #16]
 8002ddc:	2f00      	cmp	r7, #0
 8002dde:	d0f6      	beq.n	8002dce <__sflush_r+0xae>
 8002de0:	0793      	lsls	r3, r2, #30
 8002de2:	680e      	ldr	r6, [r1, #0]
 8002de4:	bf08      	it	eq
 8002de6:	694b      	ldreq	r3, [r1, #20]
 8002de8:	600f      	str	r7, [r1, #0]
 8002dea:	bf18      	it	ne
 8002dec:	2300      	movne	r3, #0
 8002dee:	eba6 0807 	sub.w	r8, r6, r7
 8002df2:	608b      	str	r3, [r1, #8]
 8002df4:	f1b8 0f00 	cmp.w	r8, #0
 8002df8:	dde9      	ble.n	8002dce <__sflush_r+0xae>
 8002dfa:	6a21      	ldr	r1, [r4, #32]
 8002dfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002dfe:	4643      	mov	r3, r8
 8002e00:	463a      	mov	r2, r7
 8002e02:	4628      	mov	r0, r5
 8002e04:	47b0      	blx	r6
 8002e06:	2800      	cmp	r0, #0
 8002e08:	dc08      	bgt.n	8002e1c <__sflush_r+0xfc>
 8002e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e1c:	4407      	add	r7, r0
 8002e1e:	eba8 0800 	sub.w	r8, r8, r0
 8002e22:	e7e7      	b.n	8002df4 <__sflush_r+0xd4>
 8002e24:	dfbffffe 	.word	0xdfbffffe

08002e28 <_fflush_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	690b      	ldr	r3, [r1, #16]
 8002e2c:	4605      	mov	r5, r0
 8002e2e:	460c      	mov	r4, r1
 8002e30:	b913      	cbnz	r3, 8002e38 <_fflush_r+0x10>
 8002e32:	2500      	movs	r5, #0
 8002e34:	4628      	mov	r0, r5
 8002e36:	bd38      	pop	{r3, r4, r5, pc}
 8002e38:	b118      	cbz	r0, 8002e42 <_fflush_r+0x1a>
 8002e3a:	6a03      	ldr	r3, [r0, #32]
 8002e3c:	b90b      	cbnz	r3, 8002e42 <_fflush_r+0x1a>
 8002e3e:	f7ff fc8f 	bl	8002760 <__sinit>
 8002e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f3      	beq.n	8002e32 <_fflush_r+0xa>
 8002e4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e4c:	07d0      	lsls	r0, r2, #31
 8002e4e:	d404      	bmi.n	8002e5a <_fflush_r+0x32>
 8002e50:	0599      	lsls	r1, r3, #22
 8002e52:	d402      	bmi.n	8002e5a <_fflush_r+0x32>
 8002e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e56:	f7ff fe68 	bl	8002b2a <__retarget_lock_acquire_recursive>
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	f7ff ff5f 	bl	8002d20 <__sflush_r>
 8002e62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e64:	07da      	lsls	r2, r3, #31
 8002e66:	4605      	mov	r5, r0
 8002e68:	d4e4      	bmi.n	8002e34 <_fflush_r+0xc>
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	059b      	lsls	r3, r3, #22
 8002e6e:	d4e1      	bmi.n	8002e34 <_fflush_r+0xc>
 8002e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e72:	f7ff fe5b 	bl	8002b2c <__retarget_lock_release_recursive>
 8002e76:	e7dd      	b.n	8002e34 <_fflush_r+0xc>

08002e78 <__swhatbuf_r>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e80:	2900      	cmp	r1, #0
 8002e82:	b096      	sub	sp, #88	@ 0x58
 8002e84:	4615      	mov	r5, r2
 8002e86:	461e      	mov	r6, r3
 8002e88:	da0d      	bge.n	8002ea6 <__swhatbuf_r+0x2e>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e90:	f04f 0100 	mov.w	r1, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2340      	movne	r3, #64	@ 0x40
 8002e98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	6031      	str	r1, [r6, #0]
 8002ea0:	602b      	str	r3, [r5, #0]
 8002ea2:	b016      	add	sp, #88	@ 0x58
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	466a      	mov	r2, sp
 8002ea8:	f000 f848 	bl	8002f3c <_fstat_r>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	dbec      	blt.n	8002e8a <__swhatbuf_r+0x12>
 8002eb0:	9901      	ldr	r1, [sp, #4]
 8002eb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002eb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002eba:	4259      	negs	r1, r3
 8002ebc:	4159      	adcs	r1, r3
 8002ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec2:	e7eb      	b.n	8002e9c <__swhatbuf_r+0x24>

08002ec4 <__smakebuf_r>:
 8002ec4:	898b      	ldrh	r3, [r1, #12]
 8002ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ec8:	079d      	lsls	r5, r3, #30
 8002eca:	4606      	mov	r6, r0
 8002ecc:	460c      	mov	r4, r1
 8002ece:	d507      	bpl.n	8002ee0 <__smakebuf_r+0x1c>
 8002ed0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	6123      	str	r3, [r4, #16]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	6163      	str	r3, [r4, #20]
 8002edc:	b003      	add	sp, #12
 8002ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee0:	ab01      	add	r3, sp, #4
 8002ee2:	466a      	mov	r2, sp
 8002ee4:	f7ff ffc8 	bl	8002e78 <__swhatbuf_r>
 8002ee8:	9f00      	ldr	r7, [sp, #0]
 8002eea:	4605      	mov	r5, r0
 8002eec:	4639      	mov	r1, r7
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f7ff fe8a 	bl	8002c08 <_malloc_r>
 8002ef4:	b948      	cbnz	r0, 8002f0a <__smakebuf_r+0x46>
 8002ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002efa:	059a      	lsls	r2, r3, #22
 8002efc:	d4ee      	bmi.n	8002edc <__smakebuf_r+0x18>
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	f043 0302 	orr.w	r3, r3, #2
 8002f06:	81a3      	strh	r3, [r4, #12]
 8002f08:	e7e2      	b.n	8002ed0 <__smakebuf_r+0xc>
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	6020      	str	r0, [r4, #0]
 8002f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f12:	81a3      	strh	r3, [r4, #12]
 8002f14:	9b01      	ldr	r3, [sp, #4]
 8002f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002f1a:	b15b      	cbz	r3, 8002f34 <__smakebuf_r+0x70>
 8002f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f81d 	bl	8002f60 <_isatty_r>
 8002f26:	b128      	cbz	r0, 8002f34 <__smakebuf_r+0x70>
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	f023 0303 	bic.w	r3, r3, #3
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	81a3      	strh	r3, [r4, #12]
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	431d      	orrs	r5, r3
 8002f38:	81a5      	strh	r5, [r4, #12]
 8002f3a:	e7cf      	b.n	8002edc <__smakebuf_r+0x18>

08002f3c <_fstat_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4d07      	ldr	r5, [pc, #28]	@ (8002f5c <_fstat_r+0x20>)
 8002f40:	2300      	movs	r3, #0
 8002f42:	4604      	mov	r4, r0
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	602b      	str	r3, [r5, #0]
 8002f4a:	f7ff f9fc 	bl	8002346 <_fstat>
 8002f4e:	1c43      	adds	r3, r0, #1
 8002f50:	d102      	bne.n	8002f58 <_fstat_r+0x1c>
 8002f52:	682b      	ldr	r3, [r5, #0]
 8002f54:	b103      	cbz	r3, 8002f58 <_fstat_r+0x1c>
 8002f56:	6023      	str	r3, [r4, #0]
 8002f58:	bd38      	pop	{r3, r4, r5, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000029c 	.word	0x2000029c

08002f60 <_isatty_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4d06      	ldr	r5, [pc, #24]	@ (8002f7c <_isatty_r+0x1c>)
 8002f64:	2300      	movs	r3, #0
 8002f66:	4604      	mov	r4, r0
 8002f68:	4608      	mov	r0, r1
 8002f6a:	602b      	str	r3, [r5, #0]
 8002f6c:	f7ff fb4e 	bl	800260c <_isatty>
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d102      	bne.n	8002f7a <_isatty_r+0x1a>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b103      	cbz	r3, 8002f7a <_isatty_r+0x1a>
 8002f78:	6023      	str	r3, [r4, #0]
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	2000029c 	.word	0x2000029c

08002f80 <_sbrk_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4d06      	ldr	r5, [pc, #24]	@ (8002f9c <_sbrk_r+0x1c>)
 8002f84:	2300      	movs	r3, #0
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	602b      	str	r3, [r5, #0]
 8002f8c:	f7fd fd8a 	bl	8000aa4 <_sbrk>
 8002f90:	1c43      	adds	r3, r0, #1
 8002f92:	d102      	bne.n	8002f9a <_sbrk_r+0x1a>
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	b103      	cbz	r3, 8002f9a <_sbrk_r+0x1a>
 8002f98:	6023      	str	r3, [r4, #0]
 8002f9a:	bd38      	pop	{r3, r4, r5, pc}
 8002f9c:	2000029c 	.word	0x2000029c

08002fa0 <_init>:
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	bf00      	nop
 8002fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fa6:	bc08      	pop	{r3}
 8002fa8:	469e      	mov	lr, r3
 8002faa:	4770      	bx	lr

08002fac <_fini>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr
