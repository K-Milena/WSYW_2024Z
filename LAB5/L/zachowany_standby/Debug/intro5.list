
intro5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003374  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003514  08003514  00004514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080035d8  080035d8  000045d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000045e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035e4  080035e4  000045e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080035e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  08003658  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08003658  000052ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069fa  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000183b  00000000  00000000  0000ba9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000555  00000000  00000000  0000da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d5b  00000000  00000000  0000df6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f70  00000000  00000000  00023cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088141  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4d79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  000b4dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b74cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080034fc 	.word	0x080034fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080034fc 	.word	0x080034fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000586:	f001 ffad 	bl	80024e4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb59 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f84d 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8dd 	bl	8000750 <MX_GPIO_Init>
  MX_RTC_Init();
 8000596:	f000 f8b5 	bl	8000704 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

printf("Gasmy swiatlo\n");
 800059a:	481c      	ldr	r0, [pc, #112]	@ (800060c <main+0x8c>)
 800059c:	f002 f94a 	bl	8002834 <puts>

if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB)!= RESET)
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <main+0x90>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d106      	bne.n	80005ba <main+0x3a>
{
	printf("zostal wybudzony ze standby\n");
 80005ac:	4819      	ldr	r0, [pc, #100]	@ (8000614 <main+0x94>)
 80005ae:	f002 f941 	bl	8002834 <puts>
	__HAL_PWR_GET_FLAG(PWR_FLAG_SB);
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <main+0x90>)
 80005b4:	685b      	ldr	r3, [r3, #4]
	__HAL_PWR_GET_FLAG(PWR_FLAG_WU);
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <main+0x90>)
 80005b8:	685b      	ldr	r3, [r3, #4]
}

HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1); //PA0 - przycisk
 80005ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80005be:	f000 fec3 	bl	8001348 <HAL_PWR_EnableWakeUpPin>

uint32_t zachowany = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <main+0x98>)
 80005c6:	f001 fd5d 	bl	8002084 <HAL_RTCEx_BKUPRead>
 80005ca:	6078      	str	r0, [r7, #4]

printf("zachowany %d \n", zachowany);
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	4813      	ldr	r0, [pc, #76]	@ (800061c <main+0x9c>)
 80005d0:	f002 f8c8 	bl	8002764 <iprintf>

zachowany = 555;
 80005d4:	f240 232b 	movw	r3, #555	@ 0x22b
 80005d8:	607b      	str	r3, [r7, #4]

HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, zachowany);
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	480e      	ldr	r0, [pc, #56]	@ (8000618 <main+0x98>)
 80005e0:	f001 fd36 	bl	8002050 <HAL_RTCEx_BKUPWrite>

HAL_PWR_EnterSTANDBYMode(); //wykonuje od nowa wszystkie instrukcje z main :O
 80005e4:	f000 fec2 	bl	800136c <HAL_PWR_EnterSTANDBYMode>
//odcina zasilania :( jak z niego wyjsc?

printf("zapalamy switlo.\n");
 80005e8:	480d      	ldr	r0, [pc, #52]	@ (8000620 <main+0xa0>)
 80005ea:	f002 f923 	bl	8002834 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
printf("wchodzimy w delay\n");
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <main+0xa4>)
 80005f0:	f002 f920 	bl	8002834 <puts>
  while (1)
  {
	  HAL_Delay(5000);
 80005f4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005f8:	f000 fb94 	bl	8000d24 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <main+0xa8>)
 8000602:	f000 fe62 	bl	80012ca <HAL_GPIO_TogglePin>
	  HAL_Delay(5000);
 8000606:	bf00      	nop
 8000608:	e7f4      	b.n	80005f4 <main+0x74>
 800060a:	bf00      	nop
 800060c:	08003514 	.word	0x08003514
 8000610:	40007000 	.word	0x40007000
 8000614:	08003524 	.word	0x08003524
 8000618:	2000008c 	.word	0x2000008c
 800061c:	08003540 	.word	0x08003540
 8000620:	08003550 	.word	0x08003550
 8000624:	08003564 	.word	0x08003564
 8000628:	40020c00 	.word	0x40020c00

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f9da 	bl	80029f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a22      	ldr	r2, [pc, #136]	@ (8000700 <SystemClock_Config+0xd4>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <SystemClock_Config+0xd4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000688:	230a      	movs	r3, #10
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006a4:	23c0      	movs	r3, #192	@ 0xc0
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fe71 	bl	800139c <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 f9bc 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2103      	movs	r1, #3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8d2 	bl	800188c <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f9a5 	bl	8000a3c <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_RTC_Init+0x44>)
 800070a:	4a10      	ldr	r2, [pc, #64]	@ (800074c <MX_RTC_Init+0x48>)
 800070c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_RTC_Init+0x44>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_RTC_Init+0x44>)
 8000716:	227f      	movs	r2, #127	@ 0x7f
 8000718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_RTC_Init+0x44>)
 800071c:	22ff      	movs	r2, #255	@ 0xff
 800071e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_RTC_Init+0x44>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_RTC_Init+0x44>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_RTC_Init+0x44>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_RTC_Init+0x44>)
 8000734:	f001 fb86 	bl	8001e44 <HAL_RTC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800073e:	f000 f97d 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c
 800074c:	40002800 	.word	0x40002800

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4bae      	ldr	r3, [pc, #696]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4aad      	ldr	r2, [pc, #692]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4bab      	ldr	r3, [pc, #684]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4ba7      	ldr	r3, [pc, #668]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4aa6      	ldr	r2, [pc, #664]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4ba4      	ldr	r3, [pc, #656]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4ba0      	ldr	r3, [pc, #640]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a9f      	ldr	r2, [pc, #636]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b9d      	ldr	r3, [pc, #628]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b99      	ldr	r3, [pc, #612]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a98      	ldr	r2, [pc, #608]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b96      	ldr	r3, [pc, #600]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b92      	ldr	r3, [pc, #584]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a91      	ldr	r2, [pc, #580]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b8f      	ldr	r3, [pc, #572]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b8b      	ldr	r3, [pc, #556]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a8a      	ldr	r2, [pc, #552]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b88      	ldr	r3, [pc, #544]	@ (8000a24 <MX_GPIO_Init+0x2d4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4885      	ldr	r0, [pc, #532]	@ (8000a28 <MX_GPIO_Init+0x2d8>)
 8000814:	f000 fd40 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4883      	ldr	r0, [pc, #524]	@ (8000a2c <MX_GPIO_Init+0x2dc>)
 800081e:	f000 fd3b 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f24e 0110 	movw	r1, #57360	@ 0xe010
 8000828:	4881      	ldr	r0, [pc, #516]	@ (8000a30 <MX_GPIO_Init+0x2e0>)
 800082a:	f000 fd35 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800082e:	2304      	movs	r3, #4
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4879      	ldr	r0, [pc, #484]	@ (8000a28 <MX_GPIO_Init+0x2d8>)
 8000842:	f000 fba5 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4872      	ldr	r0, [pc, #456]	@ (8000a28 <MX_GPIO_Init+0x2d8>)
 800085e:	f000 fb97 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000862:	2332      	movs	r3, #50	@ 0x32
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000866:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	486c      	ldr	r0, [pc, #432]	@ (8000a28 <MX_GPIO_Init+0x2d8>)
 8000878:	f000 fb8a 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800087c:	2301      	movs	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4866      	ldr	r0, [pc, #408]	@ (8000a2c <MX_GPIO_Init+0x2dc>)
 8000894:	f000 fb7c 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000898:	2308      	movs	r3, #8
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a8:	2305      	movs	r3, #5
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	485e      	ldr	r0, [pc, #376]	@ (8000a2c <MX_GPIO_Init+0x2dc>)
 80008b4:	f000 fb6c 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4859      	ldr	r0, [pc, #356]	@ (8000a34 <MX_GPIO_Init+0x2e4>)
 80008ce:	f000 fb5f 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d2:	2310      	movs	r3, #16
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e2:	2306      	movs	r3, #6
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4851      	ldr	r0, [pc, #324]	@ (8000a34 <MX_GPIO_Init+0x2e4>)
 80008ee:	f000 fb4f 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f2:	23e0      	movs	r3, #224	@ 0xe0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4849      	ldr	r0, [pc, #292]	@ (8000a34 <MX_GPIO_Init+0x2e4>)
 800090e:	f000 fb3f 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000912:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000924:	2305      	movs	r3, #5
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4842      	ldr	r0, [pc, #264]	@ (8000a38 <MX_GPIO_Init+0x2e8>)
 8000930:	f000 fb2e 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000946:	2302      	movs	r3, #2
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4837      	ldr	r0, [pc, #220]	@ (8000a30 <MX_GPIO_Init+0x2e0>)
 8000952:	f000 fb1d 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8000956:	f24e 0310 	movw	r3, #57360	@ 0xe010
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4830      	ldr	r0, [pc, #192]	@ (8000a30 <MX_GPIO_Init+0x2e0>)
 8000970:	f000 fb0e 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000974:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000986:	2306      	movs	r3, #6
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4826      	ldr	r0, [pc, #152]	@ (8000a2c <MX_GPIO_Init+0x2dc>)
 8000992:	f000 fafd 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <MX_GPIO_Init+0x2e4>)
 80009ac:	f000 faf0 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c2:	230a      	movs	r3, #10
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4819      	ldr	r0, [pc, #100]	@ (8000a34 <MX_GPIO_Init+0x2e4>)
 80009ce:	f000 fadf 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <MX_GPIO_Init+0x2e0>)
 80009e6:	f000 fad3 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_GPIO_Init+0x2e8>)
 8000a08:	f000 fac2 	bl	8000f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2006      	movs	r0, #6
 8000a12:	f000 fa86 	bl	8000f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a16:	2006      	movs	r0, #6
 8000a18:	f000 fa9f 	bl	8000f5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3730      	adds	r7, #48	@ 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_MspInit+0x4c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 fa40 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae8 <HAL_RTC_MspInit+0x50>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d111      	bne.n	8000ae0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ac4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 f8ca 	bl	8001c64 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ad6:	f7ff ffb1 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ada:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <HAL_RTC_MspInit+0x54>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40002800 	.word	0x40002800
 8000aec:	42470e3c 	.word	0x42470e3c

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f8cd 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 fbd4 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f001 ff80 	bl	8002a90 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20020000 	.word	0x20020000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	200000ac 	.word	0x200000ac
 8000bc4:	200002b0 	.word	0x200002b0

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 ff3f 	bl	8002a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fcaf 	bl	8000580 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c30:	080035e8 	.word	0x080035e8
  ldr r2, =_sbss
 8000c34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c38:	200002ac 	.word	0x200002ac

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f94f 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fee8 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f967 	bl	8000f76 <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f92f 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200000b0 	.word	0x200000b0

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200000b0 	.word	0x200000b0

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008

08000d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	@ (8000db0 <__NVIC_SetPriorityGrouping+0x44>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <__NVIC_GetPriorityGrouping+0x18>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	f003 0307 	and.w	r3, r3, #7
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0b      	blt.n	8000dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	f003 021f 	and.w	r2, r3, #31
 8000de8:	4907      	ldr	r1, [pc, #28]	@ (8000e08 <__NVIC_EnableIRQ+0x38>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	2001      	movs	r0, #1
 8000df2:	fa00 f202 	lsl.w	r2, r0, r2
 8000df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	@ (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	@ 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff29 	bl	8000d6c <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff3e 	bl	8000db4 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff31 	bl	8000dd0 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa2 	bl	8000ec8 <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e159      	b.n	8001260 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8148 	bne.w	800125a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a2 	beq.w	800125a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b57      	ldr	r3, [pc, #348]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a56      	ldr	r2, [pc, #344]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b54      	ldr	r3, [pc, #336]	@ (8001278 <HAL_GPIO_Init+0x2e8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a52      	ldr	r2, [pc, #328]	@ (800127c <HAL_GPIO_Init+0x2ec>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	@ (8001280 <HAL_GPIO_Init+0x2f0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x202>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a48      	ldr	r2, [pc, #288]	@ (8001284 <HAL_GPIO_Init+0x2f4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x1fe>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a47      	ldr	r2, [pc, #284]	@ (8001288 <HAL_GPIO_Init+0x2f8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x1fa>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a46      	ldr	r2, [pc, #280]	@ (800128c <HAL_GPIO_Init+0x2fc>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x1f6>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a45      	ldr	r2, [pc, #276]	@ (8001290 <HAL_GPIO_Init+0x300>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x1f2>
 800117e:	2304      	movs	r3, #4
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001182:	2307      	movs	r3, #7
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x204>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x204>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	@ (800127c <HAL_GPIO_Init+0x2ec>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b38      	ldr	r3, [pc, #224]	@ (8001294 <HAL_GPIO_Init+0x304>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001294 <HAL_GPIO_Init+0x304>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_GPIO_Init+0x304>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a24      	ldr	r2, [pc, #144]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001206:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122a:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <HAL_GPIO_Init+0x304>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001254:	4a0f      	ldr	r2, [pc, #60]	@ (8001294 <HAL_GPIO_Init+0x304>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f aea2 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012dc:	887a      	ldrh	r2, [r7, #2]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	400b      	ands	r3, r1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f806 	bl	8001330 <HAL_GPIO_EXTI_Callback>
  }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4904      	ldr	r1, [pc, #16]	@ (8001368 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	@ (8001394 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001388:	bf30      	wfi
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	40007000 	.word	0x40007000
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e267      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ba:	4b88      	ldr	r3, [pc, #544]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d00c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c6:	4b85      	ldr	r3, [pc, #532]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b82      	ldr	r3, [pc, #520]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013de:	d10b      	bne.n	80013f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4b7e      	ldr	r3, [pc, #504]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d05b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x108>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d157      	bne.n	80014a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e242      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001400:	d106      	bne.n	8001410 <HAL_RCC_OscConfig+0x74>
 8001402:	4b76      	ldr	r3, [pc, #472]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x98>
 800141a:	4b70      	ldr	r3, [pc, #448]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a6f      	ldr	r2, [pc, #444]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b6d      	ldr	r3, [pc, #436]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6c      	ldr	r2, [pc, #432]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xb0>
 8001434:	4b69      	ldr	r3, [pc, #420]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a68      	ldr	r2, [pc, #416]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b66      	ldr	r3, [pc, #408]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a65      	ldr	r2, [pc, #404]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc5a 	bl	8000d0c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc56 	bl	8000d0c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	@ 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e207      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b5b      	ldr	r3, [pc, #364]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xc0>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc46 	bl	8000d0c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc42 	bl	8000d0c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	@ 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1f3      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b51      	ldr	r3, [pc, #324]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0xe8>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d063      	beq.n	800157a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1c7      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <HAL_RCC_OscConfig+0x244>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff fbfb 	bl	8000d0c <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff fbf7 	bl	8000d0c <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1a8      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <HAL_RCC_OscConfig+0x244>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fbda 	bl	8000d0c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fbd6 	bl	8000d0c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e187      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_RCC_OscConfig+0x248>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fbba 	bl	8000d0c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fbb6 	bl	8000d0c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e167      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_RCC_OscConfig+0x240>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x200>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <HAL_RCC_OscConfig+0x248>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fba3 	bl	8000d0c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb9f 	bl	8000d0c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e150      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b88      	ldr	r3, [pc, #544]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b81      	ldr	r3, [pc, #516]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7d      	ldr	r3, [pc, #500]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a7c      	ldr	r2, [pc, #496]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b7a      	ldr	r3, [pc, #488]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b77      	ldr	r3, [pc, #476]	@ (8001810 <HAL_RCC_OscConfig+0x474>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b74      	ldr	r3, [pc, #464]	@ (8001810 <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a73      	ldr	r2, [pc, #460]	@ (8001810 <HAL_RCC_OscConfig+0x474>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb5f 	bl	8000d0c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff fb5b 	bl	8000d0c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e10c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6a      	ldr	r3, [pc, #424]	@ (8001810 <HAL_RCC_OscConfig+0x474>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x2ea>
 8001678:	4b64      	ldr	r3, [pc, #400]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167c:	4a63      	ldr	r2, [pc, #396]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	@ 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x30c>
 800168e:	4b5f      	ldr	r3, [pc, #380]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001692:	4a5e      	ldr	r2, [pc, #376]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	@ 0x70
 800169a:	4b5c      	ldr	r3, [pc, #368]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x324>
 80016a8:	4b58      	ldr	r3, [pc, #352]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ac:	4a57      	ldr	r2, [pc, #348]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b4:	4b55      	ldr	r3, [pc, #340]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b8:	4a54      	ldr	r2, [pc, #336]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb20 	bl	8000d0c <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fb1c 	bl	8000d0c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0cb      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b49      	ldr	r3, [pc, #292]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x334>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f4:	f7ff fb0a 	bl	8000d0c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff fb06 	bl	8000d0c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0b5      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b39      	ldr	r3, [pc, #228]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	4a38      	ldr	r2, [pc, #224]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a1 	beq.w	800187c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b34      	ldr	r3, [pc, #208]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d05c      	beq.n	8001800 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d141      	bne.n	80017d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <HAL_RCC_OscConfig+0x478>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fada 	bl	8000d0c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fad6 	bl	8000d0c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e087      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	491b      	ldr	r1, [pc, #108]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x478>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff faaf 	bl	8000d0c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff faab 	bl	8000d0c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e05c      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x416>
 80017d0:	e054      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_RCC_OscConfig+0x478>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa98 	bl	8000d0c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fa94 	bl	8000d0c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e045      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_RCC_OscConfig+0x470>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x444>
 80017fe:	e03d      	b.n	800187c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e038      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
 8001814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001818:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <HAL_RCC_OscConfig+0x4ec>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d028      	beq.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d121      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11a      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800184e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	4293      	cmp	r3, r2
 8001852:	d111      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0cc      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b68      	ldr	r3, [pc, #416]	@ (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d90c      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b65      	ldr	r3, [pc, #404]	@ (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	@ (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a58      	ldr	r2, [pc, #352]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a52      	ldr	r2, [pc, #328]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d044      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d119      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d003      	beq.n	800194a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e067      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4934      	ldr	r1, [pc, #208]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff f9c6 	bl	8000d0c <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff f9c2 	bl	8000d0c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e04f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d20c      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	@ (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f926 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	08003578 	.word	0x08003578
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a5c:	b094      	sub	sp, #80	@ 0x50
 8001a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a70:	4b79      	ldr	r3, [pc, #484]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d00d      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x40>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	f200 80e1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d003      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a8a:	e0db      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a8c:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a90:	e0db      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a92:	4b73      	ldr	r3, [pc, #460]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a96:	e0d8      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a98:	4b6f      	ldr	r3, [pc, #444]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b6a      	ldr	r3, [pc, #424]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ab8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001aca:	4622      	mov	r2, r4
 8001acc:	462b      	mov	r3, r5
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0159      	lsls	r1, r3, #5
 8001ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001adc:	0150      	lsls	r0, r2, #5
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	1a51      	subs	r1, r2, r1
 8001ae6:	6139      	str	r1, [r7, #16]
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb63 0301 	sbc.w	r3, r3, r1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001afc:	4659      	mov	r1, fp
 8001afe:	018b      	lsls	r3, r1, #6
 8001b00:	4651      	mov	r1, sl
 8001b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b06:	4651      	mov	r1, sl
 8001b08:	018a      	lsls	r2, r1, #6
 8001b0a:	4651      	mov	r1, sl
 8001b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001b10:	4659      	mov	r1, fp
 8001b12:	eb63 0901 	sbc.w	r9, r3, r1
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b2a:	4690      	mov	r8, r2
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	eb18 0303 	adds.w	r3, r8, r3
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	462b      	mov	r3, r5
 8001b38:	eb49 0303 	adc.w	r3, r9, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	024b      	lsls	r3, r1, #9
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b54:	4621      	mov	r1, r4
 8001b56:	024a      	lsls	r2, r1, #9
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b68:	f7fe fb92 	bl	8000290 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b74:	e058      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b38      	ldr	r3, [pc, #224]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4611      	mov	r1, r2
 8001b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b86:	623b      	str	r3, [r7, #32]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b90:	4642      	mov	r2, r8
 8001b92:	464b      	mov	r3, r9
 8001b94:	f04f 0000 	mov.w	r0, #0
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	0159      	lsls	r1, r3, #5
 8001b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba2:	0150      	lsls	r0, r2, #5
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bae:	4649      	mov	r1, r9
 8001bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8001bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	00eb      	lsls	r3, r5, #3
 8001bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	464b      	mov	r3, r9
 8001bec:	eb45 0303 	adc.w	r3, r5, r3
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c12:	2200      	movs	r2, #0
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	61fa      	str	r2, [r7, #28]
 8001c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1c:	f7fe fb38 	bl	8000290 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3750      	adds	r7, #80	@ 0x50
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d038      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c8c:	4b68      	ldr	r3, [pc, #416]	@ (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c92:	f7ff f83b 	bl	8000d0c <HAL_GetTick>
 8001c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c9a:	f7ff f837 	bl	8000d0c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0bd      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cac:	4b61      	ldr	r3, [pc, #388]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	071b      	lsls	r3, r3, #28
 8001cca:	495a      	ldr	r1, [pc, #360]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001cd2:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f818 	bl	8000d0c <HAL_GetTick>
 8001cdc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ce0:	f7ff f814 	bl	8000d0c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e09a      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001cf2:	4b50      	ldr	r3, [pc, #320]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8083 	beq.w	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4b48      	ldr	r3, [pc, #288]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	4a47      	ldr	r2, [pc, #284]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1c:	4b45      	ldr	r3, [pc, #276]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d28:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a42      	ldr	r2, [pc, #264]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d34:	f7fe ffea 	bl	8000d0c <HAL_GetTick>
 8001d38:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7fe ffe6 	bl	8000d0c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e06c      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d5a:	4b36      	ldr	r3, [pc, #216]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d62:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02f      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d028      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d78:	4b2e      	ldr	r3, [pc, #184]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d80:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d82:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d88:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d114      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe ffb4 	bl	8000d0c <HAL_GetTick>
 8001da4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7fe ffb0 	bl	8000d0c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e034      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ee      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dd6:	d10d      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dec:	4911      	ldr	r1, [pc, #68]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
 8001df2:	e005      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001dfe:	6093      	str	r3, [r2, #8]
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	4909      	ldr	r1, [pc, #36]	@ (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7d1a      	ldrb	r2, [r3, #20]
 8001e22:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001e24:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	42470068 	.word	0x42470068
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	42470e40 	.word	0x42470e40
 8001e40:	424711e0 	.word	0x424711e0

08001e44 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e073      	b.n	8001f42 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7f5b      	ldrb	r3, [r3, #29]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fe14 	bl	8000a98 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d055      	beq.n	8001f30 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	22ca      	movs	r2, #202	@ 0xca
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2253      	movs	r2, #83	@ 0x53
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f87f 	bl	8001f98 <RTC_EnterInitMode>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d12c      	bne.n	8001efe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001eb6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68d2      	ldr	r2, [r2, #12]
 8001ede:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	041a      	lsls	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f886 	bl	8002006 <RTC_ExitInitMode>
 8001efa:	4603      	mov	r3, r0
 8001efc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d110      	bne.n	8001f26 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	22ff      	movs	r2, #255	@ 0xff
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f2e:	e001      	b.n	8001f34 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_RTC_WaitForSynchro+0x48>)
 8001f5e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f60:	f7fe fed4 	bl	8000d0c <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001f68:	f7fe fed0 	bl	8000d0c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f76:	d901      	bls.n	8001f7c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e007      	b.n	8001f8c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ee      	beq.n	8001f68 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	00013f5f 	.word	0x00013f5f

08001f98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d122      	bne.n	8001ffc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe fea1 	bl	8000d0c <HAL_GetTick>
 8001fca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001fcc:	e00c      	b.n	8001fe8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001fce:	f7fe fe9d 	bl	8000d0c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fdc:	d904      	bls.n	8001fe8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <RTC_EnterInitMode+0x64>
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d1e8      	bne.n	8001fce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002020:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff8b 	bl	8001f4c <HAL_RTC_WaitForSynchro>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d004      	beq.n	8002046 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2204      	movs	r2, #4
 8002040:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3350      	adds	r3, #80	@ 0x50
 8002066:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4413      	add	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	601a      	str	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3350      	adds	r3, #80	@ 0x50
 8002098:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <findslot>:
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <findslot+0x2c>)
 80020b6:	b510      	push	{r4, lr}
 80020b8:	4604      	mov	r4, r0
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	b118      	cbz	r0, 80020c6 <findslot+0x12>
 80020be:	6a03      	ldr	r3, [r0, #32]
 80020c0:	b90b      	cbnz	r3, 80020c6 <findslot+0x12>
 80020c2:	f000 fb19 	bl	80026f8 <__sinit>
 80020c6:	2c13      	cmp	r4, #19
 80020c8:	d807      	bhi.n	80020da <findslot+0x26>
 80020ca:	4806      	ldr	r0, [pc, #24]	@ (80020e4 <findslot+0x30>)
 80020cc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80020d0:	3201      	adds	r2, #1
 80020d2:	d002      	beq.n	80020da <findslot+0x26>
 80020d4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	2000      	movs	r0, #0
 80020dc:	e7fc      	b.n	80020d8 <findslot+0x24>
 80020de:	bf00      	nop
 80020e0:	20000020 	.word	0x20000020
 80020e4:	200000c0 	.word	0x200000c0

080020e8 <error>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	4604      	mov	r4, r0
 80020ec:	f000 fcd0 	bl	8002a90 <__errno>
 80020f0:	2613      	movs	r6, #19
 80020f2:	4605      	mov	r5, r0
 80020f4:	2700      	movs	r7, #0
 80020f6:	4630      	mov	r0, r6
 80020f8:	4639      	mov	r1, r7
 80020fa:	beab      	bkpt	0x00ab
 80020fc:	4606      	mov	r6, r0
 80020fe:	602e      	str	r6, [r5, #0]
 8002100:	4620      	mov	r0, r4
 8002102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002104 <checkerror>:
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d101      	bne.n	800210c <checkerror+0x8>
 8002108:	f7ff bfee 	b.w	80020e8 <error>
 800210c:	4770      	bx	lr

0800210e <_swiread>:
 800210e:	b530      	push	{r4, r5, lr}
 8002110:	b085      	sub	sp, #20
 8002112:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002116:	9203      	str	r2, [sp, #12]
 8002118:	2406      	movs	r4, #6
 800211a:	ad01      	add	r5, sp, #4
 800211c:	4620      	mov	r0, r4
 800211e:	4629      	mov	r1, r5
 8002120:	beab      	bkpt	0x00ab
 8002122:	4604      	mov	r4, r0
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ffed 	bl	8002104 <checkerror>
 800212a:	b005      	add	sp, #20
 800212c:	bd30      	pop	{r4, r5, pc}

0800212e <_read>:
 800212e:	b570      	push	{r4, r5, r6, lr}
 8002130:	460e      	mov	r6, r1
 8002132:	4614      	mov	r4, r2
 8002134:	f7ff ffbe 	bl	80020b4 <findslot>
 8002138:	4605      	mov	r5, r0
 800213a:	b930      	cbnz	r0, 800214a <_read+0x1c>
 800213c:	f000 fca8 	bl	8002a90 <__errno>
 8002140:	2309      	movs	r3, #9
 8002142:	6003      	str	r3, [r0, #0]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	6800      	ldr	r0, [r0, #0]
 800214c:	4622      	mov	r2, r4
 800214e:	4631      	mov	r1, r6
 8002150:	f7ff ffdd 	bl	800210e <_swiread>
 8002154:	1c43      	adds	r3, r0, #1
 8002156:	d0f5      	beq.n	8002144 <_read+0x16>
 8002158:	686b      	ldr	r3, [r5, #4]
 800215a:	1a20      	subs	r0, r4, r0
 800215c:	4403      	add	r3, r0
 800215e:	606b      	str	r3, [r5, #4]
 8002160:	e7f2      	b.n	8002148 <_read+0x1a>

08002162 <_swilseek>:
 8002162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002164:	460c      	mov	r4, r1
 8002166:	4616      	mov	r6, r2
 8002168:	f7ff ffa4 	bl	80020b4 <findslot>
 800216c:	4605      	mov	r5, r0
 800216e:	b940      	cbnz	r0, 8002182 <_swilseek+0x20>
 8002170:	f000 fc8e 	bl	8002a90 <__errno>
 8002174:	2309      	movs	r3, #9
 8002176:	6003      	str	r3, [r0, #0]
 8002178:	f04f 34ff 	mov.w	r4, #4294967295
 800217c:	4620      	mov	r0, r4
 800217e:	b003      	add	sp, #12
 8002180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002182:	2e02      	cmp	r6, #2
 8002184:	d903      	bls.n	800218e <_swilseek+0x2c>
 8002186:	f000 fc83 	bl	8002a90 <__errno>
 800218a:	2316      	movs	r3, #22
 800218c:	e7f3      	b.n	8002176 <_swilseek+0x14>
 800218e:	2e01      	cmp	r6, #1
 8002190:	d112      	bne.n	80021b8 <_swilseek+0x56>
 8002192:	6843      	ldr	r3, [r0, #4]
 8002194:	18e4      	adds	r4, r4, r3
 8002196:	d4f6      	bmi.n	8002186 <_swilseek+0x24>
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	260a      	movs	r6, #10
 800219c:	e9cd 3400 	strd	r3, r4, [sp]
 80021a0:	466f      	mov	r7, sp
 80021a2:	4630      	mov	r0, r6
 80021a4:	4639      	mov	r1, r7
 80021a6:	beab      	bkpt	0x00ab
 80021a8:	4606      	mov	r6, r0
 80021aa:	4630      	mov	r0, r6
 80021ac:	f7ff ffaa 	bl	8002104 <checkerror>
 80021b0:	2800      	cmp	r0, #0
 80021b2:	dbe1      	blt.n	8002178 <_swilseek+0x16>
 80021b4:	606c      	str	r4, [r5, #4]
 80021b6:	e7e1      	b.n	800217c <_swilseek+0x1a>
 80021b8:	2e02      	cmp	r6, #2
 80021ba:	6803      	ldr	r3, [r0, #0]
 80021bc:	d1ec      	bne.n	8002198 <_swilseek+0x36>
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	260c      	movs	r6, #12
 80021c2:	466f      	mov	r7, sp
 80021c4:	4630      	mov	r0, r6
 80021c6:	4639      	mov	r1, r7
 80021c8:	beab      	bkpt	0x00ab
 80021ca:	4606      	mov	r6, r0
 80021cc:	4630      	mov	r0, r6
 80021ce:	f7ff ff99 	bl	8002104 <checkerror>
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	d0d0      	beq.n	8002178 <_swilseek+0x16>
 80021d6:	4404      	add	r4, r0
 80021d8:	e7de      	b.n	8002198 <_swilseek+0x36>

080021da <_lseek>:
 80021da:	f7ff bfc2 	b.w	8002162 <_swilseek>

080021de <_swiwrite>:
 80021de:	b530      	push	{r4, r5, lr}
 80021e0:	b085      	sub	sp, #20
 80021e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80021e6:	9203      	str	r2, [sp, #12]
 80021e8:	2405      	movs	r4, #5
 80021ea:	ad01      	add	r5, sp, #4
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	beab      	bkpt	0x00ab
 80021f2:	4604      	mov	r4, r0
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff ff85 	bl	8002104 <checkerror>
 80021fa:	b005      	add	sp, #20
 80021fc:	bd30      	pop	{r4, r5, pc}

080021fe <_write>:
 80021fe:	b570      	push	{r4, r5, r6, lr}
 8002200:	460e      	mov	r6, r1
 8002202:	4615      	mov	r5, r2
 8002204:	f7ff ff56 	bl	80020b4 <findslot>
 8002208:	4604      	mov	r4, r0
 800220a:	b930      	cbnz	r0, 800221a <_write+0x1c>
 800220c:	f000 fc40 	bl	8002a90 <__errno>
 8002210:	2309      	movs	r3, #9
 8002212:	6003      	str	r3, [r0, #0]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	6800      	ldr	r0, [r0, #0]
 800221c:	462a      	mov	r2, r5
 800221e:	4631      	mov	r1, r6
 8002220:	f7ff ffdd 	bl	80021de <_swiwrite>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	dbf5      	blt.n	8002214 <_write+0x16>
 8002228:	6862      	ldr	r2, [r4, #4]
 800222a:	1ae8      	subs	r0, r5, r3
 800222c:	4402      	add	r2, r0
 800222e:	42ab      	cmp	r3, r5
 8002230:	6062      	str	r2, [r4, #4]
 8002232:	d1f1      	bne.n	8002218 <_write+0x1a>
 8002234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff bf55 	b.w	80020e8 <error>

0800223e <_swiclose>:
 800223e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002240:	2402      	movs	r4, #2
 8002242:	9001      	str	r0, [sp, #4]
 8002244:	ad01      	add	r5, sp, #4
 8002246:	4620      	mov	r0, r4
 8002248:	4629      	mov	r1, r5
 800224a:	beab      	bkpt	0x00ab
 800224c:	4604      	mov	r4, r0
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff ff58 	bl	8002104 <checkerror>
 8002254:	b003      	add	sp, #12
 8002256:	bd30      	pop	{r4, r5, pc}

08002258 <_close>:
 8002258:	b538      	push	{r3, r4, r5, lr}
 800225a:	4605      	mov	r5, r0
 800225c:	f7ff ff2a 	bl	80020b4 <findslot>
 8002260:	4604      	mov	r4, r0
 8002262:	b930      	cbnz	r0, 8002272 <_close+0x1a>
 8002264:	f000 fc14 	bl	8002a90 <__errno>
 8002268:	2309      	movs	r3, #9
 800226a:	6003      	str	r3, [r0, #0]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	bd38      	pop	{r3, r4, r5, pc}
 8002272:	3d01      	subs	r5, #1
 8002274:	2d01      	cmp	r5, #1
 8002276:	d809      	bhi.n	800228c <_close+0x34>
 8002278:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <_close+0x40>)
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	429a      	cmp	r2, r3
 8002280:	d104      	bne.n	800228c <_close+0x34>
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	2000      	movs	r0, #0
 800228a:	e7f1      	b.n	8002270 <_close+0x18>
 800228c:	6820      	ldr	r0, [r4, #0]
 800228e:	f7ff ffd6 	bl	800223e <_swiclose>
 8002292:	2800      	cmp	r0, #0
 8002294:	d0f5      	beq.n	8002282 <_close+0x2a>
 8002296:	e7eb      	b.n	8002270 <_close+0x18>
 8002298:	200000c0 	.word	0x200000c0

0800229c <_swistat>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	460c      	mov	r4, r1
 80022a0:	f7ff ff08 	bl	80020b4 <findslot>
 80022a4:	4605      	mov	r5, r0
 80022a6:	b930      	cbnz	r0, 80022b6 <_swistat+0x1a>
 80022a8:	f000 fbf2 	bl	8002a90 <__errno>
 80022ac:	2309      	movs	r3, #9
 80022ae:	6003      	str	r3, [r0, #0]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
 80022b6:	6863      	ldr	r3, [r4, #4]
 80022b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022bc:	6063      	str	r3, [r4, #4]
 80022be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022c2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80022c4:	260c      	movs	r6, #12
 80022c6:	4630      	mov	r0, r6
 80022c8:	4629      	mov	r1, r5
 80022ca:	beab      	bkpt	0x00ab
 80022cc:	4605      	mov	r5, r0
 80022ce:	4628      	mov	r0, r5
 80022d0:	f7ff ff18 	bl	8002104 <checkerror>
 80022d4:	1c43      	adds	r3, r0, #1
 80022d6:	d0eb      	beq.n	80022b0 <_swistat+0x14>
 80022d8:	6120      	str	r0, [r4, #16]
 80022da:	2000      	movs	r0, #0
 80022dc:	e7ea      	b.n	80022b4 <_swistat+0x18>

080022de <_fstat>:
 80022de:	460b      	mov	r3, r1
 80022e0:	b510      	push	{r4, lr}
 80022e2:	2100      	movs	r1, #0
 80022e4:	4604      	mov	r4, r0
 80022e6:	2258      	movs	r2, #88	@ 0x58
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fb83 	bl	80029f4 <memset>
 80022ee:	4601      	mov	r1, r0
 80022f0:	4620      	mov	r0, r4
 80022f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f6:	f7ff bfd1 	b.w	800229c <_swistat>

080022fa <_stat>:
 80022fa:	b538      	push	{r3, r4, r5, lr}
 80022fc:	460d      	mov	r5, r1
 80022fe:	4604      	mov	r4, r0
 8002300:	2258      	movs	r2, #88	@ 0x58
 8002302:	2100      	movs	r1, #0
 8002304:	4628      	mov	r0, r5
 8002306:	f000 fb75 	bl	80029f4 <memset>
 800230a:	4620      	mov	r0, r4
 800230c:	2100      	movs	r1, #0
 800230e:	f000 f811 	bl	8002334 <_swiopen>
 8002312:	1c43      	adds	r3, r0, #1
 8002314:	4604      	mov	r4, r0
 8002316:	d00b      	beq.n	8002330 <_stat+0x36>
 8002318:	686b      	ldr	r3, [r5, #4]
 800231a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800231e:	606b      	str	r3, [r5, #4]
 8002320:	4629      	mov	r1, r5
 8002322:	f7ff ffbb 	bl	800229c <_swistat>
 8002326:	4605      	mov	r5, r0
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ff95 	bl	8002258 <_close>
 800232e:	462c      	mov	r4, r5
 8002330:	4620      	mov	r0, r4
 8002332:	bd38      	pop	{r3, r4, r5, pc}

08002334 <_swiopen>:
 8002334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002338:	4f29      	ldr	r7, [pc, #164]	@ (80023e0 <_swiopen+0xac>)
 800233a:	b096      	sub	sp, #88	@ 0x58
 800233c:	4682      	mov	sl, r0
 800233e:	460e      	mov	r6, r1
 8002340:	2400      	movs	r4, #0
 8002342:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002346:	3301      	adds	r3, #1
 8002348:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800234c:	d00c      	beq.n	8002368 <_swiopen+0x34>
 800234e:	3401      	adds	r4, #1
 8002350:	2c14      	cmp	r4, #20
 8002352:	d1f6      	bne.n	8002342 <_swiopen+0xe>
 8002354:	f000 fb9c 	bl	8002a90 <__errno>
 8002358:	2318      	movs	r3, #24
 800235a:	6003      	str	r3, [r0, #0]
 800235c:	f04f 34ff 	mov.w	r4, #4294967295
 8002360:	4620      	mov	r0, r4
 8002362:	b016      	add	sp, #88	@ 0x58
 8002364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002368:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800236c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002370:	46e9      	mov	r9, sp
 8002372:	d109      	bne.n	8002388 <_swiopen+0x54>
 8002374:	4649      	mov	r1, r9
 8002376:	4650      	mov	r0, sl
 8002378:	f7ff ffbf 	bl	80022fa <_stat>
 800237c:	3001      	adds	r0, #1
 800237e:	d003      	beq.n	8002388 <_swiopen+0x54>
 8002380:	f000 fb86 	bl	8002a90 <__errno>
 8002384:	2311      	movs	r3, #17
 8002386:	e7e8      	b.n	800235a <_swiopen+0x26>
 8002388:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800238c:	f240 6301 	movw	r3, #1537	@ 0x601
 8002390:	07b2      	lsls	r2, r6, #30
 8002392:	bf48      	it	mi
 8002394:	f045 0502 	orrmi.w	r5, r5, #2
 8002398:	421e      	tst	r6, r3
 800239a:	bf18      	it	ne
 800239c:	f045 0504 	orrne.w	r5, r5, #4
 80023a0:	0733      	lsls	r3, r6, #28
 80023a2:	bf48      	it	mi
 80023a4:	f025 0504 	bicmi.w	r5, r5, #4
 80023a8:	4650      	mov	r0, sl
 80023aa:	bf48      	it	mi
 80023ac:	f045 0508 	orrmi.w	r5, r5, #8
 80023b0:	f8cd a000 	str.w	sl, [sp]
 80023b4:	f7fd ff14 	bl	80001e0 <strlen>
 80023b8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80023bc:	2501      	movs	r5, #1
 80023be:	4628      	mov	r0, r5
 80023c0:	4649      	mov	r1, r9
 80023c2:	beab      	bkpt	0x00ab
 80023c4:	4605      	mov	r5, r0
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	db05      	blt.n	80023d6 <_swiopen+0xa2>
 80023ca:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80023ce:	4447      	add	r7, r8
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	e7c4      	b.n	8002360 <_swiopen+0x2c>
 80023d6:	4628      	mov	r0, r5
 80023d8:	f7ff fe86 	bl	80020e8 <error>
 80023dc:	4604      	mov	r4, r0
 80023de:	e7bf      	b.n	8002360 <_swiopen+0x2c>
 80023e0:	200000c0 	.word	0x200000c0

080023e4 <_get_semihosting_exts>:
 80023e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80023e8:	4606      	mov	r6, r0
 80023ea:	460f      	mov	r7, r1
 80023ec:	4829      	ldr	r0, [pc, #164]	@ (8002494 <_get_semihosting_exts+0xb0>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	4615      	mov	r5, r2
 80023f2:	f7ff ff9f 	bl	8002334 <_swiopen>
 80023f6:	462a      	mov	r2, r5
 80023f8:	4604      	mov	r4, r0
 80023fa:	2100      	movs	r1, #0
 80023fc:	4630      	mov	r0, r6
 80023fe:	f000 faf9 	bl	80029f4 <memset>
 8002402:	1c63      	adds	r3, r4, #1
 8002404:	d014      	beq.n	8002430 <_get_semihosting_exts+0x4c>
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff fe54 	bl	80020b4 <findslot>
 800240c:	f04f 080c 	mov.w	r8, #12
 8002410:	4681      	mov	r9, r0
 8002412:	4640      	mov	r0, r8
 8002414:	4649      	mov	r1, r9
 8002416:	beab      	bkpt	0x00ab
 8002418:	4680      	mov	r8, r0
 800241a:	4640      	mov	r0, r8
 800241c:	f7ff fe72 	bl	8002104 <checkerror>
 8002420:	2803      	cmp	r0, #3
 8002422:	dd02      	ble.n	800242a <_get_semihosting_exts+0x46>
 8002424:	1ec3      	subs	r3, r0, #3
 8002426:	42ab      	cmp	r3, r5
 8002428:	dc07      	bgt.n	800243a <_get_semihosting_exts+0x56>
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff ff14 	bl	8002258 <_close>
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	b003      	add	sp, #12
 8002436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800243a:	2204      	movs	r2, #4
 800243c:	eb0d 0102 	add.w	r1, sp, r2
 8002440:	4620      	mov	r0, r4
 8002442:	f7ff fe74 	bl	800212e <_read>
 8002446:	2803      	cmp	r0, #3
 8002448:	ddef      	ble.n	800242a <_get_semihosting_exts+0x46>
 800244a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800244e:	2b53      	cmp	r3, #83	@ 0x53
 8002450:	d1eb      	bne.n	800242a <_get_semihosting_exts+0x46>
 8002452:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002456:	2b48      	cmp	r3, #72	@ 0x48
 8002458:	d1e7      	bne.n	800242a <_get_semihosting_exts+0x46>
 800245a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800245e:	2b46      	cmp	r3, #70	@ 0x46
 8002460:	d1e3      	bne.n	800242a <_get_semihosting_exts+0x46>
 8002462:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002466:	2b42      	cmp	r3, #66	@ 0x42
 8002468:	d1df      	bne.n	800242a <_get_semihosting_exts+0x46>
 800246a:	2201      	movs	r2, #1
 800246c:	4639      	mov	r1, r7
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff fe77 	bl	8002162 <_swilseek>
 8002474:	2800      	cmp	r0, #0
 8002476:	dbd8      	blt.n	800242a <_get_semihosting_exts+0x46>
 8002478:	462a      	mov	r2, r5
 800247a:	4631      	mov	r1, r6
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff fe56 	bl	800212e <_read>
 8002482:	4605      	mov	r5, r0
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff fee7 	bl	8002258 <_close>
 800248a:	4628      	mov	r0, r5
 800248c:	f7ff fe3a 	bl	8002104 <checkerror>
 8002490:	e7d0      	b.n	8002434 <_get_semihosting_exts+0x50>
 8002492:	bf00      	nop
 8002494:	08003588 	.word	0x08003588

08002498 <initialise_semihosting_exts>:
 8002498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800249a:	4d0a      	ldr	r5, [pc, #40]	@ (80024c4 <initialise_semihosting_exts+0x2c>)
 800249c:	4c0a      	ldr	r4, [pc, #40]	@ (80024c8 <initialise_semihosting_exts+0x30>)
 800249e:	2100      	movs	r1, #0
 80024a0:	2201      	movs	r2, #1
 80024a2:	a801      	add	r0, sp, #4
 80024a4:	6029      	str	r1, [r5, #0]
 80024a6:	6022      	str	r2, [r4, #0]
 80024a8:	f7ff ff9c 	bl	80023e4 <_get_semihosting_exts>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	dd07      	ble.n	80024c0 <initialise_semihosting_exts+0x28>
 80024b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024b4:	f003 0201 	and.w	r2, r3, #1
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	602a      	str	r2, [r5, #0]
 80024be:	6023      	str	r3, [r4, #0]
 80024c0:	b003      	add	sp, #12
 80024c2:	bd30      	pop	{r4, r5, pc}
 80024c4:	20000010 	.word	0x20000010
 80024c8:	2000000c 	.word	0x2000000c

080024cc <_has_ext_stdout_stderr>:
 80024cc:	b510      	push	{r4, lr}
 80024ce:	4c04      	ldr	r4, [pc, #16]	@ (80024e0 <_has_ext_stdout_stderr+0x14>)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da01      	bge.n	80024da <_has_ext_stdout_stderr+0xe>
 80024d6:	f7ff ffdf 	bl	8002498 <initialise_semihosting_exts>
 80024da:	6820      	ldr	r0, [r4, #0]
 80024dc:	bd10      	pop	{r4, pc}
 80024de:	bf00      	nop
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <initialise_monitor_handles>:
 80024e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e8:	b085      	sub	sp, #20
 80024ea:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800259c <initialise_monitor_handles+0xb8>
 80024ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80024f2:	2303      	movs	r3, #3
 80024f4:	2400      	movs	r4, #0
 80024f6:	9303      	str	r3, [sp, #12]
 80024f8:	af01      	add	r7, sp, #4
 80024fa:	9402      	str	r4, [sp, #8]
 80024fc:	2501      	movs	r5, #1
 80024fe:	4628      	mov	r0, r5
 8002500:	4639      	mov	r1, r7
 8002502:	beab      	bkpt	0x00ab
 8002504:	4605      	mov	r5, r0
 8002506:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80025a0 <initialise_monitor_handles+0xbc>
 800250a:	4623      	mov	r3, r4
 800250c:	4c20      	ldr	r4, [pc, #128]	@ (8002590 <initialise_monitor_handles+0xac>)
 800250e:	f8c8 5000 	str.w	r5, [r8]
 8002512:	f04f 32ff 	mov.w	r2, #4294967295
 8002516:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800251a:	3301      	adds	r3, #1
 800251c:	2b14      	cmp	r3, #20
 800251e:	d1fa      	bne.n	8002516 <initialise_monitor_handles+0x32>
 8002520:	f7ff ffd4 	bl	80024cc <_has_ext_stdout_stderr>
 8002524:	4d1b      	ldr	r5, [pc, #108]	@ (8002594 <initialise_monitor_handles+0xb0>)
 8002526:	b1d0      	cbz	r0, 800255e <initialise_monitor_handles+0x7a>
 8002528:	f04f 0a03 	mov.w	sl, #3
 800252c:	2304      	movs	r3, #4
 800252e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002532:	2601      	movs	r6, #1
 8002534:	f8cd a00c 	str.w	sl, [sp, #12]
 8002538:	9302      	str	r3, [sp, #8]
 800253a:	4630      	mov	r0, r6
 800253c:	4639      	mov	r1, r7
 800253e:	beab      	bkpt	0x00ab
 8002540:	4683      	mov	fp, r0
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <initialise_monitor_handles+0xb4>)
 8002544:	f8cd 9004 	str.w	r9, [sp, #4]
 8002548:	f8c3 b000 	str.w	fp, [r3]
 800254c:	2308      	movs	r3, #8
 800254e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002552:	9302      	str	r3, [sp, #8]
 8002554:	4630      	mov	r0, r6
 8002556:	4639      	mov	r1, r7
 8002558:	beab      	bkpt	0x00ab
 800255a:	4606      	mov	r6, r0
 800255c:	602e      	str	r6, [r5, #0]
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	bf02      	ittt	eq
 8002564:	4b0c      	ldreq	r3, [pc, #48]	@ (8002598 <initialise_monitor_handles+0xb4>)
 8002566:	681b      	ldreq	r3, [r3, #0]
 8002568:	602b      	streq	r3, [r5, #0]
 800256a:	2600      	movs	r6, #0
 800256c:	f8d8 3000 	ldr.w	r3, [r8]
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	6066      	str	r6, [r4, #4]
 8002574:	f7ff ffaa 	bl	80024cc <_has_ext_stdout_stderr>
 8002578:	b130      	cbz	r0, 8002588 <initialise_monitor_handles+0xa4>
 800257a:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <initialise_monitor_handles+0xb4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002582:	682b      	ldr	r3, [r5, #0]
 8002584:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002588:	b005      	add	sp, #20
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop
 8002590:	200000c0 	.word	0x200000c0
 8002594:	200000b4 	.word	0x200000b4
 8002598:	200000b8 	.word	0x200000b8
 800259c:	0800359e 	.word	0x0800359e
 80025a0:	200000bc 	.word	0x200000bc

080025a4 <_isatty>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	f7ff fd85 	bl	80020b4 <findslot>
 80025aa:	2409      	movs	r4, #9
 80025ac:	4605      	mov	r5, r0
 80025ae:	b920      	cbnz	r0, 80025ba <_isatty+0x16>
 80025b0:	f000 fa6e 	bl	8002a90 <__errno>
 80025b4:	6004      	str	r4, [r0, #0]
 80025b6:	2000      	movs	r0, #0
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
 80025ba:	4620      	mov	r0, r4
 80025bc:	4629      	mov	r1, r5
 80025be:	beab      	bkpt	0x00ab
 80025c0:	4604      	mov	r4, r0
 80025c2:	2c01      	cmp	r4, #1
 80025c4:	4620      	mov	r0, r4
 80025c6:	d0f7      	beq.n	80025b8 <_isatty+0x14>
 80025c8:	f000 fa62 	bl	8002a90 <__errno>
 80025cc:	2513      	movs	r5, #19
 80025ce:	4604      	mov	r4, r0
 80025d0:	2600      	movs	r6, #0
 80025d2:	4628      	mov	r0, r5
 80025d4:	4631      	mov	r1, r6
 80025d6:	beab      	bkpt	0x00ab
 80025d8:	4605      	mov	r5, r0
 80025da:	6025      	str	r5, [r4, #0]
 80025dc:	e7eb      	b.n	80025b6 <_isatty+0x12>
	...

080025e0 <std>:
 80025e0:	2300      	movs	r3, #0
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
 80025e6:	e9c0 3300 	strd	r3, r3, [r0]
 80025ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ee:	6083      	str	r3, [r0, #8]
 80025f0:	8181      	strh	r1, [r0, #12]
 80025f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80025f4:	81c2      	strh	r2, [r0, #14]
 80025f6:	6183      	str	r3, [r0, #24]
 80025f8:	4619      	mov	r1, r3
 80025fa:	2208      	movs	r2, #8
 80025fc:	305c      	adds	r0, #92	@ 0x5c
 80025fe:	f000 f9f9 	bl	80029f4 <memset>
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <std+0x58>)
 8002604:	6263      	str	r3, [r4, #36]	@ 0x24
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <std+0x5c>)
 8002608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <std+0x60>)
 800260c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <std+0x64>)
 8002610:	6323      	str	r3, [r4, #48]	@ 0x30
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <std+0x68>)
 8002614:	6224      	str	r4, [r4, #32]
 8002616:	429c      	cmp	r4, r3
 8002618:	d006      	beq.n	8002628 <std+0x48>
 800261a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800261e:	4294      	cmp	r4, r2
 8002620:	d002      	beq.n	8002628 <std+0x48>
 8002622:	33d0      	adds	r3, #208	@ 0xd0
 8002624:	429c      	cmp	r4, r3
 8002626:	d105      	bne.n	8002634 <std+0x54>
 8002628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002630:	f000 ba58 	b.w	8002ae4 <__retarget_lock_init_recursive>
 8002634:	bd10      	pop	{r4, pc}
 8002636:	bf00      	nop
 8002638:	08002845 	.word	0x08002845
 800263c:	08002867 	.word	0x08002867
 8002640:	0800289f 	.word	0x0800289f
 8002644:	080028c3 	.word	0x080028c3
 8002648:	20000160 	.word	0x20000160

0800264c <stdio_exit_handler>:
 800264c:	4a02      	ldr	r2, [pc, #8]	@ (8002658 <stdio_exit_handler+0xc>)
 800264e:	4903      	ldr	r1, [pc, #12]	@ (800265c <stdio_exit_handler+0x10>)
 8002650:	4803      	ldr	r0, [pc, #12]	@ (8002660 <stdio_exit_handler+0x14>)
 8002652:	f000 b869 	b.w	8002728 <_fwalk_sglue>
 8002656:	bf00      	nop
 8002658:	20000014 	.word	0x20000014
 800265c:	08003385 	.word	0x08003385
 8002660:	20000024 	.word	0x20000024

08002664 <cleanup_stdio>:
 8002664:	6841      	ldr	r1, [r0, #4]
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <cleanup_stdio+0x34>)
 8002668:	4299      	cmp	r1, r3
 800266a:	b510      	push	{r4, lr}
 800266c:	4604      	mov	r4, r0
 800266e:	d001      	beq.n	8002674 <cleanup_stdio+0x10>
 8002670:	f000 fe88 	bl	8003384 <_fflush_r>
 8002674:	68a1      	ldr	r1, [r4, #8]
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <cleanup_stdio+0x38>)
 8002678:	4299      	cmp	r1, r3
 800267a:	d002      	beq.n	8002682 <cleanup_stdio+0x1e>
 800267c:	4620      	mov	r0, r4
 800267e:	f000 fe81 	bl	8003384 <_fflush_r>
 8002682:	68e1      	ldr	r1, [r4, #12]
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <cleanup_stdio+0x3c>)
 8002686:	4299      	cmp	r1, r3
 8002688:	d004      	beq.n	8002694 <cleanup_stdio+0x30>
 800268a:	4620      	mov	r0, r4
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002690:	f000 be78 	b.w	8003384 <_fflush_r>
 8002694:	bd10      	pop	{r4, pc}
 8002696:	bf00      	nop
 8002698:	20000160 	.word	0x20000160
 800269c:	200001c8 	.word	0x200001c8
 80026a0:	20000230 	.word	0x20000230

080026a4 <global_stdio_init.part.0>:
 80026a4:	b510      	push	{r4, lr}
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <global_stdio_init.part.0+0x30>)
 80026a8:	4c0b      	ldr	r4, [pc, #44]	@ (80026d8 <global_stdio_init.part.0+0x34>)
 80026aa:	4a0c      	ldr	r2, [pc, #48]	@ (80026dc <global_stdio_init.part.0+0x38>)
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	4620      	mov	r0, r4
 80026b0:	2200      	movs	r2, #0
 80026b2:	2104      	movs	r1, #4
 80026b4:	f7ff ff94 	bl	80025e0 <std>
 80026b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80026bc:	2201      	movs	r2, #1
 80026be:	2109      	movs	r1, #9
 80026c0:	f7ff ff8e 	bl	80025e0 <std>
 80026c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026c8:	2202      	movs	r2, #2
 80026ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ce:	2112      	movs	r1, #18
 80026d0:	f7ff bf86 	b.w	80025e0 <std>
 80026d4:	20000298 	.word	0x20000298
 80026d8:	20000160 	.word	0x20000160
 80026dc:	0800264d 	.word	0x0800264d

080026e0 <__sfp_lock_acquire>:
 80026e0:	4801      	ldr	r0, [pc, #4]	@ (80026e8 <__sfp_lock_acquire+0x8>)
 80026e2:	f000 ba00 	b.w	8002ae6 <__retarget_lock_acquire_recursive>
 80026e6:	bf00      	nop
 80026e8:	200002a1 	.word	0x200002a1

080026ec <__sfp_lock_release>:
 80026ec:	4801      	ldr	r0, [pc, #4]	@ (80026f4 <__sfp_lock_release+0x8>)
 80026ee:	f000 b9fb 	b.w	8002ae8 <__retarget_lock_release_recursive>
 80026f2:	bf00      	nop
 80026f4:	200002a1 	.word	0x200002a1

080026f8 <__sinit>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	f7ff fff0 	bl	80026e0 <__sfp_lock_acquire>
 8002700:	6a23      	ldr	r3, [r4, #32]
 8002702:	b11b      	cbz	r3, 800270c <__sinit+0x14>
 8002704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002708:	f7ff bff0 	b.w	80026ec <__sfp_lock_release>
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <__sinit+0x28>)
 800270e:	6223      	str	r3, [r4, #32]
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <__sinit+0x2c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f5      	bne.n	8002704 <__sinit+0xc>
 8002718:	f7ff ffc4 	bl	80026a4 <global_stdio_init.part.0>
 800271c:	e7f2      	b.n	8002704 <__sinit+0xc>
 800271e:	bf00      	nop
 8002720:	08002665 	.word	0x08002665
 8002724:	20000298 	.word	0x20000298

08002728 <_fwalk_sglue>:
 8002728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800272c:	4607      	mov	r7, r0
 800272e:	4688      	mov	r8, r1
 8002730:	4614      	mov	r4, r2
 8002732:	2600      	movs	r6, #0
 8002734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002738:	f1b9 0901 	subs.w	r9, r9, #1
 800273c:	d505      	bpl.n	800274a <_fwalk_sglue+0x22>
 800273e:	6824      	ldr	r4, [r4, #0]
 8002740:	2c00      	cmp	r4, #0
 8002742:	d1f7      	bne.n	8002734 <_fwalk_sglue+0xc>
 8002744:	4630      	mov	r0, r6
 8002746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274a:	89ab      	ldrh	r3, [r5, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d907      	bls.n	8002760 <_fwalk_sglue+0x38>
 8002750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002754:	3301      	adds	r3, #1
 8002756:	d003      	beq.n	8002760 <_fwalk_sglue+0x38>
 8002758:	4629      	mov	r1, r5
 800275a:	4638      	mov	r0, r7
 800275c:	47c0      	blx	r8
 800275e:	4306      	orrs	r6, r0
 8002760:	3568      	adds	r5, #104	@ 0x68
 8002762:	e7e9      	b.n	8002738 <_fwalk_sglue+0x10>

08002764 <iprintf>:
 8002764:	b40f      	push	{r0, r1, r2, r3}
 8002766:	b507      	push	{r0, r1, r2, lr}
 8002768:	4906      	ldr	r1, [pc, #24]	@ (8002784 <iprintf+0x20>)
 800276a:	ab04      	add	r3, sp, #16
 800276c:	6808      	ldr	r0, [r1, #0]
 800276e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002772:	6881      	ldr	r1, [r0, #8]
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	f000 fadb 	bl	8002d30 <_vfiprintf_r>
 800277a:	b003      	add	sp, #12
 800277c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002780:	b004      	add	sp, #16
 8002782:	4770      	bx	lr
 8002784:	20000020 	.word	0x20000020

08002788 <_puts_r>:
 8002788:	6a03      	ldr	r3, [r0, #32]
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	6884      	ldr	r4, [r0, #8]
 800278e:	4605      	mov	r5, r0
 8002790:	460e      	mov	r6, r1
 8002792:	b90b      	cbnz	r3, 8002798 <_puts_r+0x10>
 8002794:	f7ff ffb0 	bl	80026f8 <__sinit>
 8002798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800279a:	07db      	lsls	r3, r3, #31
 800279c:	d405      	bmi.n	80027aa <_puts_r+0x22>
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	0598      	lsls	r0, r3, #22
 80027a2:	d402      	bmi.n	80027aa <_puts_r+0x22>
 80027a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027a6:	f000 f99e 	bl	8002ae6 <__retarget_lock_acquire_recursive>
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	0719      	lsls	r1, r3, #28
 80027ae:	d502      	bpl.n	80027b6 <_puts_r+0x2e>
 80027b0:	6923      	ldr	r3, [r4, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d135      	bne.n	8002822 <_puts_r+0x9a>
 80027b6:	4621      	mov	r1, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	f000 f8c5 	bl	8002948 <__swsetup_r>
 80027be:	b380      	cbz	r0, 8002822 <_puts_r+0x9a>
 80027c0:	f04f 35ff 	mov.w	r5, #4294967295
 80027c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027c6:	07da      	lsls	r2, r3, #31
 80027c8:	d405      	bmi.n	80027d6 <_puts_r+0x4e>
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	059b      	lsls	r3, r3, #22
 80027ce:	d402      	bmi.n	80027d6 <_puts_r+0x4e>
 80027d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027d2:	f000 f989 	bl	8002ae8 <__retarget_lock_release_recursive>
 80027d6:	4628      	mov	r0, r5
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da04      	bge.n	80027e8 <_puts_r+0x60>
 80027de:	69a2      	ldr	r2, [r4, #24]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dc17      	bgt.n	8002814 <_puts_r+0x8c>
 80027e4:	290a      	cmp	r1, #10
 80027e6:	d015      	beq.n	8002814 <_puts_r+0x8c>
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	6022      	str	r2, [r4, #0]
 80027ee:	7019      	strb	r1, [r3, #0]
 80027f0:	68a3      	ldr	r3, [r4, #8]
 80027f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60a3      	str	r3, [r4, #8]
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d1ed      	bne.n	80027da <_puts_r+0x52>
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da11      	bge.n	8002826 <_puts_r+0x9e>
 8002802:	4622      	mov	r2, r4
 8002804:	210a      	movs	r1, #10
 8002806:	4628      	mov	r0, r5
 8002808:	f000 f85f 	bl	80028ca <__swbuf_r>
 800280c:	3001      	adds	r0, #1
 800280e:	d0d7      	beq.n	80027c0 <_puts_r+0x38>
 8002810:	250a      	movs	r5, #10
 8002812:	e7d7      	b.n	80027c4 <_puts_r+0x3c>
 8002814:	4622      	mov	r2, r4
 8002816:	4628      	mov	r0, r5
 8002818:	f000 f857 	bl	80028ca <__swbuf_r>
 800281c:	3001      	adds	r0, #1
 800281e:	d1e7      	bne.n	80027f0 <_puts_r+0x68>
 8002820:	e7ce      	b.n	80027c0 <_puts_r+0x38>
 8002822:	3e01      	subs	r6, #1
 8002824:	e7e4      	b.n	80027f0 <_puts_r+0x68>
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	6022      	str	r2, [r4, #0]
 800282c:	220a      	movs	r2, #10
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e7ee      	b.n	8002810 <_puts_r+0x88>
	...

08002834 <puts>:
 8002834:	4b02      	ldr	r3, [pc, #8]	@ (8002840 <puts+0xc>)
 8002836:	4601      	mov	r1, r0
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	f7ff bfa5 	b.w	8002788 <_puts_r>
 800283e:	bf00      	nop
 8002840:	20000020 	.word	0x20000020

08002844 <__sread>:
 8002844:	b510      	push	{r4, lr}
 8002846:	460c      	mov	r4, r1
 8002848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800284c:	f000 f8fc 	bl	8002a48 <_read_r>
 8002850:	2800      	cmp	r0, #0
 8002852:	bfab      	itete	ge
 8002854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002856:	89a3      	ldrhlt	r3, [r4, #12]
 8002858:	181b      	addge	r3, r3, r0
 800285a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800285e:	bfac      	ite	ge
 8002860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002862:	81a3      	strhlt	r3, [r4, #12]
 8002864:	bd10      	pop	{r4, pc}

08002866 <__swrite>:
 8002866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800286a:	461f      	mov	r7, r3
 800286c:	898b      	ldrh	r3, [r1, #12]
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	4605      	mov	r5, r0
 8002872:	460c      	mov	r4, r1
 8002874:	4616      	mov	r6, r2
 8002876:	d505      	bpl.n	8002884 <__swrite+0x1e>
 8002878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287c:	2302      	movs	r3, #2
 800287e:	2200      	movs	r2, #0
 8002880:	f000 f8d0 	bl	8002a24 <_lseek_r>
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800288a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800288e:	81a3      	strh	r3, [r4, #12]
 8002890:	4632      	mov	r2, r6
 8002892:	463b      	mov	r3, r7
 8002894:	4628      	mov	r0, r5
 8002896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	f000 b8e7 	b.w	8002a6c <_write_r>

0800289e <__sseek>:
 800289e:	b510      	push	{r4, lr}
 80028a0:	460c      	mov	r4, r1
 80028a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a6:	f000 f8bd 	bl	8002a24 <_lseek_r>
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	89a3      	ldrh	r3, [r4, #12]
 80028ae:	bf15      	itete	ne
 80028b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80028b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80028b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80028ba:	81a3      	strheq	r3, [r4, #12]
 80028bc:	bf18      	it	ne
 80028be:	81a3      	strhne	r3, [r4, #12]
 80028c0:	bd10      	pop	{r4, pc}

080028c2 <__sclose>:
 80028c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c6:	f000 b89d 	b.w	8002a04 <_close_r>

080028ca <__swbuf_r>:
 80028ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028cc:	460e      	mov	r6, r1
 80028ce:	4614      	mov	r4, r2
 80028d0:	4605      	mov	r5, r0
 80028d2:	b118      	cbz	r0, 80028dc <__swbuf_r+0x12>
 80028d4:	6a03      	ldr	r3, [r0, #32]
 80028d6:	b90b      	cbnz	r3, 80028dc <__swbuf_r+0x12>
 80028d8:	f7ff ff0e 	bl	80026f8 <__sinit>
 80028dc:	69a3      	ldr	r3, [r4, #24]
 80028de:	60a3      	str	r3, [r4, #8]
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	071a      	lsls	r2, r3, #28
 80028e4:	d501      	bpl.n	80028ea <__swbuf_r+0x20>
 80028e6:	6923      	ldr	r3, [r4, #16]
 80028e8:	b943      	cbnz	r3, 80028fc <__swbuf_r+0x32>
 80028ea:	4621      	mov	r1, r4
 80028ec:	4628      	mov	r0, r5
 80028ee:	f000 f82b 	bl	8002948 <__swsetup_r>
 80028f2:	b118      	cbz	r0, 80028fc <__swbuf_r+0x32>
 80028f4:	f04f 37ff 	mov.w	r7, #4294967295
 80028f8:	4638      	mov	r0, r7
 80028fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	6922      	ldr	r2, [r4, #16]
 8002900:	1a98      	subs	r0, r3, r2
 8002902:	6963      	ldr	r3, [r4, #20]
 8002904:	b2f6      	uxtb	r6, r6
 8002906:	4283      	cmp	r3, r0
 8002908:	4637      	mov	r7, r6
 800290a:	dc05      	bgt.n	8002918 <__swbuf_r+0x4e>
 800290c:	4621      	mov	r1, r4
 800290e:	4628      	mov	r0, r5
 8002910:	f000 fd38 	bl	8003384 <_fflush_r>
 8002914:	2800      	cmp	r0, #0
 8002916:	d1ed      	bne.n	80028f4 <__swbuf_r+0x2a>
 8002918:	68a3      	ldr	r3, [r4, #8]
 800291a:	3b01      	subs	r3, #1
 800291c:	60a3      	str	r3, [r4, #8]
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	6022      	str	r2, [r4, #0]
 8002924:	701e      	strb	r6, [r3, #0]
 8002926:	6962      	ldr	r2, [r4, #20]
 8002928:	1c43      	adds	r3, r0, #1
 800292a:	429a      	cmp	r2, r3
 800292c:	d004      	beq.n	8002938 <__swbuf_r+0x6e>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	07db      	lsls	r3, r3, #31
 8002932:	d5e1      	bpl.n	80028f8 <__swbuf_r+0x2e>
 8002934:	2e0a      	cmp	r6, #10
 8002936:	d1df      	bne.n	80028f8 <__swbuf_r+0x2e>
 8002938:	4621      	mov	r1, r4
 800293a:	4628      	mov	r0, r5
 800293c:	f000 fd22 	bl	8003384 <_fflush_r>
 8002940:	2800      	cmp	r0, #0
 8002942:	d0d9      	beq.n	80028f8 <__swbuf_r+0x2e>
 8002944:	e7d6      	b.n	80028f4 <__swbuf_r+0x2a>
	...

08002948 <__swsetup_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4b29      	ldr	r3, [pc, #164]	@ (80029f0 <__swsetup_r+0xa8>)
 800294c:	4605      	mov	r5, r0
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	460c      	mov	r4, r1
 8002952:	b118      	cbz	r0, 800295c <__swsetup_r+0x14>
 8002954:	6a03      	ldr	r3, [r0, #32]
 8002956:	b90b      	cbnz	r3, 800295c <__swsetup_r+0x14>
 8002958:	f7ff fece 	bl	80026f8 <__sinit>
 800295c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002960:	0719      	lsls	r1, r3, #28
 8002962:	d422      	bmi.n	80029aa <__swsetup_r+0x62>
 8002964:	06da      	lsls	r2, r3, #27
 8002966:	d407      	bmi.n	8002978 <__swsetup_r+0x30>
 8002968:	2209      	movs	r2, #9
 800296a:	602a      	str	r2, [r5, #0]
 800296c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002970:	81a3      	strh	r3, [r4, #12]
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	e033      	b.n	80029e0 <__swsetup_r+0x98>
 8002978:	0758      	lsls	r0, r3, #29
 800297a:	d512      	bpl.n	80029a2 <__swsetup_r+0x5a>
 800297c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800297e:	b141      	cbz	r1, 8002992 <__swsetup_r+0x4a>
 8002980:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002984:	4299      	cmp	r1, r3
 8002986:	d002      	beq.n	800298e <__swsetup_r+0x46>
 8002988:	4628      	mov	r0, r5
 800298a:	f000 f8af 	bl	8002aec <_free_r>
 800298e:	2300      	movs	r3, #0
 8002990:	6363      	str	r3, [r4, #52]	@ 0x34
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	2300      	movs	r3, #0
 800299c:	6063      	str	r3, [r4, #4]
 800299e:	6923      	ldr	r3, [r4, #16]
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	81a3      	strh	r3, [r4, #12]
 80029aa:	6923      	ldr	r3, [r4, #16]
 80029ac:	b94b      	cbnz	r3, 80029c2 <__swsetup_r+0x7a>
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b8:	d003      	beq.n	80029c2 <__swsetup_r+0x7a>
 80029ba:	4621      	mov	r1, r4
 80029bc:	4628      	mov	r0, r5
 80029be:	f000 fd2f 	bl	8003420 <__smakebuf_r>
 80029c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029c6:	f013 0201 	ands.w	r2, r3, #1
 80029ca:	d00a      	beq.n	80029e2 <__swsetup_r+0x9a>
 80029cc:	2200      	movs	r2, #0
 80029ce:	60a2      	str	r2, [r4, #8]
 80029d0:	6962      	ldr	r2, [r4, #20]
 80029d2:	4252      	negs	r2, r2
 80029d4:	61a2      	str	r2, [r4, #24]
 80029d6:	6922      	ldr	r2, [r4, #16]
 80029d8:	b942      	cbnz	r2, 80029ec <__swsetup_r+0xa4>
 80029da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029de:	d1c5      	bne.n	800296c <__swsetup_r+0x24>
 80029e0:	bd38      	pop	{r3, r4, r5, pc}
 80029e2:	0799      	lsls	r1, r3, #30
 80029e4:	bf58      	it	pl
 80029e6:	6962      	ldrpl	r2, [r4, #20]
 80029e8:	60a2      	str	r2, [r4, #8]
 80029ea:	e7f4      	b.n	80029d6 <__swsetup_r+0x8e>
 80029ec:	2000      	movs	r0, #0
 80029ee:	e7f7      	b.n	80029e0 <__swsetup_r+0x98>
 80029f0:	20000020 	.word	0x20000020

080029f4 <memset>:
 80029f4:	4402      	add	r2, r0
 80029f6:	4603      	mov	r3, r0
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d100      	bne.n	80029fe <memset+0xa>
 80029fc:	4770      	bx	lr
 80029fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002a02:	e7f9      	b.n	80029f8 <memset+0x4>

08002a04 <_close_r>:
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4d06      	ldr	r5, [pc, #24]	@ (8002a20 <_close_r+0x1c>)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	602b      	str	r3, [r5, #0]
 8002a10:	f7ff fc22 	bl	8002258 <_close>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d102      	bne.n	8002a1e <_close_r+0x1a>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	b103      	cbz	r3, 8002a1e <_close_r+0x1a>
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	2000029c 	.word	0x2000029c

08002a24 <_lseek_r>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4d07      	ldr	r5, [pc, #28]	@ (8002a44 <_lseek_r+0x20>)
 8002a28:	4604      	mov	r4, r0
 8002a2a:	4608      	mov	r0, r1
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	2200      	movs	r2, #0
 8002a30:	602a      	str	r2, [r5, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f7ff fbd1 	bl	80021da <_lseek>
 8002a38:	1c43      	adds	r3, r0, #1
 8002a3a:	d102      	bne.n	8002a42 <_lseek_r+0x1e>
 8002a3c:	682b      	ldr	r3, [r5, #0]
 8002a3e:	b103      	cbz	r3, 8002a42 <_lseek_r+0x1e>
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
 8002a44:	2000029c 	.word	0x2000029c

08002a48 <_read_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4d07      	ldr	r5, [pc, #28]	@ (8002a68 <_read_r+0x20>)
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4608      	mov	r0, r1
 8002a50:	4611      	mov	r1, r2
 8002a52:	2200      	movs	r2, #0
 8002a54:	602a      	str	r2, [r5, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fb69 	bl	800212e <_read>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d102      	bne.n	8002a66 <_read_r+0x1e>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	b103      	cbz	r3, 8002a66 <_read_r+0x1e>
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	2000029c 	.word	0x2000029c

08002a6c <_write_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4d07      	ldr	r5, [pc, #28]	@ (8002a8c <_write_r+0x20>)
 8002a70:	4604      	mov	r4, r0
 8002a72:	4608      	mov	r0, r1
 8002a74:	4611      	mov	r1, r2
 8002a76:	2200      	movs	r2, #0
 8002a78:	602a      	str	r2, [r5, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff fbbf 	bl	80021fe <_write>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_write_r+0x1e>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_write_r+0x1e>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	2000029c 	.word	0x2000029c

08002a90 <__errno>:
 8002a90:	4b01      	ldr	r3, [pc, #4]	@ (8002a98 <__errno+0x8>)
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000020 	.word	0x20000020

08002a9c <__libc_init_array>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ad4 <__libc_init_array+0x38>)
 8002aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ad8 <__libc_init_array+0x3c>)
 8002aa2:	1b64      	subs	r4, r4, r5
 8002aa4:	10a4      	asrs	r4, r4, #2
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	42a6      	cmp	r6, r4
 8002aaa:	d109      	bne.n	8002ac0 <__libc_init_array+0x24>
 8002aac:	4d0b      	ldr	r5, [pc, #44]	@ (8002adc <__libc_init_array+0x40>)
 8002aae:	4c0c      	ldr	r4, [pc, #48]	@ (8002ae0 <__libc_init_array+0x44>)
 8002ab0:	f000 fd24 	bl	80034fc <_init>
 8002ab4:	1b64      	subs	r4, r4, r5
 8002ab6:	10a4      	asrs	r4, r4, #2
 8002ab8:	2600      	movs	r6, #0
 8002aba:	42a6      	cmp	r6, r4
 8002abc:	d105      	bne.n	8002aca <__libc_init_array+0x2e>
 8002abe:	bd70      	pop	{r4, r5, r6, pc}
 8002ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac4:	4798      	blx	r3
 8002ac6:	3601      	adds	r6, #1
 8002ac8:	e7ee      	b.n	8002aa8 <__libc_init_array+0xc>
 8002aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ace:	4798      	blx	r3
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	e7f2      	b.n	8002aba <__libc_init_array+0x1e>
 8002ad4:	080035e0 	.word	0x080035e0
 8002ad8:	080035e0 	.word	0x080035e0
 8002adc:	080035e0 	.word	0x080035e0
 8002ae0:	080035e4 	.word	0x080035e4

08002ae4 <__retarget_lock_init_recursive>:
 8002ae4:	4770      	bx	lr

08002ae6 <__retarget_lock_acquire_recursive>:
 8002ae6:	4770      	bx	lr

08002ae8 <__retarget_lock_release_recursive>:
 8002ae8:	4770      	bx	lr
	...

08002aec <_free_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4605      	mov	r5, r0
 8002af0:	2900      	cmp	r1, #0
 8002af2:	d041      	beq.n	8002b78 <_free_r+0x8c>
 8002af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af8:	1f0c      	subs	r4, r1, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bfb8      	it	lt
 8002afe:	18e4      	addlt	r4, r4, r3
 8002b00:	f000 f8e0 	bl	8002cc4 <__malloc_lock>
 8002b04:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <_free_r+0x90>)
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	b933      	cbnz	r3, 8002b18 <_free_r+0x2c>
 8002b0a:	6063      	str	r3, [r4, #4]
 8002b0c:	6014      	str	r4, [r2, #0]
 8002b0e:	4628      	mov	r0, r5
 8002b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b14:	f000 b8dc 	b.w	8002cd0 <__malloc_unlock>
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d908      	bls.n	8002b2e <_free_r+0x42>
 8002b1c:	6820      	ldr	r0, [r4, #0]
 8002b1e:	1821      	adds	r1, r4, r0
 8002b20:	428b      	cmp	r3, r1
 8002b22:	bf01      	itttt	eq
 8002b24:	6819      	ldreq	r1, [r3, #0]
 8002b26:	685b      	ldreq	r3, [r3, #4]
 8002b28:	1809      	addeq	r1, r1, r0
 8002b2a:	6021      	streq	r1, [r4, #0]
 8002b2c:	e7ed      	b.n	8002b0a <_free_r+0x1e>
 8002b2e:	461a      	mov	r2, r3
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	b10b      	cbz	r3, 8002b38 <_free_r+0x4c>
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	d9fa      	bls.n	8002b2e <_free_r+0x42>
 8002b38:	6811      	ldr	r1, [r2, #0]
 8002b3a:	1850      	adds	r0, r2, r1
 8002b3c:	42a0      	cmp	r0, r4
 8002b3e:	d10b      	bne.n	8002b58 <_free_r+0x6c>
 8002b40:	6820      	ldr	r0, [r4, #0]
 8002b42:	4401      	add	r1, r0
 8002b44:	1850      	adds	r0, r2, r1
 8002b46:	4283      	cmp	r3, r0
 8002b48:	6011      	str	r1, [r2, #0]
 8002b4a:	d1e0      	bne.n	8002b0e <_free_r+0x22>
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	6053      	str	r3, [r2, #4]
 8002b52:	4408      	add	r0, r1
 8002b54:	6010      	str	r0, [r2, #0]
 8002b56:	e7da      	b.n	8002b0e <_free_r+0x22>
 8002b58:	d902      	bls.n	8002b60 <_free_r+0x74>
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	602b      	str	r3, [r5, #0]
 8002b5e:	e7d6      	b.n	8002b0e <_free_r+0x22>
 8002b60:	6820      	ldr	r0, [r4, #0]
 8002b62:	1821      	adds	r1, r4, r0
 8002b64:	428b      	cmp	r3, r1
 8002b66:	bf04      	itt	eq
 8002b68:	6819      	ldreq	r1, [r3, #0]
 8002b6a:	685b      	ldreq	r3, [r3, #4]
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	bf04      	itt	eq
 8002b70:	1809      	addeq	r1, r1, r0
 8002b72:	6021      	streq	r1, [r4, #0]
 8002b74:	6054      	str	r4, [r2, #4]
 8002b76:	e7ca      	b.n	8002b0e <_free_r+0x22>
 8002b78:	bd38      	pop	{r3, r4, r5, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200002a8 	.word	0x200002a8

08002b80 <sbrk_aligned>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	4e0f      	ldr	r6, [pc, #60]	@ (8002bc0 <sbrk_aligned+0x40>)
 8002b84:	460c      	mov	r4, r1
 8002b86:	6831      	ldr	r1, [r6, #0]
 8002b88:	4605      	mov	r5, r0
 8002b8a:	b911      	cbnz	r1, 8002b92 <sbrk_aligned+0x12>
 8002b8c:	f000 fca6 	bl	80034dc <_sbrk_r>
 8002b90:	6030      	str	r0, [r6, #0]
 8002b92:	4621      	mov	r1, r4
 8002b94:	4628      	mov	r0, r5
 8002b96:	f000 fca1 	bl	80034dc <_sbrk_r>
 8002b9a:	1c43      	adds	r3, r0, #1
 8002b9c:	d103      	bne.n	8002ba6 <sbrk_aligned+0x26>
 8002b9e:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	bd70      	pop	{r4, r5, r6, pc}
 8002ba6:	1cc4      	adds	r4, r0, #3
 8002ba8:	f024 0403 	bic.w	r4, r4, #3
 8002bac:	42a0      	cmp	r0, r4
 8002bae:	d0f8      	beq.n	8002ba2 <sbrk_aligned+0x22>
 8002bb0:	1a21      	subs	r1, r4, r0
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f000 fc92 	bl	80034dc <_sbrk_r>
 8002bb8:	3001      	adds	r0, #1
 8002bba:	d1f2      	bne.n	8002ba2 <sbrk_aligned+0x22>
 8002bbc:	e7ef      	b.n	8002b9e <sbrk_aligned+0x1e>
 8002bbe:	bf00      	nop
 8002bc0:	200002a4 	.word	0x200002a4

08002bc4 <_malloc_r>:
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	1ccd      	adds	r5, r1, #3
 8002bca:	f025 0503 	bic.w	r5, r5, #3
 8002bce:	3508      	adds	r5, #8
 8002bd0:	2d0c      	cmp	r5, #12
 8002bd2:	bf38      	it	cc
 8002bd4:	250c      	movcc	r5, #12
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	4606      	mov	r6, r0
 8002bda:	db01      	blt.n	8002be0 <_malloc_r+0x1c>
 8002bdc:	42a9      	cmp	r1, r5
 8002bde:	d904      	bls.n	8002bea <_malloc_r+0x26>
 8002be0:	230c      	movs	r3, #12
 8002be2:	6033      	str	r3, [r6, #0]
 8002be4:	2000      	movs	r0, #0
 8002be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cc0 <_malloc_r+0xfc>
 8002bee:	f000 f869 	bl	8002cc4 <__malloc_lock>
 8002bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8002bf6:	461c      	mov	r4, r3
 8002bf8:	bb44      	cbnz	r4, 8002c4c <_malloc_r+0x88>
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f7ff ffbf 	bl	8002b80 <sbrk_aligned>
 8002c02:	1c43      	adds	r3, r0, #1
 8002c04:	4604      	mov	r4, r0
 8002c06:	d158      	bne.n	8002cba <_malloc_r+0xf6>
 8002c08:	f8d8 4000 	ldr.w	r4, [r8]
 8002c0c:	4627      	mov	r7, r4
 8002c0e:	2f00      	cmp	r7, #0
 8002c10:	d143      	bne.n	8002c9a <_malloc_r+0xd6>
 8002c12:	2c00      	cmp	r4, #0
 8002c14:	d04b      	beq.n	8002cae <_malloc_r+0xea>
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	4639      	mov	r1, r7
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	eb04 0903 	add.w	r9, r4, r3
 8002c20:	f000 fc5c 	bl	80034dc <_sbrk_r>
 8002c24:	4581      	cmp	r9, r0
 8002c26:	d142      	bne.n	8002cae <_malloc_r+0xea>
 8002c28:	6821      	ldr	r1, [r4, #0]
 8002c2a:	1a6d      	subs	r5, r5, r1
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	4630      	mov	r0, r6
 8002c30:	f7ff ffa6 	bl	8002b80 <sbrk_aligned>
 8002c34:	3001      	adds	r0, #1
 8002c36:	d03a      	beq.n	8002cae <_malloc_r+0xea>
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	442b      	add	r3, r5
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	bb62      	cbnz	r2, 8002ca0 <_malloc_r+0xdc>
 8002c46:	f8c8 7000 	str.w	r7, [r8]
 8002c4a:	e00f      	b.n	8002c6c <_malloc_r+0xa8>
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	1b52      	subs	r2, r2, r5
 8002c50:	d420      	bmi.n	8002c94 <_malloc_r+0xd0>
 8002c52:	2a0b      	cmp	r2, #11
 8002c54:	d917      	bls.n	8002c86 <_malloc_r+0xc2>
 8002c56:	1961      	adds	r1, r4, r5
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	6025      	str	r5, [r4, #0]
 8002c5c:	bf18      	it	ne
 8002c5e:	6059      	strne	r1, [r3, #4]
 8002c60:	6863      	ldr	r3, [r4, #4]
 8002c62:	bf08      	it	eq
 8002c64:	f8c8 1000 	streq.w	r1, [r8]
 8002c68:	5162      	str	r2, [r4, r5]
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f000 f82f 	bl	8002cd0 <__malloc_unlock>
 8002c72:	f104 000b 	add.w	r0, r4, #11
 8002c76:	1d23      	adds	r3, r4, #4
 8002c78:	f020 0007 	bic.w	r0, r0, #7
 8002c7c:	1ac2      	subs	r2, r0, r3
 8002c7e:	bf1c      	itt	ne
 8002c80:	1a1b      	subne	r3, r3, r0
 8002c82:	50a3      	strne	r3, [r4, r2]
 8002c84:	e7af      	b.n	8002be6 <_malloc_r+0x22>
 8002c86:	6862      	ldr	r2, [r4, #4]
 8002c88:	42a3      	cmp	r3, r4
 8002c8a:	bf0c      	ite	eq
 8002c8c:	f8c8 2000 	streq.w	r2, [r8]
 8002c90:	605a      	strne	r2, [r3, #4]
 8002c92:	e7eb      	b.n	8002c6c <_malloc_r+0xa8>
 8002c94:	4623      	mov	r3, r4
 8002c96:	6864      	ldr	r4, [r4, #4]
 8002c98:	e7ae      	b.n	8002bf8 <_malloc_r+0x34>
 8002c9a:	463c      	mov	r4, r7
 8002c9c:	687f      	ldr	r7, [r7, #4]
 8002c9e:	e7b6      	b.n	8002c0e <_malloc_r+0x4a>
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	d1fb      	bne.n	8002ca0 <_malloc_r+0xdc>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6053      	str	r3, [r2, #4]
 8002cac:	e7de      	b.n	8002c6c <_malloc_r+0xa8>
 8002cae:	230c      	movs	r3, #12
 8002cb0:	6033      	str	r3, [r6, #0]
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	f000 f80c 	bl	8002cd0 <__malloc_unlock>
 8002cb8:	e794      	b.n	8002be4 <_malloc_r+0x20>
 8002cba:	6005      	str	r5, [r0, #0]
 8002cbc:	e7d6      	b.n	8002c6c <_malloc_r+0xa8>
 8002cbe:	bf00      	nop
 8002cc0:	200002a8 	.word	0x200002a8

08002cc4 <__malloc_lock>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	@ (8002ccc <__malloc_lock+0x8>)
 8002cc6:	f7ff bf0e 	b.w	8002ae6 <__retarget_lock_acquire_recursive>
 8002cca:	bf00      	nop
 8002ccc:	200002a0 	.word	0x200002a0

08002cd0 <__malloc_unlock>:
 8002cd0:	4801      	ldr	r0, [pc, #4]	@ (8002cd8 <__malloc_unlock+0x8>)
 8002cd2:	f7ff bf09 	b.w	8002ae8 <__retarget_lock_release_recursive>
 8002cd6:	bf00      	nop
 8002cd8:	200002a0 	.word	0x200002a0

08002cdc <__sfputc_r>:
 8002cdc:	6893      	ldr	r3, [r2, #8]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	b410      	push	{r4}
 8002ce4:	6093      	str	r3, [r2, #8]
 8002ce6:	da08      	bge.n	8002cfa <__sfputc_r+0x1e>
 8002ce8:	6994      	ldr	r4, [r2, #24]
 8002cea:	42a3      	cmp	r3, r4
 8002cec:	db01      	blt.n	8002cf2 <__sfputc_r+0x16>
 8002cee:	290a      	cmp	r1, #10
 8002cf0:	d103      	bne.n	8002cfa <__sfputc_r+0x1e>
 8002cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cf6:	f7ff bde8 	b.w	80028ca <__swbuf_r>
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	1c58      	adds	r0, r3, #1
 8002cfe:	6010      	str	r0, [r2, #0]
 8002d00:	7019      	strb	r1, [r3, #0]
 8002d02:	4608      	mov	r0, r1
 8002d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <__sfputs_r>:
 8002d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	460f      	mov	r7, r1
 8002d10:	4614      	mov	r4, r2
 8002d12:	18d5      	adds	r5, r2, r3
 8002d14:	42ac      	cmp	r4, r5
 8002d16:	d101      	bne.n	8002d1c <__sfputs_r+0x12>
 8002d18:	2000      	movs	r0, #0
 8002d1a:	e007      	b.n	8002d2c <__sfputs_r+0x22>
 8002d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d20:	463a      	mov	r2, r7
 8002d22:	4630      	mov	r0, r6
 8002d24:	f7ff ffda 	bl	8002cdc <__sfputc_r>
 8002d28:	1c43      	adds	r3, r0, #1
 8002d2a:	d1f3      	bne.n	8002d14 <__sfputs_r+0xa>
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d30 <_vfiprintf_r>:
 8002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d34:	460d      	mov	r5, r1
 8002d36:	b09d      	sub	sp, #116	@ 0x74
 8002d38:	4614      	mov	r4, r2
 8002d3a:	4698      	mov	r8, r3
 8002d3c:	4606      	mov	r6, r0
 8002d3e:	b118      	cbz	r0, 8002d48 <_vfiprintf_r+0x18>
 8002d40:	6a03      	ldr	r3, [r0, #32]
 8002d42:	b90b      	cbnz	r3, 8002d48 <_vfiprintf_r+0x18>
 8002d44:	f7ff fcd8 	bl	80026f8 <__sinit>
 8002d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d4a:	07d9      	lsls	r1, r3, #31
 8002d4c:	d405      	bmi.n	8002d5a <_vfiprintf_r+0x2a>
 8002d4e:	89ab      	ldrh	r3, [r5, #12]
 8002d50:	059a      	lsls	r2, r3, #22
 8002d52:	d402      	bmi.n	8002d5a <_vfiprintf_r+0x2a>
 8002d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d56:	f7ff fec6 	bl	8002ae6 <__retarget_lock_acquire_recursive>
 8002d5a:	89ab      	ldrh	r3, [r5, #12]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	d501      	bpl.n	8002d64 <_vfiprintf_r+0x34>
 8002d60:	692b      	ldr	r3, [r5, #16]
 8002d62:	b99b      	cbnz	r3, 8002d8c <_vfiprintf_r+0x5c>
 8002d64:	4629      	mov	r1, r5
 8002d66:	4630      	mov	r0, r6
 8002d68:	f7ff fdee 	bl	8002948 <__swsetup_r>
 8002d6c:	b170      	cbz	r0, 8002d8c <_vfiprintf_r+0x5c>
 8002d6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d70:	07dc      	lsls	r4, r3, #31
 8002d72:	d504      	bpl.n	8002d7e <_vfiprintf_r+0x4e>
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	b01d      	add	sp, #116	@ 0x74
 8002d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7e:	89ab      	ldrh	r3, [r5, #12]
 8002d80:	0598      	lsls	r0, r3, #22
 8002d82:	d4f7      	bmi.n	8002d74 <_vfiprintf_r+0x44>
 8002d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d86:	f7ff feaf 	bl	8002ae8 <__retarget_lock_release_recursive>
 8002d8a:	e7f3      	b.n	8002d74 <_vfiprintf_r+0x44>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d90:	2320      	movs	r3, #32
 8002d92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d96:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d9a:	2330      	movs	r3, #48	@ 0x30
 8002d9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002f4c <_vfiprintf_r+0x21c>
 8002da0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002da4:	f04f 0901 	mov.w	r9, #1
 8002da8:	4623      	mov	r3, r4
 8002daa:	469a      	mov	sl, r3
 8002dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002db0:	b10a      	cbz	r2, 8002db6 <_vfiprintf_r+0x86>
 8002db2:	2a25      	cmp	r2, #37	@ 0x25
 8002db4:	d1f9      	bne.n	8002daa <_vfiprintf_r+0x7a>
 8002db6:	ebba 0b04 	subs.w	fp, sl, r4
 8002dba:	d00b      	beq.n	8002dd4 <_vfiprintf_r+0xa4>
 8002dbc:	465b      	mov	r3, fp
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7ff ffa1 	bl	8002d0a <__sfputs_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f000 80a7 	beq.w	8002f1c <_vfiprintf_r+0x1ec>
 8002dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dd0:	445a      	add	r2, fp
 8002dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 809f 	beq.w	8002f1c <_vfiprintf_r+0x1ec>
 8002dde:	2300      	movs	r3, #0
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de8:	f10a 0a01 	add.w	sl, sl, #1
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	9307      	str	r3, [sp, #28]
 8002df0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002df4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002df6:	4654      	mov	r4, sl
 8002df8:	2205      	movs	r2, #5
 8002dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dfe:	4853      	ldr	r0, [pc, #332]	@ (8002f4c <_vfiprintf_r+0x21c>)
 8002e00:	f7fd f9f6 	bl	80001f0 <memchr>
 8002e04:	9a04      	ldr	r2, [sp, #16]
 8002e06:	b9d8      	cbnz	r0, 8002e40 <_vfiprintf_r+0x110>
 8002e08:	06d1      	lsls	r1, r2, #27
 8002e0a:	bf44      	itt	mi
 8002e0c:	2320      	movmi	r3, #32
 8002e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e12:	0713      	lsls	r3, r2, #28
 8002e14:	bf44      	itt	mi
 8002e16:	232b      	movmi	r3, #43	@ 0x2b
 8002e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e22:	d015      	beq.n	8002e50 <_vfiprintf_r+0x120>
 8002e24:	9a07      	ldr	r2, [sp, #28]
 8002e26:	4654      	mov	r4, sl
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f04f 0c0a 	mov.w	ip, #10
 8002e2e:	4621      	mov	r1, r4
 8002e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e34:	3b30      	subs	r3, #48	@ 0x30
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d94b      	bls.n	8002ed2 <_vfiprintf_r+0x1a2>
 8002e3a:	b1b0      	cbz	r0, 8002e6a <_vfiprintf_r+0x13a>
 8002e3c:	9207      	str	r2, [sp, #28]
 8002e3e:	e014      	b.n	8002e6a <_vfiprintf_r+0x13a>
 8002e40:	eba0 0308 	sub.w	r3, r0, r8
 8002e44:	fa09 f303 	lsl.w	r3, r9, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	9304      	str	r3, [sp, #16]
 8002e4c:	46a2      	mov	sl, r4
 8002e4e:	e7d2      	b.n	8002df6 <_vfiprintf_r+0xc6>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	1d19      	adds	r1, r3, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	9103      	str	r1, [sp, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bfbb      	ittet	lt
 8002e5c:	425b      	neglt	r3, r3
 8002e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8002e62:	9307      	strge	r3, [sp, #28]
 8002e64:	9307      	strlt	r3, [sp, #28]
 8002e66:	bfb8      	it	lt
 8002e68:	9204      	strlt	r2, [sp, #16]
 8002e6a:	7823      	ldrb	r3, [r4, #0]
 8002e6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e6e:	d10a      	bne.n	8002e86 <_vfiprintf_r+0x156>
 8002e70:	7863      	ldrb	r3, [r4, #1]
 8002e72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e74:	d132      	bne.n	8002edc <_vfiprintf_r+0x1ac>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	1d1a      	adds	r2, r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	9203      	str	r2, [sp, #12]
 8002e7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e82:	3402      	adds	r4, #2
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002f5c <_vfiprintf_r+0x22c>
 8002e8a:	7821      	ldrb	r1, [r4, #0]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4650      	mov	r0, sl
 8002e90:	f7fd f9ae 	bl	80001f0 <memchr>
 8002e94:	b138      	cbz	r0, 8002ea6 <_vfiprintf_r+0x176>
 8002e96:	9b04      	ldr	r3, [sp, #16]
 8002e98:	eba0 000a 	sub.w	r0, r0, sl
 8002e9c:	2240      	movs	r2, #64	@ 0x40
 8002e9e:	4082      	lsls	r2, r0
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	9304      	str	r3, [sp, #16]
 8002ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eaa:	4829      	ldr	r0, [pc, #164]	@ (8002f50 <_vfiprintf_r+0x220>)
 8002eac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	f7fd f99d 	bl	80001f0 <memchr>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d03f      	beq.n	8002f3a <_vfiprintf_r+0x20a>
 8002eba:	4b26      	ldr	r3, [pc, #152]	@ (8002f54 <_vfiprintf_r+0x224>)
 8002ebc:	bb1b      	cbnz	r3, 8002f06 <_vfiprintf_r+0x1d6>
 8002ebe:	9b03      	ldr	r3, [sp, #12]
 8002ec0:	3307      	adds	r3, #7
 8002ec2:	f023 0307 	bic.w	r3, r3, #7
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	9303      	str	r3, [sp, #12]
 8002eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ecc:	443b      	add	r3, r7
 8002ece:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ed0:	e76a      	b.n	8002da8 <_vfiprintf_r+0x78>
 8002ed2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	2001      	movs	r0, #1
 8002eda:	e7a8      	b.n	8002e2e <_vfiprintf_r+0xfe>
 8002edc:	2300      	movs	r3, #0
 8002ede:	3401      	adds	r4, #1
 8002ee0:	9305      	str	r3, [sp, #20]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f04f 0c0a 	mov.w	ip, #10
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eee:	3a30      	subs	r2, #48	@ 0x30
 8002ef0:	2a09      	cmp	r2, #9
 8002ef2:	d903      	bls.n	8002efc <_vfiprintf_r+0x1cc>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0c6      	beq.n	8002e86 <_vfiprintf_r+0x156>
 8002ef8:	9105      	str	r1, [sp, #20]
 8002efa:	e7c4      	b.n	8002e86 <_vfiprintf_r+0x156>
 8002efc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f00:	4604      	mov	r4, r0
 8002f02:	2301      	movs	r3, #1
 8002f04:	e7f0      	b.n	8002ee8 <_vfiprintf_r+0x1b8>
 8002f06:	ab03      	add	r3, sp, #12
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	4b12      	ldr	r3, [pc, #72]	@ (8002f58 <_vfiprintf_r+0x228>)
 8002f0e:	a904      	add	r1, sp, #16
 8002f10:	4630      	mov	r0, r6
 8002f12:	f3af 8000 	nop.w
 8002f16:	4607      	mov	r7, r0
 8002f18:	1c78      	adds	r0, r7, #1
 8002f1a:	d1d6      	bne.n	8002eca <_vfiprintf_r+0x19a>
 8002f1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f1e:	07d9      	lsls	r1, r3, #31
 8002f20:	d405      	bmi.n	8002f2e <_vfiprintf_r+0x1fe>
 8002f22:	89ab      	ldrh	r3, [r5, #12]
 8002f24:	059a      	lsls	r2, r3, #22
 8002f26:	d402      	bmi.n	8002f2e <_vfiprintf_r+0x1fe>
 8002f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f2a:	f7ff fddd 	bl	8002ae8 <__retarget_lock_release_recursive>
 8002f2e:	89ab      	ldrh	r3, [r5, #12]
 8002f30:	065b      	lsls	r3, r3, #25
 8002f32:	f53f af1f 	bmi.w	8002d74 <_vfiprintf_r+0x44>
 8002f36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f38:	e71e      	b.n	8002d78 <_vfiprintf_r+0x48>
 8002f3a:	ab03      	add	r3, sp, #12
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	462a      	mov	r2, r5
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <_vfiprintf_r+0x228>)
 8002f42:	a904      	add	r1, sp, #16
 8002f44:	4630      	mov	r0, r6
 8002f46:	f000 f879 	bl	800303c <_printf_i>
 8002f4a:	e7e4      	b.n	8002f16 <_vfiprintf_r+0x1e6>
 8002f4c:	080035a2 	.word	0x080035a2
 8002f50:	080035ac 	.word	0x080035ac
 8002f54:	00000000 	.word	0x00000000
 8002f58:	08002d0b 	.word	0x08002d0b
 8002f5c:	080035a8 	.word	0x080035a8

08002f60 <_printf_common>:
 8002f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	4616      	mov	r6, r2
 8002f66:	4698      	mov	r8, r3
 8002f68:	688a      	ldr	r2, [r1, #8]
 8002f6a:	690b      	ldr	r3, [r1, #16]
 8002f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bfb8      	it	lt
 8002f74:	4613      	movlt	r3, r2
 8002f76:	6033      	str	r3, [r6, #0]
 8002f78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	b10a      	cbz	r2, 8002f86 <_printf_common+0x26>
 8002f82:	3301      	adds	r3, #1
 8002f84:	6033      	str	r3, [r6, #0]
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	0699      	lsls	r1, r3, #26
 8002f8a:	bf42      	ittt	mi
 8002f8c:	6833      	ldrmi	r3, [r6, #0]
 8002f8e:	3302      	addmi	r3, #2
 8002f90:	6033      	strmi	r3, [r6, #0]
 8002f92:	6825      	ldr	r5, [r4, #0]
 8002f94:	f015 0506 	ands.w	r5, r5, #6
 8002f98:	d106      	bne.n	8002fa8 <_printf_common+0x48>
 8002f9a:	f104 0a19 	add.w	sl, r4, #25
 8002f9e:	68e3      	ldr	r3, [r4, #12]
 8002fa0:	6832      	ldr	r2, [r6, #0]
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	42ab      	cmp	r3, r5
 8002fa6:	dc26      	bgt.n	8002ff6 <_printf_common+0x96>
 8002fa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fac:	6822      	ldr	r2, [r4, #0]
 8002fae:	3b00      	subs	r3, #0
 8002fb0:	bf18      	it	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	0692      	lsls	r2, r2, #26
 8002fb6:	d42b      	bmi.n	8003010 <_printf_common+0xb0>
 8002fb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	4638      	mov	r0, r7
 8002fc0:	47c8      	blx	r9
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d01e      	beq.n	8003004 <_printf_common+0xa4>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	6922      	ldr	r2, [r4, #16]
 8002fca:	f003 0306 	and.w	r3, r3, #6
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf02      	ittt	eq
 8002fd2:	68e5      	ldreq	r5, [r4, #12]
 8002fd4:	6833      	ldreq	r3, [r6, #0]
 8002fd6:	1aed      	subeq	r5, r5, r3
 8002fd8:	68a3      	ldr	r3, [r4, #8]
 8002fda:	bf0c      	ite	eq
 8002fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fe0:	2500      	movne	r5, #0
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	bfc4      	itt	gt
 8002fe6:	1a9b      	subgt	r3, r3, r2
 8002fe8:	18ed      	addgt	r5, r5, r3
 8002fea:	2600      	movs	r6, #0
 8002fec:	341a      	adds	r4, #26
 8002fee:	42b5      	cmp	r5, r6
 8002ff0:	d11a      	bne.n	8003028 <_printf_common+0xc8>
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e008      	b.n	8003008 <_printf_common+0xa8>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	4652      	mov	r2, sl
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	47c8      	blx	r9
 8003000:	3001      	adds	r0, #1
 8003002:	d103      	bne.n	800300c <_printf_common+0xac>
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800300c:	3501      	adds	r5, #1
 800300e:	e7c6      	b.n	8002f9e <_printf_common+0x3e>
 8003010:	18e1      	adds	r1, r4, r3
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	2030      	movs	r0, #48	@ 0x30
 8003016:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800301a:	4422      	add	r2, r4
 800301c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003024:	3302      	adds	r3, #2
 8003026:	e7c7      	b.n	8002fb8 <_printf_common+0x58>
 8003028:	2301      	movs	r3, #1
 800302a:	4622      	mov	r2, r4
 800302c:	4641      	mov	r1, r8
 800302e:	4638      	mov	r0, r7
 8003030:	47c8      	blx	r9
 8003032:	3001      	adds	r0, #1
 8003034:	d0e6      	beq.n	8003004 <_printf_common+0xa4>
 8003036:	3601      	adds	r6, #1
 8003038:	e7d9      	b.n	8002fee <_printf_common+0x8e>
	...

0800303c <_printf_i>:
 800303c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003040:	7e0f      	ldrb	r7, [r1, #24]
 8003042:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003044:	2f78      	cmp	r7, #120	@ 0x78
 8003046:	4691      	mov	r9, r2
 8003048:	4680      	mov	r8, r0
 800304a:	460c      	mov	r4, r1
 800304c:	469a      	mov	sl, r3
 800304e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003052:	d807      	bhi.n	8003064 <_printf_i+0x28>
 8003054:	2f62      	cmp	r7, #98	@ 0x62
 8003056:	d80a      	bhi.n	800306e <_printf_i+0x32>
 8003058:	2f00      	cmp	r7, #0
 800305a:	f000 80d2 	beq.w	8003202 <_printf_i+0x1c6>
 800305e:	2f58      	cmp	r7, #88	@ 0x58
 8003060:	f000 80b9 	beq.w	80031d6 <_printf_i+0x19a>
 8003064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003068:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800306c:	e03a      	b.n	80030e4 <_printf_i+0xa8>
 800306e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003072:	2b15      	cmp	r3, #21
 8003074:	d8f6      	bhi.n	8003064 <_printf_i+0x28>
 8003076:	a101      	add	r1, pc, #4	@ (adr r1, 800307c <_printf_i+0x40>)
 8003078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800307c:	080030d5 	.word	0x080030d5
 8003080:	080030e9 	.word	0x080030e9
 8003084:	08003065 	.word	0x08003065
 8003088:	08003065 	.word	0x08003065
 800308c:	08003065 	.word	0x08003065
 8003090:	08003065 	.word	0x08003065
 8003094:	080030e9 	.word	0x080030e9
 8003098:	08003065 	.word	0x08003065
 800309c:	08003065 	.word	0x08003065
 80030a0:	08003065 	.word	0x08003065
 80030a4:	08003065 	.word	0x08003065
 80030a8:	080031e9 	.word	0x080031e9
 80030ac:	08003113 	.word	0x08003113
 80030b0:	080031a3 	.word	0x080031a3
 80030b4:	08003065 	.word	0x08003065
 80030b8:	08003065 	.word	0x08003065
 80030bc:	0800320b 	.word	0x0800320b
 80030c0:	08003065 	.word	0x08003065
 80030c4:	08003113 	.word	0x08003113
 80030c8:	08003065 	.word	0x08003065
 80030cc:	08003065 	.word	0x08003065
 80030d0:	080031ab 	.word	0x080031ab
 80030d4:	6833      	ldr	r3, [r6, #0]
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6032      	str	r2, [r6, #0]
 80030dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030e4:	2301      	movs	r3, #1
 80030e6:	e09d      	b.n	8003224 <_printf_i+0x1e8>
 80030e8:	6833      	ldr	r3, [r6, #0]
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	1d19      	adds	r1, r3, #4
 80030ee:	6031      	str	r1, [r6, #0]
 80030f0:	0606      	lsls	r6, r0, #24
 80030f2:	d501      	bpl.n	80030f8 <_printf_i+0xbc>
 80030f4:	681d      	ldr	r5, [r3, #0]
 80030f6:	e003      	b.n	8003100 <_printf_i+0xc4>
 80030f8:	0645      	lsls	r5, r0, #25
 80030fa:	d5fb      	bpl.n	80030f4 <_printf_i+0xb8>
 80030fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003100:	2d00      	cmp	r5, #0
 8003102:	da03      	bge.n	800310c <_printf_i+0xd0>
 8003104:	232d      	movs	r3, #45	@ 0x2d
 8003106:	426d      	negs	r5, r5
 8003108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800310c:	4859      	ldr	r0, [pc, #356]	@ (8003274 <_printf_i+0x238>)
 800310e:	230a      	movs	r3, #10
 8003110:	e011      	b.n	8003136 <_printf_i+0xfa>
 8003112:	6821      	ldr	r1, [r4, #0]
 8003114:	6833      	ldr	r3, [r6, #0]
 8003116:	0608      	lsls	r0, r1, #24
 8003118:	f853 5b04 	ldr.w	r5, [r3], #4
 800311c:	d402      	bmi.n	8003124 <_printf_i+0xe8>
 800311e:	0649      	lsls	r1, r1, #25
 8003120:	bf48      	it	mi
 8003122:	b2ad      	uxthmi	r5, r5
 8003124:	2f6f      	cmp	r7, #111	@ 0x6f
 8003126:	4853      	ldr	r0, [pc, #332]	@ (8003274 <_printf_i+0x238>)
 8003128:	6033      	str	r3, [r6, #0]
 800312a:	bf14      	ite	ne
 800312c:	230a      	movne	r3, #10
 800312e:	2308      	moveq	r3, #8
 8003130:	2100      	movs	r1, #0
 8003132:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003136:	6866      	ldr	r6, [r4, #4]
 8003138:	60a6      	str	r6, [r4, #8]
 800313a:	2e00      	cmp	r6, #0
 800313c:	bfa2      	ittt	ge
 800313e:	6821      	ldrge	r1, [r4, #0]
 8003140:	f021 0104 	bicge.w	r1, r1, #4
 8003144:	6021      	strge	r1, [r4, #0]
 8003146:	b90d      	cbnz	r5, 800314c <_printf_i+0x110>
 8003148:	2e00      	cmp	r6, #0
 800314a:	d04b      	beq.n	80031e4 <_printf_i+0x1a8>
 800314c:	4616      	mov	r6, r2
 800314e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003152:	fb03 5711 	mls	r7, r3, r1, r5
 8003156:	5dc7      	ldrb	r7, [r0, r7]
 8003158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800315c:	462f      	mov	r7, r5
 800315e:	42bb      	cmp	r3, r7
 8003160:	460d      	mov	r5, r1
 8003162:	d9f4      	bls.n	800314e <_printf_i+0x112>
 8003164:	2b08      	cmp	r3, #8
 8003166:	d10b      	bne.n	8003180 <_printf_i+0x144>
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	07df      	lsls	r7, r3, #31
 800316c:	d508      	bpl.n	8003180 <_printf_i+0x144>
 800316e:	6923      	ldr	r3, [r4, #16]
 8003170:	6861      	ldr	r1, [r4, #4]
 8003172:	4299      	cmp	r1, r3
 8003174:	bfde      	ittt	le
 8003176:	2330      	movle	r3, #48	@ 0x30
 8003178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800317c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003180:	1b92      	subs	r2, r2, r6
 8003182:	6122      	str	r2, [r4, #16]
 8003184:	f8cd a000 	str.w	sl, [sp]
 8003188:	464b      	mov	r3, r9
 800318a:	aa03      	add	r2, sp, #12
 800318c:	4621      	mov	r1, r4
 800318e:	4640      	mov	r0, r8
 8003190:	f7ff fee6 	bl	8002f60 <_printf_common>
 8003194:	3001      	adds	r0, #1
 8003196:	d14a      	bne.n	800322e <_printf_i+0x1f2>
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	b004      	add	sp, #16
 800319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	4833      	ldr	r0, [pc, #204]	@ (8003278 <_printf_i+0x23c>)
 80031ac:	2778      	movs	r7, #120	@ 0x78
 80031ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	6831      	ldr	r1, [r6, #0]
 80031b6:	061f      	lsls	r7, r3, #24
 80031b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80031bc:	d402      	bmi.n	80031c4 <_printf_i+0x188>
 80031be:	065f      	lsls	r7, r3, #25
 80031c0:	bf48      	it	mi
 80031c2:	b2ad      	uxthmi	r5, r5
 80031c4:	6031      	str	r1, [r6, #0]
 80031c6:	07d9      	lsls	r1, r3, #31
 80031c8:	bf44      	itt	mi
 80031ca:	f043 0320 	orrmi.w	r3, r3, #32
 80031ce:	6023      	strmi	r3, [r4, #0]
 80031d0:	b11d      	cbz	r5, 80031da <_printf_i+0x19e>
 80031d2:	2310      	movs	r3, #16
 80031d4:	e7ac      	b.n	8003130 <_printf_i+0xf4>
 80031d6:	4827      	ldr	r0, [pc, #156]	@ (8003274 <_printf_i+0x238>)
 80031d8:	e7e9      	b.n	80031ae <_printf_i+0x172>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	f023 0320 	bic.w	r3, r3, #32
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	e7f6      	b.n	80031d2 <_printf_i+0x196>
 80031e4:	4616      	mov	r6, r2
 80031e6:	e7bd      	b.n	8003164 <_printf_i+0x128>
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	6825      	ldr	r5, [r4, #0]
 80031ec:	6961      	ldr	r1, [r4, #20]
 80031ee:	1d18      	adds	r0, r3, #4
 80031f0:	6030      	str	r0, [r6, #0]
 80031f2:	062e      	lsls	r6, r5, #24
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	d501      	bpl.n	80031fc <_printf_i+0x1c0>
 80031f8:	6019      	str	r1, [r3, #0]
 80031fa:	e002      	b.n	8003202 <_printf_i+0x1c6>
 80031fc:	0668      	lsls	r0, r5, #25
 80031fe:	d5fb      	bpl.n	80031f8 <_printf_i+0x1bc>
 8003200:	8019      	strh	r1, [r3, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	6123      	str	r3, [r4, #16]
 8003206:	4616      	mov	r6, r2
 8003208:	e7bc      	b.n	8003184 <_printf_i+0x148>
 800320a:	6833      	ldr	r3, [r6, #0]
 800320c:	1d1a      	adds	r2, r3, #4
 800320e:	6032      	str	r2, [r6, #0]
 8003210:	681e      	ldr	r6, [r3, #0]
 8003212:	6862      	ldr	r2, [r4, #4]
 8003214:	2100      	movs	r1, #0
 8003216:	4630      	mov	r0, r6
 8003218:	f7fc ffea 	bl	80001f0 <memchr>
 800321c:	b108      	cbz	r0, 8003222 <_printf_i+0x1e6>
 800321e:	1b80      	subs	r0, r0, r6
 8003220:	6060      	str	r0, [r4, #4]
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	6123      	str	r3, [r4, #16]
 8003226:	2300      	movs	r3, #0
 8003228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800322c:	e7aa      	b.n	8003184 <_printf_i+0x148>
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	4632      	mov	r2, r6
 8003232:	4649      	mov	r1, r9
 8003234:	4640      	mov	r0, r8
 8003236:	47d0      	blx	sl
 8003238:	3001      	adds	r0, #1
 800323a:	d0ad      	beq.n	8003198 <_printf_i+0x15c>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	079b      	lsls	r3, r3, #30
 8003240:	d413      	bmi.n	800326a <_printf_i+0x22e>
 8003242:	68e0      	ldr	r0, [r4, #12]
 8003244:	9b03      	ldr	r3, [sp, #12]
 8003246:	4298      	cmp	r0, r3
 8003248:	bfb8      	it	lt
 800324a:	4618      	movlt	r0, r3
 800324c:	e7a6      	b.n	800319c <_printf_i+0x160>
 800324e:	2301      	movs	r3, #1
 8003250:	4632      	mov	r2, r6
 8003252:	4649      	mov	r1, r9
 8003254:	4640      	mov	r0, r8
 8003256:	47d0      	blx	sl
 8003258:	3001      	adds	r0, #1
 800325a:	d09d      	beq.n	8003198 <_printf_i+0x15c>
 800325c:	3501      	adds	r5, #1
 800325e:	68e3      	ldr	r3, [r4, #12]
 8003260:	9903      	ldr	r1, [sp, #12]
 8003262:	1a5b      	subs	r3, r3, r1
 8003264:	42ab      	cmp	r3, r5
 8003266:	dcf2      	bgt.n	800324e <_printf_i+0x212>
 8003268:	e7eb      	b.n	8003242 <_printf_i+0x206>
 800326a:	2500      	movs	r5, #0
 800326c:	f104 0619 	add.w	r6, r4, #25
 8003270:	e7f5      	b.n	800325e <_printf_i+0x222>
 8003272:	bf00      	nop
 8003274:	080035b3 	.word	0x080035b3
 8003278:	080035c4 	.word	0x080035c4

0800327c <__sflush_r>:
 800327c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003284:	0716      	lsls	r6, r2, #28
 8003286:	4605      	mov	r5, r0
 8003288:	460c      	mov	r4, r1
 800328a:	d454      	bmi.n	8003336 <__sflush_r+0xba>
 800328c:	684b      	ldr	r3, [r1, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	dc02      	bgt.n	8003298 <__sflush_r+0x1c>
 8003292:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	dd48      	ble.n	800332a <__sflush_r+0xae>
 8003298:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800329a:	2e00      	cmp	r6, #0
 800329c:	d045      	beq.n	800332a <__sflush_r+0xae>
 800329e:	2300      	movs	r3, #0
 80032a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032a4:	682f      	ldr	r7, [r5, #0]
 80032a6:	6a21      	ldr	r1, [r4, #32]
 80032a8:	602b      	str	r3, [r5, #0]
 80032aa:	d030      	beq.n	800330e <__sflush_r+0x92>
 80032ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	0759      	lsls	r1, r3, #29
 80032b2:	d505      	bpl.n	80032c0 <__sflush_r+0x44>
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	1ad2      	subs	r2, r2, r3
 80032b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032ba:	b10b      	cbz	r3, 80032c0 <__sflush_r+0x44>
 80032bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032be:	1ad2      	subs	r2, r2, r3
 80032c0:	2300      	movs	r3, #0
 80032c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032c4:	6a21      	ldr	r1, [r4, #32]
 80032c6:	4628      	mov	r0, r5
 80032c8:	47b0      	blx	r6
 80032ca:	1c43      	adds	r3, r0, #1
 80032cc:	89a3      	ldrh	r3, [r4, #12]
 80032ce:	d106      	bne.n	80032de <__sflush_r+0x62>
 80032d0:	6829      	ldr	r1, [r5, #0]
 80032d2:	291d      	cmp	r1, #29
 80032d4:	d82b      	bhi.n	800332e <__sflush_r+0xb2>
 80032d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003380 <__sflush_r+0x104>)
 80032d8:	410a      	asrs	r2, r1
 80032da:	07d6      	lsls	r6, r2, #31
 80032dc:	d427      	bmi.n	800332e <__sflush_r+0xb2>
 80032de:	2200      	movs	r2, #0
 80032e0:	6062      	str	r2, [r4, #4]
 80032e2:	04d9      	lsls	r1, r3, #19
 80032e4:	6922      	ldr	r2, [r4, #16]
 80032e6:	6022      	str	r2, [r4, #0]
 80032e8:	d504      	bpl.n	80032f4 <__sflush_r+0x78>
 80032ea:	1c42      	adds	r2, r0, #1
 80032ec:	d101      	bne.n	80032f2 <__sflush_r+0x76>
 80032ee:	682b      	ldr	r3, [r5, #0]
 80032f0:	b903      	cbnz	r3, 80032f4 <__sflush_r+0x78>
 80032f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80032f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80032f6:	602f      	str	r7, [r5, #0]
 80032f8:	b1b9      	cbz	r1, 800332a <__sflush_r+0xae>
 80032fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032fe:	4299      	cmp	r1, r3
 8003300:	d002      	beq.n	8003308 <__sflush_r+0x8c>
 8003302:	4628      	mov	r0, r5
 8003304:	f7ff fbf2 	bl	8002aec <_free_r>
 8003308:	2300      	movs	r3, #0
 800330a:	6363      	str	r3, [r4, #52]	@ 0x34
 800330c:	e00d      	b.n	800332a <__sflush_r+0xae>
 800330e:	2301      	movs	r3, #1
 8003310:	4628      	mov	r0, r5
 8003312:	47b0      	blx	r6
 8003314:	4602      	mov	r2, r0
 8003316:	1c50      	adds	r0, r2, #1
 8003318:	d1c9      	bne.n	80032ae <__sflush_r+0x32>
 800331a:	682b      	ldr	r3, [r5, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0c6      	beq.n	80032ae <__sflush_r+0x32>
 8003320:	2b1d      	cmp	r3, #29
 8003322:	d001      	beq.n	8003328 <__sflush_r+0xac>
 8003324:	2b16      	cmp	r3, #22
 8003326:	d11e      	bne.n	8003366 <__sflush_r+0xea>
 8003328:	602f      	str	r7, [r5, #0]
 800332a:	2000      	movs	r0, #0
 800332c:	e022      	b.n	8003374 <__sflush_r+0xf8>
 800332e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003332:	b21b      	sxth	r3, r3
 8003334:	e01b      	b.n	800336e <__sflush_r+0xf2>
 8003336:	690f      	ldr	r7, [r1, #16]
 8003338:	2f00      	cmp	r7, #0
 800333a:	d0f6      	beq.n	800332a <__sflush_r+0xae>
 800333c:	0793      	lsls	r3, r2, #30
 800333e:	680e      	ldr	r6, [r1, #0]
 8003340:	bf08      	it	eq
 8003342:	694b      	ldreq	r3, [r1, #20]
 8003344:	600f      	str	r7, [r1, #0]
 8003346:	bf18      	it	ne
 8003348:	2300      	movne	r3, #0
 800334a:	eba6 0807 	sub.w	r8, r6, r7
 800334e:	608b      	str	r3, [r1, #8]
 8003350:	f1b8 0f00 	cmp.w	r8, #0
 8003354:	dde9      	ble.n	800332a <__sflush_r+0xae>
 8003356:	6a21      	ldr	r1, [r4, #32]
 8003358:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800335a:	4643      	mov	r3, r8
 800335c:	463a      	mov	r2, r7
 800335e:	4628      	mov	r0, r5
 8003360:	47b0      	blx	r6
 8003362:	2800      	cmp	r0, #0
 8003364:	dc08      	bgt.n	8003378 <__sflush_r+0xfc>
 8003366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800336a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003378:	4407      	add	r7, r0
 800337a:	eba8 0800 	sub.w	r8, r8, r0
 800337e:	e7e7      	b.n	8003350 <__sflush_r+0xd4>
 8003380:	dfbffffe 	.word	0xdfbffffe

08003384 <_fflush_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	690b      	ldr	r3, [r1, #16]
 8003388:	4605      	mov	r5, r0
 800338a:	460c      	mov	r4, r1
 800338c:	b913      	cbnz	r3, 8003394 <_fflush_r+0x10>
 800338e:	2500      	movs	r5, #0
 8003390:	4628      	mov	r0, r5
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	b118      	cbz	r0, 800339e <_fflush_r+0x1a>
 8003396:	6a03      	ldr	r3, [r0, #32]
 8003398:	b90b      	cbnz	r3, 800339e <_fflush_r+0x1a>
 800339a:	f7ff f9ad 	bl	80026f8 <__sinit>
 800339e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f3      	beq.n	800338e <_fflush_r+0xa>
 80033a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033a8:	07d0      	lsls	r0, r2, #31
 80033aa:	d404      	bmi.n	80033b6 <_fflush_r+0x32>
 80033ac:	0599      	lsls	r1, r3, #22
 80033ae:	d402      	bmi.n	80033b6 <_fflush_r+0x32>
 80033b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033b2:	f7ff fb98 	bl	8002ae6 <__retarget_lock_acquire_recursive>
 80033b6:	4628      	mov	r0, r5
 80033b8:	4621      	mov	r1, r4
 80033ba:	f7ff ff5f 	bl	800327c <__sflush_r>
 80033be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033c0:	07da      	lsls	r2, r3, #31
 80033c2:	4605      	mov	r5, r0
 80033c4:	d4e4      	bmi.n	8003390 <_fflush_r+0xc>
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	059b      	lsls	r3, r3, #22
 80033ca:	d4e1      	bmi.n	8003390 <_fflush_r+0xc>
 80033cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ce:	f7ff fb8b 	bl	8002ae8 <__retarget_lock_release_recursive>
 80033d2:	e7dd      	b.n	8003390 <_fflush_r+0xc>

080033d4 <__swhatbuf_r>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	460c      	mov	r4, r1
 80033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033dc:	2900      	cmp	r1, #0
 80033de:	b096      	sub	sp, #88	@ 0x58
 80033e0:	4615      	mov	r5, r2
 80033e2:	461e      	mov	r6, r3
 80033e4:	da0d      	bge.n	8003402 <__swhatbuf_r+0x2e>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	bf14      	ite	ne
 80033f2:	2340      	movne	r3, #64	@ 0x40
 80033f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033f8:	2000      	movs	r0, #0
 80033fa:	6031      	str	r1, [r6, #0]
 80033fc:	602b      	str	r3, [r5, #0]
 80033fe:	b016      	add	sp, #88	@ 0x58
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	466a      	mov	r2, sp
 8003404:	f000 f848 	bl	8003498 <_fstat_r>
 8003408:	2800      	cmp	r0, #0
 800340a:	dbec      	blt.n	80033e6 <__swhatbuf_r+0x12>
 800340c:	9901      	ldr	r1, [sp, #4]
 800340e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003412:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003416:	4259      	negs	r1, r3
 8003418:	4159      	adcs	r1, r3
 800341a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800341e:	e7eb      	b.n	80033f8 <__swhatbuf_r+0x24>

08003420 <__smakebuf_r>:
 8003420:	898b      	ldrh	r3, [r1, #12]
 8003422:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003424:	079d      	lsls	r5, r3, #30
 8003426:	4606      	mov	r6, r0
 8003428:	460c      	mov	r4, r1
 800342a:	d507      	bpl.n	800343c <__smakebuf_r+0x1c>
 800342c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	6123      	str	r3, [r4, #16]
 8003434:	2301      	movs	r3, #1
 8003436:	6163      	str	r3, [r4, #20]
 8003438:	b003      	add	sp, #12
 800343a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343c:	ab01      	add	r3, sp, #4
 800343e:	466a      	mov	r2, sp
 8003440:	f7ff ffc8 	bl	80033d4 <__swhatbuf_r>
 8003444:	9f00      	ldr	r7, [sp, #0]
 8003446:	4605      	mov	r5, r0
 8003448:	4639      	mov	r1, r7
 800344a:	4630      	mov	r0, r6
 800344c:	f7ff fbba 	bl	8002bc4 <_malloc_r>
 8003450:	b948      	cbnz	r0, 8003466 <__smakebuf_r+0x46>
 8003452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003456:	059a      	lsls	r2, r3, #22
 8003458:	d4ee      	bmi.n	8003438 <__smakebuf_r+0x18>
 800345a:	f023 0303 	bic.w	r3, r3, #3
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	e7e2      	b.n	800342c <__smakebuf_r+0xc>
 8003466:	89a3      	ldrh	r3, [r4, #12]
 8003468:	6020      	str	r0, [r4, #0]
 800346a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	9b01      	ldr	r3, [sp, #4]
 8003472:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003476:	b15b      	cbz	r3, 8003490 <__smakebuf_r+0x70>
 8003478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800347c:	4630      	mov	r0, r6
 800347e:	f000 f81d 	bl	80034bc <_isatty_r>
 8003482:	b128      	cbz	r0, 8003490 <__smakebuf_r+0x70>
 8003484:	89a3      	ldrh	r3, [r4, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	431d      	orrs	r5, r3
 8003494:	81a5      	strh	r5, [r4, #12]
 8003496:	e7cf      	b.n	8003438 <__smakebuf_r+0x18>

08003498 <_fstat_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4d07      	ldr	r5, [pc, #28]	@ (80034b8 <_fstat_r+0x20>)
 800349c:	2300      	movs	r3, #0
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	f7fe ff1a 	bl	80022de <_fstat>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d102      	bne.n	80034b4 <_fstat_r+0x1c>
 80034ae:	682b      	ldr	r3, [r5, #0]
 80034b0:	b103      	cbz	r3, 80034b4 <_fstat_r+0x1c>
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
 80034b6:	bf00      	nop
 80034b8:	2000029c 	.word	0x2000029c

080034bc <_isatty_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	4d06      	ldr	r5, [pc, #24]	@ (80034d8 <_isatty_r+0x1c>)
 80034c0:	2300      	movs	r3, #0
 80034c2:	4604      	mov	r4, r0
 80034c4:	4608      	mov	r0, r1
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	f7ff f86c 	bl	80025a4 <_isatty>
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d102      	bne.n	80034d6 <_isatty_r+0x1a>
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	b103      	cbz	r3, 80034d6 <_isatty_r+0x1a>
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
 80034d8:	2000029c 	.word	0x2000029c

080034dc <_sbrk_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4d06      	ldr	r5, [pc, #24]	@ (80034f8 <_sbrk_r+0x1c>)
 80034e0:	2300      	movs	r3, #0
 80034e2:	4604      	mov	r4, r0
 80034e4:	4608      	mov	r0, r1
 80034e6:	602b      	str	r3, [r5, #0]
 80034e8:	f7fd fb38 	bl	8000b5c <_sbrk>
 80034ec:	1c43      	adds	r3, r0, #1
 80034ee:	d102      	bne.n	80034f6 <_sbrk_r+0x1a>
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	b103      	cbz	r3, 80034f6 <_sbrk_r+0x1a>
 80034f4:	6023      	str	r3, [r4, #0]
 80034f6:	bd38      	pop	{r3, r4, r5, pc}
 80034f8:	2000029c 	.word	0x2000029c

080034fc <_init>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr

08003508 <_fini>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr
