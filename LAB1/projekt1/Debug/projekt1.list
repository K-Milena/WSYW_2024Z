
projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800287c  0800287c  0000387c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c8  080028c8  00004070  2**0
                  CONTENTS
  4 .ARM          00000008  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028d0  080028d0  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d0  080028d0  000038d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028d4  080028d4  000038d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080028d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  08002948  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08002948  00004290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b09  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010df  00000000  00000000  00007ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00008c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000304  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f26  00000000  00000000  000093cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005b7b  00000000  00000000  0001e2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ae1  00000000  00000000  00023e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a594e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b8  00000000  00000000  000a5994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000a724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002864 	.word	0x08002864

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08002864 	.word	0x08002864

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	@ 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4ba1      	ldr	r3, [pc, #644]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f6:	4aa0      	ldr	r2, [pc, #640]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fe:	4b9e      	ldr	r3, [pc, #632]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b9a      	ldr	r3, [pc, #616]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a99      	ldr	r2, [pc, #612]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b97      	ldr	r3, [pc, #604]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b93      	ldr	r3, [pc, #588]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a92      	ldr	r2, [pc, #584]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b90      	ldr	r3, [pc, #576]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b8c      	ldr	r3, [pc, #560]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a8b      	ldr	r2, [pc, #556]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b89      	ldr	r3, [pc, #548]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b85      	ldr	r3, [pc, #532]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a84      	ldr	r2, [pc, #528]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b82      	ldr	r3, [pc, #520]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b7e      	ldr	r3, [pc, #504]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a7d      	ldr	r2, [pc, #500]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b7b      	ldr	r3, [pc, #492]	@ (8000778 <MX_GPIO_Init+0x2a0>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4878      	ldr	r0, [pc, #480]	@ (800077c <MX_GPIO_Init+0x2a4>)
 800059c:	f000 fd88 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4876      	ldr	r0, [pc, #472]	@ (8000780 <MX_GPIO_Init+0x2a8>)
 80005a6:	f000 fd83 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005b0:	4874      	ldr	r0, [pc, #464]	@ (8000784 <MX_GPIO_Init+0x2ac>)
 80005b2:	f000 fd7d 	bl	80010b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b6:	2304      	movs	r3, #4
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	486c      	ldr	r0, [pc, #432]	@ (800077c <MX_GPIO_Init+0x2a4>)
 80005ca:	f000 fbd5 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4865      	ldr	r0, [pc, #404]	@ (800077c <MX_GPIO_Init+0x2a4>)
 80005e6:	f000 fbc7 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80005ea:	2332      	movs	r3, #50	@ 0x32
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	485f      	ldr	r0, [pc, #380]	@ (800077c <MX_GPIO_Init+0x2a4>)
 8000600:	f000 fbba 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2300      	movs	r3, #0
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4859      	ldr	r0, [pc, #356]	@ (8000780 <MX_GPIO_Init+0x2a8>)
 800061c:	f000 fbac 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000620:	2308      	movs	r3, #8
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000630:	2305      	movs	r3, #5
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4851      	ldr	r0, [pc, #324]	@ (8000780 <MX_GPIO_Init+0x2a8>)
 800063c:	f000 fb9c 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	484d      	ldr	r0, [pc, #308]	@ (8000788 <MX_GPIO_Init+0x2b0>)
 8000654:	f000 fb90 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000658:	2310      	movs	r3, #16
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000668:	2306      	movs	r3, #6
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4845      	ldr	r0, [pc, #276]	@ (8000788 <MX_GPIO_Init+0x2b0>)
 8000674:	f000 fb80 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000678:	23e0      	movs	r3, #224	@ 0xe0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000688:	2305      	movs	r3, #5
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	483d      	ldr	r0, [pc, #244]	@ (8000788 <MX_GPIO_Init+0x2b0>)
 8000694:	f000 fb70 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000698:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006aa:	2305      	movs	r3, #5
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4835      	ldr	r0, [pc, #212]	@ (800078c <MX_GPIO_Init+0x2b4>)
 80006b6:	f000 fb5f 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006ba:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	482c      	ldr	r0, [pc, #176]	@ (8000784 <MX_GPIO_Init+0x2ac>)
 80006d4:	f000 fb50 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006d8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006ea:	2306      	movs	r3, #6
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4822      	ldr	r0, [pc, #136]	@ (8000780 <MX_GPIO_Init+0x2a8>)
 80006f6:	f000 fb3f 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80006fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	481e      	ldr	r0, [pc, #120]	@ (8000788 <MX_GPIO_Init+0x2b0>)
 8000710:	f000 fb32 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000714:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000726:	230a      	movs	r3, #10
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_GPIO_Init+0x2b0>)
 8000732:	f000 fb21 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000736:	2320      	movs	r3, #32
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	480e      	ldr	r0, [pc, #56]	@ (8000784 <MX_GPIO_Init+0x2ac>)
 800074a:	f000 fb15 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800074e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4808      	ldr	r0, [pc, #32]	@ (800078c <MX_GPIO_Init+0x2b4>)
 800076c:	f000 fb04 	bl	8000d78 <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	@ 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40021000 	.word	0x40021000
 8000780:	40020800 	.word	0x40020800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020000 	.word	0x40020000
 800078c:	40020400 	.word	0x40020400

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles(); //do semihostingu
 8000794:	f001 fb3c 	bl	8001e10 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 f972 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f836 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff fe9a 	bl	80004d8 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80007a4:	2101      	movs	r1, #1
 80007a6:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <main+0x68>)
 80007a8:	f000 fc6a 	bl	8001080 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f8      	beq.n	80007a4 <main+0x14>
	  {
		  HAL_Delay(10); 	// Zapobieganie drganiu styków
 80007b2:	200a      	movs	r0, #10
 80007b4:	f000 f9d6 	bl	8000b64 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80007b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007bc:	480f      	ldr	r0, [pc, #60]	@ (80007fc <main+0x6c>)
 80007be:	f000 fc90 	bl	80010e2 <HAL_GPIO_TogglePin>
		  if(status==0)
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <main+0x70>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d106      	bne.n	80007d8 <main+0x48>
		  {
			  printf("LED świeci się\n");
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <main+0x74>)
 80007cc:	f001 fcb6 	bl	800213c <puts>
			  status=1;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <main+0x70>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e005      	b.n	80007e4 <main+0x54>
		  }else{
			  printf("LED zgasł\n");
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <main+0x78>)
 80007da:	f001 fcaf 	bl	800213c <puts>
			  status=0;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <main+0x70>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
		  }
		  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));		// Zapobieganie drganiu styków
 80007e4:	bf00      	nop
 80007e6:	2101      	movs	r1, #1
 80007e8:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <main+0x68>)
 80007ea:	f000 fc49 	bl	8001080 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f8      	bne.n	80007e6 <main+0x56>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80007f4:	e7d6      	b.n	80007a4 <main+0x14>
 80007f6:	bf00      	nop
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	2000008c 	.word	0x2000008c
 8000804:	0800287c 	.word	0x0800287c
 8000808:	08002890 	.word	0x08002890

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	@ 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fd6e 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a27      	ldr	r2, [pc, #156]	@ (80008d8 <SystemClock_Config+0xcc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a21      	ldr	r2, [pc, #132]	@ (80008dc <SystemClock_Config+0xd0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000868:	2302      	movs	r3, #2
 800086a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000870:	2310      	movs	r3, #16
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000880:	23c0      	movs	r3, #192	@ 0xc0
 8000882:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000884:	2304      	movs	r3, #4
 8000886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fc41 	bl	8001118 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800089c:	f000 f820 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2103      	movs	r1, #3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fea2 	bl	8001608 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ca:	f000 f809 	bl	80008e0 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	@ 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800092a:	2007      	movs	r0, #7
 800092c:	f000 f9f0 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f8c7 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	@ (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	@ (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f001 fce4 	bl	8002398 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	@ (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20020000 	.word	0x20020000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	20000090 	.word	0x20000090
 8000a04:	20000290 	.word	0x20000290

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f001 fca3 	bl	80023a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fe97 	bl	8000790 <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a70:	080028d8 	.word	0x080028d8
  ldr r2, =_sbss
 8000a74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a78:	20000290 	.word	0x20000290

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f931 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff ff1a 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f93b 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f911 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000094 	.word	0x20000094

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000094 	.word	0x20000094

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	@ (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	@ 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e159      	b.n	8001048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8148 	bne.w	8001042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a2 	beq.w	8001042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	@ (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	4a56      	ldr	r2, [pc, #344]	@ (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0e:	4b54      	ldr	r3, [pc, #336]	@ (8001060 <HAL_GPIO_Init+0x2e8>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a52      	ldr	r2, [pc, #328]	@ (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_GPIO_Init+0x2f0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x202>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a48      	ldr	r2, [pc, #288]	@ (800106c <HAL_GPIO_Init+0x2f4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x1fe>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a47      	ldr	r2, [pc, #284]	@ (8001070 <HAL_GPIO_Init+0x2f8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x1fa>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a46      	ldr	r2, [pc, #280]	@ (8001074 <HAL_GPIO_Init+0x2fc>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x1f6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a45      	ldr	r2, [pc, #276]	@ (8001078 <HAL_GPIO_Init+0x300>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x1f2>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e006      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e004      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f72:	2302      	movs	r3, #2
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_Init+0x204>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	4093      	lsls	r3, r2
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f8c:	4935      	ldr	r1, [pc, #212]	@ (8001064 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9a:	4b38      	ldr	r3, [pc, #224]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe8:	4a24      	ldr	r2, [pc, #144]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fee:	4b23      	ldr	r3, [pc, #140]	@ (800107c <HAL_GPIO_Init+0x304>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001012:	4a1a      	ldr	r2, [pc, #104]	@ (800107c <HAL_GPIO_Init+0x304>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <HAL_GPIO_Init+0x304>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800103c:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <HAL_GPIO_Init+0x304>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	f67f aea2 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800
 8001064:	40013800 	.word	0x40013800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	041a      	lsls	r2, r3, #16
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43d9      	mvns	r1, r3
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	400b      	ands	r3, r1
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e267      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d075      	beq.n	8001222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001136:	4b88      	ldr	r3, [pc, #544]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d00c      	beq.n	800115c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001142:	4b85      	ldr	r3, [pc, #532]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800114a:	2b08      	cmp	r3, #8
 800114c:	d112      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800114e:	4b82      	ldr	r3, [pc, #520]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001156:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800115a:	d10b      	bne.n	8001174 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05b      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d157      	bne.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e242      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	d106      	bne.n	800118c <HAL_RCC_OscConfig+0x74>
 800117e:	4b76      	ldr	r3, [pc, #472]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e01d      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001194:	d10c      	bne.n	80011b0 <HAL_RCC_OscConfig+0x98>
 8001196:	4b70      	ldr	r3, [pc, #448]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6f      	ldr	r2, [pc, #444]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_RCC_OscConfig+0xb0>
 80011b0:	4b69      	ldr	r3, [pc, #420]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a68      	ldr	r2, [pc, #416]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b66      	ldr	r3, [pc, #408]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a65      	ldr	r2, [pc, #404]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcbc 	bl	8000b4c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcb8 	bl	8000b4c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	@ 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e207      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0xc0>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fca8 	bl	8000b4c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fca4 	bl	8000b4c <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	@ 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1f3      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	4b51      	ldr	r3, [pc, #324]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0xe8>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d063      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800122e:	4b4a      	ldr	r3, [pc, #296]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123a:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001242:	2b08      	cmp	r3, #8
 8001244:	d11c      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001246:	4b44      	ldr	r3, [pc, #272]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e1c7      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4937      	ldr	r1, [pc, #220]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127e:	e03a      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d020      	beq.n	80012ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	4b34      	ldr	r3, [pc, #208]	@ (800135c <HAL_RCC_OscConfig+0x244>)
 800128a:	2201      	movs	r2, #1
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128e:	f7ff fc5d 	bl	8000b4c <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001296:	f7ff fc59 	bl	8000b4c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e1a8      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4925      	ldr	r1, [pc, #148]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e015      	b.n	80012f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	4b24      	ldr	r3, [pc, #144]	@ (800135c <HAL_RCC_OscConfig+0x244>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc3c 	bl	8000b4c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc38 	bl	8000b4c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e187      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d036      	beq.n	8001370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d016      	beq.n	8001338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_RCC_OscConfig+0x248>)
 800130c:	2201      	movs	r2, #1
 800130e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fc1c 	bl	8000b4c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fc18 	bl	8000b4c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e167      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_RCC_OscConfig+0x240>)
 800132c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x200>
 8001336:	e01b      	b.n	8001370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_RCC_OscConfig+0x248>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fc05 	bl	8000b4c <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00e      	b.n	8001364 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fc01 	bl	8000b4c <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d907      	bls.n	8001364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e150      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001358:	40023800 	.word	0x40023800
 800135c:	42470000 	.word	0x42470000
 8001360:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b88      	ldr	r3, [pc, #544]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ea      	bne.n	8001346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8097 	beq.w	80014ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b81      	ldr	r3, [pc, #516]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b7d      	ldr	r3, [pc, #500]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a7c      	ldr	r2, [pc, #496]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b7a      	ldr	r3, [pc, #488]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b77      	ldr	r3, [pc, #476]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d118      	bne.n	80013ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ba:	4b74      	ldr	r3, [pc, #464]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a73      	ldr	r2, [pc, #460]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fbc1 	bl	8000b4c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fbbd 	bl	8000b4c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e10c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b6a      	ldr	r3, [pc, #424]	@ (800158c <HAL_RCC_OscConfig+0x474>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x2ea>
 80013f4:	4b64      	ldr	r3, [pc, #400]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f8:	4a63      	ldr	r2, [pc, #396]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001400:	e01c      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x30c>
 800140a:	4b5f      	ldr	r3, [pc, #380]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140e:	4a5e      	ldr	r2, [pc, #376]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6713      	str	r3, [r2, #112]	@ 0x70
 8001416:	4b5c      	ldr	r3, [pc, #368]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141a:	4a5b      	ldr	r2, [pc, #364]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	@ 0x70
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x324>
 8001424:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001428:	4a57      	ldr	r2, [pc, #348]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001430:	4b55      	ldr	r3, [pc, #340]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001434:	4a54      	ldr	r2, [pc, #336]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001436:	f023 0304 	bic.w	r3, r3, #4
 800143a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d015      	beq.n	8001470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fb82 	bl	8000b4c <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fb7e 	bl	8000b4c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0cb      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001462:	4b49      	ldr	r3, [pc, #292]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0ee      	beq.n	800144c <HAL_RCC_OscConfig+0x334>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fb6c 	bl	8000b4c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001476:	e00a      	b.n	800148e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fb68 	bl	8000b4c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e0b5      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148e:	4b3e      	ldr	r3, [pc, #248]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ee      	bne.n	8001478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	4a38      	ldr	r2, [pc, #224]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a1 	beq.w	80015f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d05c      	beq.n	800157c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d141      	bne.n	800154e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <HAL_RCC_OscConfig+0x478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb3c 	bl	8000b4c <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d8:	f7ff fb38 	bl	8000b4c <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e087      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	491b      	ldr	r1, [pc, #108]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_RCC_OscConfig+0x478>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb11 	bl	8000b4c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fb0d 	bl	8000b4c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e05c      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x416>
 800154c:	e054      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <HAL_RCC_OscConfig+0x478>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fafa 	bl	8000b4c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff faf6 	bl	8000b4c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e045      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_RCC_OscConfig+0x470>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x444>
 800157a:	e03d      	b.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d107      	bne.n	8001594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e038      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
 8001588:	40023800 	.word	0x40023800
 800158c:	40007000 	.word	0x40007000
 8001590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d028      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d121      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d111      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	085b      	lsrs	r3, r3, #1
 80015dc:	3b01      	subs	r3, #1
 80015de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cc      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b68      	ldr	r3, [pc, #416]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d90c      	bls.n	8001644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b65      	ldr	r3, [pc, #404]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a58      	ldr	r2, [pc, #352]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001666:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a52      	ldr	r2, [pc, #328]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800167e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d044      	beq.n	8001728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d119      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d003      	beq.n	80016c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e06f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e067      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e6:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f023 0203 	bic.w	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4934      	ldr	r1, [pc, #208]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f8:	f7ff fa28 	bl	8000b4c <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff fa24 	bl	8000b4c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e04f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001716:	4b2b      	ldr	r3, [pc, #172]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 020c 	and.w	r2, r3, #12
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d1eb      	bne.n	8001700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001728:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d20c      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490a      	ldr	r1, [pc, #40]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f988 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00
 80017c4:	40023800 	.word	0x40023800
 80017c8:	0800289c 	.word	0x0800289c
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d8:	b094      	sub	sp, #80	@ 0x50
 80017da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ec:	4b79      	ldr	r3, [pc, #484]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d00d      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x40>
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	f200 80e1 	bhi.w	80019c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x34>
 8001802:	2b04      	cmp	r3, #4
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x3a>
 8001806:	e0db      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001808:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800180c:	e0db      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180e:	4b73      	ldr	r3, [pc, #460]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x208>)
 8001810:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001812:	e0d8      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001814:	4b6f      	ldr	r3, [pc, #444]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800181c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181e:	4b6d      	ldr	r3, [pc, #436]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d063      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182a:	4b6a      	ldr	r3, [pc, #424]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	2200      	movs	r2, #0
 8001832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001834:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	633b      	str	r3, [r7, #48]	@ 0x30
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	@ 0x34
 8001842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001846:	4622      	mov	r2, r4
 8001848:	462b      	mov	r3, r5
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	0159      	lsls	r1, r3, #5
 8001854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001858:	0150      	lsls	r0, r2, #5
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4621      	mov	r1, r4
 8001860:	1a51      	subs	r1, r2, r1
 8001862:	6139      	str	r1, [r7, #16]
 8001864:	4629      	mov	r1, r5
 8001866:	eb63 0301 	sbc.w	r3, r3, r1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001878:	4659      	mov	r1, fp
 800187a:	018b      	lsls	r3, r1, #6
 800187c:	4651      	mov	r1, sl
 800187e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001882:	4651      	mov	r1, sl
 8001884:	018a      	lsls	r2, r1, #6
 8001886:	4651      	mov	r1, sl
 8001888:	ebb2 0801 	subs.w	r8, r2, r1
 800188c:	4659      	mov	r1, fp
 800188e:	eb63 0901 	sbc.w	r9, r3, r1
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a6:	4690      	mov	r8, r2
 80018a8:	4699      	mov	r9, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	eb18 0303 	adds.w	r3, r8, r3
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	eb49 0303 	adc.w	r3, r9, r3
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c6:	4629      	mov	r1, r5
 80018c8:	024b      	lsls	r3, r1, #9
 80018ca:	4621      	mov	r1, r4
 80018cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018d0:	4621      	mov	r1, r4
 80018d2:	024a      	lsls	r2, r1, #9
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018da:	2200      	movs	r2, #0
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018e4:	f7fe fc80 	bl	80001e8 <__aeabi_uldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4613      	mov	r3, r2
 80018ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018f0:	e058      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	2200      	movs	r2, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	4611      	mov	r1, r2
 80018fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
 8001908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800190c:	4642      	mov	r2, r8
 800190e:	464b      	mov	r3, r9
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	0159      	lsls	r1, r3, #5
 800191a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191e:	0150      	lsls	r0, r2, #5
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4641      	mov	r1, r8
 8001926:	ebb2 0a01 	subs.w	sl, r2, r1
 800192a:	4649      	mov	r1, r9
 800192c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800193c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001944:	ebb2 040a 	subs.w	r4, r2, sl
 8001948:	eb63 050b 	sbc.w	r5, r3, fp
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	00eb      	lsls	r3, r5, #3
 8001956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800195a:	00e2      	lsls	r2, r4, #3
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	4643      	mov	r3, r8
 8001962:	18e3      	adds	r3, r4, r3
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	464b      	mov	r3, r9
 8001968:	eb45 0303 	adc.w	r3, r5, r3
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800197a:	4629      	mov	r1, r5
 800197c:	028b      	lsls	r3, r1, #10
 800197e:	4621      	mov	r1, r4
 8001980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001984:	4621      	mov	r1, r4
 8001986:	028a      	lsls	r2, r1, #10
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800198e:	2200      	movs	r2, #0
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	61fa      	str	r2, [r7, #28]
 8001994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001998:	f7fe fc26 	bl	80001e8 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c1b      	lsrs	r3, r3, #16
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3750      	adds	r7, #80	@ 0x50
 80019cc:	46bd      	mov	sp, r7
 80019ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	007a1200 	.word	0x007a1200

080019e0 <findslot>:
 80019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <findslot+0x2c>)
 80019e2:	b510      	push	{r4, lr}
 80019e4:	4604      	mov	r4, r0
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	b118      	cbz	r0, 80019f2 <findslot+0x12>
 80019ea:	6a03      	ldr	r3, [r0, #32]
 80019ec:	b90b      	cbnz	r3, 80019f2 <findslot+0x12>
 80019ee:	f000 fb19 	bl	8002024 <__sinit>
 80019f2:	2c13      	cmp	r4, #19
 80019f4:	d807      	bhi.n	8001a06 <findslot+0x26>
 80019f6:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <findslot+0x30>)
 80019f8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80019fc:	3201      	adds	r2, #1
 80019fe:	d002      	beq.n	8001a06 <findslot+0x26>
 8001a00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001a04:	bd10      	pop	{r4, pc}
 8001a06:	2000      	movs	r0, #0
 8001a08:	e7fc      	b.n	8001a04 <findslot+0x24>
 8001a0a:	bf00      	nop
 8001a0c:	20000020 	.word	0x20000020
 8001a10:	200000a4 	.word	0x200000a4

08001a14 <error>:
 8001a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a16:	4604      	mov	r4, r0
 8001a18:	f000 fcbe 	bl	8002398 <__errno>
 8001a1c:	2613      	movs	r6, #19
 8001a1e:	4605      	mov	r5, r0
 8001a20:	2700      	movs	r7, #0
 8001a22:	4630      	mov	r0, r6
 8001a24:	4639      	mov	r1, r7
 8001a26:	beab      	bkpt	0x00ab
 8001a28:	4606      	mov	r6, r0
 8001a2a:	602e      	str	r6, [r5, #0]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a30 <checkerror>:
 8001a30:	1c43      	adds	r3, r0, #1
 8001a32:	d101      	bne.n	8001a38 <checkerror+0x8>
 8001a34:	f7ff bfee 	b.w	8001a14 <error>
 8001a38:	4770      	bx	lr

08001a3a <_swiread>:
 8001a3a:	b530      	push	{r4, r5, lr}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001a42:	9203      	str	r2, [sp, #12]
 8001a44:	2406      	movs	r4, #6
 8001a46:	ad01      	add	r5, sp, #4
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	beab      	bkpt	0x00ab
 8001a4e:	4604      	mov	r4, r0
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff ffed 	bl	8001a30 <checkerror>
 8001a56:	b005      	add	sp, #20
 8001a58:	bd30      	pop	{r4, r5, pc}

08001a5a <_read>:
 8001a5a:	b570      	push	{r4, r5, r6, lr}
 8001a5c:	460e      	mov	r6, r1
 8001a5e:	4614      	mov	r4, r2
 8001a60:	f7ff ffbe 	bl	80019e0 <findslot>
 8001a64:	4605      	mov	r5, r0
 8001a66:	b930      	cbnz	r0, 8001a76 <_read+0x1c>
 8001a68:	f000 fc96 	bl	8002398 <__errno>
 8001a6c:	2309      	movs	r3, #9
 8001a6e:	6003      	str	r3, [r0, #0]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	bd70      	pop	{r4, r5, r6, pc}
 8001a76:	6800      	ldr	r0, [r0, #0]
 8001a78:	4622      	mov	r2, r4
 8001a7a:	4631      	mov	r1, r6
 8001a7c:	f7ff ffdd 	bl	8001a3a <_swiread>
 8001a80:	1c43      	adds	r3, r0, #1
 8001a82:	d0f5      	beq.n	8001a70 <_read+0x16>
 8001a84:	686b      	ldr	r3, [r5, #4]
 8001a86:	1a20      	subs	r0, r4, r0
 8001a88:	4403      	add	r3, r0
 8001a8a:	606b      	str	r3, [r5, #4]
 8001a8c:	e7f2      	b.n	8001a74 <_read+0x1a>

08001a8e <_swilseek>:
 8001a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a90:	460c      	mov	r4, r1
 8001a92:	4616      	mov	r6, r2
 8001a94:	f7ff ffa4 	bl	80019e0 <findslot>
 8001a98:	4605      	mov	r5, r0
 8001a9a:	b940      	cbnz	r0, 8001aae <_swilseek+0x20>
 8001a9c:	f000 fc7c 	bl	8002398 <__errno>
 8001aa0:	2309      	movs	r3, #9
 8001aa2:	6003      	str	r3, [r0, #0]
 8001aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	b003      	add	sp, #12
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	2e02      	cmp	r6, #2
 8001ab0:	d903      	bls.n	8001aba <_swilseek+0x2c>
 8001ab2:	f000 fc71 	bl	8002398 <__errno>
 8001ab6:	2316      	movs	r3, #22
 8001ab8:	e7f3      	b.n	8001aa2 <_swilseek+0x14>
 8001aba:	2e01      	cmp	r6, #1
 8001abc:	d112      	bne.n	8001ae4 <_swilseek+0x56>
 8001abe:	6843      	ldr	r3, [r0, #4]
 8001ac0:	18e4      	adds	r4, r4, r3
 8001ac2:	d4f6      	bmi.n	8001ab2 <_swilseek+0x24>
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	260a      	movs	r6, #10
 8001ac8:	e9cd 3400 	strd	r3, r4, [sp]
 8001acc:	466f      	mov	r7, sp
 8001ace:	4630      	mov	r0, r6
 8001ad0:	4639      	mov	r1, r7
 8001ad2:	beab      	bkpt	0x00ab
 8001ad4:	4606      	mov	r6, r0
 8001ad6:	4630      	mov	r0, r6
 8001ad8:	f7ff ffaa 	bl	8001a30 <checkerror>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	dbe1      	blt.n	8001aa4 <_swilseek+0x16>
 8001ae0:	606c      	str	r4, [r5, #4]
 8001ae2:	e7e1      	b.n	8001aa8 <_swilseek+0x1a>
 8001ae4:	2e02      	cmp	r6, #2
 8001ae6:	6803      	ldr	r3, [r0, #0]
 8001ae8:	d1ec      	bne.n	8001ac4 <_swilseek+0x36>
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	260c      	movs	r6, #12
 8001aee:	466f      	mov	r7, sp
 8001af0:	4630      	mov	r0, r6
 8001af2:	4639      	mov	r1, r7
 8001af4:	beab      	bkpt	0x00ab
 8001af6:	4606      	mov	r6, r0
 8001af8:	4630      	mov	r0, r6
 8001afa:	f7ff ff99 	bl	8001a30 <checkerror>
 8001afe:	1c43      	adds	r3, r0, #1
 8001b00:	d0d0      	beq.n	8001aa4 <_swilseek+0x16>
 8001b02:	4404      	add	r4, r0
 8001b04:	e7de      	b.n	8001ac4 <_swilseek+0x36>

08001b06 <_lseek>:
 8001b06:	f7ff bfc2 	b.w	8001a8e <_swilseek>

08001b0a <_swiwrite>:
 8001b0a:	b530      	push	{r4, r5, lr}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001b12:	9203      	str	r2, [sp, #12]
 8001b14:	2405      	movs	r4, #5
 8001b16:	ad01      	add	r5, sp, #4
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	beab      	bkpt	0x00ab
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff ff85 	bl	8001a30 <checkerror>
 8001b26:	b005      	add	sp, #20
 8001b28:	bd30      	pop	{r4, r5, pc}

08001b2a <_write>:
 8001b2a:	b570      	push	{r4, r5, r6, lr}
 8001b2c:	460e      	mov	r6, r1
 8001b2e:	4615      	mov	r5, r2
 8001b30:	f7ff ff56 	bl	80019e0 <findslot>
 8001b34:	4604      	mov	r4, r0
 8001b36:	b930      	cbnz	r0, 8001b46 <_write+0x1c>
 8001b38:	f000 fc2e 	bl	8002398 <__errno>
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	6003      	str	r3, [r0, #0]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
 8001b46:	6800      	ldr	r0, [r0, #0]
 8001b48:	462a      	mov	r2, r5
 8001b4a:	4631      	mov	r1, r6
 8001b4c:	f7ff ffdd 	bl	8001b0a <_swiwrite>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	dbf5      	blt.n	8001b40 <_write+0x16>
 8001b54:	6862      	ldr	r2, [r4, #4]
 8001b56:	1ae8      	subs	r0, r5, r3
 8001b58:	4402      	add	r2, r0
 8001b5a:	42ab      	cmp	r3, r5
 8001b5c:	6062      	str	r2, [r4, #4]
 8001b5e:	d1f1      	bne.n	8001b44 <_write+0x1a>
 8001b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff bf55 	b.w	8001a14 <error>

08001b6a <_swiclose>:
 8001b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b6c:	2402      	movs	r4, #2
 8001b6e:	9001      	str	r0, [sp, #4]
 8001b70:	ad01      	add	r5, sp, #4
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	beab      	bkpt	0x00ab
 8001b78:	4604      	mov	r4, r0
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f7ff ff58 	bl	8001a30 <checkerror>
 8001b80:	b003      	add	sp, #12
 8001b82:	bd30      	pop	{r4, r5, pc}

08001b84 <_close>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4605      	mov	r5, r0
 8001b88:	f7ff ff2a 	bl	80019e0 <findslot>
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	b930      	cbnz	r0, 8001b9e <_close+0x1a>
 8001b90:	f000 fc02 	bl	8002398 <__errno>
 8001b94:	2309      	movs	r3, #9
 8001b96:	6003      	str	r3, [r0, #0]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	bd38      	pop	{r3, r4, r5, pc}
 8001b9e:	3d01      	subs	r5, #1
 8001ba0:	2d01      	cmp	r5, #1
 8001ba2:	d809      	bhi.n	8001bb8 <_close+0x34>
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <_close+0x40>)
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d104      	bne.n	8001bb8 <_close+0x34>
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	6023      	str	r3, [r4, #0]
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	e7f1      	b.n	8001b9c <_close+0x18>
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	f7ff ffd6 	bl	8001b6a <_swiclose>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d0f5      	beq.n	8001bae <_close+0x2a>
 8001bc2:	e7eb      	b.n	8001b9c <_close+0x18>
 8001bc4:	200000a4 	.word	0x200000a4

08001bc8 <_swistat>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	460c      	mov	r4, r1
 8001bcc:	f7ff ff08 	bl	80019e0 <findslot>
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	b930      	cbnz	r0, 8001be2 <_swistat+0x1a>
 8001bd4:	f000 fbe0 	bl	8002398 <__errno>
 8001bd8:	2309      	movs	r3, #9
 8001bda:	6003      	str	r3, [r0, #0]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
 8001be2:	6863      	ldr	r3, [r4, #4]
 8001be4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001be8:	6063      	str	r3, [r4, #4]
 8001bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bee:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001bf0:	260c      	movs	r6, #12
 8001bf2:	4630      	mov	r0, r6
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	beab      	bkpt	0x00ab
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f7ff ff18 	bl	8001a30 <checkerror>
 8001c00:	1c43      	adds	r3, r0, #1
 8001c02:	d0eb      	beq.n	8001bdc <_swistat+0x14>
 8001c04:	6120      	str	r0, [r4, #16]
 8001c06:	2000      	movs	r0, #0
 8001c08:	e7ea      	b.n	8001be0 <_swistat+0x18>

08001c0a <_fstat>:
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4604      	mov	r4, r0
 8001c12:	2258      	movs	r2, #88	@ 0x58
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fb71 	bl	80022fc <memset>
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c22:	f7ff bfd1 	b.w	8001bc8 <_swistat>

08001c26 <_stat>:
 8001c26:	b538      	push	{r3, r4, r5, lr}
 8001c28:	460d      	mov	r5, r1
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	2258      	movs	r2, #88	@ 0x58
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4628      	mov	r0, r5
 8001c32:	f000 fb63 	bl	80022fc <memset>
 8001c36:	4620      	mov	r0, r4
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f000 f811 	bl	8001c60 <_swiopen>
 8001c3e:	1c43      	adds	r3, r0, #1
 8001c40:	4604      	mov	r4, r0
 8001c42:	d00b      	beq.n	8001c5c <_stat+0x36>
 8001c44:	686b      	ldr	r3, [r5, #4]
 8001c46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001c4a:	606b      	str	r3, [r5, #4]
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7ff ffbb 	bl	8001bc8 <_swistat>
 8001c52:	4605      	mov	r5, r0
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff ff95 	bl	8001b84 <_close>
 8001c5a:	462c      	mov	r4, r5
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}

08001c60 <_swiopen>:
 8001c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c64:	4f29      	ldr	r7, [pc, #164]	@ (8001d0c <_swiopen+0xac>)
 8001c66:	b096      	sub	sp, #88	@ 0x58
 8001c68:	4682      	mov	sl, r0
 8001c6a:	460e      	mov	r6, r1
 8001c6c:	2400      	movs	r4, #0
 8001c6e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8001c72:	3301      	adds	r3, #1
 8001c74:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8001c78:	d00c      	beq.n	8001c94 <_swiopen+0x34>
 8001c7a:	3401      	adds	r4, #1
 8001c7c:	2c14      	cmp	r4, #20
 8001c7e:	d1f6      	bne.n	8001c6e <_swiopen+0xe>
 8001c80:	f000 fb8a 	bl	8002398 <__errno>
 8001c84:	2318      	movs	r3, #24
 8001c86:	6003      	str	r3, [r0, #0]
 8001c88:	f04f 34ff 	mov.w	r4, #4294967295
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	b016      	add	sp, #88	@ 0x58
 8001c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c94:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8001c98:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8001c9c:	46e9      	mov	r9, sp
 8001c9e:	d109      	bne.n	8001cb4 <_swiopen+0x54>
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	4650      	mov	r0, sl
 8001ca4:	f7ff ffbf 	bl	8001c26 <_stat>
 8001ca8:	3001      	adds	r0, #1
 8001caa:	d003      	beq.n	8001cb4 <_swiopen+0x54>
 8001cac:	f000 fb74 	bl	8002398 <__errno>
 8001cb0:	2311      	movs	r3, #17
 8001cb2:	e7e8      	b.n	8001c86 <_swiopen+0x26>
 8001cb4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8001cb8:	f240 6301 	movw	r3, #1537	@ 0x601
 8001cbc:	07b2      	lsls	r2, r6, #30
 8001cbe:	bf48      	it	mi
 8001cc0:	f045 0502 	orrmi.w	r5, r5, #2
 8001cc4:	421e      	tst	r6, r3
 8001cc6:	bf18      	it	ne
 8001cc8:	f045 0504 	orrne.w	r5, r5, #4
 8001ccc:	0733      	lsls	r3, r6, #28
 8001cce:	bf48      	it	mi
 8001cd0:	f025 0504 	bicmi.w	r5, r5, #4
 8001cd4:	4650      	mov	r0, sl
 8001cd6:	bf48      	it	mi
 8001cd8:	f045 0508 	orrmi.w	r5, r5, #8
 8001cdc:	f8cd a000 	str.w	sl, [sp]
 8001ce0:	f7fe fa7a 	bl	80001d8 <strlen>
 8001ce4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8001ce8:	2501      	movs	r5, #1
 8001cea:	4628      	mov	r0, r5
 8001cec:	4649      	mov	r1, r9
 8001cee:	beab      	bkpt	0x00ab
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	2d00      	cmp	r5, #0
 8001cf4:	db05      	blt.n	8001d02 <_swiopen+0xa2>
 8001cf6:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8001cfa:	4447      	add	r7, r8
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	e7c4      	b.n	8001c8c <_swiopen+0x2c>
 8001d02:	4628      	mov	r0, r5
 8001d04:	f7ff fe86 	bl	8001a14 <error>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	e7bf      	b.n	8001c8c <_swiopen+0x2c>
 8001d0c:	200000a4 	.word	0x200000a4

08001d10 <_get_semihosting_exts>:
 8001d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001d14:	4606      	mov	r6, r0
 8001d16:	460f      	mov	r7, r1
 8001d18:	4829      	ldr	r0, [pc, #164]	@ (8001dc0 <_get_semihosting_exts+0xb0>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4615      	mov	r5, r2
 8001d1e:	f7ff ff9f 	bl	8001c60 <_swiopen>
 8001d22:	462a      	mov	r2, r5
 8001d24:	4604      	mov	r4, r0
 8001d26:	2100      	movs	r1, #0
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f000 fae7 	bl	80022fc <memset>
 8001d2e:	1c63      	adds	r3, r4, #1
 8001d30:	d014      	beq.n	8001d5c <_get_semihosting_exts+0x4c>
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff fe54 	bl	80019e0 <findslot>
 8001d38:	f04f 080c 	mov.w	r8, #12
 8001d3c:	4681      	mov	r9, r0
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	beab      	bkpt	0x00ab
 8001d44:	4680      	mov	r8, r0
 8001d46:	4640      	mov	r0, r8
 8001d48:	f7ff fe72 	bl	8001a30 <checkerror>
 8001d4c:	2803      	cmp	r0, #3
 8001d4e:	dd02      	ble.n	8001d56 <_get_semihosting_exts+0x46>
 8001d50:	1ec3      	subs	r3, r0, #3
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	dc07      	bgt.n	8001d66 <_get_semihosting_exts+0x56>
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff ff14 	bl	8001b84 <_close>
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	b003      	add	sp, #12
 8001d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d66:	2204      	movs	r2, #4
 8001d68:	eb0d 0102 	add.w	r1, sp, r2
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fe74 	bl	8001a5a <_read>
 8001d72:	2803      	cmp	r0, #3
 8001d74:	ddef      	ble.n	8001d56 <_get_semihosting_exts+0x46>
 8001d76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001d7a:	2b53      	cmp	r3, #83	@ 0x53
 8001d7c:	d1eb      	bne.n	8001d56 <_get_semihosting_exts+0x46>
 8001d7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001d82:	2b48      	cmp	r3, #72	@ 0x48
 8001d84:	d1e7      	bne.n	8001d56 <_get_semihosting_exts+0x46>
 8001d86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001d8a:	2b46      	cmp	r3, #70	@ 0x46
 8001d8c:	d1e3      	bne.n	8001d56 <_get_semihosting_exts+0x46>
 8001d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d92:	2b42      	cmp	r3, #66	@ 0x42
 8001d94:	d1df      	bne.n	8001d56 <_get_semihosting_exts+0x46>
 8001d96:	2201      	movs	r2, #1
 8001d98:	4639      	mov	r1, r7
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fe77 	bl	8001a8e <_swilseek>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	dbd8      	blt.n	8001d56 <_get_semihosting_exts+0x46>
 8001da4:	462a      	mov	r2, r5
 8001da6:	4631      	mov	r1, r6
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fe56 	bl	8001a5a <_read>
 8001dae:	4605      	mov	r5, r0
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fee7 	bl	8001b84 <_close>
 8001db6:	4628      	mov	r0, r5
 8001db8:	f7ff fe3a 	bl	8001a30 <checkerror>
 8001dbc:	e7d0      	b.n	8001d60 <_get_semihosting_exts+0x50>
 8001dbe:	bf00      	nop
 8001dc0:	080028ac 	.word	0x080028ac

08001dc4 <initialise_semihosting_exts>:
 8001dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dc6:	4d0a      	ldr	r5, [pc, #40]	@ (8001df0 <initialise_semihosting_exts+0x2c>)
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001df4 <initialise_semihosting_exts+0x30>)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2201      	movs	r2, #1
 8001dce:	a801      	add	r0, sp, #4
 8001dd0:	6029      	str	r1, [r5, #0]
 8001dd2:	6022      	str	r2, [r4, #0]
 8001dd4:	f7ff ff9c 	bl	8001d10 <_get_semihosting_exts>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	dd07      	ble.n	8001dec <initialise_semihosting_exts+0x28>
 8001ddc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	602a      	str	r2, [r5, #0]
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	b003      	add	sp, #12
 8001dee:	bd30      	pop	{r4, r5, pc}
 8001df0:	20000010 	.word	0x20000010
 8001df4:	2000000c 	.word	0x2000000c

08001df8 <_has_ext_stdout_stderr>:
 8001df8:	b510      	push	{r4, lr}
 8001dfa:	4c04      	ldr	r4, [pc, #16]	@ (8001e0c <_has_ext_stdout_stderr+0x14>)
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da01      	bge.n	8001e06 <_has_ext_stdout_stderr+0xe>
 8001e02:	f7ff ffdf 	bl	8001dc4 <initialise_semihosting_exts>
 8001e06:	6820      	ldr	r0, [r4, #0]
 8001e08:	bd10      	pop	{r4, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <initialise_monitor_handles>:
 8001e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e14:	b085      	sub	sp, #20
 8001e16:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8001ec8 <initialise_monitor_handles+0xb8>
 8001e1a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e1e:	2303      	movs	r3, #3
 8001e20:	2400      	movs	r4, #0
 8001e22:	9303      	str	r3, [sp, #12]
 8001e24:	af01      	add	r7, sp, #4
 8001e26:	9402      	str	r4, [sp, #8]
 8001e28:	2501      	movs	r5, #1
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	4639      	mov	r1, r7
 8001e2e:	beab      	bkpt	0x00ab
 8001e30:	4605      	mov	r5, r0
 8001e32:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8001ecc <initialise_monitor_handles+0xbc>
 8001e36:	4623      	mov	r3, r4
 8001e38:	4c20      	ldr	r4, [pc, #128]	@ (8001ebc <initialise_monitor_handles+0xac>)
 8001e3a:	f8c8 5000 	str.w	r5, [r8]
 8001e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e42:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001e46:	3301      	adds	r3, #1
 8001e48:	2b14      	cmp	r3, #20
 8001e4a:	d1fa      	bne.n	8001e42 <initialise_monitor_handles+0x32>
 8001e4c:	f7ff ffd4 	bl	8001df8 <_has_ext_stdout_stderr>
 8001e50:	4d1b      	ldr	r5, [pc, #108]	@ (8001ec0 <initialise_monitor_handles+0xb0>)
 8001e52:	b1d0      	cbz	r0, 8001e8a <initialise_monitor_handles+0x7a>
 8001e54:	f04f 0a03 	mov.w	sl, #3
 8001e58:	2304      	movs	r3, #4
 8001e5a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e5e:	2601      	movs	r6, #1
 8001e60:	f8cd a00c 	str.w	sl, [sp, #12]
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	4630      	mov	r0, r6
 8001e68:	4639      	mov	r1, r7
 8001e6a:	beab      	bkpt	0x00ab
 8001e6c:	4683      	mov	fp, r0
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <initialise_monitor_handles+0xb4>)
 8001e70:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e74:	f8c3 b000 	str.w	fp, [r3]
 8001e78:	2308      	movs	r3, #8
 8001e7a:	f8cd a00c 	str.w	sl, [sp, #12]
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	4630      	mov	r0, r6
 8001e82:	4639      	mov	r1, r7
 8001e84:	beab      	bkpt	0x00ab
 8001e86:	4606      	mov	r6, r0
 8001e88:	602e      	str	r6, [r5, #0]
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	bf02      	ittt	eq
 8001e90:	4b0c      	ldreq	r3, [pc, #48]	@ (8001ec4 <initialise_monitor_handles+0xb4>)
 8001e92:	681b      	ldreq	r3, [r3, #0]
 8001e94:	602b      	streq	r3, [r5, #0]
 8001e96:	2600      	movs	r6, #0
 8001e98:	f8d8 3000 	ldr.w	r3, [r8]
 8001e9c:	6023      	str	r3, [r4, #0]
 8001e9e:	6066      	str	r6, [r4, #4]
 8001ea0:	f7ff ffaa 	bl	8001df8 <_has_ext_stdout_stderr>
 8001ea4:	b130      	cbz	r0, 8001eb4 <initialise_monitor_handles+0xa4>
 8001ea6:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <initialise_monitor_handles+0xb4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001eb4:	b005      	add	sp, #20
 8001eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000a4 	.word	0x200000a4
 8001ec0:	20000098 	.word	0x20000098
 8001ec4:	2000009c 	.word	0x2000009c
 8001ec8:	080028c2 	.word	0x080028c2
 8001ecc:	200000a0 	.word	0x200000a0

08001ed0 <_isatty>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	f7ff fd85 	bl	80019e0 <findslot>
 8001ed6:	2409      	movs	r4, #9
 8001ed8:	4605      	mov	r5, r0
 8001eda:	b920      	cbnz	r0, 8001ee6 <_isatty+0x16>
 8001edc:	f000 fa5c 	bl	8002398 <__errno>
 8001ee0:	6004      	str	r4, [r0, #0]
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	beab      	bkpt	0x00ab
 8001eec:	4604      	mov	r4, r0
 8001eee:	2c01      	cmp	r4, #1
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	d0f7      	beq.n	8001ee4 <_isatty+0x14>
 8001ef4:	f000 fa50 	bl	8002398 <__errno>
 8001ef8:	2513      	movs	r5, #19
 8001efa:	4604      	mov	r4, r0
 8001efc:	2600      	movs	r6, #0
 8001efe:	4628      	mov	r0, r5
 8001f00:	4631      	mov	r1, r6
 8001f02:	beab      	bkpt	0x00ab
 8001f04:	4605      	mov	r5, r0
 8001f06:	6025      	str	r5, [r4, #0]
 8001f08:	e7eb      	b.n	8001ee2 <_isatty+0x12>
	...

08001f0c <std>:
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	b510      	push	{r4, lr}
 8001f10:	4604      	mov	r4, r0
 8001f12:	e9c0 3300 	strd	r3, r3, [r0]
 8001f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f1a:	6083      	str	r3, [r0, #8]
 8001f1c:	8181      	strh	r1, [r0, #12]
 8001f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f20:	81c2      	strh	r2, [r0, #14]
 8001f22:	6183      	str	r3, [r0, #24]
 8001f24:	4619      	mov	r1, r3
 8001f26:	2208      	movs	r2, #8
 8001f28:	305c      	adds	r0, #92	@ 0x5c
 8001f2a:	f000 f9e7 	bl	80022fc <memset>
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f64 <std+0x58>)
 8001f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <std+0x5c>)
 8001f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f36:	4b0d      	ldr	r3, [pc, #52]	@ (8001f6c <std+0x60>)
 8001f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <std+0x64>)
 8001f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <std+0x68>)
 8001f40:	6224      	str	r4, [r4, #32]
 8001f42:	429c      	cmp	r4, r3
 8001f44:	d006      	beq.n	8001f54 <std+0x48>
 8001f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f4a:	4294      	cmp	r4, r2
 8001f4c:	d002      	beq.n	8001f54 <std+0x48>
 8001f4e:	33d0      	adds	r3, #208	@ 0xd0
 8001f50:	429c      	cmp	r4, r3
 8001f52:	d105      	bne.n	8001f60 <std+0x54>
 8001f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5c:	f000 ba46 	b.w	80023ec <__retarget_lock_init_recursive>
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	bf00      	nop
 8001f64:	0800214d 	.word	0x0800214d
 8001f68:	0800216f 	.word	0x0800216f
 8001f6c:	080021a7 	.word	0x080021a7
 8001f70:	080021cb 	.word	0x080021cb
 8001f74:	20000144 	.word	0x20000144

08001f78 <stdio_exit_handler>:
 8001f78:	4a02      	ldr	r2, [pc, #8]	@ (8001f84 <stdio_exit_handler+0xc>)
 8001f7a:	4903      	ldr	r1, [pc, #12]	@ (8001f88 <stdio_exit_handler+0x10>)
 8001f7c:	4803      	ldr	r0, [pc, #12]	@ (8001f8c <stdio_exit_handler+0x14>)
 8001f7e:	f000 b869 	b.w	8002054 <_fwalk_sglue>
 8001f82:	bf00      	nop
 8001f84:	20000014 	.word	0x20000014
 8001f88:	080026ed 	.word	0x080026ed
 8001f8c:	20000024 	.word	0x20000024

08001f90 <cleanup_stdio>:
 8001f90:	6841      	ldr	r1, [r0, #4]
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <cleanup_stdio+0x34>)
 8001f94:	4299      	cmp	r1, r3
 8001f96:	b510      	push	{r4, lr}
 8001f98:	4604      	mov	r4, r0
 8001f9a:	d001      	beq.n	8001fa0 <cleanup_stdio+0x10>
 8001f9c:	f000 fba6 	bl	80026ec <_fflush_r>
 8001fa0:	68a1      	ldr	r1, [r4, #8]
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <cleanup_stdio+0x38>)
 8001fa4:	4299      	cmp	r1, r3
 8001fa6:	d002      	beq.n	8001fae <cleanup_stdio+0x1e>
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f000 fb9f 	bl	80026ec <_fflush_r>
 8001fae:	68e1      	ldr	r1, [r4, #12]
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <cleanup_stdio+0x3c>)
 8001fb2:	4299      	cmp	r1, r3
 8001fb4:	d004      	beq.n	8001fc0 <cleanup_stdio+0x30>
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fbc:	f000 bb96 	b.w	80026ec <_fflush_r>
 8001fc0:	bd10      	pop	{r4, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000144 	.word	0x20000144
 8001fc8:	200001ac 	.word	0x200001ac
 8001fcc:	20000214 	.word	0x20000214

08001fd0 <global_stdio_init.part.0>:
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <global_stdio_init.part.0+0x30>)
 8001fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8002004 <global_stdio_init.part.0+0x34>)
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <global_stdio_init.part.0+0x38>)
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	4620      	mov	r0, r4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2104      	movs	r1, #4
 8001fe0:	f7ff ff94 	bl	8001f0c <std>
 8001fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2109      	movs	r1, #9
 8001fec:	f7ff ff8e 	bl	8001f0c <std>
 8001ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ffa:	2112      	movs	r1, #18
 8001ffc:	f7ff bf86 	b.w	8001f0c <std>
 8002000:	2000027c 	.word	0x2000027c
 8002004:	20000144 	.word	0x20000144
 8002008:	08001f79 	.word	0x08001f79

0800200c <__sfp_lock_acquire>:
 800200c:	4801      	ldr	r0, [pc, #4]	@ (8002014 <__sfp_lock_acquire+0x8>)
 800200e:	f000 b9ee 	b.w	80023ee <__retarget_lock_acquire_recursive>
 8002012:	bf00      	nop
 8002014:	20000285 	.word	0x20000285

08002018 <__sfp_lock_release>:
 8002018:	4801      	ldr	r0, [pc, #4]	@ (8002020 <__sfp_lock_release+0x8>)
 800201a:	f000 b9e9 	b.w	80023f0 <__retarget_lock_release_recursive>
 800201e:	bf00      	nop
 8002020:	20000285 	.word	0x20000285

08002024 <__sinit>:
 8002024:	b510      	push	{r4, lr}
 8002026:	4604      	mov	r4, r0
 8002028:	f7ff fff0 	bl	800200c <__sfp_lock_acquire>
 800202c:	6a23      	ldr	r3, [r4, #32]
 800202e:	b11b      	cbz	r3, 8002038 <__sinit+0x14>
 8002030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002034:	f7ff bff0 	b.w	8002018 <__sfp_lock_release>
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__sinit+0x28>)
 800203a:	6223      	str	r3, [r4, #32]
 800203c:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <__sinit+0x2c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f5      	bne.n	8002030 <__sinit+0xc>
 8002044:	f7ff ffc4 	bl	8001fd0 <global_stdio_init.part.0>
 8002048:	e7f2      	b.n	8002030 <__sinit+0xc>
 800204a:	bf00      	nop
 800204c:	08001f91 	.word	0x08001f91
 8002050:	2000027c 	.word	0x2000027c

08002054 <_fwalk_sglue>:
 8002054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002058:	4607      	mov	r7, r0
 800205a:	4688      	mov	r8, r1
 800205c:	4614      	mov	r4, r2
 800205e:	2600      	movs	r6, #0
 8002060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002064:	f1b9 0901 	subs.w	r9, r9, #1
 8002068:	d505      	bpl.n	8002076 <_fwalk_sglue+0x22>
 800206a:	6824      	ldr	r4, [r4, #0]
 800206c:	2c00      	cmp	r4, #0
 800206e:	d1f7      	bne.n	8002060 <_fwalk_sglue+0xc>
 8002070:	4630      	mov	r0, r6
 8002072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002076:	89ab      	ldrh	r3, [r5, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d907      	bls.n	800208c <_fwalk_sglue+0x38>
 800207c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002080:	3301      	adds	r3, #1
 8002082:	d003      	beq.n	800208c <_fwalk_sglue+0x38>
 8002084:	4629      	mov	r1, r5
 8002086:	4638      	mov	r0, r7
 8002088:	47c0      	blx	r8
 800208a:	4306      	orrs	r6, r0
 800208c:	3568      	adds	r5, #104	@ 0x68
 800208e:	e7e9      	b.n	8002064 <_fwalk_sglue+0x10>

08002090 <_puts_r>:
 8002090:	6a03      	ldr	r3, [r0, #32]
 8002092:	b570      	push	{r4, r5, r6, lr}
 8002094:	6884      	ldr	r4, [r0, #8]
 8002096:	4605      	mov	r5, r0
 8002098:	460e      	mov	r6, r1
 800209a:	b90b      	cbnz	r3, 80020a0 <_puts_r+0x10>
 800209c:	f7ff ffc2 	bl	8002024 <__sinit>
 80020a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020a2:	07db      	lsls	r3, r3, #31
 80020a4:	d405      	bmi.n	80020b2 <_puts_r+0x22>
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	0598      	lsls	r0, r3, #22
 80020aa:	d402      	bmi.n	80020b2 <_puts_r+0x22>
 80020ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020ae:	f000 f99e 	bl	80023ee <__retarget_lock_acquire_recursive>
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	0719      	lsls	r1, r3, #28
 80020b6:	d502      	bpl.n	80020be <_puts_r+0x2e>
 80020b8:	6923      	ldr	r3, [r4, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d135      	bne.n	800212a <_puts_r+0x9a>
 80020be:	4621      	mov	r1, r4
 80020c0:	4628      	mov	r0, r5
 80020c2:	f000 f8c5 	bl	8002250 <__swsetup_r>
 80020c6:	b380      	cbz	r0, 800212a <_puts_r+0x9a>
 80020c8:	f04f 35ff 	mov.w	r5, #4294967295
 80020cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020ce:	07da      	lsls	r2, r3, #31
 80020d0:	d405      	bmi.n	80020de <_puts_r+0x4e>
 80020d2:	89a3      	ldrh	r3, [r4, #12]
 80020d4:	059b      	lsls	r3, r3, #22
 80020d6:	d402      	bmi.n	80020de <_puts_r+0x4e>
 80020d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020da:	f000 f989 	bl	80023f0 <__retarget_lock_release_recursive>
 80020de:	4628      	mov	r0, r5
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da04      	bge.n	80020f0 <_puts_r+0x60>
 80020e6:	69a2      	ldr	r2, [r4, #24]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dc17      	bgt.n	800211c <_puts_r+0x8c>
 80020ec:	290a      	cmp	r1, #10
 80020ee:	d015      	beq.n	800211c <_puts_r+0x8c>
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	6022      	str	r2, [r4, #0]
 80020f6:	7019      	strb	r1, [r3, #0]
 80020f8:	68a3      	ldr	r3, [r4, #8]
 80020fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020fe:	3b01      	subs	r3, #1
 8002100:	60a3      	str	r3, [r4, #8]
 8002102:	2900      	cmp	r1, #0
 8002104:	d1ed      	bne.n	80020e2 <_puts_r+0x52>
 8002106:	2b00      	cmp	r3, #0
 8002108:	da11      	bge.n	800212e <_puts_r+0x9e>
 800210a:	4622      	mov	r2, r4
 800210c:	210a      	movs	r1, #10
 800210e:	4628      	mov	r0, r5
 8002110:	f000 f85f 	bl	80021d2 <__swbuf_r>
 8002114:	3001      	adds	r0, #1
 8002116:	d0d7      	beq.n	80020c8 <_puts_r+0x38>
 8002118:	250a      	movs	r5, #10
 800211a:	e7d7      	b.n	80020cc <_puts_r+0x3c>
 800211c:	4622      	mov	r2, r4
 800211e:	4628      	mov	r0, r5
 8002120:	f000 f857 	bl	80021d2 <__swbuf_r>
 8002124:	3001      	adds	r0, #1
 8002126:	d1e7      	bne.n	80020f8 <_puts_r+0x68>
 8002128:	e7ce      	b.n	80020c8 <_puts_r+0x38>
 800212a:	3e01      	subs	r6, #1
 800212c:	e7e4      	b.n	80020f8 <_puts_r+0x68>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	6022      	str	r2, [r4, #0]
 8002134:	220a      	movs	r2, #10
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e7ee      	b.n	8002118 <_puts_r+0x88>
	...

0800213c <puts>:
 800213c:	4b02      	ldr	r3, [pc, #8]	@ (8002148 <puts+0xc>)
 800213e:	4601      	mov	r1, r0
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f7ff bfa5 	b.w	8002090 <_puts_r>
 8002146:	bf00      	nop
 8002148:	20000020 	.word	0x20000020

0800214c <__sread>:
 800214c:	b510      	push	{r4, lr}
 800214e:	460c      	mov	r4, r1
 8002150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002154:	f000 f8fc 	bl	8002350 <_read_r>
 8002158:	2800      	cmp	r0, #0
 800215a:	bfab      	itete	ge
 800215c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800215e:	89a3      	ldrhlt	r3, [r4, #12]
 8002160:	181b      	addge	r3, r3, r0
 8002162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002166:	bfac      	ite	ge
 8002168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800216a:	81a3      	strhlt	r3, [r4, #12]
 800216c:	bd10      	pop	{r4, pc}

0800216e <__swrite>:
 800216e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002172:	461f      	mov	r7, r3
 8002174:	898b      	ldrh	r3, [r1, #12]
 8002176:	05db      	lsls	r3, r3, #23
 8002178:	4605      	mov	r5, r0
 800217a:	460c      	mov	r4, r1
 800217c:	4616      	mov	r6, r2
 800217e:	d505      	bpl.n	800218c <__swrite+0x1e>
 8002180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002184:	2302      	movs	r3, #2
 8002186:	2200      	movs	r2, #0
 8002188:	f000 f8d0 	bl	800232c <_lseek_r>
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002196:	81a3      	strh	r3, [r4, #12]
 8002198:	4632      	mov	r2, r6
 800219a:	463b      	mov	r3, r7
 800219c:	4628      	mov	r0, r5
 800219e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021a2:	f000 b8e7 	b.w	8002374 <_write_r>

080021a6 <__sseek>:
 80021a6:	b510      	push	{r4, lr}
 80021a8:	460c      	mov	r4, r1
 80021aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ae:	f000 f8bd 	bl	800232c <_lseek_r>
 80021b2:	1c43      	adds	r3, r0, #1
 80021b4:	89a3      	ldrh	r3, [r4, #12]
 80021b6:	bf15      	itete	ne
 80021b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80021ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80021be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80021c2:	81a3      	strheq	r3, [r4, #12]
 80021c4:	bf18      	it	ne
 80021c6:	81a3      	strhne	r3, [r4, #12]
 80021c8:	bd10      	pop	{r4, pc}

080021ca <__sclose>:
 80021ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ce:	f000 b89d 	b.w	800230c <_close_r>

080021d2 <__swbuf_r>:
 80021d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d4:	460e      	mov	r6, r1
 80021d6:	4614      	mov	r4, r2
 80021d8:	4605      	mov	r5, r0
 80021da:	b118      	cbz	r0, 80021e4 <__swbuf_r+0x12>
 80021dc:	6a03      	ldr	r3, [r0, #32]
 80021de:	b90b      	cbnz	r3, 80021e4 <__swbuf_r+0x12>
 80021e0:	f7ff ff20 	bl	8002024 <__sinit>
 80021e4:	69a3      	ldr	r3, [r4, #24]
 80021e6:	60a3      	str	r3, [r4, #8]
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	071a      	lsls	r2, r3, #28
 80021ec:	d501      	bpl.n	80021f2 <__swbuf_r+0x20>
 80021ee:	6923      	ldr	r3, [r4, #16]
 80021f0:	b943      	cbnz	r3, 8002204 <__swbuf_r+0x32>
 80021f2:	4621      	mov	r1, r4
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 f82b 	bl	8002250 <__swsetup_r>
 80021fa:	b118      	cbz	r0, 8002204 <__swbuf_r+0x32>
 80021fc:	f04f 37ff 	mov.w	r7, #4294967295
 8002200:	4638      	mov	r0, r7
 8002202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	6922      	ldr	r2, [r4, #16]
 8002208:	1a98      	subs	r0, r3, r2
 800220a:	6963      	ldr	r3, [r4, #20]
 800220c:	b2f6      	uxtb	r6, r6
 800220e:	4283      	cmp	r3, r0
 8002210:	4637      	mov	r7, r6
 8002212:	dc05      	bgt.n	8002220 <__swbuf_r+0x4e>
 8002214:	4621      	mov	r1, r4
 8002216:	4628      	mov	r0, r5
 8002218:	f000 fa68 	bl	80026ec <_fflush_r>
 800221c:	2800      	cmp	r0, #0
 800221e:	d1ed      	bne.n	80021fc <__swbuf_r+0x2a>
 8002220:	68a3      	ldr	r3, [r4, #8]
 8002222:	3b01      	subs	r3, #1
 8002224:	60a3      	str	r3, [r4, #8]
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	6022      	str	r2, [r4, #0]
 800222c:	701e      	strb	r6, [r3, #0]
 800222e:	6962      	ldr	r2, [r4, #20]
 8002230:	1c43      	adds	r3, r0, #1
 8002232:	429a      	cmp	r2, r3
 8002234:	d004      	beq.n	8002240 <__swbuf_r+0x6e>
 8002236:	89a3      	ldrh	r3, [r4, #12]
 8002238:	07db      	lsls	r3, r3, #31
 800223a:	d5e1      	bpl.n	8002200 <__swbuf_r+0x2e>
 800223c:	2e0a      	cmp	r6, #10
 800223e:	d1df      	bne.n	8002200 <__swbuf_r+0x2e>
 8002240:	4621      	mov	r1, r4
 8002242:	4628      	mov	r0, r5
 8002244:	f000 fa52 	bl	80026ec <_fflush_r>
 8002248:	2800      	cmp	r0, #0
 800224a:	d0d9      	beq.n	8002200 <__swbuf_r+0x2e>
 800224c:	e7d6      	b.n	80021fc <__swbuf_r+0x2a>
	...

08002250 <__swsetup_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <__swsetup_r+0xa8>)
 8002254:	4605      	mov	r5, r0
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	460c      	mov	r4, r1
 800225a:	b118      	cbz	r0, 8002264 <__swsetup_r+0x14>
 800225c:	6a03      	ldr	r3, [r0, #32]
 800225e:	b90b      	cbnz	r3, 8002264 <__swsetup_r+0x14>
 8002260:	f7ff fee0 	bl	8002024 <__sinit>
 8002264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002268:	0719      	lsls	r1, r3, #28
 800226a:	d422      	bmi.n	80022b2 <__swsetup_r+0x62>
 800226c:	06da      	lsls	r2, r3, #27
 800226e:	d407      	bmi.n	8002280 <__swsetup_r+0x30>
 8002270:	2209      	movs	r2, #9
 8002272:	602a      	str	r2, [r5, #0]
 8002274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	f04f 30ff 	mov.w	r0, #4294967295
 800227e:	e033      	b.n	80022e8 <__swsetup_r+0x98>
 8002280:	0758      	lsls	r0, r3, #29
 8002282:	d512      	bpl.n	80022aa <__swsetup_r+0x5a>
 8002284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002286:	b141      	cbz	r1, 800229a <__swsetup_r+0x4a>
 8002288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800228c:	4299      	cmp	r1, r3
 800228e:	d002      	beq.n	8002296 <__swsetup_r+0x46>
 8002290:	4628      	mov	r0, r5
 8002292:	f000 f8af 	bl	80023f4 <_free_r>
 8002296:	2300      	movs	r3, #0
 8002298:	6363      	str	r3, [r4, #52]	@ 0x34
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80022a0:	81a3      	strh	r3, [r4, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	6063      	str	r3, [r4, #4]
 80022a6:	6923      	ldr	r3, [r4, #16]
 80022a8:	6023      	str	r3, [r4, #0]
 80022aa:	89a3      	ldrh	r3, [r4, #12]
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	81a3      	strh	r3, [r4, #12]
 80022b2:	6923      	ldr	r3, [r4, #16]
 80022b4:	b94b      	cbnz	r3, 80022ca <__swsetup_r+0x7a>
 80022b6:	89a3      	ldrh	r3, [r4, #12]
 80022b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022c0:	d003      	beq.n	80022ca <__swsetup_r+0x7a>
 80022c2:	4621      	mov	r1, r4
 80022c4:	4628      	mov	r0, r5
 80022c6:	f000 fa5f 	bl	8002788 <__smakebuf_r>
 80022ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ce:	f013 0201 	ands.w	r2, r3, #1
 80022d2:	d00a      	beq.n	80022ea <__swsetup_r+0x9a>
 80022d4:	2200      	movs	r2, #0
 80022d6:	60a2      	str	r2, [r4, #8]
 80022d8:	6962      	ldr	r2, [r4, #20]
 80022da:	4252      	negs	r2, r2
 80022dc:	61a2      	str	r2, [r4, #24]
 80022de:	6922      	ldr	r2, [r4, #16]
 80022e0:	b942      	cbnz	r2, 80022f4 <__swsetup_r+0xa4>
 80022e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80022e6:	d1c5      	bne.n	8002274 <__swsetup_r+0x24>
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
 80022ea:	0799      	lsls	r1, r3, #30
 80022ec:	bf58      	it	pl
 80022ee:	6962      	ldrpl	r2, [r4, #20]
 80022f0:	60a2      	str	r2, [r4, #8]
 80022f2:	e7f4      	b.n	80022de <__swsetup_r+0x8e>
 80022f4:	2000      	movs	r0, #0
 80022f6:	e7f7      	b.n	80022e8 <__swsetup_r+0x98>
 80022f8:	20000020 	.word	0x20000020

080022fc <memset>:
 80022fc:	4402      	add	r2, r0
 80022fe:	4603      	mov	r3, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_close_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d06      	ldr	r5, [pc, #24]	@ (8002328 <_close_r+0x1c>)
 8002310:	2300      	movs	r3, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f7ff fc34 	bl	8001b84 <_close>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_close_r+0x1a>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_close_r+0x1a>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	20000280 	.word	0x20000280

0800232c <_lseek_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d07      	ldr	r5, [pc, #28]	@ (800234c <_lseek_r+0x20>)
 8002330:	4604      	mov	r4, r0
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	2200      	movs	r2, #0
 8002338:	602a      	str	r2, [r5, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f7ff fbe3 	bl	8001b06 <_lseek>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d102      	bne.n	800234a <_lseek_r+0x1e>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	b103      	cbz	r3, 800234a <_lseek_r+0x1e>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	20000280 	.word	0x20000280

08002350 <_read_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d07      	ldr	r5, [pc, #28]	@ (8002370 <_read_r+0x20>)
 8002354:	4604      	mov	r4, r0
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	2200      	movs	r2, #0
 800235c:	602a      	str	r2, [r5, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff fb7b 	bl	8001a5a <_read>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d102      	bne.n	800236e <_read_r+0x1e>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	b103      	cbz	r3, 800236e <_read_r+0x1e>
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	20000280 	.word	0x20000280

08002374 <_write_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4d07      	ldr	r5, [pc, #28]	@ (8002394 <_write_r+0x20>)
 8002378:	4604      	mov	r4, r0
 800237a:	4608      	mov	r0, r1
 800237c:	4611      	mov	r1, r2
 800237e:	2200      	movs	r2, #0
 8002380:	602a      	str	r2, [r5, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f7ff fbd1 	bl	8001b2a <_write>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_write_r+0x1e>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_write_r+0x1e>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	20000280 	.word	0x20000280

08002398 <__errno>:
 8002398:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <__errno+0x8>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000020 	.word	0x20000020

080023a4 <__libc_init_array>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d0d      	ldr	r5, [pc, #52]	@ (80023dc <__libc_init_array+0x38>)
 80023a8:	4c0d      	ldr	r4, [pc, #52]	@ (80023e0 <__libc_init_array+0x3c>)
 80023aa:	1b64      	subs	r4, r4, r5
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	2600      	movs	r6, #0
 80023b0:	42a6      	cmp	r6, r4
 80023b2:	d109      	bne.n	80023c8 <__libc_init_array+0x24>
 80023b4:	4d0b      	ldr	r5, [pc, #44]	@ (80023e4 <__libc_init_array+0x40>)
 80023b6:	4c0c      	ldr	r4, [pc, #48]	@ (80023e8 <__libc_init_array+0x44>)
 80023b8:	f000 fa54 	bl	8002864 <_init>
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	2600      	movs	r6, #0
 80023c2:	42a6      	cmp	r6, r4
 80023c4:	d105      	bne.n	80023d2 <__libc_init_array+0x2e>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023cc:	4798      	blx	r3
 80023ce:	3601      	adds	r6, #1
 80023d0:	e7ee      	b.n	80023b0 <__libc_init_array+0xc>
 80023d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d6:	4798      	blx	r3
 80023d8:	3601      	adds	r6, #1
 80023da:	e7f2      	b.n	80023c2 <__libc_init_array+0x1e>
 80023dc:	080028d0 	.word	0x080028d0
 80023e0:	080028d0 	.word	0x080028d0
 80023e4:	080028d0 	.word	0x080028d0
 80023e8:	080028d4 	.word	0x080028d4

080023ec <__retarget_lock_init_recursive>:
 80023ec:	4770      	bx	lr

080023ee <__retarget_lock_acquire_recursive>:
 80023ee:	4770      	bx	lr

080023f0 <__retarget_lock_release_recursive>:
 80023f0:	4770      	bx	lr
	...

080023f4 <_free_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4605      	mov	r5, r0
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d041      	beq.n	8002480 <_free_r+0x8c>
 80023fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002400:	1f0c      	subs	r4, r1, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	bfb8      	it	lt
 8002406:	18e4      	addlt	r4, r4, r3
 8002408:	f000 f8e0 	bl	80025cc <__malloc_lock>
 800240c:	4a1d      	ldr	r2, [pc, #116]	@ (8002484 <_free_r+0x90>)
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	b933      	cbnz	r3, 8002420 <_free_r+0x2c>
 8002412:	6063      	str	r3, [r4, #4]
 8002414:	6014      	str	r4, [r2, #0]
 8002416:	4628      	mov	r0, r5
 8002418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800241c:	f000 b8dc 	b.w	80025d8 <__malloc_unlock>
 8002420:	42a3      	cmp	r3, r4
 8002422:	d908      	bls.n	8002436 <_free_r+0x42>
 8002424:	6820      	ldr	r0, [r4, #0]
 8002426:	1821      	adds	r1, r4, r0
 8002428:	428b      	cmp	r3, r1
 800242a:	bf01      	itttt	eq
 800242c:	6819      	ldreq	r1, [r3, #0]
 800242e:	685b      	ldreq	r3, [r3, #4]
 8002430:	1809      	addeq	r1, r1, r0
 8002432:	6021      	streq	r1, [r4, #0]
 8002434:	e7ed      	b.n	8002412 <_free_r+0x1e>
 8002436:	461a      	mov	r2, r3
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	b10b      	cbz	r3, 8002440 <_free_r+0x4c>
 800243c:	42a3      	cmp	r3, r4
 800243e:	d9fa      	bls.n	8002436 <_free_r+0x42>
 8002440:	6811      	ldr	r1, [r2, #0]
 8002442:	1850      	adds	r0, r2, r1
 8002444:	42a0      	cmp	r0, r4
 8002446:	d10b      	bne.n	8002460 <_free_r+0x6c>
 8002448:	6820      	ldr	r0, [r4, #0]
 800244a:	4401      	add	r1, r0
 800244c:	1850      	adds	r0, r2, r1
 800244e:	4283      	cmp	r3, r0
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	d1e0      	bne.n	8002416 <_free_r+0x22>
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	6053      	str	r3, [r2, #4]
 800245a:	4408      	add	r0, r1
 800245c:	6010      	str	r0, [r2, #0]
 800245e:	e7da      	b.n	8002416 <_free_r+0x22>
 8002460:	d902      	bls.n	8002468 <_free_r+0x74>
 8002462:	230c      	movs	r3, #12
 8002464:	602b      	str	r3, [r5, #0]
 8002466:	e7d6      	b.n	8002416 <_free_r+0x22>
 8002468:	6820      	ldr	r0, [r4, #0]
 800246a:	1821      	adds	r1, r4, r0
 800246c:	428b      	cmp	r3, r1
 800246e:	bf04      	itt	eq
 8002470:	6819      	ldreq	r1, [r3, #0]
 8002472:	685b      	ldreq	r3, [r3, #4]
 8002474:	6063      	str	r3, [r4, #4]
 8002476:	bf04      	itt	eq
 8002478:	1809      	addeq	r1, r1, r0
 800247a:	6021      	streq	r1, [r4, #0]
 800247c:	6054      	str	r4, [r2, #4]
 800247e:	e7ca      	b.n	8002416 <_free_r+0x22>
 8002480:	bd38      	pop	{r3, r4, r5, pc}
 8002482:	bf00      	nop
 8002484:	2000028c 	.word	0x2000028c

08002488 <sbrk_aligned>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4e0f      	ldr	r6, [pc, #60]	@ (80024c8 <sbrk_aligned+0x40>)
 800248c:	460c      	mov	r4, r1
 800248e:	6831      	ldr	r1, [r6, #0]
 8002490:	4605      	mov	r5, r0
 8002492:	b911      	cbnz	r1, 800249a <sbrk_aligned+0x12>
 8002494:	f000 f9d6 	bl	8002844 <_sbrk_r>
 8002498:	6030      	str	r0, [r6, #0]
 800249a:	4621      	mov	r1, r4
 800249c:	4628      	mov	r0, r5
 800249e:	f000 f9d1 	bl	8002844 <_sbrk_r>
 80024a2:	1c43      	adds	r3, r0, #1
 80024a4:	d103      	bne.n	80024ae <sbrk_aligned+0x26>
 80024a6:	f04f 34ff 	mov.w	r4, #4294967295
 80024aa:	4620      	mov	r0, r4
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
 80024ae:	1cc4      	adds	r4, r0, #3
 80024b0:	f024 0403 	bic.w	r4, r4, #3
 80024b4:	42a0      	cmp	r0, r4
 80024b6:	d0f8      	beq.n	80024aa <sbrk_aligned+0x22>
 80024b8:	1a21      	subs	r1, r4, r0
 80024ba:	4628      	mov	r0, r5
 80024bc:	f000 f9c2 	bl	8002844 <_sbrk_r>
 80024c0:	3001      	adds	r0, #1
 80024c2:	d1f2      	bne.n	80024aa <sbrk_aligned+0x22>
 80024c4:	e7ef      	b.n	80024a6 <sbrk_aligned+0x1e>
 80024c6:	bf00      	nop
 80024c8:	20000288 	.word	0x20000288

080024cc <_malloc_r>:
 80024cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024d0:	1ccd      	adds	r5, r1, #3
 80024d2:	f025 0503 	bic.w	r5, r5, #3
 80024d6:	3508      	adds	r5, #8
 80024d8:	2d0c      	cmp	r5, #12
 80024da:	bf38      	it	cc
 80024dc:	250c      	movcc	r5, #12
 80024de:	2d00      	cmp	r5, #0
 80024e0:	4606      	mov	r6, r0
 80024e2:	db01      	blt.n	80024e8 <_malloc_r+0x1c>
 80024e4:	42a9      	cmp	r1, r5
 80024e6:	d904      	bls.n	80024f2 <_malloc_r+0x26>
 80024e8:	230c      	movs	r3, #12
 80024ea:	6033      	str	r3, [r6, #0]
 80024ec:	2000      	movs	r0, #0
 80024ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80025c8 <_malloc_r+0xfc>
 80024f6:	f000 f869 	bl	80025cc <__malloc_lock>
 80024fa:	f8d8 3000 	ldr.w	r3, [r8]
 80024fe:	461c      	mov	r4, r3
 8002500:	bb44      	cbnz	r4, 8002554 <_malloc_r+0x88>
 8002502:	4629      	mov	r1, r5
 8002504:	4630      	mov	r0, r6
 8002506:	f7ff ffbf 	bl	8002488 <sbrk_aligned>
 800250a:	1c43      	adds	r3, r0, #1
 800250c:	4604      	mov	r4, r0
 800250e:	d158      	bne.n	80025c2 <_malloc_r+0xf6>
 8002510:	f8d8 4000 	ldr.w	r4, [r8]
 8002514:	4627      	mov	r7, r4
 8002516:	2f00      	cmp	r7, #0
 8002518:	d143      	bne.n	80025a2 <_malloc_r+0xd6>
 800251a:	2c00      	cmp	r4, #0
 800251c:	d04b      	beq.n	80025b6 <_malloc_r+0xea>
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	4639      	mov	r1, r7
 8002522:	4630      	mov	r0, r6
 8002524:	eb04 0903 	add.w	r9, r4, r3
 8002528:	f000 f98c 	bl	8002844 <_sbrk_r>
 800252c:	4581      	cmp	r9, r0
 800252e:	d142      	bne.n	80025b6 <_malloc_r+0xea>
 8002530:	6821      	ldr	r1, [r4, #0]
 8002532:	1a6d      	subs	r5, r5, r1
 8002534:	4629      	mov	r1, r5
 8002536:	4630      	mov	r0, r6
 8002538:	f7ff ffa6 	bl	8002488 <sbrk_aligned>
 800253c:	3001      	adds	r0, #1
 800253e:	d03a      	beq.n	80025b6 <_malloc_r+0xea>
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	442b      	add	r3, r5
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	f8d8 3000 	ldr.w	r3, [r8]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	bb62      	cbnz	r2, 80025a8 <_malloc_r+0xdc>
 800254e:	f8c8 7000 	str.w	r7, [r8]
 8002552:	e00f      	b.n	8002574 <_malloc_r+0xa8>
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	1b52      	subs	r2, r2, r5
 8002558:	d420      	bmi.n	800259c <_malloc_r+0xd0>
 800255a:	2a0b      	cmp	r2, #11
 800255c:	d917      	bls.n	800258e <_malloc_r+0xc2>
 800255e:	1961      	adds	r1, r4, r5
 8002560:	42a3      	cmp	r3, r4
 8002562:	6025      	str	r5, [r4, #0]
 8002564:	bf18      	it	ne
 8002566:	6059      	strne	r1, [r3, #4]
 8002568:	6863      	ldr	r3, [r4, #4]
 800256a:	bf08      	it	eq
 800256c:	f8c8 1000 	streq.w	r1, [r8]
 8002570:	5162      	str	r2, [r4, r5]
 8002572:	604b      	str	r3, [r1, #4]
 8002574:	4630      	mov	r0, r6
 8002576:	f000 f82f 	bl	80025d8 <__malloc_unlock>
 800257a:	f104 000b 	add.w	r0, r4, #11
 800257e:	1d23      	adds	r3, r4, #4
 8002580:	f020 0007 	bic.w	r0, r0, #7
 8002584:	1ac2      	subs	r2, r0, r3
 8002586:	bf1c      	itt	ne
 8002588:	1a1b      	subne	r3, r3, r0
 800258a:	50a3      	strne	r3, [r4, r2]
 800258c:	e7af      	b.n	80024ee <_malloc_r+0x22>
 800258e:	6862      	ldr	r2, [r4, #4]
 8002590:	42a3      	cmp	r3, r4
 8002592:	bf0c      	ite	eq
 8002594:	f8c8 2000 	streq.w	r2, [r8]
 8002598:	605a      	strne	r2, [r3, #4]
 800259a:	e7eb      	b.n	8002574 <_malloc_r+0xa8>
 800259c:	4623      	mov	r3, r4
 800259e:	6864      	ldr	r4, [r4, #4]
 80025a0:	e7ae      	b.n	8002500 <_malloc_r+0x34>
 80025a2:	463c      	mov	r4, r7
 80025a4:	687f      	ldr	r7, [r7, #4]
 80025a6:	e7b6      	b.n	8002516 <_malloc_r+0x4a>
 80025a8:	461a      	mov	r2, r3
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	42a3      	cmp	r3, r4
 80025ae:	d1fb      	bne.n	80025a8 <_malloc_r+0xdc>
 80025b0:	2300      	movs	r3, #0
 80025b2:	6053      	str	r3, [r2, #4]
 80025b4:	e7de      	b.n	8002574 <_malloc_r+0xa8>
 80025b6:	230c      	movs	r3, #12
 80025b8:	6033      	str	r3, [r6, #0]
 80025ba:	4630      	mov	r0, r6
 80025bc:	f000 f80c 	bl	80025d8 <__malloc_unlock>
 80025c0:	e794      	b.n	80024ec <_malloc_r+0x20>
 80025c2:	6005      	str	r5, [r0, #0]
 80025c4:	e7d6      	b.n	8002574 <_malloc_r+0xa8>
 80025c6:	bf00      	nop
 80025c8:	2000028c 	.word	0x2000028c

080025cc <__malloc_lock>:
 80025cc:	4801      	ldr	r0, [pc, #4]	@ (80025d4 <__malloc_lock+0x8>)
 80025ce:	f7ff bf0e 	b.w	80023ee <__retarget_lock_acquire_recursive>
 80025d2:	bf00      	nop
 80025d4:	20000284 	.word	0x20000284

080025d8 <__malloc_unlock>:
 80025d8:	4801      	ldr	r0, [pc, #4]	@ (80025e0 <__malloc_unlock+0x8>)
 80025da:	f7ff bf09 	b.w	80023f0 <__retarget_lock_release_recursive>
 80025de:	bf00      	nop
 80025e0:	20000284 	.word	0x20000284

080025e4 <__sflush_r>:
 80025e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80025e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ec:	0716      	lsls	r6, r2, #28
 80025ee:	4605      	mov	r5, r0
 80025f0:	460c      	mov	r4, r1
 80025f2:	d454      	bmi.n	800269e <__sflush_r+0xba>
 80025f4:	684b      	ldr	r3, [r1, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dc02      	bgt.n	8002600 <__sflush_r+0x1c>
 80025fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dd48      	ble.n	8002692 <__sflush_r+0xae>
 8002600:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002602:	2e00      	cmp	r6, #0
 8002604:	d045      	beq.n	8002692 <__sflush_r+0xae>
 8002606:	2300      	movs	r3, #0
 8002608:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800260c:	682f      	ldr	r7, [r5, #0]
 800260e:	6a21      	ldr	r1, [r4, #32]
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	d030      	beq.n	8002676 <__sflush_r+0x92>
 8002614:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002616:	89a3      	ldrh	r3, [r4, #12]
 8002618:	0759      	lsls	r1, r3, #29
 800261a:	d505      	bpl.n	8002628 <__sflush_r+0x44>
 800261c:	6863      	ldr	r3, [r4, #4]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002622:	b10b      	cbz	r3, 8002628 <__sflush_r+0x44>
 8002624:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002626:	1ad2      	subs	r2, r2, r3
 8002628:	2300      	movs	r3, #0
 800262a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800262c:	6a21      	ldr	r1, [r4, #32]
 800262e:	4628      	mov	r0, r5
 8002630:	47b0      	blx	r6
 8002632:	1c43      	adds	r3, r0, #1
 8002634:	89a3      	ldrh	r3, [r4, #12]
 8002636:	d106      	bne.n	8002646 <__sflush_r+0x62>
 8002638:	6829      	ldr	r1, [r5, #0]
 800263a:	291d      	cmp	r1, #29
 800263c:	d82b      	bhi.n	8002696 <__sflush_r+0xb2>
 800263e:	4a2a      	ldr	r2, [pc, #168]	@ (80026e8 <__sflush_r+0x104>)
 8002640:	410a      	asrs	r2, r1
 8002642:	07d6      	lsls	r6, r2, #31
 8002644:	d427      	bmi.n	8002696 <__sflush_r+0xb2>
 8002646:	2200      	movs	r2, #0
 8002648:	6062      	str	r2, [r4, #4]
 800264a:	04d9      	lsls	r1, r3, #19
 800264c:	6922      	ldr	r2, [r4, #16]
 800264e:	6022      	str	r2, [r4, #0]
 8002650:	d504      	bpl.n	800265c <__sflush_r+0x78>
 8002652:	1c42      	adds	r2, r0, #1
 8002654:	d101      	bne.n	800265a <__sflush_r+0x76>
 8002656:	682b      	ldr	r3, [r5, #0]
 8002658:	b903      	cbnz	r3, 800265c <__sflush_r+0x78>
 800265a:	6560      	str	r0, [r4, #84]	@ 0x54
 800265c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800265e:	602f      	str	r7, [r5, #0]
 8002660:	b1b9      	cbz	r1, 8002692 <__sflush_r+0xae>
 8002662:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002666:	4299      	cmp	r1, r3
 8002668:	d002      	beq.n	8002670 <__sflush_r+0x8c>
 800266a:	4628      	mov	r0, r5
 800266c:	f7ff fec2 	bl	80023f4 <_free_r>
 8002670:	2300      	movs	r3, #0
 8002672:	6363      	str	r3, [r4, #52]	@ 0x34
 8002674:	e00d      	b.n	8002692 <__sflush_r+0xae>
 8002676:	2301      	movs	r3, #1
 8002678:	4628      	mov	r0, r5
 800267a:	47b0      	blx	r6
 800267c:	4602      	mov	r2, r0
 800267e:	1c50      	adds	r0, r2, #1
 8002680:	d1c9      	bne.n	8002616 <__sflush_r+0x32>
 8002682:	682b      	ldr	r3, [r5, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0c6      	beq.n	8002616 <__sflush_r+0x32>
 8002688:	2b1d      	cmp	r3, #29
 800268a:	d001      	beq.n	8002690 <__sflush_r+0xac>
 800268c:	2b16      	cmp	r3, #22
 800268e:	d11e      	bne.n	80026ce <__sflush_r+0xea>
 8002690:	602f      	str	r7, [r5, #0]
 8002692:	2000      	movs	r0, #0
 8002694:	e022      	b.n	80026dc <__sflush_r+0xf8>
 8002696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800269a:	b21b      	sxth	r3, r3
 800269c:	e01b      	b.n	80026d6 <__sflush_r+0xf2>
 800269e:	690f      	ldr	r7, [r1, #16]
 80026a0:	2f00      	cmp	r7, #0
 80026a2:	d0f6      	beq.n	8002692 <__sflush_r+0xae>
 80026a4:	0793      	lsls	r3, r2, #30
 80026a6:	680e      	ldr	r6, [r1, #0]
 80026a8:	bf08      	it	eq
 80026aa:	694b      	ldreq	r3, [r1, #20]
 80026ac:	600f      	str	r7, [r1, #0]
 80026ae:	bf18      	it	ne
 80026b0:	2300      	movne	r3, #0
 80026b2:	eba6 0807 	sub.w	r8, r6, r7
 80026b6:	608b      	str	r3, [r1, #8]
 80026b8:	f1b8 0f00 	cmp.w	r8, #0
 80026bc:	dde9      	ble.n	8002692 <__sflush_r+0xae>
 80026be:	6a21      	ldr	r1, [r4, #32]
 80026c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80026c2:	4643      	mov	r3, r8
 80026c4:	463a      	mov	r2, r7
 80026c6:	4628      	mov	r0, r5
 80026c8:	47b0      	blx	r6
 80026ca:	2800      	cmp	r0, #0
 80026cc:	dc08      	bgt.n	80026e0 <__sflush_r+0xfc>
 80026ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d6:	81a3      	strh	r3, [r4, #12]
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e0:	4407      	add	r7, r0
 80026e2:	eba8 0800 	sub.w	r8, r8, r0
 80026e6:	e7e7      	b.n	80026b8 <__sflush_r+0xd4>
 80026e8:	dfbffffe 	.word	0xdfbffffe

080026ec <_fflush_r>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	690b      	ldr	r3, [r1, #16]
 80026f0:	4605      	mov	r5, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	b913      	cbnz	r3, 80026fc <_fflush_r+0x10>
 80026f6:	2500      	movs	r5, #0
 80026f8:	4628      	mov	r0, r5
 80026fa:	bd38      	pop	{r3, r4, r5, pc}
 80026fc:	b118      	cbz	r0, 8002706 <_fflush_r+0x1a>
 80026fe:	6a03      	ldr	r3, [r0, #32]
 8002700:	b90b      	cbnz	r3, 8002706 <_fflush_r+0x1a>
 8002702:	f7ff fc8f 	bl	8002024 <__sinit>
 8002706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f3      	beq.n	80026f6 <_fflush_r+0xa>
 800270e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002710:	07d0      	lsls	r0, r2, #31
 8002712:	d404      	bmi.n	800271e <_fflush_r+0x32>
 8002714:	0599      	lsls	r1, r3, #22
 8002716:	d402      	bmi.n	800271e <_fflush_r+0x32>
 8002718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800271a:	f7ff fe68 	bl	80023ee <__retarget_lock_acquire_recursive>
 800271e:	4628      	mov	r0, r5
 8002720:	4621      	mov	r1, r4
 8002722:	f7ff ff5f 	bl	80025e4 <__sflush_r>
 8002726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002728:	07da      	lsls	r2, r3, #31
 800272a:	4605      	mov	r5, r0
 800272c:	d4e4      	bmi.n	80026f8 <_fflush_r+0xc>
 800272e:	89a3      	ldrh	r3, [r4, #12]
 8002730:	059b      	lsls	r3, r3, #22
 8002732:	d4e1      	bmi.n	80026f8 <_fflush_r+0xc>
 8002734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002736:	f7ff fe5b 	bl	80023f0 <__retarget_lock_release_recursive>
 800273a:	e7dd      	b.n	80026f8 <_fflush_r+0xc>

0800273c <__swhatbuf_r>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	460c      	mov	r4, r1
 8002740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002744:	2900      	cmp	r1, #0
 8002746:	b096      	sub	sp, #88	@ 0x58
 8002748:	4615      	mov	r5, r2
 800274a:	461e      	mov	r6, r3
 800274c:	da0d      	bge.n	800276a <__swhatbuf_r+0x2e>
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	bf14      	ite	ne
 800275a:	2340      	movne	r3, #64	@ 0x40
 800275c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002760:	2000      	movs	r0, #0
 8002762:	6031      	str	r1, [r6, #0]
 8002764:	602b      	str	r3, [r5, #0]
 8002766:	b016      	add	sp, #88	@ 0x58
 8002768:	bd70      	pop	{r4, r5, r6, pc}
 800276a:	466a      	mov	r2, sp
 800276c:	f000 f848 	bl	8002800 <_fstat_r>
 8002770:	2800      	cmp	r0, #0
 8002772:	dbec      	blt.n	800274e <__swhatbuf_r+0x12>
 8002774:	9901      	ldr	r1, [sp, #4]
 8002776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800277a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800277e:	4259      	negs	r1, r3
 8002780:	4159      	adcs	r1, r3
 8002782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002786:	e7eb      	b.n	8002760 <__swhatbuf_r+0x24>

08002788 <__smakebuf_r>:
 8002788:	898b      	ldrh	r3, [r1, #12]
 800278a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800278c:	079d      	lsls	r5, r3, #30
 800278e:	4606      	mov	r6, r0
 8002790:	460c      	mov	r4, r1
 8002792:	d507      	bpl.n	80027a4 <__smakebuf_r+0x1c>
 8002794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	6123      	str	r3, [r4, #16]
 800279c:	2301      	movs	r3, #1
 800279e:	6163      	str	r3, [r4, #20]
 80027a0:	b003      	add	sp, #12
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	ab01      	add	r3, sp, #4
 80027a6:	466a      	mov	r2, sp
 80027a8:	f7ff ffc8 	bl	800273c <__swhatbuf_r>
 80027ac:	9f00      	ldr	r7, [sp, #0]
 80027ae:	4605      	mov	r5, r0
 80027b0:	4639      	mov	r1, r7
 80027b2:	4630      	mov	r0, r6
 80027b4:	f7ff fe8a 	bl	80024cc <_malloc_r>
 80027b8:	b948      	cbnz	r0, 80027ce <__smakebuf_r+0x46>
 80027ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027be:	059a      	lsls	r2, r3, #22
 80027c0:	d4ee      	bmi.n	80027a0 <__smakebuf_r+0x18>
 80027c2:	f023 0303 	bic.w	r3, r3, #3
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	e7e2      	b.n	8002794 <__smakebuf_r+0xc>
 80027ce:	89a3      	ldrh	r3, [r4, #12]
 80027d0:	6020      	str	r0, [r4, #0]
 80027d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027d6:	81a3      	strh	r3, [r4, #12]
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80027de:	b15b      	cbz	r3, 80027f8 <__smakebuf_r+0x70>
 80027e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e4:	4630      	mov	r0, r6
 80027e6:	f000 f81d 	bl	8002824 <_isatty_r>
 80027ea:	b128      	cbz	r0, 80027f8 <__smakebuf_r+0x70>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	81a3      	strh	r3, [r4, #12]
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	431d      	orrs	r5, r3
 80027fc:	81a5      	strh	r5, [r4, #12]
 80027fe:	e7cf      	b.n	80027a0 <__smakebuf_r+0x18>

08002800 <_fstat_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4d07      	ldr	r5, [pc, #28]	@ (8002820 <_fstat_r+0x20>)
 8002804:	2300      	movs	r3, #0
 8002806:	4604      	mov	r4, r0
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	602b      	str	r3, [r5, #0]
 800280e:	f7ff f9fc 	bl	8001c0a <_fstat>
 8002812:	1c43      	adds	r3, r0, #1
 8002814:	d102      	bne.n	800281c <_fstat_r+0x1c>
 8002816:	682b      	ldr	r3, [r5, #0]
 8002818:	b103      	cbz	r3, 800281c <_fstat_r+0x1c>
 800281a:	6023      	str	r3, [r4, #0]
 800281c:	bd38      	pop	{r3, r4, r5, pc}
 800281e:	bf00      	nop
 8002820:	20000280 	.word	0x20000280

08002824 <_isatty_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4d06      	ldr	r5, [pc, #24]	@ (8002840 <_isatty_r+0x1c>)
 8002828:	2300      	movs	r3, #0
 800282a:	4604      	mov	r4, r0
 800282c:	4608      	mov	r0, r1
 800282e:	602b      	str	r3, [r5, #0]
 8002830:	f7ff fb4e 	bl	8001ed0 <_isatty>
 8002834:	1c43      	adds	r3, r0, #1
 8002836:	d102      	bne.n	800283e <_isatty_r+0x1a>
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	b103      	cbz	r3, 800283e <_isatty_r+0x1a>
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	bd38      	pop	{r3, r4, r5, pc}
 8002840:	20000280 	.word	0x20000280

08002844 <_sbrk_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d06      	ldr	r5, [pc, #24]	@ (8002860 <_sbrk_r+0x1c>)
 8002848:	2300      	movs	r3, #0
 800284a:	4604      	mov	r4, r0
 800284c:	4608      	mov	r0, r1
 800284e:	602b      	str	r3, [r5, #0]
 8002850:	f7fe f8a4 	bl	800099c <_sbrk>
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	d102      	bne.n	800285e <_sbrk_r+0x1a>
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	b103      	cbz	r3, 800285e <_sbrk_r+0x1a>
 800285c:	6023      	str	r3, [r4, #0]
 800285e:	bd38      	pop	{r3, r4, r5, pc}
 8002860:	20000280 	.word	0x20000280

08002864 <_init>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	bf00      	nop
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr

08002870 <_fini>:
 8002870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002872:	bf00      	nop
 8002874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002876:	bc08      	pop	{r3}
 8002878:	469e      	mov	lr, r3
 800287a:	4770      	bx	lr
