
accelerometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006480  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08006620  08006620  00007620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a50  08006a50  000081dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a58  08006a58  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a58  08006a58  00007a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a5c  08006a5c  00007a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006a60  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001dc  08006c3c  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08006c3c  0000844c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000695d  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000135f  00000000  00000000  0000eb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000fec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000547  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015af2  00000000  00000000  00010af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093c9  00000000  00000000  000265e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868ef  00000000  00000000  0002f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b62a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000303c  00000000  00000000  000b62e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000b9320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006608 	.word	0x08006608

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006608 	.word	0x08006608

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f4c:	b092      	sub	sp, #72	@ 0x48
 8000f4e:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000f50:	f002 fde4 	bl	8003b1c <initialise_monitor_handles>
	printf("Hello World!\n");
 8000f54:	4890      	ldr	r0, [pc, #576]	@ (8001198 <main+0x250>)
 8000f56:	f003 fbdf 	bl	8004718 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f000 fc27 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f929 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 f9bf 	bl	80012e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f66:	f000 f98f 	bl	8001288 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   uint8_t i2c_receive_buf[6];
   uint8_t i2c_transmit_buf[6];

   uint8_t WHO_AM_I_reg = 0x0F;
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

   uint8_t ACC_I2C_ADDR = 0b0011001 << 1;
 8000f70:	2332      	movs	r3, #50	@ 0x32
 8000f72:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

   uint8_t bytes_to_receive = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

   HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, WHO_AM_I_reg, 1,i2c_receive_buf, bytes_to_receive, 50);
 8000f7c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	2032      	movs	r0, #50	@ 0x32
 8000f90:	9002      	str	r0, [sp, #8]
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	487f      	ldr	r0, [pc, #508]	@ (800119c <main+0x254>)
 8000f9e:	f001 f939 	bl	8002214 <HAL_I2C_Mem_Read>

   printf("WHO_AM_I_A: 0x%02X\n", i2c_receive_buf[0]);
 8000fa2:	7d3b      	ldrb	r3, [r7, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	487e      	ldr	r0, [pc, #504]	@ (80011a0 <main+0x258>)
 8000fa8:	f003 fb4e 	bl	8004648 <iprintf>

 // ------------------------------------------------------- //
   uint8_t CTRL_REG1_A_reg = 0x20;
 8000fac:	2320      	movs	r3, #32
 8000fae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
   HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, CTRL_REG1_A_reg, 1,i2c_receive_buf, bytes_to_receive, 50);
 8000fb2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	2032      	movs	r0, #50	@ 0x32
 8000fc6:	9002      	str	r0, [sp, #8]
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4872      	ldr	r0, [pc, #456]	@ (800119c <main+0x254>)
 8000fd4:	f001 f91e 	bl	8002214 <HAL_I2C_Mem_Read>
   printf("CTRL_REG1_A przed zapisem: 0x%02X\n", i2c_receive_buf[0]);
 8000fd8:	7d3b      	ldrb	r3, [r7, #20]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4871      	ldr	r0, [pc, #452]	@ (80011a4 <main+0x25c>)
 8000fde:	f003 fb33 	bl	8004648 <iprintf>

   i2c_transmit_buf[0] = 0b01010111;
 8000fe2:	2357      	movs	r3, #87	@ 0x57
 8000fe4:	733b      	strb	r3, [r7, #12]
   HAL_I2C_Mem_Write(&hi2c1, ACC_I2C_ADDR, CTRL_REG1_A_reg, 1, i2c_transmit_buf, 1, 50);
 8000fe6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000fea:	b299      	uxth	r1, r3
 8000fec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	2332      	movs	r3, #50	@ 0x32
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	4866      	ldr	r0, [pc, #408]	@ (800119c <main+0x254>)
 8001004:	f001 f80c 	bl	8002020 <HAL_I2C_Mem_Write>

   HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, CTRL_REG1_A_reg, 1,i2c_receive_buf, bytes_to_receive, 50);
 8001008:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800100c:	b299      	uxth	r1, r3
 800100e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001012:	b29a      	uxth	r2, r3
 8001014:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001018:	b29b      	uxth	r3, r3
 800101a:	2032      	movs	r0, #50	@ 0x32
 800101c:	9002      	str	r0, [sp, #8]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	485c      	ldr	r0, [pc, #368]	@ (800119c <main+0x254>)
 800102a:	f001 f8f3 	bl	8002214 <HAL_I2C_Mem_Read>
   printf("CTRL_REG1_A po zapisie: 0x%02X\n", i2c_receive_buf[0]);
 800102e:	7d3b      	ldrb	r3, [r7, #20]
 8001030:	4619      	mov	r1, r3
 8001032:	485d      	ldr	r0, [pc, #372]	@ (80011a8 <main+0x260>)
 8001034:	f003 fb08 	bl	8004648 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	int16_t x, y, z;

	float wspolczynnik_fizyczny = 2;
 8001038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800103c:	633b      	str	r3, [r7, #48]	@ 0x30

	float xf, yf, zf;

	int16_t i2c_receive16bit_buf[3];
	uint8_t SAMPLES_START_reg = 0x28;
 800103e:	2328      	movs	r3, #40	@ 0x28
 8001040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t AUTO_INCREMENT_ADDR = 0x01 << 7;
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	bytes_to_receive = 6;
 800104a:	2306      	movs	r3, #6
 800104c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

  while (1)
  {
	  	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, SAMPLES_START_reg | AUTO_INCREMENT_ADDR, 1, i2c_receive16bit_buf, bytes_to_receive, 50);
 8001050:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001054:	b299      	uxth	r1, r3
 8001056:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800105a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800105e:	4313      	orrs	r3, r2
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001068:	b29b      	uxth	r3, r3
 800106a:	2232      	movs	r2, #50	@ 0x32
 800106c:	9202      	str	r2, [sp, #8]
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	4602      	mov	r2, r0
 8001078:	4848      	ldr	r0, [pc, #288]	@ (800119c <main+0x254>)
 800107a:	f001 f8cb 	bl	8002214 <HAL_I2C_Mem_Read>
		x = i2c_receive16bit_buf[0];
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		y = i2c_receive16bit_buf[1];
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	857b      	strh	r3, [r7, #42]	@ 0x2a
		z = i2c_receive16bit_buf[2];
 8001086:	893b      	ldrh	r3, [r7, #8]
 8001088:	853b      	strh	r3, [r7, #40]	@ 0x28

		xf = (float)x / pow(2,15)*wspolczynnik_fizyczny;
 800108a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001096:	ee17 0a90 	vmov	r0, s15
 800109a:	f7ff fa5d 	bl	8000558 <__aeabi_f2d>
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <main+0x264>)
 80010a4:	f7ff fbda 	bl	800085c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4614      	mov	r4, r2
 80010ae:	461d      	mov	r5, r3
 80010b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4620      	mov	r0, r4
 80010bc:	4629      	mov	r1, r5
 80010be:	f7ff faa3 	bl	8000608 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fd75 	bl	8000bb8 <__aeabi_d2f>
 80010ce:	4603      	mov	r3, r0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
		yf = (float)y / pow(2,15)*wspolczynnik_fizyczny;
 80010d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f7ff fa39 	bl	8000558 <__aeabi_f2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <main+0x264>)
 80010ec:	f7ff fbb6 	bl	800085c <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4614      	mov	r4, r2
 80010f6:	461d      	mov	r5, r3
 80010f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010fa:	f7ff fa2d 	bl	8000558 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4620      	mov	r0, r4
 8001104:	4629      	mov	r1, r5
 8001106:	f7ff fa7f 	bl	8000608 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd51 	bl	8000bb8 <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	623b      	str	r3, [r7, #32]
		zf = (float)z / pow(2,15)*wspolczynnik_fizyczny;
 800111a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800111e:	ee07 3a90 	vmov	s15, r3
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	ee17 0a90 	vmov	r0, s15
 800112a:	f7ff fa15 	bl	8000558 <__aeabi_f2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <main+0x264>)
 8001134:	f7ff fb92 	bl	800085c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4614      	mov	r4, r2
 800113e:	461d      	mov	r5, r3
 8001140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001142:	f7ff fa09 	bl	8000558 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff fa5b 	bl	8000608 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd2d 	bl	8000bb8 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	61fb      	str	r3, [r7, #28]

		printf("xf: %04.2f, yf: %04.2f, zf: %04.2f\n", xf, yf, zf);
 8001162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001164:	f7ff f9f8 	bl	8000558 <__aeabi_f2d>
 8001168:	4680      	mov	r8, r0
 800116a:	4689      	mov	r9, r1
 800116c:	6a38      	ldr	r0, [r7, #32]
 800116e:	f7ff f9f3 	bl	8000558 <__aeabi_f2d>
 8001172:	4604      	mov	r4, r0
 8001174:	460d      	mov	r5, r1
 8001176:	69f8      	ldr	r0, [r7, #28]
 8001178:	f7ff f9ee 	bl	8000558 <__aeabi_f2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001184:	e9cd 4500 	strd	r4, r5, [sp]
 8001188:	4642      	mov	r2, r8
 800118a:	464b      	mov	r3, r9
 800118c:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <main+0x268>)
 800118e:	f003 fa5b 	bl	8004648 <iprintf>
	  	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, SAMPLES_START_reg | AUTO_INCREMENT_ADDR, 1, i2c_receive16bit_buf, bytes_to_receive, 50);
 8001192:	bf00      	nop
 8001194:	e75c      	b.n	8001050 <main+0x108>
 8001196:	bf00      	nop
 8001198:	08006620 	.word	0x08006620
 800119c:	200001f8 	.word	0x200001f8
 80011a0:	08006630 	.word	0x08006630
 80011a4:	08006644 	.word	0x08006644
 80011a8:	08006668 	.word	0x08006668
 80011ac:	40e00000 	.word	0x40e00000
 80011b0:	08006688 	.word	0x08006688

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	@ 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fb88 	bl	80048d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b28      	ldr	r3, [pc, #160]	@ (8001280 <SystemClock_Config+0xcc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a27      	ldr	r2, [pc, #156]	@ (8001280 <SystemClock_Config+0xcc>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b25      	ldr	r3, [pc, #148]	@ (8001280 <SystemClock_Config+0xcc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <SystemClock_Config+0xd0>)
 80011fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <SystemClock_Config+0xd0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001224:	2308      	movs	r3, #8
 8001226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001228:	23c0      	movs	r3, #192	@ 0xc0
 800122a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800122c:	2304      	movs	r3, #4
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001230:	2308      	movs	r3, #8
 8001232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fdd1 	bl	8002de0 <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001244:	f000 f99a 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001254:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2103      	movs	r1, #3
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f832 	bl	80032d0 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001272:	f000 f983 	bl	800157c <Error_Handler>
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	@ 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <MX_I2C1_Init+0x50>)
 800128e:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <MX_I2C1_Init+0x54>)
 8001290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_I2C1_Init+0x50>)
 8001294:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <MX_I2C1_Init+0x58>)
 8001296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_I2C1_Init+0x50>)
 80012c6:	f000 fd67 	bl	8001d98 <HAL_I2C_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d0:	f000 f954 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200001f8 	.word	0x200001f8
 80012dc:	40005400 	.word	0x40005400
 80012e0:	000186a0 	.word	0x000186a0

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	@ 0x30
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b99      	ldr	r3, [pc, #612]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a98      	ldr	r2, [pc, #608]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b96      	ldr	r3, [pc, #600]	@ (8001564 <MX_GPIO_Init+0x280>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b92      	ldr	r3, [pc, #584]	@ (8001564 <MX_GPIO_Init+0x280>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a91      	ldr	r2, [pc, #580]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b8f      	ldr	r3, [pc, #572]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b8b      	ldr	r3, [pc, #556]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a8a      	ldr	r2, [pc, #552]	@ (8001564 <MX_GPIO_Init+0x280>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b84      	ldr	r3, [pc, #528]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a83      	ldr	r2, [pc, #524]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b81      	ldr	r3, [pc, #516]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b7d      	ldr	r3, [pc, #500]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a7c      	ldr	r2, [pc, #496]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b7a      	ldr	r3, [pc, #488]	@ (8001564 <MX_GPIO_Init+0x280>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b76      	ldr	r3, [pc, #472]	@ (8001564 <MX_GPIO_Init+0x280>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a75      	ldr	r2, [pc, #468]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b73      	ldr	r3, [pc, #460]	@ (8001564 <MX_GPIO_Init+0x280>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2108      	movs	r1, #8
 80013a6:	4870      	ldr	r0, [pc, #448]	@ (8001568 <MX_GPIO_Init+0x284>)
 80013a8:	f000 fcdc 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2101      	movs	r1, #1
 80013b0:	486e      	ldr	r0, [pc, #440]	@ (800156c <MX_GPIO_Init+0x288>)
 80013b2:	f000 fcd7 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013b6:	2200      	movs	r2, #0
 80013b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013bc:	486c      	ldr	r0, [pc, #432]	@ (8001570 <MX_GPIO_Init+0x28c>)
 80013be:	f000 fcd1 	bl	8001d64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4864      	ldr	r0, [pc, #400]	@ (8001568 <MX_GPIO_Init+0x284>)
 80013d6:	f000 fb41 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013da:	2308      	movs	r3, #8
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	485d      	ldr	r0, [pc, #372]	@ (8001568 <MX_GPIO_Init+0x284>)
 80013f2:	f000 fb33 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80013f6:	2332      	movs	r3, #50	@ 0x32
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4857      	ldr	r0, [pc, #348]	@ (8001568 <MX_GPIO_Init+0x284>)
 800140c:	f000 fb26 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001410:	2301      	movs	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4851      	ldr	r0, [pc, #324]	@ (800156c <MX_GPIO_Init+0x288>)
 8001428:	f000 fb18 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800142c:	2308      	movs	r3, #8
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800143c:	2305      	movs	r3, #5
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	4849      	ldr	r0, [pc, #292]	@ (800156c <MX_GPIO_Init+0x288>)
 8001448:	f000 fb08 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001450:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 031c 	add.w	r3, r7, #28
 800145e:	4619      	mov	r1, r3
 8001460:	4844      	ldr	r0, [pc, #272]	@ (8001574 <MX_GPIO_Init+0x290>)
 8001462:	f000 fafb 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001466:	2310      	movs	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001476:	2306      	movs	r3, #6
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	483c      	ldr	r0, [pc, #240]	@ (8001574 <MX_GPIO_Init+0x290>)
 8001482:	f000 faeb 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001486:	23e0      	movs	r3, #224	@ 0xe0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	4834      	ldr	r0, [pc, #208]	@ (8001574 <MX_GPIO_Init+0x290>)
 80014a2:	f000 fadb 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80014a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b8:	2305      	movs	r3, #5
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	482d      	ldr	r0, [pc, #180]	@ (8001578 <MX_GPIO_Init+0x294>)
 80014c4:	f000 faca 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014c8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014cc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4823      	ldr	r0, [pc, #140]	@ (8001570 <MX_GPIO_Init+0x28c>)
 80014e2:	f000 fabb 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014e6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014f8:	2306      	movs	r3, #6
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	@ (800156c <MX_GPIO_Init+0x288>)
 8001504:	f000 faaa 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4815      	ldr	r0, [pc, #84]	@ (8001574 <MX_GPIO_Init+0x290>)
 800151e:	f000 fa9d 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001522:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001534:	230a      	movs	r3, #10
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	@ (8001574 <MX_GPIO_Init+0x290>)
 8001540:	f000 fa8c 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001544:	2320      	movs	r3, #32
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	@ (8001570 <MX_GPIO_Init+0x28c>)
 8001558:	f000 fa80 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3730      	adds	r7, #48	@ 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40021000 	.word	0x40021000
 800156c:	40020800 	.word	0x40020800
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <Error_Handler+0x8>

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c6:	2007      	movs	r0, #7
 80015c8:	f000 fa14 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_I2C_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001616:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001628:	2304      	movs	r3, #4
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	480c      	ldr	r0, [pc, #48]	@ (8001664 <HAL_I2C_MspInit+0x8c>)
 8001634:	f000 fa12 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_I2C_MspInit+0x88>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	@ 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40005400 	.word	0x40005400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020400 	.word	0x40020400

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <NMI_Handler+0x4>

08001670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <MemManage_Handler+0x4>

08001680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <UsageFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 f8c7 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f003 f940 	bl	800497c <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20020000 	.word	0x20020000
 8001728:	00000400 	.word	0x00000400
 800172c:	2000024c 	.word	0x2000024c
 8001730:	20000450 	.word	0x20000450

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001790 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800175c:	f7ff ffea 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	@ (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	@ (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f003 f8ff 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7ff fbdd 	bl	8000f48 <main>
  bx  lr    
 800178e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800179c:	08006a60 	.word	0x08006a60
  ldr r2, =_sbss
 80017a0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80017a4:	2000044c 	.word	0x2000044c

080017a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b0:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <HAL_Init+0x40>)
 80017b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_Init+0x40>)
 80017c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <HAL_Init+0x40>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 f90d 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f808 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fed2 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023c00 	.word	0x40023c00

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x54>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_InitTick+0x58>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f917 	bl	8001a42 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00e      	b.n	800183c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d80a      	bhi.n	800183a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f000 f8ed 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001830:	4a06      	ldr	r2, [pc, #24]	@ (800184c <HAL_InitTick+0x5c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000008 	.word	0x20000008
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	20000250 	.word	0x20000250

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000250 	.word	0x20000250

08001890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	60d3      	str	r3, [r2, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018dc:	4b04      	ldr	r3, [pc, #16]	@ (80018f0 <__NVIC_GetPriorityGrouping+0x18>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	f003 0307 	and.w	r3, r3, #7
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff47 	bl	8001890 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff5c 	bl	80018d8 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffb0 	bl	80019b0 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e159      	b.n	8001d2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8148 	bne.w	8001d26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a2 	beq.w	8001d26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b57      	ldr	r3, [pc, #348]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a56      	ldr	r2, [pc, #344]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b54      	ldr	r3, [pc, #336]	@ (8001d44 <HAL_GPIO_Init+0x2e8>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a52      	ldr	r2, [pc, #328]	@ (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a49      	ldr	r2, [pc, #292]	@ (8001d4c <HAL_GPIO_Init+0x2f0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d019      	beq.n	8001c5e <HAL_GPIO_Init+0x202>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a48      	ldr	r2, [pc, #288]	@ (8001d50 <HAL_GPIO_Init+0x2f4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0x1fe>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a47      	ldr	r2, [pc, #284]	@ (8001d54 <HAL_GPIO_Init+0x2f8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00d      	beq.n	8001c56 <HAL_GPIO_Init+0x1fa>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a46      	ldr	r2, [pc, #280]	@ (8001d58 <HAL_GPIO_Init+0x2fc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <HAL_GPIO_Init+0x1f6>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a45      	ldr	r2, [pc, #276]	@ (8001d5c <HAL_GPIO_Init+0x300>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_GPIO_Init+0x1f2>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c4e:	2307      	movs	r3, #7
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x204>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4935      	ldr	r1, [pc, #212]	@ (8001d48 <HAL_GPIO_Init+0x2ec>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7e:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ccc:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd2:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d20:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <HAL_GPIO_Init+0x304>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f aea2 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e12b      	b.n	8002002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fc0a 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	@ 0x24
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dfc:	f001 fc60 	bl	80036c0 <HAL_RCC_GetPCLK1Freq>
 8001e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a81      	ldr	r2, [pc, #516]	@ (800200c <HAL_I2C_Init+0x274>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d807      	bhi.n	8001e1c <HAL_I2C_Init+0x84>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a80      	ldr	r2, [pc, #512]	@ (8002010 <HAL_I2C_Init+0x278>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e006      	b.n	8001e2a <HAL_I2C_Init+0x92>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a7d      	ldr	r2, [pc, #500]	@ (8002014 <HAL_I2C_Init+0x27c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0e7      	b.n	8002002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a78      	ldr	r2, [pc, #480]	@ (8002018 <HAL_I2C_Init+0x280>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a6a      	ldr	r2, [pc, #424]	@ (800200c <HAL_I2C_Init+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d802      	bhi.n	8001e6c <HAL_I2C_Init+0xd4>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	e009      	b.n	8001e80 <HAL_I2C_Init+0xe8>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	4a69      	ldr	r2, [pc, #420]	@ (800201c <HAL_I2C_Init+0x284>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	3301      	adds	r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	495c      	ldr	r1, [pc, #368]	@ (800200c <HAL_I2C_Init+0x274>)
 8001e9c:	428b      	cmp	r3, r1
 8001e9e:	d819      	bhi.n	8001ed4 <HAL_I2C_Init+0x13c>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e59      	subs	r1, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_I2C_Init+0x138>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e59      	subs	r1, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ece:	e051      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e04f      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <HAL_I2C_Init+0x168>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	440b      	add	r3, r1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	e012      	b.n	8001f26 <HAL_I2C_Init+0x18e>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	0099      	lsls	r1, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Init+0x196>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e022      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10e      	bne.n	8001f54 <HAL_I2C_Init+0x1bc>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1e58      	subs	r0, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f52:	e00f      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	0099      	lsls	r1, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	6809      	ldr	r1, [r1, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fa2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6911      	ldr	r1, [r2, #16]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	000186a0 	.word	0x000186a0
 8002010:	001e847f 	.word	0x001e847f
 8002014:	003d08ff 	.word	0x003d08ff
 8002018:	431bde83 	.word	0x431bde83
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	817b      	strh	r3, [r7, #10]
 8002032:	460b      	mov	r3, r1
 8002034:	813b      	strh	r3, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800203a:	f7ff fc1d 	bl	8001878 <HAL_GetTick>
 800203e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b20      	cmp	r3, #32
 800204a:	f040 80d9 	bne.w	8002200 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2319      	movs	r3, #25
 8002054:	2201      	movs	r2, #1
 8002056:	496d      	ldr	r1, [pc, #436]	@ (800220c <HAL_I2C_Mem_Write+0x1ec>)
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fc8b 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
 8002066:	e0cc      	b.n	8002202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Mem_Write+0x56>
 8002072:	2302      	movs	r3, #2
 8002074:	e0c5      	b.n	8002202 <HAL_I2C_Mem_Write+0x1e2>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d007      	beq.n	800209c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2221      	movs	r2, #33	@ 0x21
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2240      	movs	r2, #64	@ 0x40
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a3a      	ldr	r2, [r7, #32]
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4a4d      	ldr	r2, [pc, #308]	@ (8002210 <HAL_I2C_Mem_Write+0x1f0>)
 80020dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020de:	88f8      	ldrh	r0, [r7, #6]
 80020e0:	893a      	ldrh	r2, [r7, #8]
 80020e2:	8979      	ldrh	r1, [r7, #10]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4603      	mov	r3, r0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fac2 	bl	8002678 <I2C_RequestMemoryWrite>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d052      	beq.n	80021a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e081      	b.n	8002202 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fd50 	bl	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00d      	beq.n	800212a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	2b04      	cmp	r3, #4
 8002114:	d107      	bne.n	8002126 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06b      	b.n	8002202 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b04      	cmp	r3, #4
 8002166:	d11b      	bne.n	80021a0 <HAL_I2C_Mem_Write+0x180>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d017      	beq.n	80021a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	781a      	ldrb	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1aa      	bne.n	80020fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fd43 	bl	8002c38 <I2C_WaitOnBTFFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00d      	beq.n	80021d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d107      	bne.n	80021d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e016      	b.n	8002202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e000      	b.n	8002202 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002200:	2302      	movs	r3, #2
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	00100002 	.word	0x00100002
 8002210:	ffff0000 	.word	0xffff0000

08002214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800222e:	f7ff fb23 	bl	8001878 <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	f040 8214 	bne.w	800266a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2319      	movs	r3, #25
 8002248:	2201      	movs	r2, #1
 800224a:	497b      	ldr	r1, [pc, #492]	@ (8002438 <HAL_I2C_Mem_Read+0x224>)
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fb91 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
 800225a:	e207      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2C_Mem_Read+0x56>
 8002266:	2302      	movs	r3, #2
 8002268:	e200      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d007      	beq.n	8002290 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2222      	movs	r2, #34	@ 0x22
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2240      	movs	r2, #64	@ 0x40
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a5b      	ldr	r2, [pc, #364]	@ (800243c <HAL_I2C_Mem_Read+0x228>)
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d2:	88f8      	ldrh	r0, [r7, #6]
 80022d4:	893a      	ldrh	r2, [r7, #8]
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4603      	mov	r3, r0
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fa5e 	bl	80027a4 <I2C_RequestMemoryRead>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1bc      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d113      	bne.n	8002322 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e190      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11b      	bne.n	8002362 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e170      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002366:	2b02      	cmp	r3, #2
 8002368:	d11b      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002378:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	e150      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023b8:	e144      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023be:	2b03      	cmp	r3, #3
 80023c0:	f200 80f1 	bhi.w	80025a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d123      	bne.n	8002414 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fc79 	bl	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e145      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002412:	e117      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002418:	2b02      	cmp	r3, #2
 800241a:	d14e      	bne.n	80024ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002422:	2200      	movs	r2, #0
 8002424:	4906      	ldr	r1, [pc, #24]	@ (8002440 <HAL_I2C_Mem_Read+0x22c>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 faa4 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e11a      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
 8002436:	bf00      	nop
 8002438:	00100002 	.word	0x00100002
 800243c:	ffff0000 	.word	0xffff0000
 8002440:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024b8:	e0c4      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c0:	2200      	movs	r2, #0
 80024c2:	496c      	ldr	r1, [pc, #432]	@ (8002674 <HAL_I2C_Mem_Read+0x460>)
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fa55 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0cb      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800251c:	2200      	movs	r2, #0
 800251e:	4955      	ldr	r1, [pc, #340]	@ (8002674 <HAL_I2C_Mem_Read+0x460>)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 fa27 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e09d      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025a4:	e04e      	b.n	8002644 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 fb8c 	bl	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e058      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d124      	bne.n	8002644 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d107      	bne.n	8002612 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002610:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f aeb6 	bne.w	80023ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	@ 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	00010004 	.word	0x00010004

08002678 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	461a      	mov	r2, r3
 8002686:	4603      	mov	r3, r0
 8002688:	817b      	strh	r3, [r7, #10]
 800268a:	460b      	mov	r3, r1
 800268c:	813b      	strh	r3, [r7, #8]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f960 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c8:	d103      	bne.n	80026d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e05f      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	492d      	ldr	r1, [pc, #180]	@ (80027a0 <I2C_RequestMemoryWrite+0x128>)
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f9bb 	bl	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04c      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 fa46 	bl	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b04      	cmp	r3, #4
 8002728:	d107      	bne.n	800273a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002738:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02b      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e021      	b.n	8002794 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002750:	893b      	ldrh	r3, [r7, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002760:	6a39      	ldr	r1, [r7, #32]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fa20 	bl	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	2b04      	cmp	r3, #4
 8002774:	d107      	bne.n	8002786 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002784:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e005      	b.n	8002796 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800278a:	893b      	ldrh	r3, [r7, #8]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	00010002 	.word	0x00010002

080027a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8c2 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002804:	d103      	bne.n	800280e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0aa      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	4952      	ldr	r1, [pc, #328]	@ (8002970 <I2C_RequestMemoryRead+0x1cc>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f91d 	bl	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e097      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f9a8 	bl	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e076      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002880:	893b      	ldrh	r3, [r7, #8]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	e021      	b.n	80028d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b29b      	uxth	r3, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f982 	bl	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d107      	bne.n	80028c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e050      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d2:	6a39      	ldr	r1, [r7, #32]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f967 	bl	8002ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e035      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800290a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	2200      	movs	r2, #0
 8002914:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f82b 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002932:	d103      	bne.n	800293c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e013      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	4906      	ldr	r1, [pc, #24]	@ (8002970 <I2C_RequestMemoryRead+0x1cc>)
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f886 	bl	8002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	00010002 	.word	0x00010002

08002974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002984:	e048      	b.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d044      	beq.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7fe ff73 	bl	8001878 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d139      	bne.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	0c1b      	lsrs	r3, r3, #16
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d10d      	bne.n	80029ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	e00c      	b.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	43da      	mvns	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4013      	ands	r3, r2
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d116      	bne.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e023      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10d      	bne.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	e00c      	b.n	8002a58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d093      	beq.n	8002986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a76:	e071      	b.n	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a86:	d123      	bne.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e067      	b.n	8002ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d041      	beq.n	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad8:	f7fe fece 	bl	8001878 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d302      	bcc.n	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d136      	bne.n	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	0c1b      	lsrs	r3, r3, #16
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10c      	bne.n	8002b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e00b      	b.n	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e021      	b.n	8002ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	0c1b      	lsrs	r3, r3, #16
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d10c      	bne.n	8002b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e00b      	b.n	8002b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f47f af6d 	bne.w	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb4:	e034      	b.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8e3 	bl	8002d82 <I2C_IsAcknowledgeFailed>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e034      	b.n	8002c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d028      	beq.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe fe53 	bl	8001878 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11d      	bne.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bee:	2b80      	cmp	r3, #128	@ 0x80
 8002bf0:	d016      	beq.n	8002c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	2b80      	cmp	r3, #128	@ 0x80
 8002c2c:	d1c3      	bne.n	8002bb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c44:	e034      	b.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f89b 	bl	8002d82 <I2C_IsAcknowledgeFailed>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e034      	b.n	8002cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d028      	beq.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe fe0b 	bl	8001878 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11d      	bne.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d016      	beq.n	8002cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e007      	b.n	8002cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d1c3      	bne.n	8002c46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cd4:	e049      	b.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d119      	bne.n	8002d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0210 	mvn.w	r2, #16
 8002cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e030      	b.n	8002d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d18:	f7fe fdae 	bl	8001878 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d302      	bcc.n	8002d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11d      	bne.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d016      	beq.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e007      	b.n	8002d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d1ae      	bne.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d98:	d11b      	bne.n	8002dd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002da2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e267      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d075      	beq.n	8002eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dfe:	4b88      	ldr	r3, [pc, #544]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b85      	ldr	r3, [pc, #532]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e12:	2b08      	cmp	r3, #8
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b82      	ldr	r3, [pc, #520]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	4b7e      	ldr	r3, [pc, #504]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x108>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d157      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e242      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x74>
 8002e46:	4b76      	ldr	r3, [pc, #472]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a75      	ldr	r2, [pc, #468]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01d      	b.n	8002e90 <HAL_RCC_OscConfig+0xb0>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x98>
 8002e5e:	4b70      	ldr	r3, [pc, #448]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6f      	ldr	r2, [pc, #444]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6c      	ldr	r2, [pc, #432]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0xb0>
 8002e78:	4b69      	ldr	r3, [pc, #420]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b66      	ldr	r3, [pc, #408]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a65      	ldr	r2, [pc, #404]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe fcee 	bl	8001878 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fcea 	bl	8001878 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e207      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b5b      	ldr	r3, [pc, #364]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xc0>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fcda 	bl	8001878 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fcd6 	bl	8001878 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1f3      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b51      	ldr	r3, [pc, #324]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0xe8>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f02:	4b47      	ldr	r3, [pc, #284]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b44      	ldr	r3, [pc, #272]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1a:	4b41      	ldr	r3, [pc, #260]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x152>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1c7      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b3b      	ldr	r3, [pc, #236]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4937      	ldr	r1, [pc, #220]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	e03a      	b.n	8002fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b34      	ldr	r3, [pc, #208]	@ (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fe fc8f 	bl	8001878 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7fe fc8b 	bl	8001878 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1a8      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	4b2b      	ldr	r3, [pc, #172]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b28      	ldr	r3, [pc, #160]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4925      	ldr	r1, [pc, #148]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_RCC_OscConfig+0x244>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fe fc6e 	bl	8001878 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fc6a 	bl	8001878 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e187      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d036      	beq.n	8003038 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <HAL_RCC_OscConfig+0x248>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fc4e 	bl	8001878 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fe fc4a 	bl	8001878 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e167      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x200>
 8002ffe:	e01b      	b.n	8003038 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003000:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_RCC_OscConfig+0x248>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fe fc37 	bl	8001878 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300c:	e00e      	b.n	800302c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe fc33 	bl	8001878 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d907      	bls.n	800302c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e150      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
 8003020:	40023800 	.word	0x40023800
 8003024:	42470000 	.word	0x42470000
 8003028:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800302c:	4b88      	ldr	r3, [pc, #544]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ea      	bne.n	800300e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8097 	beq.w	8003174 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304a:	4b81      	ldr	r3, [pc, #516]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	4b7d      	ldr	r3, [pc, #500]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305e:	4a7c      	ldr	r2, [pc, #496]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	@ 0x40
 8003066:	4b7a      	ldr	r3, [pc, #488]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b77      	ldr	r3, [pc, #476]	@ (8003254 <HAL_RCC_OscConfig+0x474>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b74      	ldr	r3, [pc, #464]	@ (8003254 <HAL_RCC_OscConfig+0x474>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a73      	ldr	r2, [pc, #460]	@ (8003254 <HAL_RCC_OscConfig+0x474>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe fbf3 	bl	8001878 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fe fbef 	bl	8001878 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e10c      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <HAL_RCC_OscConfig+0x474>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x2ea>
 80030bc:	4b64      	ldr	r3, [pc, #400]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	4a63      	ldr	r2, [pc, #396]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c8:	e01c      	b.n	8003104 <HAL_RCC_OscConfig+0x324>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x30c>
 80030d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030de:	4b5c      	ldr	r3, [pc, #368]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_OscConfig+0x324>
 80030ec:	4b58      	ldr	r3, [pc, #352]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f0:	4a57      	ldr	r2, [pc, #348]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f8:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	4a54      	ldr	r2, [pc, #336]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe fbb4 	bl	8001878 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	e00a      	b.n	800312a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003114:	f7fe fbb0 	bl	8001878 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0cb      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	4b49      	ldr	r3, [pc, #292]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ee      	beq.n	8003114 <HAL_RCC_OscConfig+0x334>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003138:	f7fe fb9e 	bl	8001878 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe fb9a 	bl	8001878 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0b5      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	4b3e      	ldr	r3, [pc, #248]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ee      	bne.n	8003140 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d105      	bne.n	8003174 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b39      	ldr	r3, [pc, #228]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	4a38      	ldr	r2, [pc, #224]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003172:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a1 	beq.w	80032c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317e:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b08      	cmp	r3, #8
 8003188:	d05c      	beq.n	8003244 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d141      	bne.n	8003216 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fb6e 	bl	8001878 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fb6a 	bl	8001878 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e087      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	019b      	lsls	r3, r3, #6
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	491b      	ldr	r1, [pc, #108]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x478>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fb43 	bl	8001878 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fb3f 	bl	8001878 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e05c      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x416>
 8003214:	e054      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <HAL_RCC_OscConfig+0x478>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fb2c 	bl	8001878 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fb28 	bl	8001878 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e045      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x470>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x444>
 8003242:	e03d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e038      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000
 8003258:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800325c:	4b1b      	ldr	r3, [pc, #108]	@ (80032cc <HAL_RCC_OscConfig+0x4ec>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d028      	beq.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d121      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d11a      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800328c:	4013      	ands	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003292:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003294:	4293      	cmp	r3, r2
 8003296:	d111      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0cc      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b68      	ldr	r3, [pc, #416]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d90c      	bls.n	800330c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b65      	ldr	r3, [pc, #404]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b63      	ldr	r3, [pc, #396]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0b8      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003324:	4b59      	ldr	r3, [pc, #356]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800332e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800333c:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a52      	ldr	r2, [pc, #328]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b50      	ldr	r3, [pc, #320]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	494d      	ldr	r1, [pc, #308]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d044      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d119      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	2b03      	cmp	r3, #3
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b3f      	ldr	r3, [pc, #252]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339e:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e067      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ae:	4b37      	ldr	r3, [pc, #220]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f023 0203 	bic.w	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4934      	ldr	r1, [pc, #208]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033c0:	f7fe fa5a 	bl	8001878 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7fe fa56 	bl	8001878 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e04f      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	4b2b      	ldr	r3, [pc, #172]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 020c 	and.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1eb      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	4b25      	ldr	r3, [pc, #148]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d20c      	bcs.n	8003418 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b22      	ldr	r3, [pc, #136]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e032      	b.n	800347e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4916      	ldr	r1, [pc, #88]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003442:	4b12      	ldr	r3, [pc, #72]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003456:	f000 f821 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800345a:	4602      	mov	r2, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	490a      	ldr	r1, [pc, #40]	@ (8003490 <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	5ccb      	ldrb	r3, [r1, r3]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	4a09      	ldr	r2, [pc, #36]	@ (8003494 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe f9ba 	bl	80017f0 <HAL_InitTick>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00
 800348c:	40023800 	.word	0x40023800
 8003490:	080066ac 	.word	0x080066ac
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a0:	b094      	sub	sp, #80	@ 0x50
 80034a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b4:	4b79      	ldr	r3, [pc, #484]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d00d      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	f200 80e1 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ce:	e0db      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034d4:	e0db      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034d6:	4b73      	ldr	r3, [pc, #460]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80034d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034da:	e0d8      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034dc:	4b6f      	ldr	r3, [pc, #444]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e6:	4b6d      	ldr	r3, [pc, #436]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f2:	4b6a      	ldr	r3, [pc, #424]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	2200      	movs	r2, #0
 80034fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	633b      	str	r3, [r7, #48]	@ 0x30
 8003506:	2300      	movs	r3, #0
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
 800350a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	0159      	lsls	r1, r3, #5
 800351c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003520:	0150      	lsls	r0, r2, #5
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4621      	mov	r1, r4
 8003528:	1a51      	subs	r1, r2, r1
 800352a:	6139      	str	r1, [r7, #16]
 800352c:	4629      	mov	r1, r5
 800352e:	eb63 0301 	sbc.w	r3, r3, r1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003540:	4659      	mov	r1, fp
 8003542:	018b      	lsls	r3, r1, #6
 8003544:	4651      	mov	r1, sl
 8003546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354a:	4651      	mov	r1, sl
 800354c:	018a      	lsls	r2, r1, #6
 800354e:	4651      	mov	r1, sl
 8003550:	ebb2 0801 	subs.w	r8, r2, r1
 8003554:	4659      	mov	r1, fp
 8003556:	eb63 0901 	sbc.w	r9, r3, r1
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800356a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356e:	4690      	mov	r8, r2
 8003570:	4699      	mov	r9, r3
 8003572:	4623      	mov	r3, r4
 8003574:	eb18 0303 	adds.w	r3, r8, r3
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	462b      	mov	r3, r5
 800357c:	eb49 0303 	adc.w	r3, r9, r3
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800358e:	4629      	mov	r1, r5
 8003590:	024b      	lsls	r3, r1, #9
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003598:	4621      	mov	r1, r4
 800359a:	024a      	lsls	r2, r1, #9
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ac:	f7fd fb54 	bl	8000c58 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b8:	e058      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b38      	ldr	r3, [pc, #224]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	4611      	mov	r1, r2
 80035c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	2300      	movs	r3, #0
 80035ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	f04f 0000 	mov.w	r0, #0
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e6:	0150      	lsls	r0, r2, #5
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4641      	mov	r1, r8
 80035ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80035f2:	4649      	mov	r1, r9
 80035f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800360c:	ebb2 040a 	subs.w	r4, r2, sl
 8003610:	eb63 050b 	sbc.w	r5, r3, fp
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	00eb      	lsls	r3, r5, #3
 800361e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003622:	00e2      	lsls	r2, r4, #3
 8003624:	4614      	mov	r4, r2
 8003626:	461d      	mov	r5, r3
 8003628:	4643      	mov	r3, r8
 800362a:	18e3      	adds	r3, r4, r3
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	464b      	mov	r3, r9
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003642:	4629      	mov	r1, r5
 8003644:	028b      	lsls	r3, r1, #10
 8003646:	4621      	mov	r1, r4
 8003648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800364c:	4621      	mov	r1, r4
 800364e:	028a      	lsls	r2, r1, #10
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003656:	2200      	movs	r2, #0
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	61fa      	str	r2, [r7, #28]
 800365c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003660:	f7fd fafa 	bl	8000c58 <__aeabi_uldivmod>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4613      	mov	r3, r2
 800366a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_GetSysClockFreq+0x200>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	3301      	adds	r3, #1
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800367c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800367e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003686:	e002      	b.n	800368e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800368a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800368c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003690:	4618      	mov	r0, r3
 8003692:	3750      	adds	r7, #80	@ 0x50
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800
 80036a0:	00f42400 	.word	0x00f42400
 80036a4:	007a1200 	.word	0x007a1200

080036a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000000 	.word	0x20000000

080036c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c4:	f7ff fff0 	bl	80036a8 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0a9b      	lsrs	r3, r3, #10
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	@ (80036e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	080066bc 	.word	0x080066bc

080036e8 <findslot>:
 80036e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <findslot+0x2c>)
 80036ea:	b510      	push	{r4, lr}
 80036ec:	4604      	mov	r4, r0
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	b118      	cbz	r0, 80036fa <findslot+0x12>
 80036f2:	6a03      	ldr	r3, [r0, #32]
 80036f4:	b90b      	cbnz	r3, 80036fa <findslot+0x12>
 80036f6:	f000 ff71 	bl	80045dc <__sinit>
 80036fa:	2c13      	cmp	r4, #19
 80036fc:	d807      	bhi.n	800370e <findslot+0x26>
 80036fe:	4806      	ldr	r0, [pc, #24]	@ (8003718 <findslot+0x30>)
 8003700:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003704:	3201      	adds	r2, #1
 8003706:	d002      	beq.n	800370e <findslot+0x26>
 8003708:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800370c:	bd10      	pop	{r4, pc}
 800370e:	2000      	movs	r0, #0
 8003710:	e7fc      	b.n	800370c <findslot+0x24>
 8003712:	bf00      	nop
 8003714:	20000020 	.word	0x20000020
 8003718:	20000260 	.word	0x20000260

0800371c <error>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	4604      	mov	r4, r0
 8003720:	f001 f92c 	bl	800497c <__errno>
 8003724:	2613      	movs	r6, #19
 8003726:	4605      	mov	r5, r0
 8003728:	2700      	movs	r7, #0
 800372a:	4630      	mov	r0, r6
 800372c:	4639      	mov	r1, r7
 800372e:	beab      	bkpt	0x00ab
 8003730:	4606      	mov	r6, r0
 8003732:	602e      	str	r6, [r5, #0]
 8003734:	4620      	mov	r0, r4
 8003736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003738 <checkerror>:
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d101      	bne.n	8003740 <checkerror+0x8>
 800373c:	f7ff bfee 	b.w	800371c <error>
 8003740:	4770      	bx	lr

08003742 <_swiread>:
 8003742:	b530      	push	{r4, r5, lr}
 8003744:	b085      	sub	sp, #20
 8003746:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800374a:	9203      	str	r2, [sp, #12]
 800374c:	2406      	movs	r4, #6
 800374e:	ad01      	add	r5, sp, #4
 8003750:	4620      	mov	r0, r4
 8003752:	4629      	mov	r1, r5
 8003754:	beab      	bkpt	0x00ab
 8003756:	4604      	mov	r4, r0
 8003758:	4620      	mov	r0, r4
 800375a:	f7ff ffed 	bl	8003738 <checkerror>
 800375e:	b005      	add	sp, #20
 8003760:	bd30      	pop	{r4, r5, pc}

08003762 <_read>:
 8003762:	b570      	push	{r4, r5, r6, lr}
 8003764:	460e      	mov	r6, r1
 8003766:	4614      	mov	r4, r2
 8003768:	f7ff ffbe 	bl	80036e8 <findslot>
 800376c:	4605      	mov	r5, r0
 800376e:	b930      	cbnz	r0, 800377e <_read+0x1c>
 8003770:	f001 f904 	bl	800497c <__errno>
 8003774:	2309      	movs	r3, #9
 8003776:	6003      	str	r3, [r0, #0]
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	bd70      	pop	{r4, r5, r6, pc}
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	4622      	mov	r2, r4
 8003782:	4631      	mov	r1, r6
 8003784:	f7ff ffdd 	bl	8003742 <_swiread>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d0f5      	beq.n	8003778 <_read+0x16>
 800378c:	686b      	ldr	r3, [r5, #4]
 800378e:	1a20      	subs	r0, r4, r0
 8003790:	4403      	add	r3, r0
 8003792:	606b      	str	r3, [r5, #4]
 8003794:	e7f2      	b.n	800377c <_read+0x1a>

08003796 <_swilseek>:
 8003796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003798:	460c      	mov	r4, r1
 800379a:	4616      	mov	r6, r2
 800379c:	f7ff ffa4 	bl	80036e8 <findslot>
 80037a0:	4605      	mov	r5, r0
 80037a2:	b940      	cbnz	r0, 80037b6 <_swilseek+0x20>
 80037a4:	f001 f8ea 	bl	800497c <__errno>
 80037a8:	2309      	movs	r3, #9
 80037aa:	6003      	str	r3, [r0, #0]
 80037ac:	f04f 34ff 	mov.w	r4, #4294967295
 80037b0:	4620      	mov	r0, r4
 80037b2:	b003      	add	sp, #12
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	2e02      	cmp	r6, #2
 80037b8:	d903      	bls.n	80037c2 <_swilseek+0x2c>
 80037ba:	f001 f8df 	bl	800497c <__errno>
 80037be:	2316      	movs	r3, #22
 80037c0:	e7f3      	b.n	80037aa <_swilseek+0x14>
 80037c2:	2e01      	cmp	r6, #1
 80037c4:	d112      	bne.n	80037ec <_swilseek+0x56>
 80037c6:	6843      	ldr	r3, [r0, #4]
 80037c8:	18e4      	adds	r4, r4, r3
 80037ca:	d4f6      	bmi.n	80037ba <_swilseek+0x24>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	260a      	movs	r6, #10
 80037d0:	e9cd 3400 	strd	r3, r4, [sp]
 80037d4:	466f      	mov	r7, sp
 80037d6:	4630      	mov	r0, r6
 80037d8:	4639      	mov	r1, r7
 80037da:	beab      	bkpt	0x00ab
 80037dc:	4606      	mov	r6, r0
 80037de:	4630      	mov	r0, r6
 80037e0:	f7ff ffaa 	bl	8003738 <checkerror>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	dbe1      	blt.n	80037ac <_swilseek+0x16>
 80037e8:	606c      	str	r4, [r5, #4]
 80037ea:	e7e1      	b.n	80037b0 <_swilseek+0x1a>
 80037ec:	2e02      	cmp	r6, #2
 80037ee:	6803      	ldr	r3, [r0, #0]
 80037f0:	d1ec      	bne.n	80037cc <_swilseek+0x36>
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	260c      	movs	r6, #12
 80037f6:	466f      	mov	r7, sp
 80037f8:	4630      	mov	r0, r6
 80037fa:	4639      	mov	r1, r7
 80037fc:	beab      	bkpt	0x00ab
 80037fe:	4606      	mov	r6, r0
 8003800:	4630      	mov	r0, r6
 8003802:	f7ff ff99 	bl	8003738 <checkerror>
 8003806:	1c43      	adds	r3, r0, #1
 8003808:	d0d0      	beq.n	80037ac <_swilseek+0x16>
 800380a:	4404      	add	r4, r0
 800380c:	e7de      	b.n	80037cc <_swilseek+0x36>

0800380e <_lseek>:
 800380e:	f7ff bfc2 	b.w	8003796 <_swilseek>

08003812 <_swiwrite>:
 8003812:	b530      	push	{r4, r5, lr}
 8003814:	b085      	sub	sp, #20
 8003816:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800381a:	9203      	str	r2, [sp, #12]
 800381c:	2405      	movs	r4, #5
 800381e:	ad01      	add	r5, sp, #4
 8003820:	4620      	mov	r0, r4
 8003822:	4629      	mov	r1, r5
 8003824:	beab      	bkpt	0x00ab
 8003826:	4604      	mov	r4, r0
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff ff85 	bl	8003738 <checkerror>
 800382e:	b005      	add	sp, #20
 8003830:	bd30      	pop	{r4, r5, pc}

08003832 <_write>:
 8003832:	b570      	push	{r4, r5, r6, lr}
 8003834:	460e      	mov	r6, r1
 8003836:	4615      	mov	r5, r2
 8003838:	f7ff ff56 	bl	80036e8 <findslot>
 800383c:	4604      	mov	r4, r0
 800383e:	b930      	cbnz	r0, 800384e <_write+0x1c>
 8003840:	f001 f89c 	bl	800497c <__errno>
 8003844:	2309      	movs	r3, #9
 8003846:	6003      	str	r3, [r0, #0]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	bd70      	pop	{r4, r5, r6, pc}
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	462a      	mov	r2, r5
 8003852:	4631      	mov	r1, r6
 8003854:	f7ff ffdd 	bl	8003812 <_swiwrite>
 8003858:	1e03      	subs	r3, r0, #0
 800385a:	dbf5      	blt.n	8003848 <_write+0x16>
 800385c:	6862      	ldr	r2, [r4, #4]
 800385e:	1ae8      	subs	r0, r5, r3
 8003860:	4402      	add	r2, r0
 8003862:	42ab      	cmp	r3, r5
 8003864:	6062      	str	r2, [r4, #4]
 8003866:	d1f1      	bne.n	800384c <_write+0x1a>
 8003868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800386c:	2000      	movs	r0, #0
 800386e:	f7ff bf55 	b.w	800371c <error>

08003872 <_swiclose>:
 8003872:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003874:	2402      	movs	r4, #2
 8003876:	9001      	str	r0, [sp, #4]
 8003878:	ad01      	add	r5, sp, #4
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	beab      	bkpt	0x00ab
 8003880:	4604      	mov	r4, r0
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff ff58 	bl	8003738 <checkerror>
 8003888:	b003      	add	sp, #12
 800388a:	bd30      	pop	{r4, r5, pc}

0800388c <_close>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4605      	mov	r5, r0
 8003890:	f7ff ff2a 	bl	80036e8 <findslot>
 8003894:	4604      	mov	r4, r0
 8003896:	b930      	cbnz	r0, 80038a6 <_close+0x1a>
 8003898:	f001 f870 	bl	800497c <__errno>
 800389c:	2309      	movs	r3, #9
 800389e:	6003      	str	r3, [r0, #0]
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	bd38      	pop	{r3, r4, r5, pc}
 80038a6:	3d01      	subs	r5, #1
 80038a8:	2d01      	cmp	r5, #1
 80038aa:	d809      	bhi.n	80038c0 <_close+0x34>
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <_close+0x40>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d104      	bne.n	80038c0 <_close+0x34>
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	6023      	str	r3, [r4, #0]
 80038bc:	2000      	movs	r0, #0
 80038be:	e7f1      	b.n	80038a4 <_close+0x18>
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	f7ff ffd6 	bl	8003872 <_swiclose>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0f5      	beq.n	80038b6 <_close+0x2a>
 80038ca:	e7eb      	b.n	80038a4 <_close+0x18>
 80038cc:	20000260 	.word	0x20000260

080038d0 <_getpid>:
 80038d0:	2001      	movs	r0, #1
 80038d2:	4770      	bx	lr

080038d4 <_swistat>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	460c      	mov	r4, r1
 80038d8:	f7ff ff06 	bl	80036e8 <findslot>
 80038dc:	4605      	mov	r5, r0
 80038de:	b930      	cbnz	r0, 80038ee <_swistat+0x1a>
 80038e0:	f001 f84c 	bl	800497c <__errno>
 80038e4:	2309      	movs	r3, #9
 80038e6:	6003      	str	r3, [r0, #0]
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
 80038ee:	6863      	ldr	r3, [r4, #4]
 80038f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80038fc:	260c      	movs	r6, #12
 80038fe:	4630      	mov	r0, r6
 8003900:	4629      	mov	r1, r5
 8003902:	beab      	bkpt	0x00ab
 8003904:	4605      	mov	r5, r0
 8003906:	4628      	mov	r0, r5
 8003908:	f7ff ff16 	bl	8003738 <checkerror>
 800390c:	1c43      	adds	r3, r0, #1
 800390e:	d0eb      	beq.n	80038e8 <_swistat+0x14>
 8003910:	6120      	str	r0, [r4, #16]
 8003912:	2000      	movs	r0, #0
 8003914:	e7ea      	b.n	80038ec <_swistat+0x18>

08003916 <_fstat>:
 8003916:	460b      	mov	r3, r1
 8003918:	b510      	push	{r4, lr}
 800391a:	2100      	movs	r1, #0
 800391c:	4604      	mov	r4, r0
 800391e:	2258      	movs	r2, #88	@ 0x58
 8003920:	4618      	mov	r0, r3
 8003922:	f000 ffd9 	bl	80048d8 <memset>
 8003926:	4601      	mov	r1, r0
 8003928:	4620      	mov	r0, r4
 800392a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800392e:	f7ff bfd1 	b.w	80038d4 <_swistat>

08003932 <_stat>:
 8003932:	b538      	push	{r3, r4, r5, lr}
 8003934:	460d      	mov	r5, r1
 8003936:	4604      	mov	r4, r0
 8003938:	2258      	movs	r2, #88	@ 0x58
 800393a:	2100      	movs	r1, #0
 800393c:	4628      	mov	r0, r5
 800393e:	f000 ffcb 	bl	80048d8 <memset>
 8003942:	4620      	mov	r0, r4
 8003944:	2100      	movs	r1, #0
 8003946:	f000 f811 	bl	800396c <_swiopen>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	4604      	mov	r4, r0
 800394e:	d00b      	beq.n	8003968 <_stat+0x36>
 8003950:	686b      	ldr	r3, [r5, #4]
 8003952:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003956:	606b      	str	r3, [r5, #4]
 8003958:	4629      	mov	r1, r5
 800395a:	f7ff ffbb 	bl	80038d4 <_swistat>
 800395e:	4605      	mov	r5, r0
 8003960:	4620      	mov	r0, r4
 8003962:	f7ff ff93 	bl	800388c <_close>
 8003966:	462c      	mov	r4, r5
 8003968:	4620      	mov	r0, r4
 800396a:	bd38      	pop	{r3, r4, r5, pc}

0800396c <_swiopen>:
 800396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	4f29      	ldr	r7, [pc, #164]	@ (8003a18 <_swiopen+0xac>)
 8003972:	b096      	sub	sp, #88	@ 0x58
 8003974:	4682      	mov	sl, r0
 8003976:	460e      	mov	r6, r1
 8003978:	2400      	movs	r4, #0
 800397a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800397e:	3301      	adds	r3, #1
 8003980:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003984:	d00c      	beq.n	80039a0 <_swiopen+0x34>
 8003986:	3401      	adds	r4, #1
 8003988:	2c14      	cmp	r4, #20
 800398a:	d1f6      	bne.n	800397a <_swiopen+0xe>
 800398c:	f000 fff6 	bl	800497c <__errno>
 8003990:	2318      	movs	r3, #24
 8003992:	6003      	str	r3, [r0, #0]
 8003994:	f04f 34ff 	mov.w	r4, #4294967295
 8003998:	4620      	mov	r0, r4
 800399a:	b016      	add	sp, #88	@ 0x58
 800399c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80039a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80039a8:	46e9      	mov	r9, sp
 80039aa:	d109      	bne.n	80039c0 <_swiopen+0x54>
 80039ac:	4649      	mov	r1, r9
 80039ae:	4650      	mov	r0, sl
 80039b0:	f7ff ffbf 	bl	8003932 <_stat>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d003      	beq.n	80039c0 <_swiopen+0x54>
 80039b8:	f000 ffe0 	bl	800497c <__errno>
 80039bc:	2311      	movs	r3, #17
 80039be:	e7e8      	b.n	8003992 <_swiopen+0x26>
 80039c0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80039c4:	f240 6301 	movw	r3, #1537	@ 0x601
 80039c8:	07b2      	lsls	r2, r6, #30
 80039ca:	bf48      	it	mi
 80039cc:	f045 0502 	orrmi.w	r5, r5, #2
 80039d0:	421e      	tst	r6, r3
 80039d2:	bf18      	it	ne
 80039d4:	f045 0504 	orrne.w	r5, r5, #4
 80039d8:	0733      	lsls	r3, r6, #28
 80039da:	bf48      	it	mi
 80039dc:	f025 0504 	bicmi.w	r5, r5, #4
 80039e0:	4650      	mov	r0, sl
 80039e2:	bf48      	it	mi
 80039e4:	f045 0508 	orrmi.w	r5, r5, #8
 80039e8:	f8cd a000 	str.w	sl, [sp]
 80039ec:	f7fc fc48 	bl	8000280 <strlen>
 80039f0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80039f4:	2501      	movs	r5, #1
 80039f6:	4628      	mov	r0, r5
 80039f8:	4649      	mov	r1, r9
 80039fa:	beab      	bkpt	0x00ab
 80039fc:	4605      	mov	r5, r0
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	db05      	blt.n	8003a0e <_swiopen+0xa2>
 8003a02:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003a06:	4447      	add	r7, r8
 8003a08:	2300      	movs	r3, #0
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	e7c4      	b.n	8003998 <_swiopen+0x2c>
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f7ff fe84 	bl	800371c <error>
 8003a14:	4604      	mov	r4, r0
 8003a16:	e7bf      	b.n	8003998 <_swiopen+0x2c>
 8003a18:	20000260 	.word	0x20000260

08003a1c <_get_semihosting_exts>:
 8003a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a20:	4606      	mov	r6, r0
 8003a22:	460f      	mov	r7, r1
 8003a24:	4829      	ldr	r0, [pc, #164]	@ (8003acc <_get_semihosting_exts+0xb0>)
 8003a26:	2100      	movs	r1, #0
 8003a28:	4615      	mov	r5, r2
 8003a2a:	f7ff ff9f 	bl	800396c <_swiopen>
 8003a2e:	462a      	mov	r2, r5
 8003a30:	4604      	mov	r4, r0
 8003a32:	2100      	movs	r1, #0
 8003a34:	4630      	mov	r0, r6
 8003a36:	f000 ff4f 	bl	80048d8 <memset>
 8003a3a:	1c63      	adds	r3, r4, #1
 8003a3c:	d014      	beq.n	8003a68 <_get_semihosting_exts+0x4c>
 8003a3e:	4620      	mov	r0, r4
 8003a40:	f7ff fe52 	bl	80036e8 <findslot>
 8003a44:	f04f 080c 	mov.w	r8, #12
 8003a48:	4681      	mov	r9, r0
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	beab      	bkpt	0x00ab
 8003a50:	4680      	mov	r8, r0
 8003a52:	4640      	mov	r0, r8
 8003a54:	f7ff fe70 	bl	8003738 <checkerror>
 8003a58:	2803      	cmp	r0, #3
 8003a5a:	dd02      	ble.n	8003a62 <_get_semihosting_exts+0x46>
 8003a5c:	1ec3      	subs	r3, r0, #3
 8003a5e:	42ab      	cmp	r3, r5
 8003a60:	dc07      	bgt.n	8003a72 <_get_semihosting_exts+0x56>
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7ff ff12 	bl	800388c <_close>
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	b003      	add	sp, #12
 8003a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a72:	2204      	movs	r2, #4
 8003a74:	eb0d 0102 	add.w	r1, sp, r2
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff fe72 	bl	8003762 <_read>
 8003a7e:	2803      	cmp	r0, #3
 8003a80:	ddef      	ble.n	8003a62 <_get_semihosting_exts+0x46>
 8003a82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003a86:	2b53      	cmp	r3, #83	@ 0x53
 8003a88:	d1eb      	bne.n	8003a62 <_get_semihosting_exts+0x46>
 8003a8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003a8e:	2b48      	cmp	r3, #72	@ 0x48
 8003a90:	d1e7      	bne.n	8003a62 <_get_semihosting_exts+0x46>
 8003a92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003a96:	2b46      	cmp	r3, #70	@ 0x46
 8003a98:	d1e3      	bne.n	8003a62 <_get_semihosting_exts+0x46>
 8003a9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a9e:	2b42      	cmp	r3, #66	@ 0x42
 8003aa0:	d1df      	bne.n	8003a62 <_get_semihosting_exts+0x46>
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f7ff fe75 	bl	8003796 <_swilseek>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	dbd8      	blt.n	8003a62 <_get_semihosting_exts+0x46>
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4631      	mov	r1, r6
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff fe54 	bl	8003762 <_read>
 8003aba:	4605      	mov	r5, r0
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7ff fee5 	bl	800388c <_close>
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f7ff fe38 	bl	8003738 <checkerror>
 8003ac8:	e7d0      	b.n	8003a6c <_get_semihosting_exts+0x50>
 8003aca:	bf00      	nop
 8003acc:	080066c4 	.word	0x080066c4

08003ad0 <initialise_semihosting_exts>:
 8003ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ad2:	4d0a      	ldr	r5, [pc, #40]	@ (8003afc <initialise_semihosting_exts+0x2c>)
 8003ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8003b00 <initialise_semihosting_exts+0x30>)
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2201      	movs	r2, #1
 8003ada:	a801      	add	r0, sp, #4
 8003adc:	6029      	str	r1, [r5, #0]
 8003ade:	6022      	str	r2, [r4, #0]
 8003ae0:	f7ff ff9c 	bl	8003a1c <_get_semihosting_exts>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	dd07      	ble.n	8003af8 <initialise_semihosting_exts+0x28>
 8003ae8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003aec:	f003 0201 	and.w	r2, r3, #1
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	b003      	add	sp, #12
 8003afa:	bd30      	pop	{r4, r5, pc}
 8003afc:	20000010 	.word	0x20000010
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <_has_ext_stdout_stderr>:
 8003b04:	b510      	push	{r4, lr}
 8003b06:	4c04      	ldr	r4, [pc, #16]	@ (8003b18 <_has_ext_stdout_stderr+0x14>)
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	da01      	bge.n	8003b12 <_has_ext_stdout_stderr+0xe>
 8003b0e:	f7ff ffdf 	bl	8003ad0 <initialise_semihosting_exts>
 8003b12:	6820      	ldr	r0, [r4, #0]
 8003b14:	bd10      	pop	{r4, pc}
 8003b16:	bf00      	nop
 8003b18:	2000000c 	.word	0x2000000c

08003b1c <initialise_monitor_handles>:
 8003b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	b085      	sub	sp, #20
 8003b22:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003bd4 <initialise_monitor_handles+0xb8>
 8003b26:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	2400      	movs	r4, #0
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	af01      	add	r7, sp, #4
 8003b32:	9402      	str	r4, [sp, #8]
 8003b34:	2501      	movs	r5, #1
 8003b36:	4628      	mov	r0, r5
 8003b38:	4639      	mov	r1, r7
 8003b3a:	beab      	bkpt	0x00ab
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003bd8 <initialise_monitor_handles+0xbc>
 8003b42:	4623      	mov	r3, r4
 8003b44:	4c20      	ldr	r4, [pc, #128]	@ (8003bc8 <initialise_monitor_handles+0xac>)
 8003b46:	f8c8 5000 	str.w	r5, [r8]
 8003b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003b52:	3301      	adds	r3, #1
 8003b54:	2b14      	cmp	r3, #20
 8003b56:	d1fa      	bne.n	8003b4e <initialise_monitor_handles+0x32>
 8003b58:	f7ff ffd4 	bl	8003b04 <_has_ext_stdout_stderr>
 8003b5c:	4d1b      	ldr	r5, [pc, #108]	@ (8003bcc <initialise_monitor_handles+0xb0>)
 8003b5e:	b1d0      	cbz	r0, 8003b96 <initialise_monitor_handles+0x7a>
 8003b60:	f04f 0a03 	mov.w	sl, #3
 8003b64:	2304      	movs	r3, #4
 8003b66:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b6a:	2601      	movs	r6, #1
 8003b6c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	4630      	mov	r0, r6
 8003b74:	4639      	mov	r1, r7
 8003b76:	beab      	bkpt	0x00ab
 8003b78:	4683      	mov	fp, r0
 8003b7a:	4b15      	ldr	r3, [pc, #84]	@ (8003bd0 <initialise_monitor_handles+0xb4>)
 8003b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b80:	f8c3 b000 	str.w	fp, [r3]
 8003b84:	2308      	movs	r3, #8
 8003b86:	f8cd a00c 	str.w	sl, [sp, #12]
 8003b8a:	9302      	str	r3, [sp, #8]
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	4639      	mov	r1, r7
 8003b90:	beab      	bkpt	0x00ab
 8003b92:	4606      	mov	r6, r0
 8003b94:	602e      	str	r6, [r5, #0]
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	bf02      	ittt	eq
 8003b9c:	4b0c      	ldreq	r3, [pc, #48]	@ (8003bd0 <initialise_monitor_handles+0xb4>)
 8003b9e:	681b      	ldreq	r3, [r3, #0]
 8003ba0:	602b      	streq	r3, [r5, #0]
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	6066      	str	r6, [r4, #4]
 8003bac:	f7ff ffaa 	bl	8003b04 <_has_ext_stdout_stderr>
 8003bb0:	b130      	cbz	r0, 8003bc0 <initialise_monitor_handles+0xa4>
 8003bb2:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <initialise_monitor_handles+0xb4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003bba:	682b      	ldr	r3, [r5, #0]
 8003bbc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003bc0:	b005      	add	sp, #20
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000260 	.word	0x20000260
 8003bcc:	20000254 	.word	0x20000254
 8003bd0:	20000258 	.word	0x20000258
 8003bd4:	080066da 	.word	0x080066da
 8003bd8:	2000025c 	.word	0x2000025c

08003bdc <_isatty>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	f7ff fd83 	bl	80036e8 <findslot>
 8003be2:	2409      	movs	r4, #9
 8003be4:	4605      	mov	r5, r0
 8003be6:	b920      	cbnz	r0, 8003bf2 <_isatty+0x16>
 8003be8:	f000 fec8 	bl	800497c <__errno>
 8003bec:	6004      	str	r4, [r0, #0]
 8003bee:	2000      	movs	r0, #0
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	beab      	bkpt	0x00ab
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	2c01      	cmp	r4, #1
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	d0f7      	beq.n	8003bf0 <_isatty+0x14>
 8003c00:	f000 febc 	bl	800497c <__errno>
 8003c04:	2513      	movs	r5, #19
 8003c06:	4604      	mov	r4, r0
 8003c08:	2600      	movs	r6, #0
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	beab      	bkpt	0x00ab
 8003c10:	4605      	mov	r5, r0
 8003c12:	6025      	str	r5, [r4, #0]
 8003c14:	e7eb      	b.n	8003bee <_isatty+0x12>

08003c16 <__cvt>:
 8003c16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c1a:	ec57 6b10 	vmov	r6, r7, d0
 8003c1e:	2f00      	cmp	r7, #0
 8003c20:	460c      	mov	r4, r1
 8003c22:	4619      	mov	r1, r3
 8003c24:	463b      	mov	r3, r7
 8003c26:	bfbb      	ittet	lt
 8003c28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c2c:	461f      	movlt	r7, r3
 8003c2e:	2300      	movge	r3, #0
 8003c30:	232d      	movlt	r3, #45	@ 0x2d
 8003c32:	700b      	strb	r3, [r1, #0]
 8003c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c3a:	4691      	mov	r9, r2
 8003c3c:	f023 0820 	bic.w	r8, r3, #32
 8003c40:	bfbc      	itt	lt
 8003c42:	4632      	movlt	r2, r6
 8003c44:	4616      	movlt	r6, r2
 8003c46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c4a:	d005      	beq.n	8003c58 <__cvt+0x42>
 8003c4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c50:	d100      	bne.n	8003c54 <__cvt+0x3e>
 8003c52:	3401      	adds	r4, #1
 8003c54:	2102      	movs	r1, #2
 8003c56:	e000      	b.n	8003c5a <__cvt+0x44>
 8003c58:	2103      	movs	r1, #3
 8003c5a:	ab03      	add	r3, sp, #12
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	ab02      	add	r3, sp, #8
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	ec47 6b10 	vmov	d0, r6, r7
 8003c66:	4653      	mov	r3, sl
 8003c68:	4622      	mov	r2, r4
 8003c6a:	f000 ff3d 	bl	8004ae8 <_dtoa_r>
 8003c6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c72:	4605      	mov	r5, r0
 8003c74:	d119      	bne.n	8003caa <__cvt+0x94>
 8003c76:	f019 0f01 	tst.w	r9, #1
 8003c7a:	d00e      	beq.n	8003c9a <__cvt+0x84>
 8003c7c:	eb00 0904 	add.w	r9, r0, r4
 8003c80:	2200      	movs	r2, #0
 8003c82:	2300      	movs	r3, #0
 8003c84:	4630      	mov	r0, r6
 8003c86:	4639      	mov	r1, r7
 8003c88:	f7fc ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c8c:	b108      	cbz	r0, 8003c92 <__cvt+0x7c>
 8003c8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c92:	2230      	movs	r2, #48	@ 0x30
 8003c94:	9b03      	ldr	r3, [sp, #12]
 8003c96:	454b      	cmp	r3, r9
 8003c98:	d31e      	bcc.n	8003cd8 <__cvt+0xc2>
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c9e:	1b5b      	subs	r3, r3, r5
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	b004      	add	sp, #16
 8003ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003caa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003cae:	eb00 0904 	add.w	r9, r0, r4
 8003cb2:	d1e5      	bne.n	8003c80 <__cvt+0x6a>
 8003cb4:	7803      	ldrb	r3, [r0, #0]
 8003cb6:	2b30      	cmp	r3, #48	@ 0x30
 8003cb8:	d10a      	bne.n	8003cd0 <__cvt+0xba>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	f7fc ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cc6:	b918      	cbnz	r0, 8003cd0 <__cvt+0xba>
 8003cc8:	f1c4 0401 	rsb	r4, r4, #1
 8003ccc:	f8ca 4000 	str.w	r4, [sl]
 8003cd0:	f8da 3000 	ldr.w	r3, [sl]
 8003cd4:	4499      	add	r9, r3
 8003cd6:	e7d3      	b.n	8003c80 <__cvt+0x6a>
 8003cd8:	1c59      	adds	r1, r3, #1
 8003cda:	9103      	str	r1, [sp, #12]
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e7d9      	b.n	8003c94 <__cvt+0x7e>

08003ce0 <__exponent>:
 8003ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ce2:	2900      	cmp	r1, #0
 8003ce4:	bfba      	itte	lt
 8003ce6:	4249      	neglt	r1, r1
 8003ce8:	232d      	movlt	r3, #45	@ 0x2d
 8003cea:	232b      	movge	r3, #43	@ 0x2b
 8003cec:	2909      	cmp	r1, #9
 8003cee:	7002      	strb	r2, [r0, #0]
 8003cf0:	7043      	strb	r3, [r0, #1]
 8003cf2:	dd29      	ble.n	8003d48 <__exponent+0x68>
 8003cf4:	f10d 0307 	add.w	r3, sp, #7
 8003cf8:	461d      	mov	r5, r3
 8003cfa:	270a      	movs	r7, #10
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d02:	fb07 1416 	mls	r4, r7, r6, r1
 8003d06:	3430      	adds	r4, #48	@ 0x30
 8003d08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	2c63      	cmp	r4, #99	@ 0x63
 8003d10:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d14:	4631      	mov	r1, r6
 8003d16:	dcf1      	bgt.n	8003cfc <__exponent+0x1c>
 8003d18:	3130      	adds	r1, #48	@ 0x30
 8003d1a:	1e94      	subs	r4, r2, #2
 8003d1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d20:	1c41      	adds	r1, r0, #1
 8003d22:	4623      	mov	r3, r4
 8003d24:	42ab      	cmp	r3, r5
 8003d26:	d30a      	bcc.n	8003d3e <__exponent+0x5e>
 8003d28:	f10d 0309 	add.w	r3, sp, #9
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	42ac      	cmp	r4, r5
 8003d30:	bf88      	it	hi
 8003d32:	2300      	movhi	r3, #0
 8003d34:	3302      	adds	r3, #2
 8003d36:	4403      	add	r3, r0
 8003d38:	1a18      	subs	r0, r3, r0
 8003d3a:	b003      	add	sp, #12
 8003d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d46:	e7ed      	b.n	8003d24 <__exponent+0x44>
 8003d48:	2330      	movs	r3, #48	@ 0x30
 8003d4a:	3130      	adds	r1, #48	@ 0x30
 8003d4c:	7083      	strb	r3, [r0, #2]
 8003d4e:	70c1      	strb	r1, [r0, #3]
 8003d50:	1d03      	adds	r3, r0, #4
 8003d52:	e7f1      	b.n	8003d38 <__exponent+0x58>

08003d54 <_printf_float>:
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	b08d      	sub	sp, #52	@ 0x34
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d60:	4616      	mov	r6, r2
 8003d62:	461f      	mov	r7, r3
 8003d64:	4605      	mov	r5, r0
 8003d66:	f000 fdbf 	bl	80048e8 <_localeconv_r>
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	9304      	str	r3, [sp, #16]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fa86 	bl	8000280 <strlen>
 8003d74:	2300      	movs	r3, #0
 8003d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d78:	f8d8 3000 	ldr.w	r3, [r8]
 8003d7c:	9005      	str	r0, [sp, #20]
 8003d7e:	3307      	adds	r3, #7
 8003d80:	f023 0307 	bic.w	r3, r3, #7
 8003d84:	f103 0208 	add.w	r2, r3, #8
 8003d88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d8c:	f8d4 b000 	ldr.w	fp, [r4]
 8003d90:	f8c8 2000 	str.w	r2, [r8]
 8003d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d9c:	9307      	str	r3, [sp, #28]
 8003d9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003da2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003daa:	4b9c      	ldr	r3, [pc, #624]	@ (800401c <_printf_float+0x2c8>)
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	f7fc fec4 	bl	8000b3c <__aeabi_dcmpun>
 8003db4:	bb70      	cbnz	r0, 8003e14 <_printf_float+0xc0>
 8003db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dba:	4b98      	ldr	r3, [pc, #608]	@ (800401c <_printf_float+0x2c8>)
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	f7fc fe9e 	bl	8000b00 <__aeabi_dcmple>
 8003dc4:	bb30      	cbnz	r0, 8003e14 <_printf_float+0xc0>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4640      	mov	r0, r8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	f7fc fe8d 	bl	8000aec <__aeabi_dcmplt>
 8003dd2:	b110      	cbz	r0, 8003dda <_printf_float+0x86>
 8003dd4:	232d      	movs	r3, #45	@ 0x2d
 8003dd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dda:	4a91      	ldr	r2, [pc, #580]	@ (8004020 <_printf_float+0x2cc>)
 8003ddc:	4b91      	ldr	r3, [pc, #580]	@ (8004024 <_printf_float+0x2d0>)
 8003dde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003de2:	bf94      	ite	ls
 8003de4:	4690      	movls	r8, r2
 8003de6:	4698      	movhi	r8, r3
 8003de8:	2303      	movs	r3, #3
 8003dea:	6123      	str	r3, [r4, #16]
 8003dec:	f02b 0304 	bic.w	r3, fp, #4
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	9700      	str	r7, [sp, #0]
 8003df8:	4633      	mov	r3, r6
 8003dfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 f9d2 	bl	80041a8 <_printf_common>
 8003e04:	3001      	adds	r0, #1
 8003e06:	f040 808d 	bne.w	8003f24 <_printf_float+0x1d0>
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	b00d      	add	sp, #52	@ 0x34
 8003e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	4640      	mov	r0, r8
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	f7fc fe8e 	bl	8000b3c <__aeabi_dcmpun>
 8003e20:	b140      	cbz	r0, 8003e34 <_printf_float+0xe0>
 8003e22:	464b      	mov	r3, r9
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bfbc      	itt	lt
 8003e28:	232d      	movlt	r3, #45	@ 0x2d
 8003e2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004028 <_printf_float+0x2d4>)
 8003e30:	4b7e      	ldr	r3, [pc, #504]	@ (800402c <_printf_float+0x2d8>)
 8003e32:	e7d4      	b.n	8003dde <_printf_float+0x8a>
 8003e34:	6863      	ldr	r3, [r4, #4]
 8003e36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e3a:	9206      	str	r2, [sp, #24]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	d13b      	bne.n	8003eb8 <_printf_float+0x164>
 8003e40:	2306      	movs	r3, #6
 8003e42:	6063      	str	r3, [r4, #4]
 8003e44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e54:	ab09      	add	r3, sp, #36	@ 0x24
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	6861      	ldr	r1, [r4, #4]
 8003e5a:	ec49 8b10 	vmov	d0, r8, r9
 8003e5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e62:	4628      	mov	r0, r5
 8003e64:	f7ff fed7 	bl	8003c16 <__cvt>
 8003e68:	9b06      	ldr	r3, [sp, #24]
 8003e6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e6c:	2b47      	cmp	r3, #71	@ 0x47
 8003e6e:	4680      	mov	r8, r0
 8003e70:	d129      	bne.n	8003ec6 <_printf_float+0x172>
 8003e72:	1cc8      	adds	r0, r1, #3
 8003e74:	db02      	blt.n	8003e7c <_printf_float+0x128>
 8003e76:	6863      	ldr	r3, [r4, #4]
 8003e78:	4299      	cmp	r1, r3
 8003e7a:	dd41      	ble.n	8003f00 <_printf_float+0x1ac>
 8003e7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e80:	fa5f fa8a 	uxtb.w	sl, sl
 8003e84:	3901      	subs	r1, #1
 8003e86:	4652      	mov	r2, sl
 8003e88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8003e8e:	f7ff ff27 	bl	8003ce0 <__exponent>
 8003e92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e94:	1813      	adds	r3, r2, r0
 8003e96:	2a01      	cmp	r2, #1
 8003e98:	4681      	mov	r9, r0
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	dc02      	bgt.n	8003ea4 <_printf_float+0x150>
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	07d2      	lsls	r2, r2, #31
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_float+0x154>
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0a2      	beq.n	8003df6 <_printf_float+0xa2>
 8003eb0:	232d      	movs	r3, #45	@ 0x2d
 8003eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb6:	e79e      	b.n	8003df6 <_printf_float+0xa2>
 8003eb8:	9a06      	ldr	r2, [sp, #24]
 8003eba:	2a47      	cmp	r2, #71	@ 0x47
 8003ebc:	d1c2      	bne.n	8003e44 <_printf_float+0xf0>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1c0      	bne.n	8003e44 <_printf_float+0xf0>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e7bd      	b.n	8003e42 <_printf_float+0xee>
 8003ec6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003eca:	d9db      	bls.n	8003e84 <_printf_float+0x130>
 8003ecc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ed0:	d118      	bne.n	8003f04 <_printf_float+0x1b0>
 8003ed2:	2900      	cmp	r1, #0
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	dd0b      	ble.n	8003ef0 <_printf_float+0x19c>
 8003ed8:	6121      	str	r1, [r4, #16]
 8003eda:	b913      	cbnz	r3, 8003ee2 <_printf_float+0x18e>
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	07d0      	lsls	r0, r2, #31
 8003ee0:	d502      	bpl.n	8003ee8 <_printf_float+0x194>
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	440b      	add	r3, r1
 8003ee6:	6123      	str	r3, [r4, #16]
 8003ee8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003eea:	f04f 0900 	mov.w	r9, #0
 8003eee:	e7db      	b.n	8003ea8 <_printf_float+0x154>
 8003ef0:	b913      	cbnz	r3, 8003ef8 <_printf_float+0x1a4>
 8003ef2:	6822      	ldr	r2, [r4, #0]
 8003ef4:	07d2      	lsls	r2, r2, #31
 8003ef6:	d501      	bpl.n	8003efc <_printf_float+0x1a8>
 8003ef8:	3302      	adds	r3, #2
 8003efa:	e7f4      	b.n	8003ee6 <_printf_float+0x192>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e7f2      	b.n	8003ee6 <_printf_float+0x192>
 8003f00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f06:	4299      	cmp	r1, r3
 8003f08:	db05      	blt.n	8003f16 <_printf_float+0x1c2>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	6121      	str	r1, [r4, #16]
 8003f0e:	07d8      	lsls	r0, r3, #31
 8003f10:	d5ea      	bpl.n	8003ee8 <_printf_float+0x194>
 8003f12:	1c4b      	adds	r3, r1, #1
 8003f14:	e7e7      	b.n	8003ee6 <_printf_float+0x192>
 8003f16:	2900      	cmp	r1, #0
 8003f18:	bfd4      	ite	le
 8003f1a:	f1c1 0202 	rsble	r2, r1, #2
 8003f1e:	2201      	movgt	r2, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	e7e0      	b.n	8003ee6 <_printf_float+0x192>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	055a      	lsls	r2, r3, #21
 8003f28:	d407      	bmi.n	8003f3a <_printf_float+0x1e6>
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	4631      	mov	r1, r6
 8003f30:	4628      	mov	r0, r5
 8003f32:	47b8      	blx	r7
 8003f34:	3001      	adds	r0, #1
 8003f36:	d12b      	bne.n	8003f90 <_printf_float+0x23c>
 8003f38:	e767      	b.n	8003e0a <_printf_float+0xb6>
 8003f3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f3e:	f240 80dd 	bls.w	80040fc <_printf_float+0x3a8>
 8003f42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f46:	2200      	movs	r2, #0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f7fc fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d033      	beq.n	8003fba <_printf_float+0x266>
 8003f52:	4a37      	ldr	r2, [pc, #220]	@ (8004030 <_printf_float+0x2dc>)
 8003f54:	2301      	movs	r3, #1
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b8      	blx	r7
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	f43f af54 	beq.w	8003e0a <_printf_float+0xb6>
 8003f62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f66:	4543      	cmp	r3, r8
 8003f68:	db02      	blt.n	8003f70 <_printf_float+0x21c>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	07d8      	lsls	r0, r3, #31
 8003f6e:	d50f      	bpl.n	8003f90 <_printf_float+0x23c>
 8003f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f74:	4631      	mov	r1, r6
 8003f76:	4628      	mov	r0, r5
 8003f78:	47b8      	blx	r7
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	f43f af45 	beq.w	8003e0a <_printf_float+0xb6>
 8003f80:	f04f 0900 	mov.w	r9, #0
 8003f84:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f88:	f104 0a1a 	add.w	sl, r4, #26
 8003f8c:	45c8      	cmp	r8, r9
 8003f8e:	dc09      	bgt.n	8003fa4 <_printf_float+0x250>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	079b      	lsls	r3, r3, #30
 8003f94:	f100 8103 	bmi.w	800419e <_printf_float+0x44a>
 8003f98:	68e0      	ldr	r0, [r4, #12]
 8003f9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f9c:	4298      	cmp	r0, r3
 8003f9e:	bfb8      	it	lt
 8003fa0:	4618      	movlt	r0, r3
 8003fa2:	e734      	b.n	8003e0e <_printf_float+0xba>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	4652      	mov	r2, sl
 8003fa8:	4631      	mov	r1, r6
 8003faa:	4628      	mov	r0, r5
 8003fac:	47b8      	blx	r7
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f43f af2b 	beq.w	8003e0a <_printf_float+0xb6>
 8003fb4:	f109 0901 	add.w	r9, r9, #1
 8003fb8:	e7e8      	b.n	8003f8c <_printf_float+0x238>
 8003fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	dc39      	bgt.n	8004034 <_printf_float+0x2e0>
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004030 <_printf_float+0x2dc>)
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4631      	mov	r1, r6
 8003fc6:	4628      	mov	r0, r5
 8003fc8:	47b8      	blx	r7
 8003fca:	3001      	adds	r0, #1
 8003fcc:	f43f af1d 	beq.w	8003e0a <_printf_float+0xb6>
 8003fd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003fd4:	ea59 0303 	orrs.w	r3, r9, r3
 8003fd8:	d102      	bne.n	8003fe0 <_printf_float+0x28c>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	07d9      	lsls	r1, r3, #31
 8003fde:	d5d7      	bpl.n	8003f90 <_printf_float+0x23c>
 8003fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	47b8      	blx	r7
 8003fea:	3001      	adds	r0, #1
 8003fec:	f43f af0d 	beq.w	8003e0a <_printf_float+0xb6>
 8003ff0:	f04f 0a00 	mov.w	sl, #0
 8003ff4:	f104 0b1a 	add.w	fp, r4, #26
 8003ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ffa:	425b      	negs	r3, r3
 8003ffc:	4553      	cmp	r3, sl
 8003ffe:	dc01      	bgt.n	8004004 <_printf_float+0x2b0>
 8004000:	464b      	mov	r3, r9
 8004002:	e793      	b.n	8003f2c <_printf_float+0x1d8>
 8004004:	2301      	movs	r3, #1
 8004006:	465a      	mov	r2, fp
 8004008:	4631      	mov	r1, r6
 800400a:	4628      	mov	r0, r5
 800400c:	47b8      	blx	r7
 800400e:	3001      	adds	r0, #1
 8004010:	f43f aefb 	beq.w	8003e0a <_printf_float+0xb6>
 8004014:	f10a 0a01 	add.w	sl, sl, #1
 8004018:	e7ee      	b.n	8003ff8 <_printf_float+0x2a4>
 800401a:	bf00      	nop
 800401c:	7fefffff 	.word	0x7fefffff
 8004020:	080066de 	.word	0x080066de
 8004024:	080066e2 	.word	0x080066e2
 8004028:	080066e6 	.word	0x080066e6
 800402c:	080066ea 	.word	0x080066ea
 8004030:	080066ee 	.word	0x080066ee
 8004034:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004036:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800403a:	4553      	cmp	r3, sl
 800403c:	bfa8      	it	ge
 800403e:	4653      	movge	r3, sl
 8004040:	2b00      	cmp	r3, #0
 8004042:	4699      	mov	r9, r3
 8004044:	dc36      	bgt.n	80040b4 <_printf_float+0x360>
 8004046:	f04f 0b00 	mov.w	fp, #0
 800404a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800404e:	f104 021a 	add.w	r2, r4, #26
 8004052:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004054:	9306      	str	r3, [sp, #24]
 8004056:	eba3 0309 	sub.w	r3, r3, r9
 800405a:	455b      	cmp	r3, fp
 800405c:	dc31      	bgt.n	80040c2 <_printf_float+0x36e>
 800405e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004060:	459a      	cmp	sl, r3
 8004062:	dc3a      	bgt.n	80040da <_printf_float+0x386>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	07da      	lsls	r2, r3, #31
 8004068:	d437      	bmi.n	80040da <_printf_float+0x386>
 800406a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800406c:	ebaa 0903 	sub.w	r9, sl, r3
 8004070:	9b06      	ldr	r3, [sp, #24]
 8004072:	ebaa 0303 	sub.w	r3, sl, r3
 8004076:	4599      	cmp	r9, r3
 8004078:	bfa8      	it	ge
 800407a:	4699      	movge	r9, r3
 800407c:	f1b9 0f00 	cmp.w	r9, #0
 8004080:	dc33      	bgt.n	80040ea <_printf_float+0x396>
 8004082:	f04f 0800 	mov.w	r8, #0
 8004086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800408a:	f104 0b1a 	add.w	fp, r4, #26
 800408e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004090:	ebaa 0303 	sub.w	r3, sl, r3
 8004094:	eba3 0309 	sub.w	r3, r3, r9
 8004098:	4543      	cmp	r3, r8
 800409a:	f77f af79 	ble.w	8003f90 <_printf_float+0x23c>
 800409e:	2301      	movs	r3, #1
 80040a0:	465a      	mov	r2, fp
 80040a2:	4631      	mov	r1, r6
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b8      	blx	r7
 80040a8:	3001      	adds	r0, #1
 80040aa:	f43f aeae 	beq.w	8003e0a <_printf_float+0xb6>
 80040ae:	f108 0801 	add.w	r8, r8, #1
 80040b2:	e7ec      	b.n	800408e <_printf_float+0x33a>
 80040b4:	4642      	mov	r2, r8
 80040b6:	4631      	mov	r1, r6
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b8      	blx	r7
 80040bc:	3001      	adds	r0, #1
 80040be:	d1c2      	bne.n	8004046 <_printf_float+0x2f2>
 80040c0:	e6a3      	b.n	8003e0a <_printf_float+0xb6>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4631      	mov	r1, r6
 80040c6:	4628      	mov	r0, r5
 80040c8:	9206      	str	r2, [sp, #24]
 80040ca:	47b8      	blx	r7
 80040cc:	3001      	adds	r0, #1
 80040ce:	f43f ae9c 	beq.w	8003e0a <_printf_float+0xb6>
 80040d2:	9a06      	ldr	r2, [sp, #24]
 80040d4:	f10b 0b01 	add.w	fp, fp, #1
 80040d8:	e7bb      	b.n	8004052 <_printf_float+0x2fe>
 80040da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040de:	4631      	mov	r1, r6
 80040e0:	4628      	mov	r0, r5
 80040e2:	47b8      	blx	r7
 80040e4:	3001      	adds	r0, #1
 80040e6:	d1c0      	bne.n	800406a <_printf_float+0x316>
 80040e8:	e68f      	b.n	8003e0a <_printf_float+0xb6>
 80040ea:	9a06      	ldr	r2, [sp, #24]
 80040ec:	464b      	mov	r3, r9
 80040ee:	4442      	add	r2, r8
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b8      	blx	r7
 80040f6:	3001      	adds	r0, #1
 80040f8:	d1c3      	bne.n	8004082 <_printf_float+0x32e>
 80040fa:	e686      	b.n	8003e0a <_printf_float+0xb6>
 80040fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004100:	f1ba 0f01 	cmp.w	sl, #1
 8004104:	dc01      	bgt.n	800410a <_printf_float+0x3b6>
 8004106:	07db      	lsls	r3, r3, #31
 8004108:	d536      	bpl.n	8004178 <_printf_float+0x424>
 800410a:	2301      	movs	r3, #1
 800410c:	4642      	mov	r2, r8
 800410e:	4631      	mov	r1, r6
 8004110:	4628      	mov	r0, r5
 8004112:	47b8      	blx	r7
 8004114:	3001      	adds	r0, #1
 8004116:	f43f ae78 	beq.w	8003e0a <_printf_float+0xb6>
 800411a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800411e:	4631      	mov	r1, r6
 8004120:	4628      	mov	r0, r5
 8004122:	47b8      	blx	r7
 8004124:	3001      	adds	r0, #1
 8004126:	f43f ae70 	beq.w	8003e0a <_printf_float+0xb6>
 800412a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800412e:	2200      	movs	r2, #0
 8004130:	2300      	movs	r3, #0
 8004132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004136:	f7fc fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800413a:	b9c0      	cbnz	r0, 800416e <_printf_float+0x41a>
 800413c:	4653      	mov	r3, sl
 800413e:	f108 0201 	add.w	r2, r8, #1
 8004142:	4631      	mov	r1, r6
 8004144:	4628      	mov	r0, r5
 8004146:	47b8      	blx	r7
 8004148:	3001      	adds	r0, #1
 800414a:	d10c      	bne.n	8004166 <_printf_float+0x412>
 800414c:	e65d      	b.n	8003e0a <_printf_float+0xb6>
 800414e:	2301      	movs	r3, #1
 8004150:	465a      	mov	r2, fp
 8004152:	4631      	mov	r1, r6
 8004154:	4628      	mov	r0, r5
 8004156:	47b8      	blx	r7
 8004158:	3001      	adds	r0, #1
 800415a:	f43f ae56 	beq.w	8003e0a <_printf_float+0xb6>
 800415e:	f108 0801 	add.w	r8, r8, #1
 8004162:	45d0      	cmp	r8, sl
 8004164:	dbf3      	blt.n	800414e <_printf_float+0x3fa>
 8004166:	464b      	mov	r3, r9
 8004168:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800416c:	e6df      	b.n	8003f2e <_printf_float+0x1da>
 800416e:	f04f 0800 	mov.w	r8, #0
 8004172:	f104 0b1a 	add.w	fp, r4, #26
 8004176:	e7f4      	b.n	8004162 <_printf_float+0x40e>
 8004178:	2301      	movs	r3, #1
 800417a:	4642      	mov	r2, r8
 800417c:	e7e1      	b.n	8004142 <_printf_float+0x3ee>
 800417e:	2301      	movs	r3, #1
 8004180:	464a      	mov	r2, r9
 8004182:	4631      	mov	r1, r6
 8004184:	4628      	mov	r0, r5
 8004186:	47b8      	blx	r7
 8004188:	3001      	adds	r0, #1
 800418a:	f43f ae3e 	beq.w	8003e0a <_printf_float+0xb6>
 800418e:	f108 0801 	add.w	r8, r8, #1
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004196:	1a5b      	subs	r3, r3, r1
 8004198:	4543      	cmp	r3, r8
 800419a:	dcf0      	bgt.n	800417e <_printf_float+0x42a>
 800419c:	e6fc      	b.n	8003f98 <_printf_float+0x244>
 800419e:	f04f 0800 	mov.w	r8, #0
 80041a2:	f104 0919 	add.w	r9, r4, #25
 80041a6:	e7f4      	b.n	8004192 <_printf_float+0x43e>

080041a8 <_printf_common>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	4616      	mov	r6, r2
 80041ae:	4698      	mov	r8, r3
 80041b0:	688a      	ldr	r2, [r1, #8]
 80041b2:	690b      	ldr	r3, [r1, #16]
 80041b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041b8:	4293      	cmp	r3, r2
 80041ba:	bfb8      	it	lt
 80041bc:	4613      	movlt	r3, r2
 80041be:	6033      	str	r3, [r6, #0]
 80041c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041c4:	4607      	mov	r7, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	b10a      	cbz	r2, 80041ce <_printf_common+0x26>
 80041ca:	3301      	adds	r3, #1
 80041cc:	6033      	str	r3, [r6, #0]
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	0699      	lsls	r1, r3, #26
 80041d2:	bf42      	ittt	mi
 80041d4:	6833      	ldrmi	r3, [r6, #0]
 80041d6:	3302      	addmi	r3, #2
 80041d8:	6033      	strmi	r3, [r6, #0]
 80041da:	6825      	ldr	r5, [r4, #0]
 80041dc:	f015 0506 	ands.w	r5, r5, #6
 80041e0:	d106      	bne.n	80041f0 <_printf_common+0x48>
 80041e2:	f104 0a19 	add.w	sl, r4, #25
 80041e6:	68e3      	ldr	r3, [r4, #12]
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	42ab      	cmp	r3, r5
 80041ee:	dc26      	bgt.n	800423e <_printf_common+0x96>
 80041f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	3b00      	subs	r3, #0
 80041f8:	bf18      	it	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	0692      	lsls	r2, r2, #26
 80041fe:	d42b      	bmi.n	8004258 <_printf_common+0xb0>
 8004200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004204:	4641      	mov	r1, r8
 8004206:	4638      	mov	r0, r7
 8004208:	47c8      	blx	r9
 800420a:	3001      	adds	r0, #1
 800420c:	d01e      	beq.n	800424c <_printf_common+0xa4>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	6922      	ldr	r2, [r4, #16]
 8004212:	f003 0306 	and.w	r3, r3, #6
 8004216:	2b04      	cmp	r3, #4
 8004218:	bf02      	ittt	eq
 800421a:	68e5      	ldreq	r5, [r4, #12]
 800421c:	6833      	ldreq	r3, [r6, #0]
 800421e:	1aed      	subeq	r5, r5, r3
 8004220:	68a3      	ldr	r3, [r4, #8]
 8004222:	bf0c      	ite	eq
 8004224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004228:	2500      	movne	r5, #0
 800422a:	4293      	cmp	r3, r2
 800422c:	bfc4      	itt	gt
 800422e:	1a9b      	subgt	r3, r3, r2
 8004230:	18ed      	addgt	r5, r5, r3
 8004232:	2600      	movs	r6, #0
 8004234:	341a      	adds	r4, #26
 8004236:	42b5      	cmp	r5, r6
 8004238:	d11a      	bne.n	8004270 <_printf_common+0xc8>
 800423a:	2000      	movs	r0, #0
 800423c:	e008      	b.n	8004250 <_printf_common+0xa8>
 800423e:	2301      	movs	r3, #1
 8004240:	4652      	mov	r2, sl
 8004242:	4641      	mov	r1, r8
 8004244:	4638      	mov	r0, r7
 8004246:	47c8      	blx	r9
 8004248:	3001      	adds	r0, #1
 800424a:	d103      	bne.n	8004254 <_printf_common+0xac>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004254:	3501      	adds	r5, #1
 8004256:	e7c6      	b.n	80041e6 <_printf_common+0x3e>
 8004258:	18e1      	adds	r1, r4, r3
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	2030      	movs	r0, #48	@ 0x30
 800425e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004262:	4422      	add	r2, r4
 8004264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800426c:	3302      	adds	r3, #2
 800426e:	e7c7      	b.n	8004200 <_printf_common+0x58>
 8004270:	2301      	movs	r3, #1
 8004272:	4622      	mov	r2, r4
 8004274:	4641      	mov	r1, r8
 8004276:	4638      	mov	r0, r7
 8004278:	47c8      	blx	r9
 800427a:	3001      	adds	r0, #1
 800427c:	d0e6      	beq.n	800424c <_printf_common+0xa4>
 800427e:	3601      	adds	r6, #1
 8004280:	e7d9      	b.n	8004236 <_printf_common+0x8e>
	...

08004284 <_printf_i>:
 8004284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	7e0f      	ldrb	r7, [r1, #24]
 800428a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800428c:	2f78      	cmp	r7, #120	@ 0x78
 800428e:	4691      	mov	r9, r2
 8004290:	4680      	mov	r8, r0
 8004292:	460c      	mov	r4, r1
 8004294:	469a      	mov	sl, r3
 8004296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800429a:	d807      	bhi.n	80042ac <_printf_i+0x28>
 800429c:	2f62      	cmp	r7, #98	@ 0x62
 800429e:	d80a      	bhi.n	80042b6 <_printf_i+0x32>
 80042a0:	2f00      	cmp	r7, #0
 80042a2:	f000 80d2 	beq.w	800444a <_printf_i+0x1c6>
 80042a6:	2f58      	cmp	r7, #88	@ 0x58
 80042a8:	f000 80b9 	beq.w	800441e <_printf_i+0x19a>
 80042ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042b4:	e03a      	b.n	800432c <_printf_i+0xa8>
 80042b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042ba:	2b15      	cmp	r3, #21
 80042bc:	d8f6      	bhi.n	80042ac <_printf_i+0x28>
 80042be:	a101      	add	r1, pc, #4	@ (adr r1, 80042c4 <_printf_i+0x40>)
 80042c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	08004331 	.word	0x08004331
 80042cc:	080042ad 	.word	0x080042ad
 80042d0:	080042ad 	.word	0x080042ad
 80042d4:	080042ad 	.word	0x080042ad
 80042d8:	080042ad 	.word	0x080042ad
 80042dc:	08004331 	.word	0x08004331
 80042e0:	080042ad 	.word	0x080042ad
 80042e4:	080042ad 	.word	0x080042ad
 80042e8:	080042ad 	.word	0x080042ad
 80042ec:	080042ad 	.word	0x080042ad
 80042f0:	08004431 	.word	0x08004431
 80042f4:	0800435b 	.word	0x0800435b
 80042f8:	080043eb 	.word	0x080043eb
 80042fc:	080042ad 	.word	0x080042ad
 8004300:	080042ad 	.word	0x080042ad
 8004304:	08004453 	.word	0x08004453
 8004308:	080042ad 	.word	0x080042ad
 800430c:	0800435b 	.word	0x0800435b
 8004310:	080042ad 	.word	0x080042ad
 8004314:	080042ad 	.word	0x080042ad
 8004318:	080043f3 	.word	0x080043f3
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6032      	str	r2, [r6, #0]
 8004324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800432c:	2301      	movs	r3, #1
 800432e:	e09d      	b.n	800446c <_printf_i+0x1e8>
 8004330:	6833      	ldr	r3, [r6, #0]
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	6031      	str	r1, [r6, #0]
 8004338:	0606      	lsls	r6, r0, #24
 800433a:	d501      	bpl.n	8004340 <_printf_i+0xbc>
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	e003      	b.n	8004348 <_printf_i+0xc4>
 8004340:	0645      	lsls	r5, r0, #25
 8004342:	d5fb      	bpl.n	800433c <_printf_i+0xb8>
 8004344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004348:	2d00      	cmp	r5, #0
 800434a:	da03      	bge.n	8004354 <_printf_i+0xd0>
 800434c:	232d      	movs	r3, #45	@ 0x2d
 800434e:	426d      	negs	r5, r5
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004354:	4859      	ldr	r0, [pc, #356]	@ (80044bc <_printf_i+0x238>)
 8004356:	230a      	movs	r3, #10
 8004358:	e011      	b.n	800437e <_printf_i+0xfa>
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	6833      	ldr	r3, [r6, #0]
 800435e:	0608      	lsls	r0, r1, #24
 8004360:	f853 5b04 	ldr.w	r5, [r3], #4
 8004364:	d402      	bmi.n	800436c <_printf_i+0xe8>
 8004366:	0649      	lsls	r1, r1, #25
 8004368:	bf48      	it	mi
 800436a:	b2ad      	uxthmi	r5, r5
 800436c:	2f6f      	cmp	r7, #111	@ 0x6f
 800436e:	4853      	ldr	r0, [pc, #332]	@ (80044bc <_printf_i+0x238>)
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	bf14      	ite	ne
 8004374:	230a      	movne	r3, #10
 8004376:	2308      	moveq	r3, #8
 8004378:	2100      	movs	r1, #0
 800437a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800437e:	6866      	ldr	r6, [r4, #4]
 8004380:	60a6      	str	r6, [r4, #8]
 8004382:	2e00      	cmp	r6, #0
 8004384:	bfa2      	ittt	ge
 8004386:	6821      	ldrge	r1, [r4, #0]
 8004388:	f021 0104 	bicge.w	r1, r1, #4
 800438c:	6021      	strge	r1, [r4, #0]
 800438e:	b90d      	cbnz	r5, 8004394 <_printf_i+0x110>
 8004390:	2e00      	cmp	r6, #0
 8004392:	d04b      	beq.n	800442c <_printf_i+0x1a8>
 8004394:	4616      	mov	r6, r2
 8004396:	fbb5 f1f3 	udiv	r1, r5, r3
 800439a:	fb03 5711 	mls	r7, r3, r1, r5
 800439e:	5dc7      	ldrb	r7, [r0, r7]
 80043a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043a4:	462f      	mov	r7, r5
 80043a6:	42bb      	cmp	r3, r7
 80043a8:	460d      	mov	r5, r1
 80043aa:	d9f4      	bls.n	8004396 <_printf_i+0x112>
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d10b      	bne.n	80043c8 <_printf_i+0x144>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	07df      	lsls	r7, r3, #31
 80043b4:	d508      	bpl.n	80043c8 <_printf_i+0x144>
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	6861      	ldr	r1, [r4, #4]
 80043ba:	4299      	cmp	r1, r3
 80043bc:	bfde      	ittt	le
 80043be:	2330      	movle	r3, #48	@ 0x30
 80043c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043c8:	1b92      	subs	r2, r2, r6
 80043ca:	6122      	str	r2, [r4, #16]
 80043cc:	f8cd a000 	str.w	sl, [sp]
 80043d0:	464b      	mov	r3, r9
 80043d2:	aa03      	add	r2, sp, #12
 80043d4:	4621      	mov	r1, r4
 80043d6:	4640      	mov	r0, r8
 80043d8:	f7ff fee6 	bl	80041a8 <_printf_common>
 80043dc:	3001      	adds	r0, #1
 80043de:	d14a      	bne.n	8004476 <_printf_i+0x1f2>
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	b004      	add	sp, #16
 80043e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f043 0320 	orr.w	r3, r3, #32
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	4833      	ldr	r0, [pc, #204]	@ (80044c0 <_printf_i+0x23c>)
 80043f4:	2778      	movs	r7, #120	@ 0x78
 80043f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	6831      	ldr	r1, [r6, #0]
 80043fe:	061f      	lsls	r7, r3, #24
 8004400:	f851 5b04 	ldr.w	r5, [r1], #4
 8004404:	d402      	bmi.n	800440c <_printf_i+0x188>
 8004406:	065f      	lsls	r7, r3, #25
 8004408:	bf48      	it	mi
 800440a:	b2ad      	uxthmi	r5, r5
 800440c:	6031      	str	r1, [r6, #0]
 800440e:	07d9      	lsls	r1, r3, #31
 8004410:	bf44      	itt	mi
 8004412:	f043 0320 	orrmi.w	r3, r3, #32
 8004416:	6023      	strmi	r3, [r4, #0]
 8004418:	b11d      	cbz	r5, 8004422 <_printf_i+0x19e>
 800441a:	2310      	movs	r3, #16
 800441c:	e7ac      	b.n	8004378 <_printf_i+0xf4>
 800441e:	4827      	ldr	r0, [pc, #156]	@ (80044bc <_printf_i+0x238>)
 8004420:	e7e9      	b.n	80043f6 <_printf_i+0x172>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f023 0320 	bic.w	r3, r3, #32
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	e7f6      	b.n	800441a <_printf_i+0x196>
 800442c:	4616      	mov	r6, r2
 800442e:	e7bd      	b.n	80043ac <_printf_i+0x128>
 8004430:	6833      	ldr	r3, [r6, #0]
 8004432:	6825      	ldr	r5, [r4, #0]
 8004434:	6961      	ldr	r1, [r4, #20]
 8004436:	1d18      	adds	r0, r3, #4
 8004438:	6030      	str	r0, [r6, #0]
 800443a:	062e      	lsls	r6, r5, #24
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	d501      	bpl.n	8004444 <_printf_i+0x1c0>
 8004440:	6019      	str	r1, [r3, #0]
 8004442:	e002      	b.n	800444a <_printf_i+0x1c6>
 8004444:	0668      	lsls	r0, r5, #25
 8004446:	d5fb      	bpl.n	8004440 <_printf_i+0x1bc>
 8004448:	8019      	strh	r1, [r3, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	6123      	str	r3, [r4, #16]
 800444e:	4616      	mov	r6, r2
 8004450:	e7bc      	b.n	80043cc <_printf_i+0x148>
 8004452:	6833      	ldr	r3, [r6, #0]
 8004454:	1d1a      	adds	r2, r3, #4
 8004456:	6032      	str	r2, [r6, #0]
 8004458:	681e      	ldr	r6, [r3, #0]
 800445a:	6862      	ldr	r2, [r4, #4]
 800445c:	2100      	movs	r1, #0
 800445e:	4630      	mov	r0, r6
 8004460:	f7fb febe 	bl	80001e0 <memchr>
 8004464:	b108      	cbz	r0, 800446a <_printf_i+0x1e6>
 8004466:	1b80      	subs	r0, r0, r6
 8004468:	6060      	str	r0, [r4, #4]
 800446a:	6863      	ldr	r3, [r4, #4]
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	2300      	movs	r3, #0
 8004470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004474:	e7aa      	b.n	80043cc <_printf_i+0x148>
 8004476:	6923      	ldr	r3, [r4, #16]
 8004478:	4632      	mov	r2, r6
 800447a:	4649      	mov	r1, r9
 800447c:	4640      	mov	r0, r8
 800447e:	47d0      	blx	sl
 8004480:	3001      	adds	r0, #1
 8004482:	d0ad      	beq.n	80043e0 <_printf_i+0x15c>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	079b      	lsls	r3, r3, #30
 8004488:	d413      	bmi.n	80044b2 <_printf_i+0x22e>
 800448a:	68e0      	ldr	r0, [r4, #12]
 800448c:	9b03      	ldr	r3, [sp, #12]
 800448e:	4298      	cmp	r0, r3
 8004490:	bfb8      	it	lt
 8004492:	4618      	movlt	r0, r3
 8004494:	e7a6      	b.n	80043e4 <_printf_i+0x160>
 8004496:	2301      	movs	r3, #1
 8004498:	4632      	mov	r2, r6
 800449a:	4649      	mov	r1, r9
 800449c:	4640      	mov	r0, r8
 800449e:	47d0      	blx	sl
 80044a0:	3001      	adds	r0, #1
 80044a2:	d09d      	beq.n	80043e0 <_printf_i+0x15c>
 80044a4:	3501      	adds	r5, #1
 80044a6:	68e3      	ldr	r3, [r4, #12]
 80044a8:	9903      	ldr	r1, [sp, #12]
 80044aa:	1a5b      	subs	r3, r3, r1
 80044ac:	42ab      	cmp	r3, r5
 80044ae:	dcf2      	bgt.n	8004496 <_printf_i+0x212>
 80044b0:	e7eb      	b.n	800448a <_printf_i+0x206>
 80044b2:	2500      	movs	r5, #0
 80044b4:	f104 0619 	add.w	r6, r4, #25
 80044b8:	e7f5      	b.n	80044a6 <_printf_i+0x222>
 80044ba:	bf00      	nop
 80044bc:	080066f0 	.word	0x080066f0
 80044c0:	08006701 	.word	0x08006701

080044c4 <std>:
 80044c4:	2300      	movs	r3, #0
 80044c6:	b510      	push	{r4, lr}
 80044c8:	4604      	mov	r4, r0
 80044ca:	e9c0 3300 	strd	r3, r3, [r0]
 80044ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044d2:	6083      	str	r3, [r0, #8]
 80044d4:	8181      	strh	r1, [r0, #12]
 80044d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80044d8:	81c2      	strh	r2, [r0, #14]
 80044da:	6183      	str	r3, [r0, #24]
 80044dc:	4619      	mov	r1, r3
 80044de:	2208      	movs	r2, #8
 80044e0:	305c      	adds	r0, #92	@ 0x5c
 80044e2:	f000 f9f9 	bl	80048d8 <memset>
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <std+0x58>)
 80044e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x5c>)
 80044ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <std+0x60>)
 80044f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <std+0x64>)
 80044f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <std+0x68>)
 80044f8:	6224      	str	r4, [r4, #32]
 80044fa:	429c      	cmp	r4, r3
 80044fc:	d006      	beq.n	800450c <std+0x48>
 80044fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004502:	4294      	cmp	r4, r2
 8004504:	d002      	beq.n	800450c <std+0x48>
 8004506:	33d0      	adds	r3, #208	@ 0xd0
 8004508:	429c      	cmp	r4, r3
 800450a:	d105      	bne.n	8004518 <std+0x54>
 800450c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004514:	f000 ba5c 	b.w	80049d0 <__retarget_lock_init_recursive>
 8004518:	bd10      	pop	{r4, pc}
 800451a:	bf00      	nop
 800451c:	08004729 	.word	0x08004729
 8004520:	0800474b 	.word	0x0800474b
 8004524:	08004783 	.word	0x08004783
 8004528:	080047a7 	.word	0x080047a7
 800452c:	20000300 	.word	0x20000300

08004530 <stdio_exit_handler>:
 8004530:	4a02      	ldr	r2, [pc, #8]	@ (800453c <stdio_exit_handler+0xc>)
 8004532:	4903      	ldr	r1, [pc, #12]	@ (8004540 <stdio_exit_handler+0x10>)
 8004534:	4803      	ldr	r0, [pc, #12]	@ (8004544 <stdio_exit_handler+0x14>)
 8004536:	f000 b869 	b.w	800460c <_fwalk_sglue>
 800453a:	bf00      	nop
 800453c:	20000014 	.word	0x20000014
 8004540:	08006301 	.word	0x08006301
 8004544:	20000024 	.word	0x20000024

08004548 <cleanup_stdio>:
 8004548:	6841      	ldr	r1, [r0, #4]
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <cleanup_stdio+0x34>)
 800454c:	4299      	cmp	r1, r3
 800454e:	b510      	push	{r4, lr}
 8004550:	4604      	mov	r4, r0
 8004552:	d001      	beq.n	8004558 <cleanup_stdio+0x10>
 8004554:	f001 fed4 	bl	8006300 <_fflush_r>
 8004558:	68a1      	ldr	r1, [r4, #8]
 800455a:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <cleanup_stdio+0x38>)
 800455c:	4299      	cmp	r1, r3
 800455e:	d002      	beq.n	8004566 <cleanup_stdio+0x1e>
 8004560:	4620      	mov	r0, r4
 8004562:	f001 fecd 	bl	8006300 <_fflush_r>
 8004566:	68e1      	ldr	r1, [r4, #12]
 8004568:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <cleanup_stdio+0x3c>)
 800456a:	4299      	cmp	r1, r3
 800456c:	d004      	beq.n	8004578 <cleanup_stdio+0x30>
 800456e:	4620      	mov	r0, r4
 8004570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004574:	f001 bec4 	b.w	8006300 <_fflush_r>
 8004578:	bd10      	pop	{r4, pc}
 800457a:	bf00      	nop
 800457c:	20000300 	.word	0x20000300
 8004580:	20000368 	.word	0x20000368
 8004584:	200003d0 	.word	0x200003d0

08004588 <global_stdio_init.part.0>:
 8004588:	b510      	push	{r4, lr}
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <global_stdio_init.part.0+0x30>)
 800458c:	4c0b      	ldr	r4, [pc, #44]	@ (80045bc <global_stdio_init.part.0+0x34>)
 800458e:	4a0c      	ldr	r2, [pc, #48]	@ (80045c0 <global_stdio_init.part.0+0x38>)
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	4620      	mov	r0, r4
 8004594:	2200      	movs	r2, #0
 8004596:	2104      	movs	r1, #4
 8004598:	f7ff ff94 	bl	80044c4 <std>
 800459c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045a0:	2201      	movs	r2, #1
 80045a2:	2109      	movs	r1, #9
 80045a4:	f7ff ff8e 	bl	80044c4 <std>
 80045a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045ac:	2202      	movs	r2, #2
 80045ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b2:	2112      	movs	r1, #18
 80045b4:	f7ff bf86 	b.w	80044c4 <std>
 80045b8:	20000438 	.word	0x20000438
 80045bc:	20000300 	.word	0x20000300
 80045c0:	08004531 	.word	0x08004531

080045c4 <__sfp_lock_acquire>:
 80045c4:	4801      	ldr	r0, [pc, #4]	@ (80045cc <__sfp_lock_acquire+0x8>)
 80045c6:	f000 ba04 	b.w	80049d2 <__retarget_lock_acquire_recursive>
 80045ca:	bf00      	nop
 80045cc:	20000441 	.word	0x20000441

080045d0 <__sfp_lock_release>:
 80045d0:	4801      	ldr	r0, [pc, #4]	@ (80045d8 <__sfp_lock_release+0x8>)
 80045d2:	f000 b9ff 	b.w	80049d4 <__retarget_lock_release_recursive>
 80045d6:	bf00      	nop
 80045d8:	20000441 	.word	0x20000441

080045dc <__sinit>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	4604      	mov	r4, r0
 80045e0:	f7ff fff0 	bl	80045c4 <__sfp_lock_acquire>
 80045e4:	6a23      	ldr	r3, [r4, #32]
 80045e6:	b11b      	cbz	r3, 80045f0 <__sinit+0x14>
 80045e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ec:	f7ff bff0 	b.w	80045d0 <__sfp_lock_release>
 80045f0:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <__sinit+0x28>)
 80045f2:	6223      	str	r3, [r4, #32]
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <__sinit+0x2c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f5      	bne.n	80045e8 <__sinit+0xc>
 80045fc:	f7ff ffc4 	bl	8004588 <global_stdio_init.part.0>
 8004600:	e7f2      	b.n	80045e8 <__sinit+0xc>
 8004602:	bf00      	nop
 8004604:	08004549 	.word	0x08004549
 8004608:	20000438 	.word	0x20000438

0800460c <_fwalk_sglue>:
 800460c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004610:	4607      	mov	r7, r0
 8004612:	4688      	mov	r8, r1
 8004614:	4614      	mov	r4, r2
 8004616:	2600      	movs	r6, #0
 8004618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800461c:	f1b9 0901 	subs.w	r9, r9, #1
 8004620:	d505      	bpl.n	800462e <_fwalk_sglue+0x22>
 8004622:	6824      	ldr	r4, [r4, #0]
 8004624:	2c00      	cmp	r4, #0
 8004626:	d1f7      	bne.n	8004618 <_fwalk_sglue+0xc>
 8004628:	4630      	mov	r0, r6
 800462a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800462e:	89ab      	ldrh	r3, [r5, #12]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d907      	bls.n	8004644 <_fwalk_sglue+0x38>
 8004634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004638:	3301      	adds	r3, #1
 800463a:	d003      	beq.n	8004644 <_fwalk_sglue+0x38>
 800463c:	4629      	mov	r1, r5
 800463e:	4638      	mov	r0, r7
 8004640:	47c0      	blx	r8
 8004642:	4306      	orrs	r6, r0
 8004644:	3568      	adds	r5, #104	@ 0x68
 8004646:	e7e9      	b.n	800461c <_fwalk_sglue+0x10>

08004648 <iprintf>:
 8004648:	b40f      	push	{r0, r1, r2, r3}
 800464a:	b507      	push	{r0, r1, r2, lr}
 800464c:	4906      	ldr	r1, [pc, #24]	@ (8004668 <iprintf+0x20>)
 800464e:	ab04      	add	r3, sp, #16
 8004650:	6808      	ldr	r0, [r1, #0]
 8004652:	f853 2b04 	ldr.w	r2, [r3], #4
 8004656:	6881      	ldr	r1, [r0, #8]
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	f001 fcb5 	bl	8005fc8 <_vfiprintf_r>
 800465e:	b003      	add	sp, #12
 8004660:	f85d eb04 	ldr.w	lr, [sp], #4
 8004664:	b004      	add	sp, #16
 8004666:	4770      	bx	lr
 8004668:	20000020 	.word	0x20000020

0800466c <_puts_r>:
 800466c:	6a03      	ldr	r3, [r0, #32]
 800466e:	b570      	push	{r4, r5, r6, lr}
 8004670:	6884      	ldr	r4, [r0, #8]
 8004672:	4605      	mov	r5, r0
 8004674:	460e      	mov	r6, r1
 8004676:	b90b      	cbnz	r3, 800467c <_puts_r+0x10>
 8004678:	f7ff ffb0 	bl	80045dc <__sinit>
 800467c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800467e:	07db      	lsls	r3, r3, #31
 8004680:	d405      	bmi.n	800468e <_puts_r+0x22>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	0598      	lsls	r0, r3, #22
 8004686:	d402      	bmi.n	800468e <_puts_r+0x22>
 8004688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800468a:	f000 f9a2 	bl	80049d2 <__retarget_lock_acquire_recursive>
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	0719      	lsls	r1, r3, #28
 8004692:	d502      	bpl.n	800469a <_puts_r+0x2e>
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d135      	bne.n	8004706 <_puts_r+0x9a>
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f8c5 	bl	800482c <__swsetup_r>
 80046a2:	b380      	cbz	r0, 8004706 <_puts_r+0x9a>
 80046a4:	f04f 35ff 	mov.w	r5, #4294967295
 80046a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046aa:	07da      	lsls	r2, r3, #31
 80046ac:	d405      	bmi.n	80046ba <_puts_r+0x4e>
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	059b      	lsls	r3, r3, #22
 80046b2:	d402      	bmi.n	80046ba <_puts_r+0x4e>
 80046b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046b6:	f000 f98d 	bl	80049d4 <__retarget_lock_release_recursive>
 80046ba:	4628      	mov	r0, r5
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da04      	bge.n	80046cc <_puts_r+0x60>
 80046c2:	69a2      	ldr	r2, [r4, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	dc17      	bgt.n	80046f8 <_puts_r+0x8c>
 80046c8:	290a      	cmp	r1, #10
 80046ca:	d015      	beq.n	80046f8 <_puts_r+0x8c>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	6022      	str	r2, [r4, #0]
 80046d2:	7019      	strb	r1, [r3, #0]
 80046d4:	68a3      	ldr	r3, [r4, #8]
 80046d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046da:	3b01      	subs	r3, #1
 80046dc:	60a3      	str	r3, [r4, #8]
 80046de:	2900      	cmp	r1, #0
 80046e0:	d1ed      	bne.n	80046be <_puts_r+0x52>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da11      	bge.n	800470a <_puts_r+0x9e>
 80046e6:	4622      	mov	r2, r4
 80046e8:	210a      	movs	r1, #10
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 f85f 	bl	80047ae <__swbuf_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	d0d7      	beq.n	80046a4 <_puts_r+0x38>
 80046f4:	250a      	movs	r5, #10
 80046f6:	e7d7      	b.n	80046a8 <_puts_r+0x3c>
 80046f8:	4622      	mov	r2, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 f857 	bl	80047ae <__swbuf_r>
 8004700:	3001      	adds	r0, #1
 8004702:	d1e7      	bne.n	80046d4 <_puts_r+0x68>
 8004704:	e7ce      	b.n	80046a4 <_puts_r+0x38>
 8004706:	3e01      	subs	r6, #1
 8004708:	e7e4      	b.n	80046d4 <_puts_r+0x68>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	220a      	movs	r2, #10
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e7ee      	b.n	80046f4 <_puts_r+0x88>
	...

08004718 <puts>:
 8004718:	4b02      	ldr	r3, [pc, #8]	@ (8004724 <puts+0xc>)
 800471a:	4601      	mov	r1, r0
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	f7ff bfa5 	b.w	800466c <_puts_r>
 8004722:	bf00      	nop
 8004724:	20000020 	.word	0x20000020

08004728 <__sread>:
 8004728:	b510      	push	{r4, lr}
 800472a:	460c      	mov	r4, r1
 800472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004730:	f000 f900 	bl	8004934 <_read_r>
 8004734:	2800      	cmp	r0, #0
 8004736:	bfab      	itete	ge
 8004738:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800473a:	89a3      	ldrhlt	r3, [r4, #12]
 800473c:	181b      	addge	r3, r3, r0
 800473e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004742:	bfac      	ite	ge
 8004744:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004746:	81a3      	strhlt	r3, [r4, #12]
 8004748:	bd10      	pop	{r4, pc}

0800474a <__swrite>:
 800474a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	461f      	mov	r7, r3
 8004750:	898b      	ldrh	r3, [r1, #12]
 8004752:	05db      	lsls	r3, r3, #23
 8004754:	4605      	mov	r5, r0
 8004756:	460c      	mov	r4, r1
 8004758:	4616      	mov	r6, r2
 800475a:	d505      	bpl.n	8004768 <__swrite+0x1e>
 800475c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004760:	2302      	movs	r3, #2
 8004762:	2200      	movs	r2, #0
 8004764:	f000 f8d4 	bl	8004910 <_lseek_r>
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800476e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004772:	81a3      	strh	r3, [r4, #12]
 8004774:	4632      	mov	r2, r6
 8004776:	463b      	mov	r3, r7
 8004778:	4628      	mov	r0, r5
 800477a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800477e:	f000 b8eb 	b.w	8004958 <_write_r>

08004782 <__sseek>:
 8004782:	b510      	push	{r4, lr}
 8004784:	460c      	mov	r4, r1
 8004786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478a:	f000 f8c1 	bl	8004910 <_lseek_r>
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	bf15      	itete	ne
 8004794:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004796:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800479a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800479e:	81a3      	strheq	r3, [r4, #12]
 80047a0:	bf18      	it	ne
 80047a2:	81a3      	strhne	r3, [r4, #12]
 80047a4:	bd10      	pop	{r4, pc}

080047a6 <__sclose>:
 80047a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047aa:	f000 b8a1 	b.w	80048f0 <_close_r>

080047ae <__swbuf_r>:
 80047ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b0:	460e      	mov	r6, r1
 80047b2:	4614      	mov	r4, r2
 80047b4:	4605      	mov	r5, r0
 80047b6:	b118      	cbz	r0, 80047c0 <__swbuf_r+0x12>
 80047b8:	6a03      	ldr	r3, [r0, #32]
 80047ba:	b90b      	cbnz	r3, 80047c0 <__swbuf_r+0x12>
 80047bc:	f7ff ff0e 	bl	80045dc <__sinit>
 80047c0:	69a3      	ldr	r3, [r4, #24]
 80047c2:	60a3      	str	r3, [r4, #8]
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	071a      	lsls	r2, r3, #28
 80047c8:	d501      	bpl.n	80047ce <__swbuf_r+0x20>
 80047ca:	6923      	ldr	r3, [r4, #16]
 80047cc:	b943      	cbnz	r3, 80047e0 <__swbuf_r+0x32>
 80047ce:	4621      	mov	r1, r4
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 f82b 	bl	800482c <__swsetup_r>
 80047d6:	b118      	cbz	r0, 80047e0 <__swbuf_r+0x32>
 80047d8:	f04f 37ff 	mov.w	r7, #4294967295
 80047dc:	4638      	mov	r0, r7
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	6922      	ldr	r2, [r4, #16]
 80047e4:	1a98      	subs	r0, r3, r2
 80047e6:	6963      	ldr	r3, [r4, #20]
 80047e8:	b2f6      	uxtb	r6, r6
 80047ea:	4283      	cmp	r3, r0
 80047ec:	4637      	mov	r7, r6
 80047ee:	dc05      	bgt.n	80047fc <__swbuf_r+0x4e>
 80047f0:	4621      	mov	r1, r4
 80047f2:	4628      	mov	r0, r5
 80047f4:	f001 fd84 	bl	8006300 <_fflush_r>
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1ed      	bne.n	80047d8 <__swbuf_r+0x2a>
 80047fc:	68a3      	ldr	r3, [r4, #8]
 80047fe:	3b01      	subs	r3, #1
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	6022      	str	r2, [r4, #0]
 8004808:	701e      	strb	r6, [r3, #0]
 800480a:	6962      	ldr	r2, [r4, #20]
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	429a      	cmp	r2, r3
 8004810:	d004      	beq.n	800481c <__swbuf_r+0x6e>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	07db      	lsls	r3, r3, #31
 8004816:	d5e1      	bpl.n	80047dc <__swbuf_r+0x2e>
 8004818:	2e0a      	cmp	r6, #10
 800481a:	d1df      	bne.n	80047dc <__swbuf_r+0x2e>
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f001 fd6e 	bl	8006300 <_fflush_r>
 8004824:	2800      	cmp	r0, #0
 8004826:	d0d9      	beq.n	80047dc <__swbuf_r+0x2e>
 8004828:	e7d6      	b.n	80047d8 <__swbuf_r+0x2a>
	...

0800482c <__swsetup_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4b29      	ldr	r3, [pc, #164]	@ (80048d4 <__swsetup_r+0xa8>)
 8004830:	4605      	mov	r5, r0
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	460c      	mov	r4, r1
 8004836:	b118      	cbz	r0, 8004840 <__swsetup_r+0x14>
 8004838:	6a03      	ldr	r3, [r0, #32]
 800483a:	b90b      	cbnz	r3, 8004840 <__swsetup_r+0x14>
 800483c:	f7ff fece 	bl	80045dc <__sinit>
 8004840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004844:	0719      	lsls	r1, r3, #28
 8004846:	d422      	bmi.n	800488e <__swsetup_r+0x62>
 8004848:	06da      	lsls	r2, r3, #27
 800484a:	d407      	bmi.n	800485c <__swsetup_r+0x30>
 800484c:	2209      	movs	r2, #9
 800484e:	602a      	str	r2, [r5, #0]
 8004850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	e033      	b.n	80048c4 <__swsetup_r+0x98>
 800485c:	0758      	lsls	r0, r3, #29
 800485e:	d512      	bpl.n	8004886 <__swsetup_r+0x5a>
 8004860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004862:	b141      	cbz	r1, 8004876 <__swsetup_r+0x4a>
 8004864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004868:	4299      	cmp	r1, r3
 800486a:	d002      	beq.n	8004872 <__swsetup_r+0x46>
 800486c:	4628      	mov	r0, r5
 800486e:	f000 feff 	bl	8005670 <_free_r>
 8004872:	2300      	movs	r3, #0
 8004874:	6363      	str	r3, [r4, #52]	@ 0x34
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	b94b      	cbnz	r3, 80048a6 <__swsetup_r+0x7a>
 8004892:	89a3      	ldrh	r3, [r4, #12]
 8004894:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800489c:	d003      	beq.n	80048a6 <__swsetup_r+0x7a>
 800489e:	4621      	mov	r1, r4
 80048a0:	4628      	mov	r0, r5
 80048a2:	f001 fd7b 	bl	800639c <__smakebuf_r>
 80048a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048aa:	f013 0201 	ands.w	r2, r3, #1
 80048ae:	d00a      	beq.n	80048c6 <__swsetup_r+0x9a>
 80048b0:	2200      	movs	r2, #0
 80048b2:	60a2      	str	r2, [r4, #8]
 80048b4:	6962      	ldr	r2, [r4, #20]
 80048b6:	4252      	negs	r2, r2
 80048b8:	61a2      	str	r2, [r4, #24]
 80048ba:	6922      	ldr	r2, [r4, #16]
 80048bc:	b942      	cbnz	r2, 80048d0 <__swsetup_r+0xa4>
 80048be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048c2:	d1c5      	bne.n	8004850 <__swsetup_r+0x24>
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	0799      	lsls	r1, r3, #30
 80048c8:	bf58      	it	pl
 80048ca:	6962      	ldrpl	r2, [r4, #20]
 80048cc:	60a2      	str	r2, [r4, #8]
 80048ce:	e7f4      	b.n	80048ba <__swsetup_r+0x8e>
 80048d0:	2000      	movs	r0, #0
 80048d2:	e7f7      	b.n	80048c4 <__swsetup_r+0x98>
 80048d4:	20000020 	.word	0x20000020

080048d8 <memset>:
 80048d8:	4402      	add	r2, r0
 80048da:	4603      	mov	r3, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	d100      	bne.n	80048e2 <memset+0xa>
 80048e0:	4770      	bx	lr
 80048e2:	f803 1b01 	strb.w	r1, [r3], #1
 80048e6:	e7f9      	b.n	80048dc <memset+0x4>

080048e8 <_localeconv_r>:
 80048e8:	4800      	ldr	r0, [pc, #0]	@ (80048ec <_localeconv_r+0x4>)
 80048ea:	4770      	bx	lr
 80048ec:	20000160 	.word	0x20000160

080048f0 <_close_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d06      	ldr	r5, [pc, #24]	@ (800490c <_close_r+0x1c>)
 80048f4:	2300      	movs	r3, #0
 80048f6:	4604      	mov	r4, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	602b      	str	r3, [r5, #0]
 80048fc:	f7fe ffc6 	bl	800388c <_close>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_close_r+0x1a>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_close_r+0x1a>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	2000043c 	.word	0x2000043c

08004910 <_lseek_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d07      	ldr	r5, [pc, #28]	@ (8004930 <_lseek_r+0x20>)
 8004914:	4604      	mov	r4, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fe ff75 	bl	800380e <_lseek>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_lseek_r+0x1e>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_lseek_r+0x1e>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	2000043c 	.word	0x2000043c

08004934 <_read_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4d07      	ldr	r5, [pc, #28]	@ (8004954 <_read_r+0x20>)
 8004938:	4604      	mov	r4, r0
 800493a:	4608      	mov	r0, r1
 800493c:	4611      	mov	r1, r2
 800493e:	2200      	movs	r2, #0
 8004940:	602a      	str	r2, [r5, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	f7fe ff0d 	bl	8003762 <_read>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_read_r+0x1e>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_read_r+0x1e>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	2000043c 	.word	0x2000043c

08004958 <_write_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d07      	ldr	r5, [pc, #28]	@ (8004978 <_write_r+0x20>)
 800495c:	4604      	mov	r4, r0
 800495e:	4608      	mov	r0, r1
 8004960:	4611      	mov	r1, r2
 8004962:	2200      	movs	r2, #0
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f7fe ff63 	bl	8003832 <_write>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_write_r+0x1e>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_write_r+0x1e>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	2000043c 	.word	0x2000043c

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	@ (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000020 	.word	0x20000020

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	@ (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	@ (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	@ (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	@ (80049cc <__libc_init_array+0x44>)
 800499c:	f001 fe34 	bl	8006608 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	08006a58 	.word	0x08006a58
 80049c4:	08006a58 	.word	0x08006a58
 80049c8:	08006a58 	.word	0x08006a58
 80049cc:	08006a5c 	.word	0x08006a5c

080049d0 <__retarget_lock_init_recursive>:
 80049d0:	4770      	bx	lr

080049d2 <__retarget_lock_acquire_recursive>:
 80049d2:	4770      	bx	lr

080049d4 <__retarget_lock_release_recursive>:
 80049d4:	4770      	bx	lr

080049d6 <quorem>:
 80049d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	6903      	ldr	r3, [r0, #16]
 80049dc:	690c      	ldr	r4, [r1, #16]
 80049de:	42a3      	cmp	r3, r4
 80049e0:	4607      	mov	r7, r0
 80049e2:	db7e      	blt.n	8004ae2 <quorem+0x10c>
 80049e4:	3c01      	subs	r4, #1
 80049e6:	f101 0814 	add.w	r8, r1, #20
 80049ea:	00a3      	lsls	r3, r4, #2
 80049ec:	f100 0514 	add.w	r5, r0, #20
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a00:	3301      	adds	r3, #1
 8004a02:	429a      	cmp	r2, r3
 8004a04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a08:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a0c:	d32e      	bcc.n	8004a6c <quorem+0x96>
 8004a0e:	f04f 0a00 	mov.w	sl, #0
 8004a12:	46c4      	mov	ip, r8
 8004a14:	46ae      	mov	lr, r5
 8004a16:	46d3      	mov	fp, sl
 8004a18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a1c:	b298      	uxth	r0, r3
 8004a1e:	fb06 a000 	mla	r0, r6, r0, sl
 8004a22:	0c02      	lsrs	r2, r0, #16
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	fb06 2303 	mla	r3, r6, r3, r2
 8004a2a:	f8de 2000 	ldr.w	r2, [lr]
 8004a2e:	b280      	uxth	r0, r0
 8004a30:	b292      	uxth	r2, r2
 8004a32:	1a12      	subs	r2, r2, r0
 8004a34:	445a      	add	r2, fp
 8004a36:	f8de 0000 	ldr.w	r0, [lr]
 8004a3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a44:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a4e:	45e1      	cmp	r9, ip
 8004a50:	f84e 2b04 	str.w	r2, [lr], #4
 8004a54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a58:	d2de      	bcs.n	8004a18 <quorem+0x42>
 8004a5a:	9b00      	ldr	r3, [sp, #0]
 8004a5c:	58eb      	ldr	r3, [r5, r3]
 8004a5e:	b92b      	cbnz	r3, 8004a6c <quorem+0x96>
 8004a60:	9b01      	ldr	r3, [sp, #4]
 8004a62:	3b04      	subs	r3, #4
 8004a64:	429d      	cmp	r5, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	d32f      	bcc.n	8004aca <quorem+0xf4>
 8004a6a:	613c      	str	r4, [r7, #16]
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f001 f979 	bl	8005d64 <__mcmp>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	db25      	blt.n	8004ac2 <quorem+0xec>
 8004a76:	4629      	mov	r1, r5
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a7e:	f8d1 c000 	ldr.w	ip, [r1]
 8004a82:	fa1f fe82 	uxth.w	lr, r2
 8004a86:	fa1f f38c 	uxth.w	r3, ip
 8004a8a:	eba3 030e 	sub.w	r3, r3, lr
 8004a8e:	4403      	add	r3, r0
 8004a90:	0c12      	lsrs	r2, r2, #16
 8004a92:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a96:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004aa0:	45c1      	cmp	r9, r8
 8004aa2:	f841 3b04 	str.w	r3, [r1], #4
 8004aa6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004aaa:	d2e6      	bcs.n	8004a7a <quorem+0xa4>
 8004aac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ab4:	b922      	cbnz	r2, 8004ac0 <quorem+0xea>
 8004ab6:	3b04      	subs	r3, #4
 8004ab8:	429d      	cmp	r5, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	d30b      	bcc.n	8004ad6 <quorem+0x100>
 8004abe:	613c      	str	r4, [r7, #16]
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	b003      	add	sp, #12
 8004ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	3b04      	subs	r3, #4
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	d1cb      	bne.n	8004a6a <quorem+0x94>
 8004ad2:	3c01      	subs	r4, #1
 8004ad4:	e7c6      	b.n	8004a64 <quorem+0x8e>
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	2a00      	cmp	r2, #0
 8004adc:	d1ef      	bne.n	8004abe <quorem+0xe8>
 8004ade:	3c01      	subs	r4, #1
 8004ae0:	e7ea      	b.n	8004ab8 <quorem+0xe2>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e7ee      	b.n	8004ac4 <quorem+0xee>
	...

08004ae8 <_dtoa_r>:
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aec:	69c7      	ldr	r7, [r0, #28]
 8004aee:	b099      	sub	sp, #100	@ 0x64
 8004af0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004af4:	ec55 4b10 	vmov	r4, r5, d0
 8004af8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004afa:	9109      	str	r1, [sp, #36]	@ 0x24
 8004afc:	4683      	mov	fp, r0
 8004afe:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b02:	b97f      	cbnz	r7, 8004b24 <_dtoa_r+0x3c>
 8004b04:	2010      	movs	r0, #16
 8004b06:	f000 fdfd 	bl	8005704 <malloc>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004b10:	b920      	cbnz	r0, 8004b1c <_dtoa_r+0x34>
 8004b12:	4ba7      	ldr	r3, [pc, #668]	@ (8004db0 <_dtoa_r+0x2c8>)
 8004b14:	21ef      	movs	r1, #239	@ 0xef
 8004b16:	48a7      	ldr	r0, [pc, #668]	@ (8004db4 <_dtoa_r+0x2cc>)
 8004b18:	f001 fcbc 	bl	8006494 <__assert_func>
 8004b1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b20:	6007      	str	r7, [r0, #0]
 8004b22:	60c7      	str	r7, [r0, #12]
 8004b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	b159      	cbz	r1, 8004b44 <_dtoa_r+0x5c>
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	604a      	str	r2, [r1, #4]
 8004b30:	2301      	movs	r3, #1
 8004b32:	4093      	lsls	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
 8004b36:	4658      	mov	r0, fp
 8004b38:	f000 feda 	bl	80058f0 <_Bfree>
 8004b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	1e2b      	subs	r3, r5, #0
 8004b46:	bfb9      	ittee	lt
 8004b48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004b4c:	9303      	strlt	r3, [sp, #12]
 8004b4e:	2300      	movge	r3, #0
 8004b50:	6033      	strge	r3, [r6, #0]
 8004b52:	9f03      	ldr	r7, [sp, #12]
 8004b54:	4b98      	ldr	r3, [pc, #608]	@ (8004db8 <_dtoa_r+0x2d0>)
 8004b56:	bfbc      	itt	lt
 8004b58:	2201      	movlt	r2, #1
 8004b5a:	6032      	strlt	r2, [r6, #0]
 8004b5c:	43bb      	bics	r3, r7
 8004b5e:	d112      	bne.n	8004b86 <_dtoa_r+0x9e>
 8004b60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b6c:	4323      	orrs	r3, r4
 8004b6e:	f000 854d 	beq.w	800560c <_dtoa_r+0xb24>
 8004b72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004dcc <_dtoa_r+0x2e4>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 854f 	beq.w	800561c <_dtoa_r+0xb34>
 8004b7e:	f10a 0303 	add.w	r3, sl, #3
 8004b82:	f000 bd49 	b.w	8005618 <_dtoa_r+0xb30>
 8004b86:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	ec51 0b17 	vmov	r0, r1, d7
 8004b90:	2300      	movs	r3, #0
 8004b92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004b96:	f7fb ff9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	b158      	cbz	r0, 8004bb6 <_dtoa_r+0xce>
 8004b9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ba6:	b113      	cbz	r3, 8004bae <_dtoa_r+0xc6>
 8004ba8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004baa:	4b84      	ldr	r3, [pc, #528]	@ (8004dbc <_dtoa_r+0x2d4>)
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004dd0 <_dtoa_r+0x2e8>
 8004bb2:	f000 bd33 	b.w	800561c <_dtoa_r+0xb34>
 8004bb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004bba:	aa16      	add	r2, sp, #88	@ 0x58
 8004bbc:	a917      	add	r1, sp, #92	@ 0x5c
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	f001 f980 	bl	8005ec4 <__d2b>
 8004bc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004bc8:	4681      	mov	r9, r0
 8004bca:	2e00      	cmp	r6, #0
 8004bcc:	d077      	beq.n	8004cbe <_dtoa_r+0x1d6>
 8004bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004be0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004be4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004be8:	4619      	mov	r1, r3
 8004bea:	2200      	movs	r2, #0
 8004bec:	4b74      	ldr	r3, [pc, #464]	@ (8004dc0 <_dtoa_r+0x2d8>)
 8004bee:	f7fb fb53 	bl	8000298 <__aeabi_dsub>
 8004bf2:	a369      	add	r3, pc, #420	@ (adr r3, 8004d98 <_dtoa_r+0x2b0>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fd06 	bl	8000608 <__aeabi_dmul>
 8004bfc:	a368      	add	r3, pc, #416	@ (adr r3, 8004da0 <_dtoa_r+0x2b8>)
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f7fb fb4b 	bl	800029c <__adddf3>
 8004c06:	4604      	mov	r4, r0
 8004c08:	4630      	mov	r0, r6
 8004c0a:	460d      	mov	r5, r1
 8004c0c:	f7fb fc92 	bl	8000534 <__aeabi_i2d>
 8004c10:	a365      	add	r3, pc, #404	@ (adr r3, 8004da8 <_dtoa_r+0x2c0>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fcf7 	bl	8000608 <__aeabi_dmul>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4620      	mov	r0, r4
 8004c20:	4629      	mov	r1, r5
 8004c22:	f7fb fb3b 	bl	800029c <__adddf3>
 8004c26:	4604      	mov	r4, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	f7fb ff9d 	bl	8000b68 <__aeabi_d2iz>
 8004c2e:	2200      	movs	r2, #0
 8004c30:	4607      	mov	r7, r0
 8004c32:	2300      	movs	r3, #0
 8004c34:	4620      	mov	r0, r4
 8004c36:	4629      	mov	r1, r5
 8004c38:	f7fb ff58 	bl	8000aec <__aeabi_dcmplt>
 8004c3c:	b140      	cbz	r0, 8004c50 <_dtoa_r+0x168>
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f7fb fc78 	bl	8000534 <__aeabi_i2d>
 8004c44:	4622      	mov	r2, r4
 8004c46:	462b      	mov	r3, r5
 8004c48:	f7fb ff46 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c4c:	b900      	cbnz	r0, 8004c50 <_dtoa_r+0x168>
 8004c4e:	3f01      	subs	r7, #1
 8004c50:	2f16      	cmp	r7, #22
 8004c52:	d851      	bhi.n	8004cf8 <_dtoa_r+0x210>
 8004c54:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc4 <_dtoa_r+0x2dc>)
 8004c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c62:	f7fb ff43 	bl	8000aec <__aeabi_dcmplt>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d048      	beq.n	8004cfc <_dtoa_r+0x214>
 8004c6a:	3f01      	subs	r7, #1
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004c72:	1b9b      	subs	r3, r3, r6
 8004c74:	1e5a      	subs	r2, r3, #1
 8004c76:	bf44      	itt	mi
 8004c78:	f1c3 0801 	rsbmi	r8, r3, #1
 8004c7c:	2300      	movmi	r3, #0
 8004c7e:	9208      	str	r2, [sp, #32]
 8004c80:	bf54      	ite	pl
 8004c82:	f04f 0800 	movpl.w	r8, #0
 8004c86:	9308      	strmi	r3, [sp, #32]
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	db39      	blt.n	8004d00 <_dtoa_r+0x218>
 8004c8c:	9b08      	ldr	r3, [sp, #32]
 8004c8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004c90:	443b      	add	r3, r7
 8004c92:	9308      	str	r3, [sp, #32]
 8004c94:	2300      	movs	r3, #0
 8004c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	d864      	bhi.n	8004d68 <_dtoa_r+0x280>
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	bfc4      	itt	gt
 8004ca2:	3b04      	subgt	r3, #4
 8004ca4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca8:	f1a3 0302 	sub.w	r3, r3, #2
 8004cac:	bfcc      	ite	gt
 8004cae:	2400      	movgt	r4, #0
 8004cb0:	2401      	movle	r4, #1
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d863      	bhi.n	8004d7e <_dtoa_r+0x296>
 8004cb6:	e8df f003 	tbb	[pc, r3]
 8004cba:	372a      	.short	0x372a
 8004cbc:	5535      	.short	0x5535
 8004cbe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004cc2:	441e      	add	r6, r3
 8004cc4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	bfc1      	itttt	gt
 8004ccc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004cd0:	409f      	lslgt	r7, r3
 8004cd2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004cd6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004cda:	bfd6      	itet	le
 8004cdc:	f1c3 0320 	rsble	r3, r3, #32
 8004ce0:	ea47 0003 	orrgt.w	r0, r7, r3
 8004ce4:	fa04 f003 	lslle.w	r0, r4, r3
 8004ce8:	f7fb fc14 	bl	8000514 <__aeabi_ui2d>
 8004cec:	2201      	movs	r2, #1
 8004cee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004cf2:	3e01      	subs	r6, #1
 8004cf4:	9214      	str	r2, [sp, #80]	@ 0x50
 8004cf6:	e777      	b.n	8004be8 <_dtoa_r+0x100>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e7b8      	b.n	8004c6e <_dtoa_r+0x186>
 8004cfc:	9012      	str	r0, [sp, #72]	@ 0x48
 8004cfe:	e7b7      	b.n	8004c70 <_dtoa_r+0x188>
 8004d00:	427b      	negs	r3, r7
 8004d02:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d04:	2300      	movs	r3, #0
 8004d06:	eba8 0807 	sub.w	r8, r8, r7
 8004d0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d0c:	e7c4      	b.n	8004c98 <_dtoa_r+0x1b0>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dc35      	bgt.n	8004d84 <_dtoa_r+0x29c>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	9307      	str	r3, [sp, #28]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d22:	e00b      	b.n	8004d3c <_dtoa_r+0x254>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e7f3      	b.n	8004d10 <_dtoa_r+0x228>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	9307      	str	r3, [sp, #28]
 8004d38:	bfb8      	it	lt
 8004d3a:	2301      	movlt	r3, #1
 8004d3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004d40:	2100      	movs	r1, #0
 8004d42:	2204      	movs	r2, #4
 8004d44:	f102 0514 	add.w	r5, r2, #20
 8004d48:	429d      	cmp	r5, r3
 8004d4a:	d91f      	bls.n	8004d8c <_dtoa_r+0x2a4>
 8004d4c:	6041      	str	r1, [r0, #4]
 8004d4e:	4658      	mov	r0, fp
 8004d50:	f000 fd8e 	bl	8005870 <_Balloc>
 8004d54:	4682      	mov	sl, r0
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d13c      	bne.n	8004dd4 <_dtoa_r+0x2ec>
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <_dtoa_r+0x2e0>)
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d62:	e6d8      	b.n	8004b16 <_dtoa_r+0x2e>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e7e0      	b.n	8004d2a <_dtoa_r+0x242>
 8004d68:	2401      	movs	r4, #1
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	9307      	str	r3, [sp, #28]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2312      	movs	r3, #18
 8004d7c:	e7d0      	b.n	8004d20 <_dtoa_r+0x238>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d82:	e7f5      	b.n	8004d70 <_dtoa_r+0x288>
 8004d84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	9307      	str	r3, [sp, #28]
 8004d8a:	e7d7      	b.n	8004d3c <_dtoa_r+0x254>
 8004d8c:	3101      	adds	r1, #1
 8004d8e:	0052      	lsls	r2, r2, #1
 8004d90:	e7d8      	b.n	8004d44 <_dtoa_r+0x25c>
 8004d92:	bf00      	nop
 8004d94:	f3af 8000 	nop.w
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	0800671f 	.word	0x0800671f
 8004db4:	08006736 	.word	0x08006736
 8004db8:	7ff00000 	.word	0x7ff00000
 8004dbc:	080066ef 	.word	0x080066ef
 8004dc0:	3ff80000 	.word	0x3ff80000
 8004dc4:	08006830 	.word	0x08006830
 8004dc8:	0800678e 	.word	0x0800678e
 8004dcc:	0800671b 	.word	0x0800671b
 8004dd0:	080066ee 	.word	0x080066ee
 8004dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004dd8:	6018      	str	r0, [r3, #0]
 8004dda:	9b07      	ldr	r3, [sp, #28]
 8004ddc:	2b0e      	cmp	r3, #14
 8004dde:	f200 80a4 	bhi.w	8004f2a <_dtoa_r+0x442>
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	f000 80a1 	beq.w	8004f2a <_dtoa_r+0x442>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	dd33      	ble.n	8004e54 <_dtoa_r+0x36c>
 8004dec:	4bad      	ldr	r3, [pc, #692]	@ (80050a4 <_dtoa_r+0x5bc>)
 8004dee:	f007 020f 	and.w	r2, r7, #15
 8004df2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004df6:	ed93 7b00 	vldr	d7, [r3]
 8004dfa:	05f8      	lsls	r0, r7, #23
 8004dfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004e00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e04:	d516      	bpl.n	8004e34 <_dtoa_r+0x34c>
 8004e06:	4ba8      	ldr	r3, [pc, #672]	@ (80050a8 <_dtoa_r+0x5c0>)
 8004e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e10:	f7fb fd24 	bl	800085c <__aeabi_ddiv>
 8004e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e18:	f004 040f 	and.w	r4, r4, #15
 8004e1c:	2603      	movs	r6, #3
 8004e1e:	4da2      	ldr	r5, [pc, #648]	@ (80050a8 <_dtoa_r+0x5c0>)
 8004e20:	b954      	cbnz	r4, 8004e38 <_dtoa_r+0x350>
 8004e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e2a:	f7fb fd17 	bl	800085c <__aeabi_ddiv>
 8004e2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e32:	e028      	b.n	8004e86 <_dtoa_r+0x39e>
 8004e34:	2602      	movs	r6, #2
 8004e36:	e7f2      	b.n	8004e1e <_dtoa_r+0x336>
 8004e38:	07e1      	lsls	r1, r4, #31
 8004e3a:	d508      	bpl.n	8004e4e <_dtoa_r+0x366>
 8004e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e44:	f7fb fbe0 	bl	8000608 <__aeabi_dmul>
 8004e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	1064      	asrs	r4, r4, #1
 8004e50:	3508      	adds	r5, #8
 8004e52:	e7e5      	b.n	8004e20 <_dtoa_r+0x338>
 8004e54:	f000 80d2 	beq.w	8004ffc <_dtoa_r+0x514>
 8004e58:	427c      	negs	r4, r7
 8004e5a:	4b92      	ldr	r3, [pc, #584]	@ (80050a4 <_dtoa_r+0x5bc>)
 8004e5c:	4d92      	ldr	r5, [pc, #584]	@ (80050a8 <_dtoa_r+0x5c0>)
 8004e5e:	f004 020f 	and.w	r2, r4, #15
 8004e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e6e:	f7fb fbcb 	bl	8000608 <__aeabi_dmul>
 8004e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e76:	1124      	asrs	r4, r4, #4
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2602      	movs	r6, #2
 8004e7c:	2c00      	cmp	r4, #0
 8004e7e:	f040 80b2 	bne.w	8004fe6 <_dtoa_r+0x4fe>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1d3      	bne.n	8004e2e <_dtoa_r+0x346>
 8004e86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80b7 	beq.w	8005000 <_dtoa_r+0x518>
 8004e92:	4b86      	ldr	r3, [pc, #536]	@ (80050ac <_dtoa_r+0x5c4>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fe27 	bl	8000aec <__aeabi_dcmplt>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f000 80ae 	beq.w	8005000 <_dtoa_r+0x518>
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80aa 	beq.w	8005000 <_dtoa_r+0x518>
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dd37      	ble.n	8004f22 <_dtoa_r+0x43a>
 8004eb2:	1e7b      	subs	r3, r7, #1
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4b7d      	ldr	r3, [pc, #500]	@ (80050b0 <_dtoa_r+0x5c8>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7fb fba3 	bl	8000608 <__aeabi_dmul>
 8004ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ec6:	9c00      	ldr	r4, [sp, #0]
 8004ec8:	3601      	adds	r6, #1
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fb fb32 	bl	8000534 <__aeabi_i2d>
 8004ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed4:	f7fb fb98 	bl	8000608 <__aeabi_dmul>
 8004ed8:	4b76      	ldr	r3, [pc, #472]	@ (80050b4 <_dtoa_r+0x5cc>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	f7fb f9de 	bl	800029c <__adddf3>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	f040 808d 	bne.w	8005006 <_dtoa_r+0x51e>
 8004eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef0:	4b71      	ldr	r3, [pc, #452]	@ (80050b8 <_dtoa_r+0x5d0>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f7fb f9d0 	bl	8000298 <__aeabi_dsub>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f00:	462a      	mov	r2, r5
 8004f02:	4633      	mov	r3, r6
 8004f04:	f7fb fe10 	bl	8000b28 <__aeabi_dcmpgt>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f040 828b 	bne.w	8005424 <_dtoa_r+0x93c>
 8004f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f12:	462a      	mov	r2, r5
 8004f14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f18:	f7fb fde8 	bl	8000aec <__aeabi_dcmplt>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f040 8128 	bne.w	8005172 <_dtoa_r+0x68a>
 8004f22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004f26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004f2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f2c0 815a 	blt.w	80051e6 <_dtoa_r+0x6fe>
 8004f32:	2f0e      	cmp	r7, #14
 8004f34:	f300 8157 	bgt.w	80051e6 <_dtoa_r+0x6fe>
 8004f38:	4b5a      	ldr	r3, [pc, #360]	@ (80050a4 <_dtoa_r+0x5bc>)
 8004f3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f3e:	ed93 7b00 	vldr	d7, [r3]
 8004f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	ed8d 7b00 	vstr	d7, [sp]
 8004f4a:	da03      	bge.n	8004f54 <_dtoa_r+0x46c>
 8004f4c:	9b07      	ldr	r3, [sp, #28]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f340 8101 	ble.w	8005156 <_dtoa_r+0x66e>
 8004f54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f58:	4656      	mov	r6, sl
 8004f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f5e:	4620      	mov	r0, r4
 8004f60:	4629      	mov	r1, r5
 8004f62:	f7fb fc7b 	bl	800085c <__aeabi_ddiv>
 8004f66:	f7fb fdff 	bl	8000b68 <__aeabi_d2iz>
 8004f6a:	4680      	mov	r8, r0
 8004f6c:	f7fb fae2 	bl	8000534 <__aeabi_i2d>
 8004f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f74:	f7fb fb48 	bl	8000608 <__aeabi_dmul>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004f84:	f7fb f988 	bl	8000298 <__aeabi_dsub>
 8004f88:	f806 4b01 	strb.w	r4, [r6], #1
 8004f8c:	9d07      	ldr	r5, [sp, #28]
 8004f8e:	eba6 040a 	sub.w	r4, r6, sl
 8004f92:	42a5      	cmp	r5, r4
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	f040 8117 	bne.w	80051ca <_dtoa_r+0x6e2>
 8004f9c:	f7fb f97e 	bl	800029c <__adddf3>
 8004fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	f7fb fdbe 	bl	8000b28 <__aeabi_dcmpgt>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 80f9 	bne.w	80051a4 <_dtoa_r+0x6bc>
 8004fb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	4629      	mov	r1, r5
 8004fba:	f7fb fd8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fbe:	b118      	cbz	r0, 8004fc8 <_dtoa_r+0x4e0>
 8004fc0:	f018 0f01 	tst.w	r8, #1
 8004fc4:	f040 80ee 	bne.w	80051a4 <_dtoa_r+0x6bc>
 8004fc8:	4649      	mov	r1, r9
 8004fca:	4658      	mov	r0, fp
 8004fcc:	f000 fc90 	bl	80058f0 <_Bfree>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	7033      	strb	r3, [r6, #0]
 8004fd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004fd6:	3701      	adds	r7, #1
 8004fd8:	601f      	str	r7, [r3, #0]
 8004fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 831d 	beq.w	800561c <_dtoa_r+0xb34>
 8004fe2:	601e      	str	r6, [r3, #0]
 8004fe4:	e31a      	b.n	800561c <_dtoa_r+0xb34>
 8004fe6:	07e2      	lsls	r2, r4, #31
 8004fe8:	d505      	bpl.n	8004ff6 <_dtoa_r+0x50e>
 8004fea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004fee:	f7fb fb0b 	bl	8000608 <__aeabi_dmul>
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	1064      	asrs	r4, r4, #1
 8004ff8:	3508      	adds	r5, #8
 8004ffa:	e73f      	b.n	8004e7c <_dtoa_r+0x394>
 8004ffc:	2602      	movs	r6, #2
 8004ffe:	e742      	b.n	8004e86 <_dtoa_r+0x39e>
 8005000:	9c07      	ldr	r4, [sp, #28]
 8005002:	9704      	str	r7, [sp, #16]
 8005004:	e761      	b.n	8004eca <_dtoa_r+0x3e2>
 8005006:	4b27      	ldr	r3, [pc, #156]	@ (80050a4 <_dtoa_r+0x5bc>)
 8005008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800500a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800500e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005012:	4454      	add	r4, sl
 8005014:	2900      	cmp	r1, #0
 8005016:	d053      	beq.n	80050c0 <_dtoa_r+0x5d8>
 8005018:	4928      	ldr	r1, [pc, #160]	@ (80050bc <_dtoa_r+0x5d4>)
 800501a:	2000      	movs	r0, #0
 800501c:	f7fb fc1e 	bl	800085c <__aeabi_ddiv>
 8005020:	4633      	mov	r3, r6
 8005022:	462a      	mov	r2, r5
 8005024:	f7fb f938 	bl	8000298 <__aeabi_dsub>
 8005028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800502c:	4656      	mov	r6, sl
 800502e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005032:	f7fb fd99 	bl	8000b68 <__aeabi_d2iz>
 8005036:	4605      	mov	r5, r0
 8005038:	f7fb fa7c 	bl	8000534 <__aeabi_i2d>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005044:	f7fb f928 	bl	8000298 <__aeabi_dsub>
 8005048:	3530      	adds	r5, #48	@ 0x30
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005052:	f806 5b01 	strb.w	r5, [r6], #1
 8005056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800505a:	f7fb fd47 	bl	8000aec <__aeabi_dcmplt>
 800505e:	2800      	cmp	r0, #0
 8005060:	d171      	bne.n	8005146 <_dtoa_r+0x65e>
 8005062:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005066:	4911      	ldr	r1, [pc, #68]	@ (80050ac <_dtoa_r+0x5c4>)
 8005068:	2000      	movs	r0, #0
 800506a:	f7fb f915 	bl	8000298 <__aeabi_dsub>
 800506e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005072:	f7fb fd3b 	bl	8000aec <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	f040 8095 	bne.w	80051a6 <_dtoa_r+0x6be>
 800507c:	42a6      	cmp	r6, r4
 800507e:	f43f af50 	beq.w	8004f22 <_dtoa_r+0x43a>
 8005082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <_dtoa_r+0x5c8>)
 8005088:	2200      	movs	r2, #0
 800508a:	f7fb fabd 	bl	8000608 <__aeabi_dmul>
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <_dtoa_r+0x5c8>)
 8005090:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005094:	2200      	movs	r2, #0
 8005096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800509a:	f7fb fab5 	bl	8000608 <__aeabi_dmul>
 800509e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050a2:	e7c4      	b.n	800502e <_dtoa_r+0x546>
 80050a4:	08006830 	.word	0x08006830
 80050a8:	08006808 	.word	0x08006808
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	40240000 	.word	0x40240000
 80050b4:	401c0000 	.word	0x401c0000
 80050b8:	40140000 	.word	0x40140000
 80050bc:	3fe00000 	.word	0x3fe00000
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	f7fb faa0 	bl	8000608 <__aeabi_dmul>
 80050c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80050ce:	4656      	mov	r6, sl
 80050d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d4:	f7fb fd48 	bl	8000b68 <__aeabi_d2iz>
 80050d8:	4605      	mov	r5, r0
 80050da:	f7fb fa2b 	bl	8000534 <__aeabi_i2d>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e6:	f7fb f8d7 	bl	8000298 <__aeabi_dsub>
 80050ea:	3530      	adds	r5, #48	@ 0x30
 80050ec:	f806 5b01 	strb.w	r5, [r6], #1
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	42a6      	cmp	r6, r4
 80050f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	d124      	bne.n	800514a <_dtoa_r+0x662>
 8005100:	4bac      	ldr	r3, [pc, #688]	@ (80053b4 <_dtoa_r+0x8cc>)
 8005102:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005106:	f7fb f8c9 	bl	800029c <__adddf3>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005112:	f7fb fd09 	bl	8000b28 <__aeabi_dcmpgt>
 8005116:	2800      	cmp	r0, #0
 8005118:	d145      	bne.n	80051a6 <_dtoa_r+0x6be>
 800511a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800511e:	49a5      	ldr	r1, [pc, #660]	@ (80053b4 <_dtoa_r+0x8cc>)
 8005120:	2000      	movs	r0, #0
 8005122:	f7fb f8b9 	bl	8000298 <__aeabi_dsub>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512e:	f7fb fcdd 	bl	8000aec <__aeabi_dcmplt>
 8005132:	2800      	cmp	r0, #0
 8005134:	f43f aef5 	beq.w	8004f22 <_dtoa_r+0x43a>
 8005138:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800513a:	1e73      	subs	r3, r6, #1
 800513c:	9315      	str	r3, [sp, #84]	@ 0x54
 800513e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005142:	2b30      	cmp	r3, #48	@ 0x30
 8005144:	d0f8      	beq.n	8005138 <_dtoa_r+0x650>
 8005146:	9f04      	ldr	r7, [sp, #16]
 8005148:	e73e      	b.n	8004fc8 <_dtoa_r+0x4e0>
 800514a:	4b9b      	ldr	r3, [pc, #620]	@ (80053b8 <_dtoa_r+0x8d0>)
 800514c:	f7fb fa5c 	bl	8000608 <__aeabi_dmul>
 8005150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005154:	e7bc      	b.n	80050d0 <_dtoa_r+0x5e8>
 8005156:	d10c      	bne.n	8005172 <_dtoa_r+0x68a>
 8005158:	4b98      	ldr	r3, [pc, #608]	@ (80053bc <_dtoa_r+0x8d4>)
 800515a:	2200      	movs	r2, #0
 800515c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005160:	f7fb fa52 	bl	8000608 <__aeabi_dmul>
 8005164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005168:	f7fb fcd4 	bl	8000b14 <__aeabi_dcmpge>
 800516c:	2800      	cmp	r0, #0
 800516e:	f000 8157 	beq.w	8005420 <_dtoa_r+0x938>
 8005172:	2400      	movs	r4, #0
 8005174:	4625      	mov	r5, r4
 8005176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005178:	43db      	mvns	r3, r3
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	4656      	mov	r6, sl
 800517e:	2700      	movs	r7, #0
 8005180:	4621      	mov	r1, r4
 8005182:	4658      	mov	r0, fp
 8005184:	f000 fbb4 	bl	80058f0 <_Bfree>
 8005188:	2d00      	cmp	r5, #0
 800518a:	d0dc      	beq.n	8005146 <_dtoa_r+0x65e>
 800518c:	b12f      	cbz	r7, 800519a <_dtoa_r+0x6b2>
 800518e:	42af      	cmp	r7, r5
 8005190:	d003      	beq.n	800519a <_dtoa_r+0x6b2>
 8005192:	4639      	mov	r1, r7
 8005194:	4658      	mov	r0, fp
 8005196:	f000 fbab 	bl	80058f0 <_Bfree>
 800519a:	4629      	mov	r1, r5
 800519c:	4658      	mov	r0, fp
 800519e:	f000 fba7 	bl	80058f0 <_Bfree>
 80051a2:	e7d0      	b.n	8005146 <_dtoa_r+0x65e>
 80051a4:	9704      	str	r7, [sp, #16]
 80051a6:	4633      	mov	r3, r6
 80051a8:	461e      	mov	r6, r3
 80051aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051ae:	2a39      	cmp	r2, #57	@ 0x39
 80051b0:	d107      	bne.n	80051c2 <_dtoa_r+0x6da>
 80051b2:	459a      	cmp	sl, r3
 80051b4:	d1f8      	bne.n	80051a8 <_dtoa_r+0x6c0>
 80051b6:	9a04      	ldr	r2, [sp, #16]
 80051b8:	3201      	adds	r2, #1
 80051ba:	9204      	str	r2, [sp, #16]
 80051bc:	2230      	movs	r2, #48	@ 0x30
 80051be:	f88a 2000 	strb.w	r2, [sl]
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	3201      	adds	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e7bd      	b.n	8005146 <_dtoa_r+0x65e>
 80051ca:	4b7b      	ldr	r3, [pc, #492]	@ (80053b8 <_dtoa_r+0x8d0>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	f7fb fa1b 	bl	8000608 <__aeabi_dmul>
 80051d2:	2200      	movs	r2, #0
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	460d      	mov	r5, r1
 80051da:	f7fb fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80051de:	2800      	cmp	r0, #0
 80051e0:	f43f aebb 	beq.w	8004f5a <_dtoa_r+0x472>
 80051e4:	e6f0      	b.n	8004fc8 <_dtoa_r+0x4e0>
 80051e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	f000 80db 	beq.w	80053a4 <_dtoa_r+0x8bc>
 80051ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051f0:	2a01      	cmp	r2, #1
 80051f2:	f300 80bf 	bgt.w	8005374 <_dtoa_r+0x88c>
 80051f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	f000 80b7 	beq.w	800536c <_dtoa_r+0x884>
 80051fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005202:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005204:	4646      	mov	r6, r8
 8005206:	9a08      	ldr	r2, [sp, #32]
 8005208:	2101      	movs	r1, #1
 800520a:	441a      	add	r2, r3
 800520c:	4658      	mov	r0, fp
 800520e:	4498      	add	r8, r3
 8005210:	9208      	str	r2, [sp, #32]
 8005212:	f000 fc21 	bl	8005a58 <__i2b>
 8005216:	4605      	mov	r5, r0
 8005218:	b15e      	cbz	r6, 8005232 <_dtoa_r+0x74a>
 800521a:	9b08      	ldr	r3, [sp, #32]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dd08      	ble.n	8005232 <_dtoa_r+0x74a>
 8005220:	42b3      	cmp	r3, r6
 8005222:	9a08      	ldr	r2, [sp, #32]
 8005224:	bfa8      	it	ge
 8005226:	4633      	movge	r3, r6
 8005228:	eba8 0803 	sub.w	r8, r8, r3
 800522c:	1af6      	subs	r6, r6, r3
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	9308      	str	r3, [sp, #32]
 8005232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005234:	b1f3      	cbz	r3, 8005274 <_dtoa_r+0x78c>
 8005236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80b7 	beq.w	80053ac <_dtoa_r+0x8c4>
 800523e:	b18c      	cbz	r4, 8005264 <_dtoa_r+0x77c>
 8005240:	4629      	mov	r1, r5
 8005242:	4622      	mov	r2, r4
 8005244:	4658      	mov	r0, fp
 8005246:	f000 fcc7 	bl	8005bd8 <__pow5mult>
 800524a:	464a      	mov	r2, r9
 800524c:	4601      	mov	r1, r0
 800524e:	4605      	mov	r5, r0
 8005250:	4658      	mov	r0, fp
 8005252:	f000 fc17 	bl	8005a84 <__multiply>
 8005256:	4649      	mov	r1, r9
 8005258:	9004      	str	r0, [sp, #16]
 800525a:	4658      	mov	r0, fp
 800525c:	f000 fb48 	bl	80058f0 <_Bfree>
 8005260:	9b04      	ldr	r3, [sp, #16]
 8005262:	4699      	mov	r9, r3
 8005264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005266:	1b1a      	subs	r2, r3, r4
 8005268:	d004      	beq.n	8005274 <_dtoa_r+0x78c>
 800526a:	4649      	mov	r1, r9
 800526c:	4658      	mov	r0, fp
 800526e:	f000 fcb3 	bl	8005bd8 <__pow5mult>
 8005272:	4681      	mov	r9, r0
 8005274:	2101      	movs	r1, #1
 8005276:	4658      	mov	r0, fp
 8005278:	f000 fbee 	bl	8005a58 <__i2b>
 800527c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800527e:	4604      	mov	r4, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 81cf 	beq.w	8005624 <_dtoa_r+0xb3c>
 8005286:	461a      	mov	r2, r3
 8005288:	4601      	mov	r1, r0
 800528a:	4658      	mov	r0, fp
 800528c:	f000 fca4 	bl	8005bd8 <__pow5mult>
 8005290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005292:	2b01      	cmp	r3, #1
 8005294:	4604      	mov	r4, r0
 8005296:	f300 8095 	bgt.w	80053c4 <_dtoa_r+0x8dc>
 800529a:	9b02      	ldr	r3, [sp, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 8087 	bne.w	80053b0 <_dtoa_r+0x8c8>
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 8089 	bne.w	80053c0 <_dtoa_r+0x8d8>
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052b4:	0d1b      	lsrs	r3, r3, #20
 80052b6:	051b      	lsls	r3, r3, #20
 80052b8:	b12b      	cbz	r3, 80052c6 <_dtoa_r+0x7de>
 80052ba:	9b08      	ldr	r3, [sp, #32]
 80052bc:	3301      	adds	r3, #1
 80052be:	9308      	str	r3, [sp, #32]
 80052c0:	f108 0801 	add.w	r8, r8, #1
 80052c4:	2301      	movs	r3, #1
 80052c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80052c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 81b0 	beq.w	8005630 <_dtoa_r+0xb48>
 80052d0:	6923      	ldr	r3, [r4, #16]
 80052d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052d6:	6918      	ldr	r0, [r3, #16]
 80052d8:	f000 fb72 	bl	80059c0 <__hi0bits>
 80052dc:	f1c0 0020 	rsb	r0, r0, #32
 80052e0:	9b08      	ldr	r3, [sp, #32]
 80052e2:	4418      	add	r0, r3
 80052e4:	f010 001f 	ands.w	r0, r0, #31
 80052e8:	d077      	beq.n	80053da <_dtoa_r+0x8f2>
 80052ea:	f1c0 0320 	rsb	r3, r0, #32
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	dd6b      	ble.n	80053ca <_dtoa_r+0x8e2>
 80052f2:	9b08      	ldr	r3, [sp, #32]
 80052f4:	f1c0 001c 	rsb	r0, r0, #28
 80052f8:	4403      	add	r3, r0
 80052fa:	4480      	add	r8, r0
 80052fc:	4406      	add	r6, r0
 80052fe:	9308      	str	r3, [sp, #32]
 8005300:	f1b8 0f00 	cmp.w	r8, #0
 8005304:	dd05      	ble.n	8005312 <_dtoa_r+0x82a>
 8005306:	4649      	mov	r1, r9
 8005308:	4642      	mov	r2, r8
 800530a:	4658      	mov	r0, fp
 800530c:	f000 fcbe 	bl	8005c8c <__lshift>
 8005310:	4681      	mov	r9, r0
 8005312:	9b08      	ldr	r3, [sp, #32]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dd05      	ble.n	8005324 <_dtoa_r+0x83c>
 8005318:	4621      	mov	r1, r4
 800531a:	461a      	mov	r2, r3
 800531c:	4658      	mov	r0, fp
 800531e:	f000 fcb5 	bl	8005c8c <__lshift>
 8005322:	4604      	mov	r4, r0
 8005324:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005326:	2b00      	cmp	r3, #0
 8005328:	d059      	beq.n	80053de <_dtoa_r+0x8f6>
 800532a:	4621      	mov	r1, r4
 800532c:	4648      	mov	r0, r9
 800532e:	f000 fd19 	bl	8005d64 <__mcmp>
 8005332:	2800      	cmp	r0, #0
 8005334:	da53      	bge.n	80053de <_dtoa_r+0x8f6>
 8005336:	1e7b      	subs	r3, r7, #1
 8005338:	9304      	str	r3, [sp, #16]
 800533a:	4649      	mov	r1, r9
 800533c:	2300      	movs	r3, #0
 800533e:	220a      	movs	r2, #10
 8005340:	4658      	mov	r0, fp
 8005342:	f000 faf7 	bl	8005934 <__multadd>
 8005346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005348:	4681      	mov	r9, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8172 	beq.w	8005634 <_dtoa_r+0xb4c>
 8005350:	2300      	movs	r3, #0
 8005352:	4629      	mov	r1, r5
 8005354:	220a      	movs	r2, #10
 8005356:	4658      	mov	r0, fp
 8005358:	f000 faec 	bl	8005934 <__multadd>
 800535c:	9b00      	ldr	r3, [sp, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	4605      	mov	r5, r0
 8005362:	dc67      	bgt.n	8005434 <_dtoa_r+0x94c>
 8005364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005366:	2b02      	cmp	r3, #2
 8005368:	dc41      	bgt.n	80053ee <_dtoa_r+0x906>
 800536a:	e063      	b.n	8005434 <_dtoa_r+0x94c>
 800536c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800536e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005372:	e746      	b.n	8005202 <_dtoa_r+0x71a>
 8005374:	9b07      	ldr	r3, [sp, #28]
 8005376:	1e5c      	subs	r4, r3, #1
 8005378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800537a:	42a3      	cmp	r3, r4
 800537c:	bfbf      	itttt	lt
 800537e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005380:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005382:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005384:	1ae3      	sublt	r3, r4, r3
 8005386:	bfb4      	ite	lt
 8005388:	18d2      	addlt	r2, r2, r3
 800538a:	1b1c      	subge	r4, r3, r4
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	bfbc      	itt	lt
 8005390:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005392:	2400      	movlt	r4, #0
 8005394:	2b00      	cmp	r3, #0
 8005396:	bfb5      	itete	lt
 8005398:	eba8 0603 	sublt.w	r6, r8, r3
 800539c:	9b07      	ldrge	r3, [sp, #28]
 800539e:	2300      	movlt	r3, #0
 80053a0:	4646      	movge	r6, r8
 80053a2:	e730      	b.n	8005206 <_dtoa_r+0x71e>
 80053a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80053a8:	4646      	mov	r6, r8
 80053aa:	e735      	b.n	8005218 <_dtoa_r+0x730>
 80053ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053ae:	e75c      	b.n	800526a <_dtoa_r+0x782>
 80053b0:	2300      	movs	r3, #0
 80053b2:	e788      	b.n	80052c6 <_dtoa_r+0x7de>
 80053b4:	3fe00000 	.word	0x3fe00000
 80053b8:	40240000 	.word	0x40240000
 80053bc:	40140000 	.word	0x40140000
 80053c0:	9b02      	ldr	r3, [sp, #8]
 80053c2:	e780      	b.n	80052c6 <_dtoa_r+0x7de>
 80053c4:	2300      	movs	r3, #0
 80053c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80053c8:	e782      	b.n	80052d0 <_dtoa_r+0x7e8>
 80053ca:	d099      	beq.n	8005300 <_dtoa_r+0x818>
 80053cc:	9a08      	ldr	r2, [sp, #32]
 80053ce:	331c      	adds	r3, #28
 80053d0:	441a      	add	r2, r3
 80053d2:	4498      	add	r8, r3
 80053d4:	441e      	add	r6, r3
 80053d6:	9208      	str	r2, [sp, #32]
 80053d8:	e792      	b.n	8005300 <_dtoa_r+0x818>
 80053da:	4603      	mov	r3, r0
 80053dc:	e7f6      	b.n	80053cc <_dtoa_r+0x8e4>
 80053de:	9b07      	ldr	r3, [sp, #28]
 80053e0:	9704      	str	r7, [sp, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dc20      	bgt.n	8005428 <_dtoa_r+0x940>
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	dd1e      	ble.n	800542c <_dtoa_r+0x944>
 80053ee:	9b00      	ldr	r3, [sp, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f47f aec0 	bne.w	8005176 <_dtoa_r+0x68e>
 80053f6:	4621      	mov	r1, r4
 80053f8:	2205      	movs	r2, #5
 80053fa:	4658      	mov	r0, fp
 80053fc:	f000 fa9a 	bl	8005934 <__multadd>
 8005400:	4601      	mov	r1, r0
 8005402:	4604      	mov	r4, r0
 8005404:	4648      	mov	r0, r9
 8005406:	f000 fcad 	bl	8005d64 <__mcmp>
 800540a:	2800      	cmp	r0, #0
 800540c:	f77f aeb3 	ble.w	8005176 <_dtoa_r+0x68e>
 8005410:	4656      	mov	r6, sl
 8005412:	2331      	movs	r3, #49	@ 0x31
 8005414:	f806 3b01 	strb.w	r3, [r6], #1
 8005418:	9b04      	ldr	r3, [sp, #16]
 800541a:	3301      	adds	r3, #1
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	e6ae      	b.n	800517e <_dtoa_r+0x696>
 8005420:	9c07      	ldr	r4, [sp, #28]
 8005422:	9704      	str	r7, [sp, #16]
 8005424:	4625      	mov	r5, r4
 8005426:	e7f3      	b.n	8005410 <_dtoa_r+0x928>
 8005428:	9b07      	ldr	r3, [sp, #28]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8104 	beq.w	800563c <_dtoa_r+0xb54>
 8005434:	2e00      	cmp	r6, #0
 8005436:	dd05      	ble.n	8005444 <_dtoa_r+0x95c>
 8005438:	4629      	mov	r1, r5
 800543a:	4632      	mov	r2, r6
 800543c:	4658      	mov	r0, fp
 800543e:	f000 fc25 	bl	8005c8c <__lshift>
 8005442:	4605      	mov	r5, r0
 8005444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005446:	2b00      	cmp	r3, #0
 8005448:	d05a      	beq.n	8005500 <_dtoa_r+0xa18>
 800544a:	6869      	ldr	r1, [r5, #4]
 800544c:	4658      	mov	r0, fp
 800544e:	f000 fa0f 	bl	8005870 <_Balloc>
 8005452:	4606      	mov	r6, r0
 8005454:	b928      	cbnz	r0, 8005462 <_dtoa_r+0x97a>
 8005456:	4b84      	ldr	r3, [pc, #528]	@ (8005668 <_dtoa_r+0xb80>)
 8005458:	4602      	mov	r2, r0
 800545a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800545e:	f7ff bb5a 	b.w	8004b16 <_dtoa_r+0x2e>
 8005462:	692a      	ldr	r2, [r5, #16]
 8005464:	3202      	adds	r2, #2
 8005466:	0092      	lsls	r2, r2, #2
 8005468:	f105 010c 	add.w	r1, r5, #12
 800546c:	300c      	adds	r0, #12
 800546e:	f001 f803 	bl	8006478 <memcpy>
 8005472:	2201      	movs	r2, #1
 8005474:	4631      	mov	r1, r6
 8005476:	4658      	mov	r0, fp
 8005478:	f000 fc08 	bl	8005c8c <__lshift>
 800547c:	f10a 0301 	add.w	r3, sl, #1
 8005480:	9307      	str	r3, [sp, #28]
 8005482:	9b00      	ldr	r3, [sp, #0]
 8005484:	4453      	add	r3, sl
 8005486:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	462f      	mov	r7, r5
 8005490:	930a      	str	r3, [sp, #40]	@ 0x28
 8005492:	4605      	mov	r5, r0
 8005494:	9b07      	ldr	r3, [sp, #28]
 8005496:	4621      	mov	r1, r4
 8005498:	3b01      	subs	r3, #1
 800549a:	4648      	mov	r0, r9
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f7ff fa9a 	bl	80049d6 <quorem>
 80054a2:	4639      	mov	r1, r7
 80054a4:	9002      	str	r0, [sp, #8]
 80054a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80054aa:	4648      	mov	r0, r9
 80054ac:	f000 fc5a 	bl	8005d64 <__mcmp>
 80054b0:	462a      	mov	r2, r5
 80054b2:	9008      	str	r0, [sp, #32]
 80054b4:	4621      	mov	r1, r4
 80054b6:	4658      	mov	r0, fp
 80054b8:	f000 fc70 	bl	8005d9c <__mdiff>
 80054bc:	68c2      	ldr	r2, [r0, #12]
 80054be:	4606      	mov	r6, r0
 80054c0:	bb02      	cbnz	r2, 8005504 <_dtoa_r+0xa1c>
 80054c2:	4601      	mov	r1, r0
 80054c4:	4648      	mov	r0, r9
 80054c6:	f000 fc4d 	bl	8005d64 <__mcmp>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4631      	mov	r1, r6
 80054ce:	4658      	mov	r0, fp
 80054d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80054d2:	f000 fa0d 	bl	80058f0 <_Bfree>
 80054d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054da:	9e07      	ldr	r6, [sp, #28]
 80054dc:	ea43 0102 	orr.w	r1, r3, r2
 80054e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054e2:	4319      	orrs	r1, r3
 80054e4:	d110      	bne.n	8005508 <_dtoa_r+0xa20>
 80054e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054ea:	d029      	beq.n	8005540 <_dtoa_r+0xa58>
 80054ec:	9b08      	ldr	r3, [sp, #32]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dd02      	ble.n	80054f8 <_dtoa_r+0xa10>
 80054f2:	9b02      	ldr	r3, [sp, #8]
 80054f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80054f8:	9b00      	ldr	r3, [sp, #0]
 80054fa:	f883 8000 	strb.w	r8, [r3]
 80054fe:	e63f      	b.n	8005180 <_dtoa_r+0x698>
 8005500:	4628      	mov	r0, r5
 8005502:	e7bb      	b.n	800547c <_dtoa_r+0x994>
 8005504:	2201      	movs	r2, #1
 8005506:	e7e1      	b.n	80054cc <_dtoa_r+0x9e4>
 8005508:	9b08      	ldr	r3, [sp, #32]
 800550a:	2b00      	cmp	r3, #0
 800550c:	db04      	blt.n	8005518 <_dtoa_r+0xa30>
 800550e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005510:	430b      	orrs	r3, r1
 8005512:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005514:	430b      	orrs	r3, r1
 8005516:	d120      	bne.n	800555a <_dtoa_r+0xa72>
 8005518:	2a00      	cmp	r2, #0
 800551a:	dded      	ble.n	80054f8 <_dtoa_r+0xa10>
 800551c:	4649      	mov	r1, r9
 800551e:	2201      	movs	r2, #1
 8005520:	4658      	mov	r0, fp
 8005522:	f000 fbb3 	bl	8005c8c <__lshift>
 8005526:	4621      	mov	r1, r4
 8005528:	4681      	mov	r9, r0
 800552a:	f000 fc1b 	bl	8005d64 <__mcmp>
 800552e:	2800      	cmp	r0, #0
 8005530:	dc03      	bgt.n	800553a <_dtoa_r+0xa52>
 8005532:	d1e1      	bne.n	80054f8 <_dtoa_r+0xa10>
 8005534:	f018 0f01 	tst.w	r8, #1
 8005538:	d0de      	beq.n	80054f8 <_dtoa_r+0xa10>
 800553a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800553e:	d1d8      	bne.n	80054f2 <_dtoa_r+0xa0a>
 8005540:	9a00      	ldr	r2, [sp, #0]
 8005542:	2339      	movs	r3, #57	@ 0x39
 8005544:	7013      	strb	r3, [r2, #0]
 8005546:	4633      	mov	r3, r6
 8005548:	461e      	mov	r6, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005550:	2a39      	cmp	r2, #57	@ 0x39
 8005552:	d052      	beq.n	80055fa <_dtoa_r+0xb12>
 8005554:	3201      	adds	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e612      	b.n	8005180 <_dtoa_r+0x698>
 800555a:	2a00      	cmp	r2, #0
 800555c:	dd07      	ble.n	800556e <_dtoa_r+0xa86>
 800555e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005562:	d0ed      	beq.n	8005540 <_dtoa_r+0xa58>
 8005564:	9a00      	ldr	r2, [sp, #0]
 8005566:	f108 0301 	add.w	r3, r8, #1
 800556a:	7013      	strb	r3, [r2, #0]
 800556c:	e608      	b.n	8005180 <_dtoa_r+0x698>
 800556e:	9b07      	ldr	r3, [sp, #28]
 8005570:	9a07      	ldr	r2, [sp, #28]
 8005572:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005578:	4293      	cmp	r3, r2
 800557a:	d028      	beq.n	80055ce <_dtoa_r+0xae6>
 800557c:	4649      	mov	r1, r9
 800557e:	2300      	movs	r3, #0
 8005580:	220a      	movs	r2, #10
 8005582:	4658      	mov	r0, fp
 8005584:	f000 f9d6 	bl	8005934 <__multadd>
 8005588:	42af      	cmp	r7, r5
 800558a:	4681      	mov	r9, r0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	f04f 020a 	mov.w	r2, #10
 8005594:	4639      	mov	r1, r7
 8005596:	4658      	mov	r0, fp
 8005598:	d107      	bne.n	80055aa <_dtoa_r+0xac2>
 800559a:	f000 f9cb 	bl	8005934 <__multadd>
 800559e:	4607      	mov	r7, r0
 80055a0:	4605      	mov	r5, r0
 80055a2:	9b07      	ldr	r3, [sp, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	e774      	b.n	8005494 <_dtoa_r+0x9ac>
 80055aa:	f000 f9c3 	bl	8005934 <__multadd>
 80055ae:	4629      	mov	r1, r5
 80055b0:	4607      	mov	r7, r0
 80055b2:	2300      	movs	r3, #0
 80055b4:	220a      	movs	r2, #10
 80055b6:	4658      	mov	r0, fp
 80055b8:	f000 f9bc 	bl	8005934 <__multadd>
 80055bc:	4605      	mov	r5, r0
 80055be:	e7f0      	b.n	80055a2 <_dtoa_r+0xaba>
 80055c0:	9b00      	ldr	r3, [sp, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfcc      	ite	gt
 80055c6:	461e      	movgt	r6, r3
 80055c8:	2601      	movle	r6, #1
 80055ca:	4456      	add	r6, sl
 80055cc:	2700      	movs	r7, #0
 80055ce:	4649      	mov	r1, r9
 80055d0:	2201      	movs	r2, #1
 80055d2:	4658      	mov	r0, fp
 80055d4:	f000 fb5a 	bl	8005c8c <__lshift>
 80055d8:	4621      	mov	r1, r4
 80055da:	4681      	mov	r9, r0
 80055dc:	f000 fbc2 	bl	8005d64 <__mcmp>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	dcb0      	bgt.n	8005546 <_dtoa_r+0xa5e>
 80055e4:	d102      	bne.n	80055ec <_dtoa_r+0xb04>
 80055e6:	f018 0f01 	tst.w	r8, #1
 80055ea:	d1ac      	bne.n	8005546 <_dtoa_r+0xa5e>
 80055ec:	4633      	mov	r3, r6
 80055ee:	461e      	mov	r6, r3
 80055f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055f4:	2a30      	cmp	r2, #48	@ 0x30
 80055f6:	d0fa      	beq.n	80055ee <_dtoa_r+0xb06>
 80055f8:	e5c2      	b.n	8005180 <_dtoa_r+0x698>
 80055fa:	459a      	cmp	sl, r3
 80055fc:	d1a4      	bne.n	8005548 <_dtoa_r+0xa60>
 80055fe:	9b04      	ldr	r3, [sp, #16]
 8005600:	3301      	adds	r3, #1
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	2331      	movs	r3, #49	@ 0x31
 8005606:	f88a 3000 	strb.w	r3, [sl]
 800560a:	e5b9      	b.n	8005180 <_dtoa_r+0x698>
 800560c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800560e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800566c <_dtoa_r+0xb84>
 8005612:	b11b      	cbz	r3, 800561c <_dtoa_r+0xb34>
 8005614:	f10a 0308 	add.w	r3, sl, #8
 8005618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4650      	mov	r0, sl
 800561e:	b019      	add	sp, #100	@ 0x64
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005626:	2b01      	cmp	r3, #1
 8005628:	f77f ae37 	ble.w	800529a <_dtoa_r+0x7b2>
 800562c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800562e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005630:	2001      	movs	r0, #1
 8005632:	e655      	b.n	80052e0 <_dtoa_r+0x7f8>
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f77f aed6 	ble.w	80053e8 <_dtoa_r+0x900>
 800563c:	4656      	mov	r6, sl
 800563e:	4621      	mov	r1, r4
 8005640:	4648      	mov	r0, r9
 8005642:	f7ff f9c8 	bl	80049d6 <quorem>
 8005646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800564a:	f806 8b01 	strb.w	r8, [r6], #1
 800564e:	9b00      	ldr	r3, [sp, #0]
 8005650:	eba6 020a 	sub.w	r2, r6, sl
 8005654:	4293      	cmp	r3, r2
 8005656:	ddb3      	ble.n	80055c0 <_dtoa_r+0xad8>
 8005658:	4649      	mov	r1, r9
 800565a:	2300      	movs	r3, #0
 800565c:	220a      	movs	r2, #10
 800565e:	4658      	mov	r0, fp
 8005660:	f000 f968 	bl	8005934 <__multadd>
 8005664:	4681      	mov	r9, r0
 8005666:	e7ea      	b.n	800563e <_dtoa_r+0xb56>
 8005668:	0800678e 	.word	0x0800678e
 800566c:	08006712 	.word	0x08006712

08005670 <_free_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4605      	mov	r5, r0
 8005674:	2900      	cmp	r1, #0
 8005676:	d041      	beq.n	80056fc <_free_r+0x8c>
 8005678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800567c:	1f0c      	subs	r4, r1, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	bfb8      	it	lt
 8005682:	18e4      	addlt	r4, r4, r3
 8005684:	f000 f8e8 	bl	8005858 <__malloc_lock>
 8005688:	4a1d      	ldr	r2, [pc, #116]	@ (8005700 <_free_r+0x90>)
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	b933      	cbnz	r3, 800569c <_free_r+0x2c>
 800568e:	6063      	str	r3, [r4, #4]
 8005690:	6014      	str	r4, [r2, #0]
 8005692:	4628      	mov	r0, r5
 8005694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005698:	f000 b8e4 	b.w	8005864 <__malloc_unlock>
 800569c:	42a3      	cmp	r3, r4
 800569e:	d908      	bls.n	80056b2 <_free_r+0x42>
 80056a0:	6820      	ldr	r0, [r4, #0]
 80056a2:	1821      	adds	r1, r4, r0
 80056a4:	428b      	cmp	r3, r1
 80056a6:	bf01      	itttt	eq
 80056a8:	6819      	ldreq	r1, [r3, #0]
 80056aa:	685b      	ldreq	r3, [r3, #4]
 80056ac:	1809      	addeq	r1, r1, r0
 80056ae:	6021      	streq	r1, [r4, #0]
 80056b0:	e7ed      	b.n	800568e <_free_r+0x1e>
 80056b2:	461a      	mov	r2, r3
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	b10b      	cbz	r3, 80056bc <_free_r+0x4c>
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d9fa      	bls.n	80056b2 <_free_r+0x42>
 80056bc:	6811      	ldr	r1, [r2, #0]
 80056be:	1850      	adds	r0, r2, r1
 80056c0:	42a0      	cmp	r0, r4
 80056c2:	d10b      	bne.n	80056dc <_free_r+0x6c>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	4401      	add	r1, r0
 80056c8:	1850      	adds	r0, r2, r1
 80056ca:	4283      	cmp	r3, r0
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	d1e0      	bne.n	8005692 <_free_r+0x22>
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	6053      	str	r3, [r2, #4]
 80056d6:	4408      	add	r0, r1
 80056d8:	6010      	str	r0, [r2, #0]
 80056da:	e7da      	b.n	8005692 <_free_r+0x22>
 80056dc:	d902      	bls.n	80056e4 <_free_r+0x74>
 80056de:	230c      	movs	r3, #12
 80056e0:	602b      	str	r3, [r5, #0]
 80056e2:	e7d6      	b.n	8005692 <_free_r+0x22>
 80056e4:	6820      	ldr	r0, [r4, #0]
 80056e6:	1821      	adds	r1, r4, r0
 80056e8:	428b      	cmp	r3, r1
 80056ea:	bf04      	itt	eq
 80056ec:	6819      	ldreq	r1, [r3, #0]
 80056ee:	685b      	ldreq	r3, [r3, #4]
 80056f0:	6063      	str	r3, [r4, #4]
 80056f2:	bf04      	itt	eq
 80056f4:	1809      	addeq	r1, r1, r0
 80056f6:	6021      	streq	r1, [r4, #0]
 80056f8:	6054      	str	r4, [r2, #4]
 80056fa:	e7ca      	b.n	8005692 <_free_r+0x22>
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	bf00      	nop
 8005700:	20000448 	.word	0x20000448

08005704 <malloc>:
 8005704:	4b02      	ldr	r3, [pc, #8]	@ (8005710 <malloc+0xc>)
 8005706:	4601      	mov	r1, r0
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	f000 b825 	b.w	8005758 <_malloc_r>
 800570e:	bf00      	nop
 8005710:	20000020 	.word	0x20000020

08005714 <sbrk_aligned>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4e0f      	ldr	r6, [pc, #60]	@ (8005754 <sbrk_aligned+0x40>)
 8005718:	460c      	mov	r4, r1
 800571a:	6831      	ldr	r1, [r6, #0]
 800571c:	4605      	mov	r5, r0
 800571e:	b911      	cbnz	r1, 8005726 <sbrk_aligned+0x12>
 8005720:	f000 fe9a 	bl	8006458 <_sbrk_r>
 8005724:	6030      	str	r0, [r6, #0]
 8005726:	4621      	mov	r1, r4
 8005728:	4628      	mov	r0, r5
 800572a:	f000 fe95 	bl	8006458 <_sbrk_r>
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	d103      	bne.n	800573a <sbrk_aligned+0x26>
 8005732:	f04f 34ff 	mov.w	r4, #4294967295
 8005736:	4620      	mov	r0, r4
 8005738:	bd70      	pop	{r4, r5, r6, pc}
 800573a:	1cc4      	adds	r4, r0, #3
 800573c:	f024 0403 	bic.w	r4, r4, #3
 8005740:	42a0      	cmp	r0, r4
 8005742:	d0f8      	beq.n	8005736 <sbrk_aligned+0x22>
 8005744:	1a21      	subs	r1, r4, r0
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fe86 	bl	8006458 <_sbrk_r>
 800574c:	3001      	adds	r0, #1
 800574e:	d1f2      	bne.n	8005736 <sbrk_aligned+0x22>
 8005750:	e7ef      	b.n	8005732 <sbrk_aligned+0x1e>
 8005752:	bf00      	nop
 8005754:	20000444 	.word	0x20000444

08005758 <_malloc_r>:
 8005758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800575c:	1ccd      	adds	r5, r1, #3
 800575e:	f025 0503 	bic.w	r5, r5, #3
 8005762:	3508      	adds	r5, #8
 8005764:	2d0c      	cmp	r5, #12
 8005766:	bf38      	it	cc
 8005768:	250c      	movcc	r5, #12
 800576a:	2d00      	cmp	r5, #0
 800576c:	4606      	mov	r6, r0
 800576e:	db01      	blt.n	8005774 <_malloc_r+0x1c>
 8005770:	42a9      	cmp	r1, r5
 8005772:	d904      	bls.n	800577e <_malloc_r+0x26>
 8005774:	230c      	movs	r3, #12
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	2000      	movs	r0, #0
 800577a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005854 <_malloc_r+0xfc>
 8005782:	f000 f869 	bl	8005858 <__malloc_lock>
 8005786:	f8d8 3000 	ldr.w	r3, [r8]
 800578a:	461c      	mov	r4, r3
 800578c:	bb44      	cbnz	r4, 80057e0 <_malloc_r+0x88>
 800578e:	4629      	mov	r1, r5
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff ffbf 	bl	8005714 <sbrk_aligned>
 8005796:	1c43      	adds	r3, r0, #1
 8005798:	4604      	mov	r4, r0
 800579a:	d158      	bne.n	800584e <_malloc_r+0xf6>
 800579c:	f8d8 4000 	ldr.w	r4, [r8]
 80057a0:	4627      	mov	r7, r4
 80057a2:	2f00      	cmp	r7, #0
 80057a4:	d143      	bne.n	800582e <_malloc_r+0xd6>
 80057a6:	2c00      	cmp	r4, #0
 80057a8:	d04b      	beq.n	8005842 <_malloc_r+0xea>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	4639      	mov	r1, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	eb04 0903 	add.w	r9, r4, r3
 80057b4:	f000 fe50 	bl	8006458 <_sbrk_r>
 80057b8:	4581      	cmp	r9, r0
 80057ba:	d142      	bne.n	8005842 <_malloc_r+0xea>
 80057bc:	6821      	ldr	r1, [r4, #0]
 80057be:	1a6d      	subs	r5, r5, r1
 80057c0:	4629      	mov	r1, r5
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7ff ffa6 	bl	8005714 <sbrk_aligned>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d03a      	beq.n	8005842 <_malloc_r+0xea>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	442b      	add	r3, r5
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	f8d8 3000 	ldr.w	r3, [r8]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	bb62      	cbnz	r2, 8005834 <_malloc_r+0xdc>
 80057da:	f8c8 7000 	str.w	r7, [r8]
 80057de:	e00f      	b.n	8005800 <_malloc_r+0xa8>
 80057e0:	6822      	ldr	r2, [r4, #0]
 80057e2:	1b52      	subs	r2, r2, r5
 80057e4:	d420      	bmi.n	8005828 <_malloc_r+0xd0>
 80057e6:	2a0b      	cmp	r2, #11
 80057e8:	d917      	bls.n	800581a <_malloc_r+0xc2>
 80057ea:	1961      	adds	r1, r4, r5
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	6025      	str	r5, [r4, #0]
 80057f0:	bf18      	it	ne
 80057f2:	6059      	strne	r1, [r3, #4]
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	bf08      	it	eq
 80057f8:	f8c8 1000 	streq.w	r1, [r8]
 80057fc:	5162      	str	r2, [r4, r5]
 80057fe:	604b      	str	r3, [r1, #4]
 8005800:	4630      	mov	r0, r6
 8005802:	f000 f82f 	bl	8005864 <__malloc_unlock>
 8005806:	f104 000b 	add.w	r0, r4, #11
 800580a:	1d23      	adds	r3, r4, #4
 800580c:	f020 0007 	bic.w	r0, r0, #7
 8005810:	1ac2      	subs	r2, r0, r3
 8005812:	bf1c      	itt	ne
 8005814:	1a1b      	subne	r3, r3, r0
 8005816:	50a3      	strne	r3, [r4, r2]
 8005818:	e7af      	b.n	800577a <_malloc_r+0x22>
 800581a:	6862      	ldr	r2, [r4, #4]
 800581c:	42a3      	cmp	r3, r4
 800581e:	bf0c      	ite	eq
 8005820:	f8c8 2000 	streq.w	r2, [r8]
 8005824:	605a      	strne	r2, [r3, #4]
 8005826:	e7eb      	b.n	8005800 <_malloc_r+0xa8>
 8005828:	4623      	mov	r3, r4
 800582a:	6864      	ldr	r4, [r4, #4]
 800582c:	e7ae      	b.n	800578c <_malloc_r+0x34>
 800582e:	463c      	mov	r4, r7
 8005830:	687f      	ldr	r7, [r7, #4]
 8005832:	e7b6      	b.n	80057a2 <_malloc_r+0x4a>
 8005834:	461a      	mov	r2, r3
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	42a3      	cmp	r3, r4
 800583a:	d1fb      	bne.n	8005834 <_malloc_r+0xdc>
 800583c:	2300      	movs	r3, #0
 800583e:	6053      	str	r3, [r2, #4]
 8005840:	e7de      	b.n	8005800 <_malloc_r+0xa8>
 8005842:	230c      	movs	r3, #12
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	4630      	mov	r0, r6
 8005848:	f000 f80c 	bl	8005864 <__malloc_unlock>
 800584c:	e794      	b.n	8005778 <_malloc_r+0x20>
 800584e:	6005      	str	r5, [r0, #0]
 8005850:	e7d6      	b.n	8005800 <_malloc_r+0xa8>
 8005852:	bf00      	nop
 8005854:	20000448 	.word	0x20000448

08005858 <__malloc_lock>:
 8005858:	4801      	ldr	r0, [pc, #4]	@ (8005860 <__malloc_lock+0x8>)
 800585a:	f7ff b8ba 	b.w	80049d2 <__retarget_lock_acquire_recursive>
 800585e:	bf00      	nop
 8005860:	20000440 	.word	0x20000440

08005864 <__malloc_unlock>:
 8005864:	4801      	ldr	r0, [pc, #4]	@ (800586c <__malloc_unlock+0x8>)
 8005866:	f7ff b8b5 	b.w	80049d4 <__retarget_lock_release_recursive>
 800586a:	bf00      	nop
 800586c:	20000440 	.word	0x20000440

08005870 <_Balloc>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	69c6      	ldr	r6, [r0, #28]
 8005874:	4604      	mov	r4, r0
 8005876:	460d      	mov	r5, r1
 8005878:	b976      	cbnz	r6, 8005898 <_Balloc+0x28>
 800587a:	2010      	movs	r0, #16
 800587c:	f7ff ff42 	bl	8005704 <malloc>
 8005880:	4602      	mov	r2, r0
 8005882:	61e0      	str	r0, [r4, #28]
 8005884:	b920      	cbnz	r0, 8005890 <_Balloc+0x20>
 8005886:	4b18      	ldr	r3, [pc, #96]	@ (80058e8 <_Balloc+0x78>)
 8005888:	4818      	ldr	r0, [pc, #96]	@ (80058ec <_Balloc+0x7c>)
 800588a:	216b      	movs	r1, #107	@ 0x6b
 800588c:	f000 fe02 	bl	8006494 <__assert_func>
 8005890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005894:	6006      	str	r6, [r0, #0]
 8005896:	60c6      	str	r6, [r0, #12]
 8005898:	69e6      	ldr	r6, [r4, #28]
 800589a:	68f3      	ldr	r3, [r6, #12]
 800589c:	b183      	cbz	r3, 80058c0 <_Balloc+0x50>
 800589e:	69e3      	ldr	r3, [r4, #28]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058a6:	b9b8      	cbnz	r0, 80058d8 <_Balloc+0x68>
 80058a8:	2101      	movs	r1, #1
 80058aa:	fa01 f605 	lsl.w	r6, r1, r5
 80058ae:	1d72      	adds	r2, r6, #5
 80058b0:	0092      	lsls	r2, r2, #2
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 fe0c 	bl	80064d0 <_calloc_r>
 80058b8:	b160      	cbz	r0, 80058d4 <_Balloc+0x64>
 80058ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058be:	e00e      	b.n	80058de <_Balloc+0x6e>
 80058c0:	2221      	movs	r2, #33	@ 0x21
 80058c2:	2104      	movs	r1, #4
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fe03 	bl	80064d0 <_calloc_r>
 80058ca:	69e3      	ldr	r3, [r4, #28]
 80058cc:	60f0      	str	r0, [r6, #12]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e4      	bne.n	800589e <_Balloc+0x2e>
 80058d4:	2000      	movs	r0, #0
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	6802      	ldr	r2, [r0, #0]
 80058da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058de:	2300      	movs	r3, #0
 80058e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058e4:	e7f7      	b.n	80058d6 <_Balloc+0x66>
 80058e6:	bf00      	nop
 80058e8:	0800671f 	.word	0x0800671f
 80058ec:	0800679f 	.word	0x0800679f

080058f0 <_Bfree>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	69c6      	ldr	r6, [r0, #28]
 80058f4:	4605      	mov	r5, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	b976      	cbnz	r6, 8005918 <_Bfree+0x28>
 80058fa:	2010      	movs	r0, #16
 80058fc:	f7ff ff02 	bl	8005704 <malloc>
 8005900:	4602      	mov	r2, r0
 8005902:	61e8      	str	r0, [r5, #28]
 8005904:	b920      	cbnz	r0, 8005910 <_Bfree+0x20>
 8005906:	4b09      	ldr	r3, [pc, #36]	@ (800592c <_Bfree+0x3c>)
 8005908:	4809      	ldr	r0, [pc, #36]	@ (8005930 <_Bfree+0x40>)
 800590a:	218f      	movs	r1, #143	@ 0x8f
 800590c:	f000 fdc2 	bl	8006494 <__assert_func>
 8005910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005914:	6006      	str	r6, [r0, #0]
 8005916:	60c6      	str	r6, [r0, #12]
 8005918:	b13c      	cbz	r4, 800592a <_Bfree+0x3a>
 800591a:	69eb      	ldr	r3, [r5, #28]
 800591c:	6862      	ldr	r2, [r4, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005924:	6021      	str	r1, [r4, #0]
 8005926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	0800671f 	.word	0x0800671f
 8005930:	0800679f 	.word	0x0800679f

08005934 <__multadd>:
 8005934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005938:	690d      	ldr	r5, [r1, #16]
 800593a:	4607      	mov	r7, r0
 800593c:	460c      	mov	r4, r1
 800593e:	461e      	mov	r6, r3
 8005940:	f101 0c14 	add.w	ip, r1, #20
 8005944:	2000      	movs	r0, #0
 8005946:	f8dc 3000 	ldr.w	r3, [ip]
 800594a:	b299      	uxth	r1, r3
 800594c:	fb02 6101 	mla	r1, r2, r1, r6
 8005950:	0c1e      	lsrs	r6, r3, #16
 8005952:	0c0b      	lsrs	r3, r1, #16
 8005954:	fb02 3306 	mla	r3, r2, r6, r3
 8005958:	b289      	uxth	r1, r1
 800595a:	3001      	adds	r0, #1
 800595c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005960:	4285      	cmp	r5, r0
 8005962:	f84c 1b04 	str.w	r1, [ip], #4
 8005966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800596a:	dcec      	bgt.n	8005946 <__multadd+0x12>
 800596c:	b30e      	cbz	r6, 80059b2 <__multadd+0x7e>
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	42ab      	cmp	r3, r5
 8005972:	dc19      	bgt.n	80059a8 <__multadd+0x74>
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4638      	mov	r0, r7
 8005978:	3101      	adds	r1, #1
 800597a:	f7ff ff79 	bl	8005870 <_Balloc>
 800597e:	4680      	mov	r8, r0
 8005980:	b928      	cbnz	r0, 800598e <__multadd+0x5a>
 8005982:	4602      	mov	r2, r0
 8005984:	4b0c      	ldr	r3, [pc, #48]	@ (80059b8 <__multadd+0x84>)
 8005986:	480d      	ldr	r0, [pc, #52]	@ (80059bc <__multadd+0x88>)
 8005988:	21ba      	movs	r1, #186	@ 0xba
 800598a:	f000 fd83 	bl	8006494 <__assert_func>
 800598e:	6922      	ldr	r2, [r4, #16]
 8005990:	3202      	adds	r2, #2
 8005992:	f104 010c 	add.w	r1, r4, #12
 8005996:	0092      	lsls	r2, r2, #2
 8005998:	300c      	adds	r0, #12
 800599a:	f000 fd6d 	bl	8006478 <memcpy>
 800599e:	4621      	mov	r1, r4
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ffa5 	bl	80058f0 <_Bfree>
 80059a6:	4644      	mov	r4, r8
 80059a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059ac:	3501      	adds	r5, #1
 80059ae:	615e      	str	r6, [r3, #20]
 80059b0:	6125      	str	r5, [r4, #16]
 80059b2:	4620      	mov	r0, r4
 80059b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b8:	0800678e 	.word	0x0800678e
 80059bc:	0800679f 	.word	0x0800679f

080059c0 <__hi0bits>:
 80059c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059c4:	4603      	mov	r3, r0
 80059c6:	bf36      	itet	cc
 80059c8:	0403      	lslcc	r3, r0, #16
 80059ca:	2000      	movcs	r0, #0
 80059cc:	2010      	movcc	r0, #16
 80059ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059d2:	bf3c      	itt	cc
 80059d4:	021b      	lslcc	r3, r3, #8
 80059d6:	3008      	addcc	r0, #8
 80059d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059dc:	bf3c      	itt	cc
 80059de:	011b      	lslcc	r3, r3, #4
 80059e0:	3004      	addcc	r0, #4
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e6:	bf3c      	itt	cc
 80059e8:	009b      	lslcc	r3, r3, #2
 80059ea:	3002      	addcc	r0, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	db05      	blt.n	80059fc <__hi0bits+0x3c>
 80059f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80059f4:	f100 0001 	add.w	r0, r0, #1
 80059f8:	bf08      	it	eq
 80059fa:	2020      	moveq	r0, #32
 80059fc:	4770      	bx	lr

080059fe <__lo0bits>:
 80059fe:	6803      	ldr	r3, [r0, #0]
 8005a00:	4602      	mov	r2, r0
 8005a02:	f013 0007 	ands.w	r0, r3, #7
 8005a06:	d00b      	beq.n	8005a20 <__lo0bits+0x22>
 8005a08:	07d9      	lsls	r1, r3, #31
 8005a0a:	d421      	bmi.n	8005a50 <__lo0bits+0x52>
 8005a0c:	0798      	lsls	r0, r3, #30
 8005a0e:	bf49      	itett	mi
 8005a10:	085b      	lsrmi	r3, r3, #1
 8005a12:	089b      	lsrpl	r3, r3, #2
 8005a14:	2001      	movmi	r0, #1
 8005a16:	6013      	strmi	r3, [r2, #0]
 8005a18:	bf5c      	itt	pl
 8005a1a:	6013      	strpl	r3, [r2, #0]
 8005a1c:	2002      	movpl	r0, #2
 8005a1e:	4770      	bx	lr
 8005a20:	b299      	uxth	r1, r3
 8005a22:	b909      	cbnz	r1, 8005a28 <__lo0bits+0x2a>
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	2010      	movs	r0, #16
 8005a28:	b2d9      	uxtb	r1, r3
 8005a2a:	b909      	cbnz	r1, 8005a30 <__lo0bits+0x32>
 8005a2c:	3008      	adds	r0, #8
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	0719      	lsls	r1, r3, #28
 8005a32:	bf04      	itt	eq
 8005a34:	091b      	lsreq	r3, r3, #4
 8005a36:	3004      	addeq	r0, #4
 8005a38:	0799      	lsls	r1, r3, #30
 8005a3a:	bf04      	itt	eq
 8005a3c:	089b      	lsreq	r3, r3, #2
 8005a3e:	3002      	addeq	r0, #2
 8005a40:	07d9      	lsls	r1, r3, #31
 8005a42:	d403      	bmi.n	8005a4c <__lo0bits+0x4e>
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	f100 0001 	add.w	r0, r0, #1
 8005a4a:	d003      	beq.n	8005a54 <__lo0bits+0x56>
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	4770      	bx	lr
 8005a50:	2000      	movs	r0, #0
 8005a52:	4770      	bx	lr
 8005a54:	2020      	movs	r0, #32
 8005a56:	4770      	bx	lr

08005a58 <__i2b>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	f7ff ff07 	bl	8005870 <_Balloc>
 8005a62:	4602      	mov	r2, r0
 8005a64:	b928      	cbnz	r0, 8005a72 <__i2b+0x1a>
 8005a66:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <__i2b+0x24>)
 8005a68:	4805      	ldr	r0, [pc, #20]	@ (8005a80 <__i2b+0x28>)
 8005a6a:	f240 1145 	movw	r1, #325	@ 0x145
 8005a6e:	f000 fd11 	bl	8006494 <__assert_func>
 8005a72:	2301      	movs	r3, #1
 8005a74:	6144      	str	r4, [r0, #20]
 8005a76:	6103      	str	r3, [r0, #16]
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	bf00      	nop
 8005a7c:	0800678e 	.word	0x0800678e
 8005a80:	0800679f 	.word	0x0800679f

08005a84 <__multiply>:
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	4614      	mov	r4, r2
 8005a8a:	690a      	ldr	r2, [r1, #16]
 8005a8c:	6923      	ldr	r3, [r4, #16]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bfa8      	it	ge
 8005a92:	4623      	movge	r3, r4
 8005a94:	460f      	mov	r7, r1
 8005a96:	bfa4      	itt	ge
 8005a98:	460c      	movge	r4, r1
 8005a9a:	461f      	movge	r7, r3
 8005a9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005aa0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	6861      	ldr	r1, [r4, #4]
 8005aa8:	eb0a 0609 	add.w	r6, sl, r9
 8005aac:	42b3      	cmp	r3, r6
 8005aae:	b085      	sub	sp, #20
 8005ab0:	bfb8      	it	lt
 8005ab2:	3101      	addlt	r1, #1
 8005ab4:	f7ff fedc 	bl	8005870 <_Balloc>
 8005ab8:	b930      	cbnz	r0, 8005ac8 <__multiply+0x44>
 8005aba:	4602      	mov	r2, r0
 8005abc:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <__multiply+0x14c>)
 8005abe:	4845      	ldr	r0, [pc, #276]	@ (8005bd4 <__multiply+0x150>)
 8005ac0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ac4:	f000 fce6 	bl	8006494 <__assert_func>
 8005ac8:	f100 0514 	add.w	r5, r0, #20
 8005acc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4543      	cmp	r3, r8
 8005ad6:	d321      	bcc.n	8005b1c <__multiply+0x98>
 8005ad8:	f107 0114 	add.w	r1, r7, #20
 8005adc:	f104 0214 	add.w	r2, r4, #20
 8005ae0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ae4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005ae8:	9302      	str	r3, [sp, #8]
 8005aea:	1b13      	subs	r3, r2, r4
 8005aec:	3b15      	subs	r3, #21
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	3304      	adds	r3, #4
 8005af4:	f104 0715 	add.w	r7, r4, #21
 8005af8:	42ba      	cmp	r2, r7
 8005afa:	bf38      	it	cc
 8005afc:	2304      	movcc	r3, #4
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	9b02      	ldr	r3, [sp, #8]
 8005b02:	9103      	str	r1, [sp, #12]
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d80c      	bhi.n	8005b22 <__multiply+0x9e>
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	dd03      	ble.n	8005b14 <__multiply+0x90>
 8005b0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05b      	beq.n	8005bcc <__multiply+0x148>
 8005b14:	6106      	str	r6, [r0, #16]
 8005b16:	b005      	add	sp, #20
 8005b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1c:	f843 2b04 	str.w	r2, [r3], #4
 8005b20:	e7d8      	b.n	8005ad4 <__multiply+0x50>
 8005b22:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b26:	f1ba 0f00 	cmp.w	sl, #0
 8005b2a:	d024      	beq.n	8005b76 <__multiply+0xf2>
 8005b2c:	f104 0e14 	add.w	lr, r4, #20
 8005b30:	46a9      	mov	r9, r5
 8005b32:	f04f 0c00 	mov.w	ip, #0
 8005b36:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b3a:	f8d9 3000 	ldr.w	r3, [r9]
 8005b3e:	fa1f fb87 	uxth.w	fp, r7
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005b4c:	f8d9 7000 	ldr.w	r7, [r9]
 8005b50:	4463      	add	r3, ip
 8005b52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b56:	fb0a c70b 	mla	r7, sl, fp, ip
 8005b5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b64:	4572      	cmp	r2, lr
 8005b66:	f849 3b04 	str.w	r3, [r9], #4
 8005b6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b6e:	d8e2      	bhi.n	8005b36 <__multiply+0xb2>
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	f845 c003 	str.w	ip, [r5, r3]
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b7c:	3104      	adds	r1, #4
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	d021      	beq.n	8005bc8 <__multiply+0x144>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	f104 0c14 	add.w	ip, r4, #20
 8005b8a:	46ae      	mov	lr, r5
 8005b8c:	f04f 0a00 	mov.w	sl, #0
 8005b90:	f8bc b000 	ldrh.w	fp, [ip]
 8005b94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005b98:	fb09 770b 	mla	r7, r9, fp, r7
 8005b9c:	4457      	add	r7, sl
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ba4:	f84e 3b04 	str.w	r3, [lr], #4
 8005ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bb0:	f8be 3000 	ldrh.w	r3, [lr]
 8005bb4:	fb09 330a 	mla	r3, r9, sl, r3
 8005bb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005bbc:	4562      	cmp	r2, ip
 8005bbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bc2:	d8e5      	bhi.n	8005b90 <__multiply+0x10c>
 8005bc4:	9f01      	ldr	r7, [sp, #4]
 8005bc6:	51eb      	str	r3, [r5, r7]
 8005bc8:	3504      	adds	r5, #4
 8005bca:	e799      	b.n	8005b00 <__multiply+0x7c>
 8005bcc:	3e01      	subs	r6, #1
 8005bce:	e79b      	b.n	8005b08 <__multiply+0x84>
 8005bd0:	0800678e 	.word	0x0800678e
 8005bd4:	0800679f 	.word	0x0800679f

08005bd8 <__pow5mult>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4615      	mov	r5, r2
 8005bde:	f012 0203 	ands.w	r2, r2, #3
 8005be2:	4607      	mov	r7, r0
 8005be4:	460e      	mov	r6, r1
 8005be6:	d007      	beq.n	8005bf8 <__pow5mult+0x20>
 8005be8:	4c25      	ldr	r4, [pc, #148]	@ (8005c80 <__pow5mult+0xa8>)
 8005bea:	3a01      	subs	r2, #1
 8005bec:	2300      	movs	r3, #0
 8005bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bf2:	f7ff fe9f 	bl	8005934 <__multadd>
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	10ad      	asrs	r5, r5, #2
 8005bfa:	d03d      	beq.n	8005c78 <__pow5mult+0xa0>
 8005bfc:	69fc      	ldr	r4, [r7, #28]
 8005bfe:	b97c      	cbnz	r4, 8005c20 <__pow5mult+0x48>
 8005c00:	2010      	movs	r0, #16
 8005c02:	f7ff fd7f 	bl	8005704 <malloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	61f8      	str	r0, [r7, #28]
 8005c0a:	b928      	cbnz	r0, 8005c18 <__pow5mult+0x40>
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <__pow5mult+0xac>)
 8005c0e:	481e      	ldr	r0, [pc, #120]	@ (8005c88 <__pow5mult+0xb0>)
 8005c10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c14:	f000 fc3e 	bl	8006494 <__assert_func>
 8005c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c1c:	6004      	str	r4, [r0, #0]
 8005c1e:	60c4      	str	r4, [r0, #12]
 8005c20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c28:	b94c      	cbnz	r4, 8005c3e <__pow5mult+0x66>
 8005c2a:	f240 2171 	movw	r1, #625	@ 0x271
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ff12 	bl	8005a58 <__i2b>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	6003      	str	r3, [r0, #0]
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	07eb      	lsls	r3, r5, #31
 8005c44:	d50a      	bpl.n	8005c5c <__pow5mult+0x84>
 8005c46:	4631      	mov	r1, r6
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7ff ff1a 	bl	8005a84 <__multiply>
 8005c50:	4631      	mov	r1, r6
 8005c52:	4680      	mov	r8, r0
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7ff fe4b 	bl	80058f0 <_Bfree>
 8005c5a:	4646      	mov	r6, r8
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	d00b      	beq.n	8005c78 <__pow5mult+0xa0>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	b938      	cbnz	r0, 8005c74 <__pow5mult+0x9c>
 8005c64:	4622      	mov	r2, r4
 8005c66:	4621      	mov	r1, r4
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff ff0b 	bl	8005a84 <__multiply>
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f8c0 9000 	str.w	r9, [r0]
 8005c74:	4604      	mov	r4, r0
 8005c76:	e7e4      	b.n	8005c42 <__pow5mult+0x6a>
 8005c78:	4630      	mov	r0, r6
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	bf00      	nop
 8005c80:	080067f8 	.word	0x080067f8
 8005c84:	0800671f 	.word	0x0800671f
 8005c88:	0800679f 	.word	0x0800679f

08005c8c <__lshift>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	460c      	mov	r4, r1
 8005c92:	6849      	ldr	r1, [r1, #4]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c9a:	68a3      	ldr	r3, [r4, #8]
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca4:	f108 0601 	add.w	r6, r8, #1
 8005ca8:	42b3      	cmp	r3, r6
 8005caa:	db0b      	blt.n	8005cc4 <__lshift+0x38>
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff fddf 	bl	8005870 <_Balloc>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	b948      	cbnz	r0, 8005cca <__lshift+0x3e>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b28      	ldr	r3, [pc, #160]	@ (8005d5c <__lshift+0xd0>)
 8005cba:	4829      	ldr	r0, [pc, #164]	@ (8005d60 <__lshift+0xd4>)
 8005cbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005cc0:	f000 fbe8 	bl	8006494 <__assert_func>
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__lshift+0x1c>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f100 0114 	add.w	r1, r0, #20
 8005cd0:	f100 0210 	add.w	r2, r0, #16
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4553      	cmp	r3, sl
 8005cd8:	db33      	blt.n	8005d42 <__lshift+0xb6>
 8005cda:	6920      	ldr	r0, [r4, #16]
 8005cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ce0:	f104 0314 	add.w	r3, r4, #20
 8005ce4:	f019 091f 	ands.w	r9, r9, #31
 8005ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cf0:	d02b      	beq.n	8005d4a <__lshift+0xbe>
 8005cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8005cf6:	468a      	mov	sl, r1
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	fa00 f009 	lsl.w	r0, r0, r9
 8005d00:	4310      	orrs	r0, r2
 8005d02:	f84a 0b04 	str.w	r0, [sl], #4
 8005d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0a:	459c      	cmp	ip, r3
 8005d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d10:	d8f3      	bhi.n	8005cfa <__lshift+0x6e>
 8005d12:	ebac 0304 	sub.w	r3, ip, r4
 8005d16:	3b15      	subs	r3, #21
 8005d18:	f023 0303 	bic.w	r3, r3, #3
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	f104 0015 	add.w	r0, r4, #21
 8005d22:	4584      	cmp	ip, r0
 8005d24:	bf38      	it	cc
 8005d26:	2304      	movcc	r3, #4
 8005d28:	50ca      	str	r2, [r1, r3]
 8005d2a:	b10a      	cbz	r2, 8005d30 <__lshift+0xa4>
 8005d2c:	f108 0602 	add.w	r6, r8, #2
 8005d30:	3e01      	subs	r6, #1
 8005d32:	4638      	mov	r0, r7
 8005d34:	612e      	str	r6, [r5, #16]
 8005d36:	4621      	mov	r1, r4
 8005d38:	f7ff fdda 	bl	80058f0 <_Bfree>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d46:	3301      	adds	r3, #1
 8005d48:	e7c5      	b.n	8005cd6 <__lshift+0x4a>
 8005d4a:	3904      	subs	r1, #4
 8005d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d50:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d54:	459c      	cmp	ip, r3
 8005d56:	d8f9      	bhi.n	8005d4c <__lshift+0xc0>
 8005d58:	e7ea      	b.n	8005d30 <__lshift+0xa4>
 8005d5a:	bf00      	nop
 8005d5c:	0800678e 	.word	0x0800678e
 8005d60:	0800679f 	.word	0x0800679f

08005d64 <__mcmp>:
 8005d64:	690a      	ldr	r2, [r1, #16]
 8005d66:	4603      	mov	r3, r0
 8005d68:	6900      	ldr	r0, [r0, #16]
 8005d6a:	1a80      	subs	r0, r0, r2
 8005d6c:	b530      	push	{r4, r5, lr}
 8005d6e:	d10e      	bne.n	8005d8e <__mcmp+0x2a>
 8005d70:	3314      	adds	r3, #20
 8005d72:	3114      	adds	r1, #20
 8005d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d84:	4295      	cmp	r5, r2
 8005d86:	d003      	beq.n	8005d90 <__mcmp+0x2c>
 8005d88:	d205      	bcs.n	8005d96 <__mcmp+0x32>
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8e:	bd30      	pop	{r4, r5, pc}
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	d3f3      	bcc.n	8005d7c <__mcmp+0x18>
 8005d94:	e7fb      	b.n	8005d8e <__mcmp+0x2a>
 8005d96:	2001      	movs	r0, #1
 8005d98:	e7f9      	b.n	8005d8e <__mcmp+0x2a>
	...

08005d9c <__mdiff>:
 8005d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4689      	mov	r9, r1
 8005da2:	4606      	mov	r6, r0
 8005da4:	4611      	mov	r1, r2
 8005da6:	4648      	mov	r0, r9
 8005da8:	4614      	mov	r4, r2
 8005daa:	f7ff ffdb 	bl	8005d64 <__mcmp>
 8005dae:	1e05      	subs	r5, r0, #0
 8005db0:	d112      	bne.n	8005dd8 <__mdiff+0x3c>
 8005db2:	4629      	mov	r1, r5
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff fd5b 	bl	8005870 <_Balloc>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__mdiff+0x2e>
 8005dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8005ebc <__mdiff+0x120>)
 8005dc0:	f240 2137 	movw	r1, #567	@ 0x237
 8005dc4:	483e      	ldr	r0, [pc, #248]	@ (8005ec0 <__mdiff+0x124>)
 8005dc6:	f000 fb65 	bl	8006494 <__assert_func>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	b003      	add	sp, #12
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd8:	bfbc      	itt	lt
 8005dda:	464b      	movlt	r3, r9
 8005ddc:	46a1      	movlt	r9, r4
 8005dde:	4630      	mov	r0, r6
 8005de0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005de4:	bfba      	itte	lt
 8005de6:	461c      	movlt	r4, r3
 8005de8:	2501      	movlt	r5, #1
 8005dea:	2500      	movge	r5, #0
 8005dec:	f7ff fd40 	bl	8005870 <_Balloc>
 8005df0:	4602      	mov	r2, r0
 8005df2:	b918      	cbnz	r0, 8005dfc <__mdiff+0x60>
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <__mdiff+0x120>)
 8005df6:	f240 2145 	movw	r1, #581	@ 0x245
 8005dfa:	e7e3      	b.n	8005dc4 <__mdiff+0x28>
 8005dfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e00:	6926      	ldr	r6, [r4, #16]
 8005e02:	60c5      	str	r5, [r0, #12]
 8005e04:	f109 0310 	add.w	r3, r9, #16
 8005e08:	f109 0514 	add.w	r5, r9, #20
 8005e0c:	f104 0e14 	add.w	lr, r4, #20
 8005e10:	f100 0b14 	add.w	fp, r0, #20
 8005e14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	46d9      	mov	r9, fp
 8005e20:	f04f 0c00 	mov.w	ip, #0
 8005e24:	9b01      	ldr	r3, [sp, #4]
 8005e26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	fa1f f38a 	uxth.w	r3, sl
 8005e34:	4619      	mov	r1, r3
 8005e36:	b283      	uxth	r3, r0
 8005e38:	1acb      	subs	r3, r1, r3
 8005e3a:	0c00      	lsrs	r0, r0, #16
 8005e3c:	4463      	add	r3, ip
 8005e3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e4c:	4576      	cmp	r6, lr
 8005e4e:	f849 3b04 	str.w	r3, [r9], #4
 8005e52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e56:	d8e5      	bhi.n	8005e24 <__mdiff+0x88>
 8005e58:	1b33      	subs	r3, r6, r4
 8005e5a:	3b15      	subs	r3, #21
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	3415      	adds	r4, #21
 8005e62:	3304      	adds	r3, #4
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	bf38      	it	cc
 8005e68:	2304      	movcc	r3, #4
 8005e6a:	441d      	add	r5, r3
 8005e6c:	445b      	add	r3, fp
 8005e6e:	461e      	mov	r6, r3
 8005e70:	462c      	mov	r4, r5
 8005e72:	4544      	cmp	r4, r8
 8005e74:	d30e      	bcc.n	8005e94 <__mdiff+0xf8>
 8005e76:	f108 0103 	add.w	r1, r8, #3
 8005e7a:	1b49      	subs	r1, r1, r5
 8005e7c:	f021 0103 	bic.w	r1, r1, #3
 8005e80:	3d03      	subs	r5, #3
 8005e82:	45a8      	cmp	r8, r5
 8005e84:	bf38      	it	cc
 8005e86:	2100      	movcc	r1, #0
 8005e88:	440b      	add	r3, r1
 8005e8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e8e:	b191      	cbz	r1, 8005eb6 <__mdiff+0x11a>
 8005e90:	6117      	str	r7, [r2, #16]
 8005e92:	e79d      	b.n	8005dd0 <__mdiff+0x34>
 8005e94:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e98:	46e6      	mov	lr, ip
 8005e9a:	0c08      	lsrs	r0, r1, #16
 8005e9c:	fa1c fc81 	uxtah	ip, ip, r1
 8005ea0:	4471      	add	r1, lr
 8005ea2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ea6:	b289      	uxth	r1, r1
 8005ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005eac:	f846 1b04 	str.w	r1, [r6], #4
 8005eb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005eb4:	e7dd      	b.n	8005e72 <__mdiff+0xd6>
 8005eb6:	3f01      	subs	r7, #1
 8005eb8:	e7e7      	b.n	8005e8a <__mdiff+0xee>
 8005eba:	bf00      	nop
 8005ebc:	0800678e 	.word	0x0800678e
 8005ec0:	0800679f 	.word	0x0800679f

08005ec4 <__d2b>:
 8005ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	460f      	mov	r7, r1
 8005eca:	2101      	movs	r1, #1
 8005ecc:	ec59 8b10 	vmov	r8, r9, d0
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	f7ff fccd 	bl	8005870 <_Balloc>
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	b930      	cbnz	r0, 8005ee8 <__d2b+0x24>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b23      	ldr	r3, [pc, #140]	@ (8005f6c <__d2b+0xa8>)
 8005ede:	4824      	ldr	r0, [pc, #144]	@ (8005f70 <__d2b+0xac>)
 8005ee0:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ee4:	f000 fad6 	bl	8006494 <__assert_func>
 8005ee8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005eec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ef0:	b10d      	cbz	r5, 8005ef6 <__d2b+0x32>
 8005ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8005efc:	d023      	beq.n	8005f46 <__d2b+0x82>
 8005efe:	4668      	mov	r0, sp
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	f7ff fd7c 	bl	80059fe <__lo0bits>
 8005f06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f0a:	b1d0      	cbz	r0, 8005f42 <__d2b+0x7e>
 8005f0c:	f1c0 0320 	rsb	r3, r0, #32
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	430b      	orrs	r3, r1
 8005f16:	40c2      	lsrs	r2, r0
 8005f18:	6163      	str	r3, [r4, #20]
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	61a3      	str	r3, [r4, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2201      	moveq	r2, #1
 8005f26:	2202      	movne	r2, #2
 8005f28:	6122      	str	r2, [r4, #16]
 8005f2a:	b1a5      	cbz	r5, 8005f56 <__d2b+0x92>
 8005f2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f30:	4405      	add	r5, r0
 8005f32:	603d      	str	r5, [r7, #0]
 8005f34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	b003      	add	sp, #12
 8005f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f42:	6161      	str	r1, [r4, #20]
 8005f44:	e7ea      	b.n	8005f1c <__d2b+0x58>
 8005f46:	a801      	add	r0, sp, #4
 8005f48:	f7ff fd59 	bl	80059fe <__lo0bits>
 8005f4c:	9b01      	ldr	r3, [sp, #4]
 8005f4e:	6163      	str	r3, [r4, #20]
 8005f50:	3020      	adds	r0, #32
 8005f52:	2201      	movs	r2, #1
 8005f54:	e7e8      	b.n	8005f28 <__d2b+0x64>
 8005f56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f5e:	6038      	str	r0, [r7, #0]
 8005f60:	6918      	ldr	r0, [r3, #16]
 8005f62:	f7ff fd2d 	bl	80059c0 <__hi0bits>
 8005f66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f6a:	e7e5      	b.n	8005f38 <__d2b+0x74>
 8005f6c:	0800678e 	.word	0x0800678e
 8005f70:	0800679f 	.word	0x0800679f

08005f74 <__sfputc_r>:
 8005f74:	6893      	ldr	r3, [r2, #8]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	b410      	push	{r4}
 8005f7c:	6093      	str	r3, [r2, #8]
 8005f7e:	da08      	bge.n	8005f92 <__sfputc_r+0x1e>
 8005f80:	6994      	ldr	r4, [r2, #24]
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	db01      	blt.n	8005f8a <__sfputc_r+0x16>
 8005f86:	290a      	cmp	r1, #10
 8005f88:	d103      	bne.n	8005f92 <__sfputc_r+0x1e>
 8005f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f8e:	f7fe bc0e 	b.w	80047ae <__swbuf_r>
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	1c58      	adds	r0, r3, #1
 8005f96:	6010      	str	r0, [r2, #0]
 8005f98:	7019      	strb	r1, [r3, #0]
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <__sfputs_r>:
 8005fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	460f      	mov	r7, r1
 8005fa8:	4614      	mov	r4, r2
 8005faa:	18d5      	adds	r5, r2, r3
 8005fac:	42ac      	cmp	r4, r5
 8005fae:	d101      	bne.n	8005fb4 <__sfputs_r+0x12>
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e007      	b.n	8005fc4 <__sfputs_r+0x22>
 8005fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7ff ffda 	bl	8005f74 <__sfputc_r>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d1f3      	bne.n	8005fac <__sfputs_r+0xa>
 8005fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fc8 <_vfiprintf_r>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	460d      	mov	r5, r1
 8005fce:	b09d      	sub	sp, #116	@ 0x74
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	4698      	mov	r8, r3
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	b118      	cbz	r0, 8005fe0 <_vfiprintf_r+0x18>
 8005fd8:	6a03      	ldr	r3, [r0, #32]
 8005fda:	b90b      	cbnz	r3, 8005fe0 <_vfiprintf_r+0x18>
 8005fdc:	f7fe fafe 	bl	80045dc <__sinit>
 8005fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fe2:	07d9      	lsls	r1, r3, #31
 8005fe4:	d405      	bmi.n	8005ff2 <_vfiprintf_r+0x2a>
 8005fe6:	89ab      	ldrh	r3, [r5, #12]
 8005fe8:	059a      	lsls	r2, r3, #22
 8005fea:	d402      	bmi.n	8005ff2 <_vfiprintf_r+0x2a>
 8005fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fee:	f7fe fcf0 	bl	80049d2 <__retarget_lock_acquire_recursive>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	071b      	lsls	r3, r3, #28
 8005ff6:	d501      	bpl.n	8005ffc <_vfiprintf_r+0x34>
 8005ff8:	692b      	ldr	r3, [r5, #16]
 8005ffa:	b99b      	cbnz	r3, 8006024 <_vfiprintf_r+0x5c>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7fe fc14 	bl	800482c <__swsetup_r>
 8006004:	b170      	cbz	r0, 8006024 <_vfiprintf_r+0x5c>
 8006006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006008:	07dc      	lsls	r4, r3, #31
 800600a:	d504      	bpl.n	8006016 <_vfiprintf_r+0x4e>
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	b01d      	add	sp, #116	@ 0x74
 8006012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006016:	89ab      	ldrh	r3, [r5, #12]
 8006018:	0598      	lsls	r0, r3, #22
 800601a:	d4f7      	bmi.n	800600c <_vfiprintf_r+0x44>
 800601c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800601e:	f7fe fcd9 	bl	80049d4 <__retarget_lock_release_recursive>
 8006022:	e7f3      	b.n	800600c <_vfiprintf_r+0x44>
 8006024:	2300      	movs	r3, #0
 8006026:	9309      	str	r3, [sp, #36]	@ 0x24
 8006028:	2320      	movs	r3, #32
 800602a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800602e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006032:	2330      	movs	r3, #48	@ 0x30
 8006034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061e4 <_vfiprintf_r+0x21c>
 8006038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800603c:	f04f 0901 	mov.w	r9, #1
 8006040:	4623      	mov	r3, r4
 8006042:	469a      	mov	sl, r3
 8006044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006048:	b10a      	cbz	r2, 800604e <_vfiprintf_r+0x86>
 800604a:	2a25      	cmp	r2, #37	@ 0x25
 800604c:	d1f9      	bne.n	8006042 <_vfiprintf_r+0x7a>
 800604e:	ebba 0b04 	subs.w	fp, sl, r4
 8006052:	d00b      	beq.n	800606c <_vfiprintf_r+0xa4>
 8006054:	465b      	mov	r3, fp
 8006056:	4622      	mov	r2, r4
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f7ff ffa1 	bl	8005fa2 <__sfputs_r>
 8006060:	3001      	adds	r0, #1
 8006062:	f000 80a7 	beq.w	80061b4 <_vfiprintf_r+0x1ec>
 8006066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006068:	445a      	add	r2, fp
 800606a:	9209      	str	r2, [sp, #36]	@ 0x24
 800606c:	f89a 3000 	ldrb.w	r3, [sl]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 809f 	beq.w	80061b4 <_vfiprintf_r+0x1ec>
 8006076:	2300      	movs	r3, #0
 8006078:	f04f 32ff 	mov.w	r2, #4294967295
 800607c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006080:	f10a 0a01 	add.w	sl, sl, #1
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	9307      	str	r3, [sp, #28]
 8006088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800608c:	931a      	str	r3, [sp, #104]	@ 0x68
 800608e:	4654      	mov	r4, sl
 8006090:	2205      	movs	r2, #5
 8006092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006096:	4853      	ldr	r0, [pc, #332]	@ (80061e4 <_vfiprintf_r+0x21c>)
 8006098:	f7fa f8a2 	bl	80001e0 <memchr>
 800609c:	9a04      	ldr	r2, [sp, #16]
 800609e:	b9d8      	cbnz	r0, 80060d8 <_vfiprintf_r+0x110>
 80060a0:	06d1      	lsls	r1, r2, #27
 80060a2:	bf44      	itt	mi
 80060a4:	2320      	movmi	r3, #32
 80060a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060aa:	0713      	lsls	r3, r2, #28
 80060ac:	bf44      	itt	mi
 80060ae:	232b      	movmi	r3, #43	@ 0x2b
 80060b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060b4:	f89a 3000 	ldrb.w	r3, [sl]
 80060b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060ba:	d015      	beq.n	80060e8 <_vfiprintf_r+0x120>
 80060bc:	9a07      	ldr	r2, [sp, #28]
 80060be:	4654      	mov	r4, sl
 80060c0:	2000      	movs	r0, #0
 80060c2:	f04f 0c0a 	mov.w	ip, #10
 80060c6:	4621      	mov	r1, r4
 80060c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060cc:	3b30      	subs	r3, #48	@ 0x30
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	d94b      	bls.n	800616a <_vfiprintf_r+0x1a2>
 80060d2:	b1b0      	cbz	r0, 8006102 <_vfiprintf_r+0x13a>
 80060d4:	9207      	str	r2, [sp, #28]
 80060d6:	e014      	b.n	8006102 <_vfiprintf_r+0x13a>
 80060d8:	eba0 0308 	sub.w	r3, r0, r8
 80060dc:	fa09 f303 	lsl.w	r3, r9, r3
 80060e0:	4313      	orrs	r3, r2
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	46a2      	mov	sl, r4
 80060e6:	e7d2      	b.n	800608e <_vfiprintf_r+0xc6>
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	1d19      	adds	r1, r3, #4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	9103      	str	r1, [sp, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bfbb      	ittet	lt
 80060f4:	425b      	neglt	r3, r3
 80060f6:	f042 0202 	orrlt.w	r2, r2, #2
 80060fa:	9307      	strge	r3, [sp, #28]
 80060fc:	9307      	strlt	r3, [sp, #28]
 80060fe:	bfb8      	it	lt
 8006100:	9204      	strlt	r2, [sp, #16]
 8006102:	7823      	ldrb	r3, [r4, #0]
 8006104:	2b2e      	cmp	r3, #46	@ 0x2e
 8006106:	d10a      	bne.n	800611e <_vfiprintf_r+0x156>
 8006108:	7863      	ldrb	r3, [r4, #1]
 800610a:	2b2a      	cmp	r3, #42	@ 0x2a
 800610c:	d132      	bne.n	8006174 <_vfiprintf_r+0x1ac>
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	1d1a      	adds	r2, r3, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	9203      	str	r2, [sp, #12]
 8006116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800611a:	3402      	adds	r4, #2
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061f4 <_vfiprintf_r+0x22c>
 8006122:	7821      	ldrb	r1, [r4, #0]
 8006124:	2203      	movs	r2, #3
 8006126:	4650      	mov	r0, sl
 8006128:	f7fa f85a 	bl	80001e0 <memchr>
 800612c:	b138      	cbz	r0, 800613e <_vfiprintf_r+0x176>
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	eba0 000a 	sub.w	r0, r0, sl
 8006134:	2240      	movs	r2, #64	@ 0x40
 8006136:	4082      	lsls	r2, r0
 8006138:	4313      	orrs	r3, r2
 800613a:	3401      	adds	r4, #1
 800613c:	9304      	str	r3, [sp, #16]
 800613e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006142:	4829      	ldr	r0, [pc, #164]	@ (80061e8 <_vfiprintf_r+0x220>)
 8006144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006148:	2206      	movs	r2, #6
 800614a:	f7fa f849 	bl	80001e0 <memchr>
 800614e:	2800      	cmp	r0, #0
 8006150:	d03f      	beq.n	80061d2 <_vfiprintf_r+0x20a>
 8006152:	4b26      	ldr	r3, [pc, #152]	@ (80061ec <_vfiprintf_r+0x224>)
 8006154:	bb1b      	cbnz	r3, 800619e <_vfiprintf_r+0x1d6>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	3307      	adds	r3, #7
 800615a:	f023 0307 	bic.w	r3, r3, #7
 800615e:	3308      	adds	r3, #8
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006164:	443b      	add	r3, r7
 8006166:	9309      	str	r3, [sp, #36]	@ 0x24
 8006168:	e76a      	b.n	8006040 <_vfiprintf_r+0x78>
 800616a:	fb0c 3202 	mla	r2, ip, r2, r3
 800616e:	460c      	mov	r4, r1
 8006170:	2001      	movs	r0, #1
 8006172:	e7a8      	b.n	80060c6 <_vfiprintf_r+0xfe>
 8006174:	2300      	movs	r3, #0
 8006176:	3401      	adds	r4, #1
 8006178:	9305      	str	r3, [sp, #20]
 800617a:	4619      	mov	r1, r3
 800617c:	f04f 0c0a 	mov.w	ip, #10
 8006180:	4620      	mov	r0, r4
 8006182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006186:	3a30      	subs	r2, #48	@ 0x30
 8006188:	2a09      	cmp	r2, #9
 800618a:	d903      	bls.n	8006194 <_vfiprintf_r+0x1cc>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0c6      	beq.n	800611e <_vfiprintf_r+0x156>
 8006190:	9105      	str	r1, [sp, #20]
 8006192:	e7c4      	b.n	800611e <_vfiprintf_r+0x156>
 8006194:	fb0c 2101 	mla	r1, ip, r1, r2
 8006198:	4604      	mov	r4, r0
 800619a:	2301      	movs	r3, #1
 800619c:	e7f0      	b.n	8006180 <_vfiprintf_r+0x1b8>
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	462a      	mov	r2, r5
 80061a4:	4b12      	ldr	r3, [pc, #72]	@ (80061f0 <_vfiprintf_r+0x228>)
 80061a6:	a904      	add	r1, sp, #16
 80061a8:	4630      	mov	r0, r6
 80061aa:	f7fd fdd3 	bl	8003d54 <_printf_float>
 80061ae:	4607      	mov	r7, r0
 80061b0:	1c78      	adds	r0, r7, #1
 80061b2:	d1d6      	bne.n	8006162 <_vfiprintf_r+0x19a>
 80061b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	d405      	bmi.n	80061c6 <_vfiprintf_r+0x1fe>
 80061ba:	89ab      	ldrh	r3, [r5, #12]
 80061bc:	059a      	lsls	r2, r3, #22
 80061be:	d402      	bmi.n	80061c6 <_vfiprintf_r+0x1fe>
 80061c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061c2:	f7fe fc07 	bl	80049d4 <__retarget_lock_release_recursive>
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	065b      	lsls	r3, r3, #25
 80061ca:	f53f af1f 	bmi.w	800600c <_vfiprintf_r+0x44>
 80061ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061d0:	e71e      	b.n	8006010 <_vfiprintf_r+0x48>
 80061d2:	ab03      	add	r3, sp, #12
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	462a      	mov	r2, r5
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <_vfiprintf_r+0x228>)
 80061da:	a904      	add	r1, sp, #16
 80061dc:	4630      	mov	r0, r6
 80061de:	f7fe f851 	bl	8004284 <_printf_i>
 80061e2:	e7e4      	b.n	80061ae <_vfiprintf_r+0x1e6>
 80061e4:	080068f8 	.word	0x080068f8
 80061e8:	08006902 	.word	0x08006902
 80061ec:	08003d55 	.word	0x08003d55
 80061f0:	08005fa3 	.word	0x08005fa3
 80061f4:	080068fe 	.word	0x080068fe

080061f8 <__sflush_r>:
 80061f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006200:	0716      	lsls	r6, r2, #28
 8006202:	4605      	mov	r5, r0
 8006204:	460c      	mov	r4, r1
 8006206:	d454      	bmi.n	80062b2 <__sflush_r+0xba>
 8006208:	684b      	ldr	r3, [r1, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	dc02      	bgt.n	8006214 <__sflush_r+0x1c>
 800620e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	dd48      	ble.n	80062a6 <__sflush_r+0xae>
 8006214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006216:	2e00      	cmp	r6, #0
 8006218:	d045      	beq.n	80062a6 <__sflush_r+0xae>
 800621a:	2300      	movs	r3, #0
 800621c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006220:	682f      	ldr	r7, [r5, #0]
 8006222:	6a21      	ldr	r1, [r4, #32]
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	d030      	beq.n	800628a <__sflush_r+0x92>
 8006228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	0759      	lsls	r1, r3, #29
 800622e:	d505      	bpl.n	800623c <__sflush_r+0x44>
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006236:	b10b      	cbz	r3, 800623c <__sflush_r+0x44>
 8006238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006240:	6a21      	ldr	r1, [r4, #32]
 8006242:	4628      	mov	r0, r5
 8006244:	47b0      	blx	r6
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	d106      	bne.n	800625a <__sflush_r+0x62>
 800624c:	6829      	ldr	r1, [r5, #0]
 800624e:	291d      	cmp	r1, #29
 8006250:	d82b      	bhi.n	80062aa <__sflush_r+0xb2>
 8006252:	4a2a      	ldr	r2, [pc, #168]	@ (80062fc <__sflush_r+0x104>)
 8006254:	410a      	asrs	r2, r1
 8006256:	07d6      	lsls	r6, r2, #31
 8006258:	d427      	bmi.n	80062aa <__sflush_r+0xb2>
 800625a:	2200      	movs	r2, #0
 800625c:	6062      	str	r2, [r4, #4]
 800625e:	04d9      	lsls	r1, r3, #19
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	6022      	str	r2, [r4, #0]
 8006264:	d504      	bpl.n	8006270 <__sflush_r+0x78>
 8006266:	1c42      	adds	r2, r0, #1
 8006268:	d101      	bne.n	800626e <__sflush_r+0x76>
 800626a:	682b      	ldr	r3, [r5, #0]
 800626c:	b903      	cbnz	r3, 8006270 <__sflush_r+0x78>
 800626e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006272:	602f      	str	r7, [r5, #0]
 8006274:	b1b9      	cbz	r1, 80062a6 <__sflush_r+0xae>
 8006276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800627a:	4299      	cmp	r1, r3
 800627c:	d002      	beq.n	8006284 <__sflush_r+0x8c>
 800627e:	4628      	mov	r0, r5
 8006280:	f7ff f9f6 	bl	8005670 <_free_r>
 8006284:	2300      	movs	r3, #0
 8006286:	6363      	str	r3, [r4, #52]	@ 0x34
 8006288:	e00d      	b.n	80062a6 <__sflush_r+0xae>
 800628a:	2301      	movs	r3, #1
 800628c:	4628      	mov	r0, r5
 800628e:	47b0      	blx	r6
 8006290:	4602      	mov	r2, r0
 8006292:	1c50      	adds	r0, r2, #1
 8006294:	d1c9      	bne.n	800622a <__sflush_r+0x32>
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0c6      	beq.n	800622a <__sflush_r+0x32>
 800629c:	2b1d      	cmp	r3, #29
 800629e:	d001      	beq.n	80062a4 <__sflush_r+0xac>
 80062a0:	2b16      	cmp	r3, #22
 80062a2:	d11e      	bne.n	80062e2 <__sflush_r+0xea>
 80062a4:	602f      	str	r7, [r5, #0]
 80062a6:	2000      	movs	r0, #0
 80062a8:	e022      	b.n	80062f0 <__sflush_r+0xf8>
 80062aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	e01b      	b.n	80062ea <__sflush_r+0xf2>
 80062b2:	690f      	ldr	r7, [r1, #16]
 80062b4:	2f00      	cmp	r7, #0
 80062b6:	d0f6      	beq.n	80062a6 <__sflush_r+0xae>
 80062b8:	0793      	lsls	r3, r2, #30
 80062ba:	680e      	ldr	r6, [r1, #0]
 80062bc:	bf08      	it	eq
 80062be:	694b      	ldreq	r3, [r1, #20]
 80062c0:	600f      	str	r7, [r1, #0]
 80062c2:	bf18      	it	ne
 80062c4:	2300      	movne	r3, #0
 80062c6:	eba6 0807 	sub.w	r8, r6, r7
 80062ca:	608b      	str	r3, [r1, #8]
 80062cc:	f1b8 0f00 	cmp.w	r8, #0
 80062d0:	dde9      	ble.n	80062a6 <__sflush_r+0xae>
 80062d2:	6a21      	ldr	r1, [r4, #32]
 80062d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062d6:	4643      	mov	r3, r8
 80062d8:	463a      	mov	r2, r7
 80062da:	4628      	mov	r0, r5
 80062dc:	47b0      	blx	r6
 80062de:	2800      	cmp	r0, #0
 80062e0:	dc08      	bgt.n	80062f4 <__sflush_r+0xfc>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f4:	4407      	add	r7, r0
 80062f6:	eba8 0800 	sub.w	r8, r8, r0
 80062fa:	e7e7      	b.n	80062cc <__sflush_r+0xd4>
 80062fc:	dfbffffe 	.word	0xdfbffffe

08006300 <_fflush_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	690b      	ldr	r3, [r1, #16]
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b913      	cbnz	r3, 8006310 <_fflush_r+0x10>
 800630a:	2500      	movs	r5, #0
 800630c:	4628      	mov	r0, r5
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	b118      	cbz	r0, 800631a <_fflush_r+0x1a>
 8006312:	6a03      	ldr	r3, [r0, #32]
 8006314:	b90b      	cbnz	r3, 800631a <_fflush_r+0x1a>
 8006316:	f7fe f961 	bl	80045dc <__sinit>
 800631a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0f3      	beq.n	800630a <_fflush_r+0xa>
 8006322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006324:	07d0      	lsls	r0, r2, #31
 8006326:	d404      	bmi.n	8006332 <_fflush_r+0x32>
 8006328:	0599      	lsls	r1, r3, #22
 800632a:	d402      	bmi.n	8006332 <_fflush_r+0x32>
 800632c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800632e:	f7fe fb50 	bl	80049d2 <__retarget_lock_acquire_recursive>
 8006332:	4628      	mov	r0, r5
 8006334:	4621      	mov	r1, r4
 8006336:	f7ff ff5f 	bl	80061f8 <__sflush_r>
 800633a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800633c:	07da      	lsls	r2, r3, #31
 800633e:	4605      	mov	r5, r0
 8006340:	d4e4      	bmi.n	800630c <_fflush_r+0xc>
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	059b      	lsls	r3, r3, #22
 8006346:	d4e1      	bmi.n	800630c <_fflush_r+0xc>
 8006348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800634a:	f7fe fb43 	bl	80049d4 <__retarget_lock_release_recursive>
 800634e:	e7dd      	b.n	800630c <_fflush_r+0xc>

08006350 <__swhatbuf_r>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	2900      	cmp	r1, #0
 800635a:	b096      	sub	sp, #88	@ 0x58
 800635c:	4615      	mov	r5, r2
 800635e:	461e      	mov	r6, r3
 8006360:	da0d      	bge.n	800637e <__swhatbuf_r+0x2e>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	bf14      	ite	ne
 800636e:	2340      	movne	r3, #64	@ 0x40
 8006370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006374:	2000      	movs	r0, #0
 8006376:	6031      	str	r1, [r6, #0]
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	b016      	add	sp, #88	@ 0x58
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	466a      	mov	r2, sp
 8006380:	f000 f848 	bl	8006414 <_fstat_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	dbec      	blt.n	8006362 <__swhatbuf_r+0x12>
 8006388:	9901      	ldr	r1, [sp, #4]
 800638a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800638e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006392:	4259      	negs	r1, r3
 8006394:	4159      	adcs	r1, r3
 8006396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800639a:	e7eb      	b.n	8006374 <__swhatbuf_r+0x24>

0800639c <__smakebuf_r>:
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a0:	079d      	lsls	r5, r3, #30
 80063a2:	4606      	mov	r6, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	d507      	bpl.n	80063b8 <__smakebuf_r+0x1c>
 80063a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	2301      	movs	r3, #1
 80063b2:	6163      	str	r3, [r4, #20]
 80063b4:	b003      	add	sp, #12
 80063b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b8:	ab01      	add	r3, sp, #4
 80063ba:	466a      	mov	r2, sp
 80063bc:	f7ff ffc8 	bl	8006350 <__swhatbuf_r>
 80063c0:	9f00      	ldr	r7, [sp, #0]
 80063c2:	4605      	mov	r5, r0
 80063c4:	4639      	mov	r1, r7
 80063c6:	4630      	mov	r0, r6
 80063c8:	f7ff f9c6 	bl	8005758 <_malloc_r>
 80063cc:	b948      	cbnz	r0, 80063e2 <__smakebuf_r+0x46>
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	059a      	lsls	r2, r3, #22
 80063d4:	d4ee      	bmi.n	80063b4 <__smakebuf_r+0x18>
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	f043 0302 	orr.w	r3, r3, #2
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	e7e2      	b.n	80063a8 <__smakebuf_r+0xc>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	6020      	str	r0, [r4, #0]
 80063e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x70>
 80063f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f81d 	bl	8006438 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x70>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	431d      	orrs	r5, r3
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cf      	b.n	80063b4 <__smakebuf_r+0x18>

08006414 <_fstat_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d07      	ldr	r5, [pc, #28]	@ (8006434 <_fstat_r+0x20>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f7fd fa78 	bl	8003916 <_fstat>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_fstat_r+0x1c>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b103      	cbz	r3, 8006430 <_fstat_r+0x1c>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	2000043c 	.word	0x2000043c

08006438 <_isatty_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d06      	ldr	r5, [pc, #24]	@ (8006454 <_isatty_r+0x1c>)
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	f7fd fbca 	bl	8003bdc <_isatty>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_isatty_r+0x1a>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_isatty_r+0x1a>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	2000043c 	.word	0x2000043c

08006458 <_sbrk_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	4d06      	ldr	r5, [pc, #24]	@ (8006474 <_sbrk_r+0x1c>)
 800645c:	2300      	movs	r3, #0
 800645e:	4604      	mov	r4, r0
 8006460:	4608      	mov	r0, r1
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	f7fb f930 	bl	80016c8 <_sbrk>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_sbrk_r+0x1a>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	b103      	cbz	r3, 8006472 <_sbrk_r+0x1a>
 8006470:	6023      	str	r3, [r4, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	2000043c 	.word	0x2000043c

08006478 <memcpy>:
 8006478:	440a      	add	r2, r1
 800647a:	4291      	cmp	r1, r2
 800647c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006480:	d100      	bne.n	8006484 <memcpy+0xc>
 8006482:	4770      	bx	lr
 8006484:	b510      	push	{r4, lr}
 8006486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800648e:	4291      	cmp	r1, r2
 8006490:	d1f9      	bne.n	8006486 <memcpy+0xe>
 8006492:	bd10      	pop	{r4, pc}

08006494 <__assert_func>:
 8006494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006496:	4614      	mov	r4, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <__assert_func+0x2c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4605      	mov	r5, r0
 80064a0:	68d8      	ldr	r0, [r3, #12]
 80064a2:	b954      	cbnz	r4, 80064ba <__assert_func+0x26>
 80064a4:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <__assert_func+0x30>)
 80064a6:	461c      	mov	r4, r3
 80064a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064ac:	9100      	str	r1, [sp, #0]
 80064ae:	462b      	mov	r3, r5
 80064b0:	4905      	ldr	r1, [pc, #20]	@ (80064c8 <__assert_func+0x34>)
 80064b2:	f000 f841 	bl	8006538 <fiprintf>
 80064b6:	f000 f851 	bl	800655c <abort>
 80064ba:	4b04      	ldr	r3, [pc, #16]	@ (80064cc <__assert_func+0x38>)
 80064bc:	e7f4      	b.n	80064a8 <__assert_func+0x14>
 80064be:	bf00      	nop
 80064c0:	20000020 	.word	0x20000020
 80064c4:	0800694e 	.word	0x0800694e
 80064c8:	08006920 	.word	0x08006920
 80064cc:	08006913 	.word	0x08006913

080064d0 <_calloc_r>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	fba1 5402 	umull	r5, r4, r1, r2
 80064d6:	b93c      	cbnz	r4, 80064e8 <_calloc_r+0x18>
 80064d8:	4629      	mov	r1, r5
 80064da:	f7ff f93d 	bl	8005758 <_malloc_r>
 80064de:	4606      	mov	r6, r0
 80064e0:	b928      	cbnz	r0, 80064ee <_calloc_r+0x1e>
 80064e2:	2600      	movs	r6, #0
 80064e4:	4630      	mov	r0, r6
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	220c      	movs	r2, #12
 80064ea:	6002      	str	r2, [r0, #0]
 80064ec:	e7f9      	b.n	80064e2 <_calloc_r+0x12>
 80064ee:	462a      	mov	r2, r5
 80064f0:	4621      	mov	r1, r4
 80064f2:	f7fe f9f1 	bl	80048d8 <memset>
 80064f6:	e7f5      	b.n	80064e4 <_calloc_r+0x14>

080064f8 <__ascii_mbtowc>:
 80064f8:	b082      	sub	sp, #8
 80064fa:	b901      	cbnz	r1, 80064fe <__ascii_mbtowc+0x6>
 80064fc:	a901      	add	r1, sp, #4
 80064fe:	b142      	cbz	r2, 8006512 <__ascii_mbtowc+0x1a>
 8006500:	b14b      	cbz	r3, 8006516 <__ascii_mbtowc+0x1e>
 8006502:	7813      	ldrb	r3, [r2, #0]
 8006504:	600b      	str	r3, [r1, #0]
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	1e10      	subs	r0, r2, #0
 800650a:	bf18      	it	ne
 800650c:	2001      	movne	r0, #1
 800650e:	b002      	add	sp, #8
 8006510:	4770      	bx	lr
 8006512:	4610      	mov	r0, r2
 8006514:	e7fb      	b.n	800650e <__ascii_mbtowc+0x16>
 8006516:	f06f 0001 	mvn.w	r0, #1
 800651a:	e7f8      	b.n	800650e <__ascii_mbtowc+0x16>

0800651c <__ascii_wctomb>:
 800651c:	4603      	mov	r3, r0
 800651e:	4608      	mov	r0, r1
 8006520:	b141      	cbz	r1, 8006534 <__ascii_wctomb+0x18>
 8006522:	2aff      	cmp	r2, #255	@ 0xff
 8006524:	d904      	bls.n	8006530 <__ascii_wctomb+0x14>
 8006526:	228a      	movs	r2, #138	@ 0x8a
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	4770      	bx	lr
 8006530:	700a      	strb	r2, [r1, #0]
 8006532:	2001      	movs	r0, #1
 8006534:	4770      	bx	lr
	...

08006538 <fiprintf>:
 8006538:	b40e      	push	{r1, r2, r3}
 800653a:	b503      	push	{r0, r1, lr}
 800653c:	4601      	mov	r1, r0
 800653e:	ab03      	add	r3, sp, #12
 8006540:	4805      	ldr	r0, [pc, #20]	@ (8006558 <fiprintf+0x20>)
 8006542:	f853 2b04 	ldr.w	r2, [r3], #4
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	f7ff fd3d 	bl	8005fc8 <_vfiprintf_r>
 800654e:	b002      	add	sp, #8
 8006550:	f85d eb04 	ldr.w	lr, [sp], #4
 8006554:	b003      	add	sp, #12
 8006556:	4770      	bx	lr
 8006558:	20000020 	.word	0x20000020

0800655c <abort>:
 800655c:	b508      	push	{r3, lr}
 800655e:	2006      	movs	r0, #6
 8006560:	f000 f82c 	bl	80065bc <raise>
 8006564:	2001      	movs	r0, #1
 8006566:	f000 f84d 	bl	8006604 <_exit>

0800656a <_raise_r>:
 800656a:	291f      	cmp	r1, #31
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4605      	mov	r5, r0
 8006570:	460c      	mov	r4, r1
 8006572:	d904      	bls.n	800657e <_raise_r+0x14>
 8006574:	2316      	movs	r3, #22
 8006576:	6003      	str	r3, [r0, #0]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006580:	b112      	cbz	r2, 8006588 <_raise_r+0x1e>
 8006582:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006586:	b94b      	cbnz	r3, 800659c <_raise_r+0x32>
 8006588:	4628      	mov	r0, r5
 800658a:	f000 f831 	bl	80065f0 <_getpid_r>
 800658e:	4622      	mov	r2, r4
 8006590:	4601      	mov	r1, r0
 8006592:	4628      	mov	r0, r5
 8006594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006598:	f000 b818 	b.w	80065cc <_kill_r>
 800659c:	2b01      	cmp	r3, #1
 800659e:	d00a      	beq.n	80065b6 <_raise_r+0x4c>
 80065a0:	1c59      	adds	r1, r3, #1
 80065a2:	d103      	bne.n	80065ac <_raise_r+0x42>
 80065a4:	2316      	movs	r3, #22
 80065a6:	6003      	str	r3, [r0, #0]
 80065a8:	2001      	movs	r0, #1
 80065aa:	e7e7      	b.n	800657c <_raise_r+0x12>
 80065ac:	2100      	movs	r1, #0
 80065ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065b2:	4620      	mov	r0, r4
 80065b4:	4798      	blx	r3
 80065b6:	2000      	movs	r0, #0
 80065b8:	e7e0      	b.n	800657c <_raise_r+0x12>
	...

080065bc <raise>:
 80065bc:	4b02      	ldr	r3, [pc, #8]	@ (80065c8 <raise+0xc>)
 80065be:	4601      	mov	r1, r0
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f7ff bfd2 	b.w	800656a <_raise_r>
 80065c6:	bf00      	nop
 80065c8:	20000020 	.word	0x20000020

080065cc <_kill_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	@ (80065ec <_kill_r+0x20>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	4611      	mov	r1, r2
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	f000 f80b 	bl	80065f4 <_kill>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	d102      	bne.n	80065e8 <_kill_r+0x1c>
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	b103      	cbz	r3, 80065e8 <_kill_r+0x1c>
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	bd38      	pop	{r3, r4, r5, pc}
 80065ea:	bf00      	nop
 80065ec:	2000043c 	.word	0x2000043c

080065f0 <_getpid_r>:
 80065f0:	f7fd b96e 	b.w	80038d0 <_getpid>

080065f4 <_kill>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	@ (8006600 <_kill+0xc>)
 80065f6:	2258      	movs	r2, #88	@ 0x58
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f04f 30ff 	mov.w	r0, #4294967295
 80065fe:	4770      	bx	lr
 8006600:	2000043c 	.word	0x2000043c

08006604 <_exit>:
 8006604:	e7fe      	b.n	8006604 <_exit>
	...

08006608 <_init>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr

08006614 <_fini>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr
