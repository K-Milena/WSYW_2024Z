
cw3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e90  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08006030  08006030  00007030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006450  08006450  000081dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006450  08006450  00007450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006458  08006458  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006458  08006458  00007458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006460  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001dc  0800663c  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800663c  00008450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059f2  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000133f  00000000  00000000  0000dbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047a  00000000  00000000  0000f550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159a4  00000000  00000000  0000f9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e9e  00000000  00000000  0002536e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d60  00000000  00000000  0002c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000b1fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b4b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006018 	.word	0x08006018

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006018 	.word	0x08006018

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000eae:	f002 fb3b 	bl	8003528 <initialise_monitor_handles>
	printf("Hello World!\n");
 8000eb2:	485e      	ldr	r0, [pc, #376]	@ (800102c <main+0x184>)
 8000eb4:	f003 f936 	bl	8004124 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 fbcc 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f8c4 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 f962 	bl	8001188 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ec4:	f000 f92a 	bl	800111c <MX_SPI1_Init>


  uint8_t spi_receive_buf[6];
   uint8_t spi_transmit_buf[6];

   uint8_t WHO_AM_I_reg = 0x0F;
 8000ec8:	230f      	movs	r3, #15
 8000eca:	75fb      	strb	r3, [r7, #23]
   WHO_AM_I_reg = 0b00001111;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	75fb      	strb	r3, [r7, #23]

   uint8_t READ = 0x01 << 7;
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	75bb      	strb	r3, [r7, #22]
   uint8_t WRITE = 0x00 << 7;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	757b      	strb	r3, [r7, #21]

   spi_transmit_buf[0] = WHO_AM_I_reg | READ;
 8000ed8:	7dfa      	ldrb	r2, [r7, #23]
 8000eda:	7dbb      	ldrb	r3, [r7, #22]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	703b      	strb	r3, [r7, #0]


 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4852      	ldr	r0, [pc, #328]	@ (8001030 <main+0x188>)
 8000ee8:	f000 feb4 	bl	8001c54 <HAL_GPIO_WritePin>
 	HAL_SPI_Transmit(&hspi1, spi_transmit_buf, 1, 50);
 8000eec:	4639      	mov	r1, r7
 8000eee:	2332      	movs	r3, #50	@ 0x32
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4850      	ldr	r0, [pc, #320]	@ (8001034 <main+0x18c>)
 8000ef4:	f001 fbb5 	bl	8002662 <HAL_SPI_Transmit>
 	HAL_SPI_Receive(&hspi1, spi_receive_buf, 1, 50);
 8000ef8:	f107 0108 	add.w	r1, r7, #8
 8000efc:	2332      	movs	r3, #50	@ 0x32
 8000efe:	2201      	movs	r2, #1
 8000f00:	484c      	ldr	r0, [pc, #304]	@ (8001034 <main+0x18c>)
 8000f02:	f001 fcf2 	bl	80028ea <HAL_SPI_Receive>
 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4849      	ldr	r0, [pc, #292]	@ (8001030 <main+0x188>)
 8000f0c:	f000 fea2 	bl	8001c54 <HAL_GPIO_WritePin>

 	printf("Expected 0x%02X , receiver: 0x%02X\n", 0b11010011, spi_receive_buf[0]);
 8000f10:	7a3b      	ldrb	r3, [r7, #8]
 8000f12:	461a      	mov	r2, r3
 8000f14:	21d3      	movs	r1, #211	@ 0xd3
 8000f16:	4848      	ldr	r0, [pc, #288]	@ (8001038 <main+0x190>)
 8000f18:	f003 f89c 	bl	8004054 <iprintf>


 	//Odczyt rejestru przed zapisem
 	uint8_t CTRL_REG1_reg = 0x20;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	753b      	strb	r3, [r7, #20]

 	spi_transmit_buf[0] = CTRL_REG1_reg | READ;
 8000f20:	7d3a      	ldrb	r2, [r7, #20]
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	703b      	strb	r3, [r7, #0]

 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	4840      	ldr	r0, [pc, #256]	@ (8001030 <main+0x188>)
 8000f30:	f000 fe90 	bl	8001c54 <HAL_GPIO_WritePin>
 	HAL_SPI_Transmit(&hspi1, spi_transmit_buf, 1, 50);
 8000f34:	4639      	mov	r1, r7
 8000f36:	2332      	movs	r3, #50	@ 0x32
 8000f38:	2201      	movs	r2, #1
 8000f3a:	483e      	ldr	r0, [pc, #248]	@ (8001034 <main+0x18c>)
 8000f3c:	f001 fb91 	bl	8002662 <HAL_SPI_Transmit>
 	HAL_SPI_Receive(&hspi1, spi_receive_buf, 1, 50);
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	2332      	movs	r3, #50	@ 0x32
 8000f46:	2201      	movs	r2, #1
 8000f48:	483a      	ldr	r0, [pc, #232]	@ (8001034 <main+0x18c>)
 8000f4a:	f001 fcce 	bl	80028ea <HAL_SPI_Receive>
 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2108      	movs	r1, #8
 8000f52:	4837      	ldr	r0, [pc, #220]	@ (8001030 <main+0x188>)
 8000f54:	f000 fe7e 	bl	8001c54 <HAL_GPIO_WritePin>

 	printf("CTRL_REG1 przed zapisem: 0x%02X\n", spi_receive_buf[0]);
 8000f58:	7a3b      	ldrb	r3, [r7, #8]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4837      	ldr	r0, [pc, #220]	@ (800103c <main+0x194>)
 8000f5e:	f003 f879 	bl	8004054 <iprintf>

 	//Zapis do rejestru

 	enum CTRL_REG1_BITS {XEN, YEN, ZEN, PD, BWO, BW1, DR0, DR1};
 	//spi_transmit_buf[0] = CTRL_REG1_reg | WRITE;
 	spi_transmit_buf[0] = CTRL_REG1_reg;
 8000f62:	7d3b      	ldrb	r3, [r7, #20]
 8000f64:	703b      	strb	r3, [r7, #0]
 	spi_transmit_buf[1] = 0 <<XEN|0 << YEN|0 << ZEN|1 << PD|0 << BWO|0 << BW1|0 << DR0|0 << DR1;
 8000f66:	2308      	movs	r3, #8
 8000f68:	707b      	strb	r3, [r7, #1]

 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4830      	ldr	r0, [pc, #192]	@ (8001030 <main+0x188>)
 8000f70:	f000 fe70 	bl	8001c54 <HAL_GPIO_WritePin>
 	HAL_SPI_Transmit(&hspi1, spi_transmit_buf, 2, 50);
 8000f74:	4639      	mov	r1, r7
 8000f76:	2332      	movs	r3, #50	@ 0x32
 8000f78:	2202      	movs	r2, #2
 8000f7a:	482e      	ldr	r0, [pc, #184]	@ (8001034 <main+0x18c>)
 8000f7c:	f001 fb71 	bl	8002662 <HAL_SPI_Transmit>
 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2108      	movs	r1, #8
 8000f84:	482a      	ldr	r0, [pc, #168]	@ (8001030 <main+0x188>)
 8000f86:	f000 fe65 	bl	8001c54 <HAL_GPIO_WritePin>


 	//Odczyt do rejestru po zapisie

 	spi_transmit_buf[0] = CTRL_REG1_reg | READ;
 8000f8a:	7d3a      	ldrb	r2, [r7, #20]
 8000f8c:	7dbb      	ldrb	r3, [r7, #22]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	703b      	strb	r3, [r7, #0]

 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	4825      	ldr	r0, [pc, #148]	@ (8001030 <main+0x188>)
 8000f9a:	f000 fe5b 	bl	8001c54 <HAL_GPIO_WritePin>
 	HAL_SPI_Transmit(&hspi1, spi_transmit_buf, 1, 50);
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	2332      	movs	r3, #50	@ 0x32
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4823      	ldr	r0, [pc, #140]	@ (8001034 <main+0x18c>)
 8000fa6:	f001 fb5c 	bl	8002662 <HAL_SPI_Transmit>
 	//
 	HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	@ 0x64
 8000fac:	f000 fbc4 	bl	8001738 <HAL_Delay>
 	HAL_SPI_Receive(&hspi1, spi_receive_buf, 1, 50);
 8000fb0:	f107 0108 	add.w	r1, r7, #8
 8000fb4:	2332      	movs	r3, #50	@ 0x32
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	481e      	ldr	r0, [pc, #120]	@ (8001034 <main+0x18c>)
 8000fba:	f001 fc96 	bl	80028ea <HAL_SPI_Receive>
 	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	481b      	ldr	r0, [pc, #108]	@ (8001030 <main+0x188>)
 8000fc4:	f000 fe46 	bl	8001c54 <HAL_GPIO_WritePin>

 	printf("CTRL_REG1 po zapisie: 0x%02X\n", spi_receive_buf[0]);
 8000fc8:	7a3b      	ldrb	r3, [r7, #8]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481c      	ldr	r0, [pc, #112]	@ (8001040 <main+0x198>)
 8000fce:	f003 f841 	bl	8004054 <iprintf>

 	uint8_t OUT_TEMP= 0x26;
 8000fd2:	2326      	movs	r3, #38	@ 0x26
 8000fd4:	74fb      	strb	r3, [r7, #19]

 	uint8_t AUTO_INCREMENT_ADDR = 0x01 << 6;
 8000fd6:	2340      	movs	r3, #64	@ 0x40
 8000fd8:	74bb      	strb	r3, [r7, #18]

 	//spi_transmit_buf[0] = OUT_TEMP| READ |AUTO_INCREMENT_ADDR;
 	spi_transmit_buf[0] = OUT_TEMP| READ;
 8000fda:	7cfa      	ldrb	r2, [r7, #19]
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	703b      	strb	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4811      	ldr	r0, [pc, #68]	@ (8001030 <main+0x188>)
 8000fea:	f000 fe33 	bl	8001c54 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spi_transmit_buf, 1, 50);
 8000fee:	4639      	mov	r1, r7
 8000ff0:	2332      	movs	r3, #50	@ 0x32
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	480f      	ldr	r0, [pc, #60]	@ (8001034 <main+0x18c>)
 8000ff6:	f001 fb34 	bl	8002662 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, spi_receive_buf, 6, 50);
 8000ffa:	f107 0108 	add.w	r1, r7, #8
 8000ffe:	2332      	movs	r3, #50	@ 0x32
 8001000:	2206      	movs	r2, #6
 8001002:	480c      	ldr	r0, [pc, #48]	@ (8001034 <main+0x18c>)
 8001004:	f001 fc71 	bl	80028ea <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <main+0x188>)
 800100e:	f000 fe21 	bl	8001c54 <HAL_GPIO_WritePin>
		//tempf = spi_receive_buf[0] | spi_receive_buf[1] << 8;
		temp = spi_receive_buf[0];
 8001012:	7a3b      	ldrb	r3, [r7, #8]
 8001014:	823b      	strh	r3, [r7, #16]
		//printf("x: %5d, y: %5d, z: %5d\n", x, y, z);
		printf("temp: %d\n", temp);
 8001016:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800101a:	4619      	mov	r1, r3
 800101c:	4809      	ldr	r0, [pc, #36]	@ (8001044 <main+0x19c>)
 800101e:	f003 f819 	bl	8004054 <iprintf>
		HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f000 fb88 	bl	8001738 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8001028:	bf00      	nop
 800102a:	e7db      	b.n	8000fe4 <main+0x13c>
 800102c:	08006030 	.word	0x08006030
 8001030:	40021000 	.word	0x40021000
 8001034:	200001f8 	.word	0x200001f8
 8001038:	08006040 	.word	0x08006040
 800103c:	08006064 	.word	0x08006064
 8001040:	08006088 	.word	0x08006088
 8001044:	080060a8 	.word	0x080060a8

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	@ 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2230      	movs	r2, #48	@ 0x30
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f944 	bl	80042e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <SystemClock_Config+0xcc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	4a27      	ldr	r2, [pc, #156]	@ (8001114 <SystemClock_Config+0xcc>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107a:	6413      	str	r3, [r2, #64]	@ 0x40
 800107c:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <SystemClock_Config+0xcc>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <SystemClock_Config+0xd0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <SystemClock_Config+0xd0>)
 8001092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <SystemClock_Config+0xd0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b8:	2308      	movs	r3, #8
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010bc:	23c0      	movs	r3, #192	@ 0xc0
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010c4:	2308      	movs	r3, #8
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fddb 	bl	8001c88 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d8:	f000 f9a4 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
 80010de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e0:	2302      	movs	r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2103      	movs	r1, #3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 f83c 	bl	8002178 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001106:	f000 f98d 	bl	8001424 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	@ 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001120:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <MX_SPI1_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_SPI1_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001150:	2210      	movs	r2, #16
 8001152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_SPI1_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_SPI1_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_SPI1_Init+0x64>)
 800116e:	f001 f9ef 	bl	8002550 <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001178:	f000 f954 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200001f8 	.word	0x200001f8
 8001184:	40013000 	.word	0x40013000

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	@ 0x30
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	4b9a      	ldr	r3, [pc, #616]	@ (800140c <MX_GPIO_Init+0x284>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a99      	ldr	r2, [pc, #612]	@ (800140c <MX_GPIO_Init+0x284>)
 80011a8:	f043 0310 	orr.w	r3, r3, #16
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b97      	ldr	r3, [pc, #604]	@ (800140c <MX_GPIO_Init+0x284>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	4b93      	ldr	r3, [pc, #588]	@ (800140c <MX_GPIO_Init+0x284>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a92      	ldr	r2, [pc, #584]	@ (800140c <MX_GPIO_Init+0x284>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b90      	ldr	r3, [pc, #576]	@ (800140c <MX_GPIO_Init+0x284>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b8c      	ldr	r3, [pc, #560]	@ (800140c <MX_GPIO_Init+0x284>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a8b      	ldr	r2, [pc, #556]	@ (800140c <MX_GPIO_Init+0x284>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b89      	ldr	r3, [pc, #548]	@ (800140c <MX_GPIO_Init+0x284>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b85      	ldr	r3, [pc, #532]	@ (800140c <MX_GPIO_Init+0x284>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a84      	ldr	r2, [pc, #528]	@ (800140c <MX_GPIO_Init+0x284>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b82      	ldr	r3, [pc, #520]	@ (800140c <MX_GPIO_Init+0x284>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b7e      	ldr	r3, [pc, #504]	@ (800140c <MX_GPIO_Init+0x284>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a7d      	ldr	r2, [pc, #500]	@ (800140c <MX_GPIO_Init+0x284>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b7b      	ldr	r3, [pc, #492]	@ (800140c <MX_GPIO_Init+0x284>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b77      	ldr	r3, [pc, #476]	@ (800140c <MX_GPIO_Init+0x284>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a76      	ldr	r2, [pc, #472]	@ (800140c <MX_GPIO_Init+0x284>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b74      	ldr	r3, [pc, #464]	@ (800140c <MX_GPIO_Init+0x284>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	4871      	ldr	r0, [pc, #452]	@ (8001410 <MX_GPIO_Init+0x288>)
 800124c:	f000 fd02 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2101      	movs	r1, #1
 8001254:	486f      	ldr	r0, [pc, #444]	@ (8001414 <MX_GPIO_Init+0x28c>)
 8001256:	f000 fcfd 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001260:	486d      	ldr	r0, [pc, #436]	@ (8001418 <MX_GPIO_Init+0x290>)
 8001262:	f000 fcf7 	bl	8001c54 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001266:	2304      	movs	r3, #4
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4865      	ldr	r0, [pc, #404]	@ (8001410 <MX_GPIO_Init+0x288>)
 800127a:	f000 fb67 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800127e:	2308      	movs	r3, #8
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	485e      	ldr	r0, [pc, #376]	@ (8001410 <MX_GPIO_Init+0x288>)
 8001296:	f000 fb59 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800129a:	2332      	movs	r3, #50	@ 0x32
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800129e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4858      	ldr	r0, [pc, #352]	@ (8001410 <MX_GPIO_Init+0x288>)
 80012b0:	f000 fb4c 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4852      	ldr	r0, [pc, #328]	@ (8001414 <MX_GPIO_Init+0x28c>)
 80012cc:	f000 fb3e 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012d0:	2308      	movs	r3, #8
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e0:	2305      	movs	r3, #5
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	484a      	ldr	r0, [pc, #296]	@ (8001414 <MX_GPIO_Init+0x28c>)
 80012ec:	f000 fb2e 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4845      	ldr	r0, [pc, #276]	@ (800141c <MX_GPIO_Init+0x294>)
 8001306:	f000 fb21 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800130a:	2310      	movs	r3, #16
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800131a:	2306      	movs	r3, #6
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	483d      	ldr	r0, [pc, #244]	@ (800141c <MX_GPIO_Init+0x294>)
 8001326:	f000 fb11 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800132a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133c:	2305      	movs	r3, #5
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	4836      	ldr	r0, [pc, #216]	@ (8001420 <MX_GPIO_Init+0x298>)
 8001348:	f000 fb00 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800134c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001350:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	482c      	ldr	r0, [pc, #176]	@ (8001418 <MX_GPIO_Init+0x290>)
 8001366:	f000 faf1 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800136a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800137c:	2306      	movs	r3, #6
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4823      	ldr	r0, [pc, #140]	@ (8001414 <MX_GPIO_Init+0x28c>)
 8001388:	f000 fae0 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800138c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	481e      	ldr	r0, [pc, #120]	@ (800141c <MX_GPIO_Init+0x294>)
 80013a2:	f000 fad3 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80013a6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b8:	230a      	movs	r3, #10
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <MX_GPIO_Init+0x294>)
 80013c4:	f000 fac2 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013c8:	2320      	movs	r3, #32
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	@ (8001418 <MX_GPIO_Init+0x290>)
 80013dc:	f000 fab6 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80013e0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f2:	2304      	movs	r3, #4
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4808      	ldr	r0, [pc, #32]	@ (8001420 <MX_GPIO_Init+0x298>)
 80013fe:	f000 faa5 	bl	800194c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	@ 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40021000 	.word	0x40021000
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <HAL_MspInit+0x4c>)
 8001440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_MspInit+0x4c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	@ 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800146e:	2007      	movs	r0, #7
 8001470:	f000 fa38 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <HAL_SPI_MspInit+0x84>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d12b      	bne.n	80014fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <HAL_SPI_MspInit+0x88>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <HAL_SPI_MspInit+0x88>)
 80014ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <HAL_SPI_MspInit+0x88>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_SPI_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_SPI_MspInit+0x88>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_SPI_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014da:	23e0      	movs	r3, #224	@ 0xe0
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ea:	2305      	movs	r3, #5
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <HAL_SPI_MspInit+0x8c>)
 80014f6:	f000 fa29 	bl	800194c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40013000 	.word	0x40013000
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <NMI_Handler+0x4>

08001518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <UsageFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001566:	f000 f8c7 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f002 fef2 	bl	8004388 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000250 	.word	0x20000250
 80015d8:	20000450 	.word	0x20000450

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001604:	f7ff ffea 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f002 feb1 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff fc39 	bl	8000ea8 <main>
  bx  lr    
 8001636:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001644:	08006460 	.word	0x08006460
  ldr r2, =_sbss
 8001648:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800164c:	20000450 	.word	0x20000450

08001650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f931 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fed2 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f93b 	bl	8001932 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016d4:	f000 f911 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20000254 	.word	0x20000254

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000254 	.word	0x20000254

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff47 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff5c 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffb0 	bl	80018a0 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	@ 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e159      	b.n	8001c1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8148 	bne.w	8001c16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	2b02      	cmp	r3, #2
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d017      	beq.n	8001a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d123      	bne.n	8001a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a2 	beq.w	8001c16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b57      	ldr	r3, [pc, #348]	@ (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a56      	ldr	r2, [pc, #344]	@ (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b54      	ldr	r3, [pc, #336]	@ (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a52      	ldr	r2, [pc, #328]	@ (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a49      	ldr	r2, [pc, #292]	@ (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x202>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a48      	ldr	r2, [pc, #288]	@ (8001c40 <HAL_GPIO_Init+0x2f4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x1fe>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a47      	ldr	r2, [pc, #284]	@ (8001c44 <HAL_GPIO_Init+0x2f8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x1fa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a46      	ldr	r2, [pc, #280]	@ (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a45      	ldr	r2, [pc, #276]	@ (8001c4c <HAL_GPIO_Init+0x300>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x1f2>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	@ (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6e:	4b38      	ldr	r3, [pc, #224]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b92:	4a2f      	ldr	r2, [pc, #188]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bbc:	4a24      	ldr	r2, [pc, #144]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c10:	4a0f      	ldr	r2, [pc, #60]	@ (8001c50 <HAL_GPIO_Init+0x304>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f aea2 	bls.w	8001968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e267      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d075      	beq.n	8001d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ca6:	4b88      	ldr	r3, [pc, #544]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b85      	ldr	r3, [pc, #532]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d112      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b82      	ldr	r3, [pc, #520]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d157      	bne.n	8001d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e242      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x74>
 8001cee:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b70      	ldr	r3, [pc, #448]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6c      	ldr	r2, [pc, #432]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001d20:	4b69      	ldr	r3, [pc, #420]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a68      	ldr	r2, [pc, #416]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a65      	ldr	r2, [pc, #404]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fcee 	bl	8001720 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fcea 	bl	8001720 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	@ 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e207      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xc0>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fcda 	bl	8001720 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fcd6 	bl	8001720 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1f3      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b51      	ldr	r3, [pc, #324]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d11c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b44      	ldr	r3, [pc, #272]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x152>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e1c7      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4937      	ldr	r1, [pc, #220]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	e03a      	b.n	8001e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df8:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <HAL_RCC_OscConfig+0x244>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fc8f 	bl	8001720 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff fc8b 	bl	8001720 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1a8      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4925      	ldr	r1, [pc, #148]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e015      	b.n	8001e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <HAL_RCC_OscConfig+0x244>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fc6e 	bl	8001720 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fc6a 	bl	8001720 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e187      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d036      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_RCC_OscConfig+0x248>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff fc4e 	bl	8001720 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff fc4a 	bl	8001720 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e167      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x200>
 8001ea6:	e01b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_RCC_OscConfig+0x248>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fc37 	bl	8001720 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e00e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fc33 	bl	8001720 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d907      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e150      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	42470000 	.word	0x42470000
 8001ed0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b88      	ldr	r3, [pc, #544]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ea      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8097 	beq.w	800201c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b81      	ldr	r3, [pc, #516]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b7d      	ldr	r3, [pc, #500]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	4a7c      	ldr	r2, [pc, #496]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b77      	ldr	r3, [pc, #476]	@ (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	4b74      	ldr	r3, [pc, #464]	@ (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a73      	ldr	r2, [pc, #460]	@ (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fbf3 	bl	8001720 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff fbef 	bl	8001720 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e10c      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b6a      	ldr	r3, [pc, #424]	@ (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2ea>
 8001f64:	4b64      	ldr	r3, [pc, #400]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f68:	4a63      	ldr	r2, [pc, #396]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f70:	e01c      	b.n	8001fac <HAL_RCC_OscConfig+0x324>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x30c>
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f86:	4b5c      	ldr	r3, [pc, #368]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0x324>
 8001f94:	4b58      	ldr	r3, [pc, #352]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f98:	4a57      	ldr	r2, [pc, #348]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa0:	4b55      	ldr	r3, [pc, #340]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa4:	4a54      	ldr	r2, [pc, #336]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fbb4 	bl	8001720 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fbb0 	bl	8001720 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0cb      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	4b49      	ldr	r3, [pc, #292]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ee      	beq.n	8001fbc <HAL_RCC_OscConfig+0x334>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fb9e 	bl	8001720 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fb9a 	bl	8001720 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0b5      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ee      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	4b39      	ldr	r3, [pc, #228]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	4a38      	ldr	r2, [pc, #224]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a1 	beq.w	8002168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d05c      	beq.n	80020ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d141      	bne.n	80020be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <HAL_RCC_OscConfig+0x478>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fb6e 	bl	8001720 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff fb6a 	bl	8001720 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e087      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	491b      	ldr	r1, [pc, #108]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_RCC_OscConfig+0x478>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fb43 	bl	8001720 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fb3f 	bl	8001720 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e05c      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x416>
 80020bc:	e054      	b.n	8002168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <HAL_RCC_OscConfig+0x478>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff fb2c 	bl	8001720 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff fb28 	bl	8001720 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e045      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x444>
 80020ea:	e03d      	b.n	8002168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e038      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000
 8002100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_RCC_OscConfig+0x4ec>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d028      	beq.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d121      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800213a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cc      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b68      	ldr	r3, [pc, #416]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d90c      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b65      	ldr	r3, [pc, #404]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b3f      	ldr	r3, [pc, #252]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e067      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4934      	ldr	r1, [pc, #208]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff fa5a 	bl	8001720 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff fa56 	bl	8001720 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d20c      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9ba 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00
 8002334:	40023800 	.word	0x40023800
 8002338:	080060b4 	.word	0x080060b4
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b094      	sub	sp, #80	@ 0x50
 800234a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235c:	4b79      	ldr	r3, [pc, #484]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d00d      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x40>
 8002368:	2b08      	cmp	r3, #8
 800236a:	f200 80e1 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x34>
 8002372:	2b04      	cmp	r3, #4
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x3a>
 8002376:	e0db      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b73      	ldr	r3, [pc, #460]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x204>)
 800237a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800237c:	e0db      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237e:	4b73      	ldr	r3, [pc, #460]	@ (800254c <HAL_RCC_GetSysClockFreq+0x208>)
 8002380:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002382:	e0d8      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002384:	4b6f      	ldr	r3, [pc, #444]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800238c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238e:	4b6d      	ldr	r3, [pc, #436]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d063      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b6a      	ldr	r3, [pc, #424]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	2200      	movs	r2, #0
 80023a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ae:	2300      	movs	r3, #0
 80023b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023b6:	4622      	mov	r2, r4
 80023b8:	462b      	mov	r3, r5
 80023ba:	f04f 0000 	mov.w	r0, #0
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	0159      	lsls	r1, r3, #5
 80023c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c8:	0150      	lsls	r0, r2, #5
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4621      	mov	r1, r4
 80023d0:	1a51      	subs	r1, r2, r1
 80023d2:	6139      	str	r1, [r7, #16]
 80023d4:	4629      	mov	r1, r5
 80023d6:	eb63 0301 	sbc.w	r3, r3, r1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e8:	4659      	mov	r1, fp
 80023ea:	018b      	lsls	r3, r1, #6
 80023ec:	4651      	mov	r1, sl
 80023ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023f2:	4651      	mov	r1, sl
 80023f4:	018a      	lsls	r2, r1, #6
 80023f6:	4651      	mov	r1, sl
 80023f8:	ebb2 0801 	subs.w	r8, r2, r1
 80023fc:	4659      	mov	r1, fp
 80023fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002416:	4690      	mov	r8, r2
 8002418:	4699      	mov	r9, r3
 800241a:	4623      	mov	r3, r4
 800241c:	eb18 0303 	adds.w	r3, r8, r3
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	462b      	mov	r3, r5
 8002424:	eb49 0303 	adc.w	r3, r9, r3
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002436:	4629      	mov	r1, r5
 8002438:	024b      	lsls	r3, r1, #9
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002440:	4621      	mov	r1, r4
 8002442:	024a      	lsls	r2, r1, #9
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800244a:	2200      	movs	r2, #0
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002454:	f7fe fbb0 	bl	8000bb8 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4613      	mov	r3, r2
 800245e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002460:	e058      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002462:	4b38      	ldr	r3, [pc, #224]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	099b      	lsrs	r3, r3, #6
 8002468:	2200      	movs	r2, #0
 800246a:	4618      	mov	r0, r3
 800246c:	4611      	mov	r1, r2
 800246e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
 8002478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0159      	lsls	r1, r3, #5
 800248a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248e:	0150      	lsls	r0, r2, #5
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4641      	mov	r1, r8
 8002496:	ebb2 0a01 	subs.w	sl, r2, r1
 800249a:	4649      	mov	r1, r9
 800249c:	eb63 0b01 	sbc.w	fp, r3, r1
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b4:	ebb2 040a 	subs.w	r4, r2, sl
 80024b8:	eb63 050b 	sbc.w	r5, r3, fp
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	00eb      	lsls	r3, r5, #3
 80024c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ca:	00e2      	lsls	r2, r4, #3
 80024cc:	4614      	mov	r4, r2
 80024ce:	461d      	mov	r5, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	18e3      	adds	r3, r4, r3
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb45 0303 	adc.w	r3, r5, r3
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fe:	2200      	movs	r2, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	61fa      	str	r2, [r7, #28]
 8002504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002508:	f7fe fb56 	bl	8000bb8 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002524:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x204>)
 8002532:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002538:	4618      	mov	r0, r3
 800253a:	3750      	adds	r7, #80	@ 0x50
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07b      	b.n	800265a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	2b00      	cmp	r3, #0
 8002568:	d108      	bne.n	800257c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002572:	d009      	beq.n	8002588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
 800257a:	e005      	b.n	8002588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe ff6c 	bl	8001480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260c:	ea42 0103 	orr.w	r1, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f003 0104 	and.w	r1, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	f003 0210 	and.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b088      	sub	sp, #32
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002672:	f7ff f855 	bl	8001720 <HAL_GetTick>
 8002676:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d001      	beq.n	800268c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
 800268a:	e12a      	b.n	80028e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Transmit+0x36>
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e122      	b.n	80028e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_SPI_Transmit+0x48>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e11b      	b.n	80028e2 <HAL_SPI_Transmit+0x280>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f8:	d10f      	bne.n	800271a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002718:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002724:	2b40      	cmp	r3, #64	@ 0x40
 8002726:	d007      	beq.n	8002738 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002740:	d152      	bne.n	80027e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_SPI_Transmit+0xee>
 800274a:	8b7b      	ldrh	r3, [r7, #26]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d145      	bne.n	80027dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	1c9a      	adds	r2, r3, #2
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002774:	e032      	b.n	80027dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b02      	cmp	r3, #2
 8002782:	d112      	bne.n	80027aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	1c9a      	adds	r2, r3, #2
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80027a8:	e018      	b.n	80027dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027aa:	f7fe ffb9 	bl	8001720 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d803      	bhi.n	80027c2 <HAL_SPI_Transmit+0x160>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027c0:	d102      	bne.n	80027c8 <HAL_SPI_Transmit+0x166>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e082      	b.n	80028e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1c7      	bne.n	8002776 <HAL_SPI_Transmit+0x114>
 80027e6:	e053      	b.n	8002890 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Transmit+0x194>
 80027f0:	8b7b      	ldrh	r3, [r7, #26]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d147      	bne.n	8002886 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800281c:	e033      	b.n	8002886 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d113      	bne.n	8002854 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002852:	e018      	b.n	8002886 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002854:	f7fe ff64 	bl	8001720 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d803      	bhi.n	800286c <HAL_SPI_Transmit+0x20a>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800286a:	d102      	bne.n	8002872 <HAL_SPI_Transmit+0x210>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e02d      	b.n	80028e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1c6      	bne.n	800281e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fbd9 	bl	800304c <SPI_EndRxTxTransaction>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b088      	sub	sp, #32
 80028ee:	af02      	add	r7, sp, #8
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e104      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002912:	d112      	bne.n	800293a <HAL_SPI_Receive+0x50>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10e      	bne.n	800293a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2204      	movs	r2, #4
 8002920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4613      	mov	r3, r2
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f8f3 	bl	8002b1c <HAL_SPI_TransmitReceive>
 8002936:	4603      	mov	r3, r0
 8002938:	e0ec      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293a:	f7fe fef1 	bl	8001720 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_SPI_Receive+0x62>
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0e1      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_SPI_Receive+0x74>
 800295a:	2302      	movs	r3, #2
 800295c:	e0da      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2204      	movs	r2, #4
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029ac:	d10f      	bne.n	80029ce <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	2b40      	cmp	r3, #64	@ 0x40
 80029da:	d007      	beq.n	80029ec <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d170      	bne.n	8002ad6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80029f4:	e035      	b.n	8002a62 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d115      	bne.n	8002a30 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f103 020c 	add.w	r2, r3, #12
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	7812      	ldrb	r2, [r2, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a2e:	e018      	b.n	8002a62 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a30:	f7fe fe76 	bl	8001720 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d803      	bhi.n	8002a48 <HAL_SPI_Receive+0x15e>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a46:	d102      	bne.n	8002a4e <HAL_SPI_Receive+0x164>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e058      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1c4      	bne.n	80029f6 <HAL_SPI_Receive+0x10c>
 8002a6c:	e038      	b.n	8002ae0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d113      	bne.n	8002aa4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	b292      	uxth	r2, r2
 8002a88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002aa2:	e018      	b.n	8002ad6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa4:	f7fe fe3c 	bl	8001720 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d803      	bhi.n	8002abc <HAL_SPI_Receive+0x1d2>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Receive+0x1d8>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e01e      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1c6      	bne.n	8002a6e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fa4b 	bl	8002f80 <SPI_EndRxTransaction>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002b12:	2300      	movs	r3, #0
  }
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b2e:	f7fe fdf7 	bl	8001720 <HAL_GetTick>
 8002b32:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b3a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d00c      	beq.n	8002b66 <HAL_SPI_TransmitReceive+0x4a>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b52:	d106      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_SPI_TransmitReceive+0x46>
 8002b5c:	7ffb      	ldrb	r3, [r7, #31]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d001      	beq.n	8002b66 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
 8002b64:	e17f      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x5c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_SPI_TransmitReceive+0x5c>
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e174      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_SPI_TransmitReceive+0x6e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e16d      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d003      	beq.n	8002ba6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	887a      	ldrh	r2, [r7, #2]
 8002bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	887a      	ldrh	r2, [r7, #2]
 8002bce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be6:	2b40      	cmp	r3, #64	@ 0x40
 8002be8:	d007      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c02:	d17e      	bne.n	8002d02 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_TransmitReceive+0xf6>
 8002c0c:	8afb      	ldrh	r3, [r7, #22]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d16c      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	1c9a      	adds	r2, r3, #2
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c36:	e059      	b.n	8002cec <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d11b      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x162>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d016      	beq.n	8002c7e <HAL_SPI_TransmitReceive+0x162>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d113      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	881a      	ldrh	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	1c9a      	adds	r2, r3, #2
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d119      	bne.n	8002cc0 <HAL_SPI_TransmitReceive+0x1a4>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d014      	beq.n	8002cc0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	1c9a      	adds	r2, r3, #2
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cc0:	f7fe fd2e 	bl	8001720 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d80d      	bhi.n	8002cec <HAL_SPI_TransmitReceive+0x1d0>
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cd6:	d009      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0bc      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1a0      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x11c>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d19b      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x11c>
 8002d00:	e082      	b.n	8002e08 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_SPI_TransmitReceive+0x1f4>
 8002d0a:	8afb      	ldrh	r3, [r7, #22]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d171      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d36:	e05d      	b.n	8002df4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d11c      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x264>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d017      	beq.n	8002d80 <HAL_SPI_TransmitReceive+0x264>
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d114      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d119      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x2a6>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d014      	beq.n	8002dc2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dc2:	f7fe fcad 	bl	8001720 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d803      	bhi.n	8002dda <HAL_SPI_TransmitReceive+0x2be>
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd8:	d102      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x2c4>
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e038      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d19c      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x21c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d197      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e08:	6a3a      	ldr	r2, [r7, #32]
 8002e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 f91d 	bl	800304c <SPI_EndRxTxTransaction>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e01d      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3728      	adds	r7, #40	@ 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e80:	f7fe fc4e 	bl	8001720 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e90:	f7fe fc46 	bl	8001720 <HAL_GetTick>
 8002e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	0d1b      	lsrs	r3, r3, #20
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea6:	e054      	b.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eae:	d050      	beq.n	8002f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eb0:	f7fe fc36 	bl	8001720 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d902      	bls.n	8002ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d13d      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ede:	d111      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee8:	d004      	beq.n	8002ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef2:	d107      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0c:	d10f      	bne.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e017      	b.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d19b      	bne.n	8002ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000

08002f80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f94:	d111      	bne.n	8002fba <SPI_EndRxTransaction+0x3a>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9e:	d004      	beq.n	8002faa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa8:	d107      	bne.n	8002fba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fc2:	d12a      	bne.n	800301a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fcc:	d012      	beq.n	8002ff4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff ff49 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02d      	beq.n	8003040 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e026      	b.n	8003042 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff ff36 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01a      	beq.n	8003040 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300e:	f043 0220 	orr.w	r2, r3, #32
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e013      	b.n	8003042 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2200      	movs	r2, #0
 8003022:	2101      	movs	r1, #1
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff ff23 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e000      	b.n	8003042 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2201      	movs	r2, #1
 8003060:	2102      	movs	r1, #2
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff ff04 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d007      	beq.n	800307e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003072:	f043 0220 	orr.w	r2, r3, #32
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e032      	b.n	80030e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800307e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <SPI_EndRxTxTransaction+0xa0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	@ (80030f0 <SPI_EndRxTxTransaction+0xa4>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800309c:	d112      	bne.n	80030c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fee1 	bl	8002e70 <SPI_WaitFlagStateUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e00f      	b.n	80030e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b80      	cmp	r3, #128	@ 0x80
 80030dc:	d0f2      	beq.n	80030c4 <SPI_EndRxTxTransaction+0x78>
 80030de:	e000      	b.n	80030e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80030e0:	bf00      	nop
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000000 	.word	0x20000000
 80030f0:	165e9f81 	.word	0x165e9f81

080030f4 <findslot>:
 80030f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <findslot+0x2c>)
 80030f6:	b510      	push	{r4, lr}
 80030f8:	4604      	mov	r4, r0
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	b118      	cbz	r0, 8003106 <findslot+0x12>
 80030fe:	6a03      	ldr	r3, [r0, #32]
 8003100:	b90b      	cbnz	r3, 8003106 <findslot+0x12>
 8003102:	f000 ff71 	bl	8003fe8 <__sinit>
 8003106:	2c13      	cmp	r4, #19
 8003108:	d807      	bhi.n	800311a <findslot+0x26>
 800310a:	4806      	ldr	r0, [pc, #24]	@ (8003124 <findslot+0x30>)
 800310c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003110:	3201      	adds	r2, #1
 8003112:	d002      	beq.n	800311a <findslot+0x26>
 8003114:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003118:	bd10      	pop	{r4, pc}
 800311a:	2000      	movs	r0, #0
 800311c:	e7fc      	b.n	8003118 <findslot+0x24>
 800311e:	bf00      	nop
 8003120:	20000020 	.word	0x20000020
 8003124:	20000264 	.word	0x20000264

08003128 <error>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	4604      	mov	r4, r0
 800312c:	f001 f92c 	bl	8004388 <__errno>
 8003130:	2613      	movs	r6, #19
 8003132:	4605      	mov	r5, r0
 8003134:	2700      	movs	r7, #0
 8003136:	4630      	mov	r0, r6
 8003138:	4639      	mov	r1, r7
 800313a:	beab      	bkpt	0x00ab
 800313c:	4606      	mov	r6, r0
 800313e:	602e      	str	r6, [r5, #0]
 8003140:	4620      	mov	r0, r4
 8003142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003144 <checkerror>:
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d101      	bne.n	800314c <checkerror+0x8>
 8003148:	f7ff bfee 	b.w	8003128 <error>
 800314c:	4770      	bx	lr

0800314e <_swiread>:
 800314e:	b530      	push	{r4, r5, lr}
 8003150:	b085      	sub	sp, #20
 8003152:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003156:	9203      	str	r2, [sp, #12]
 8003158:	2406      	movs	r4, #6
 800315a:	ad01      	add	r5, sp, #4
 800315c:	4620      	mov	r0, r4
 800315e:	4629      	mov	r1, r5
 8003160:	beab      	bkpt	0x00ab
 8003162:	4604      	mov	r4, r0
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff ffed 	bl	8003144 <checkerror>
 800316a:	b005      	add	sp, #20
 800316c:	bd30      	pop	{r4, r5, pc}

0800316e <_read>:
 800316e:	b570      	push	{r4, r5, r6, lr}
 8003170:	460e      	mov	r6, r1
 8003172:	4614      	mov	r4, r2
 8003174:	f7ff ffbe 	bl	80030f4 <findslot>
 8003178:	4605      	mov	r5, r0
 800317a:	b930      	cbnz	r0, 800318a <_read+0x1c>
 800317c:	f001 f904 	bl	8004388 <__errno>
 8003180:	2309      	movs	r3, #9
 8003182:	6003      	str	r3, [r0, #0]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	4622      	mov	r2, r4
 800318e:	4631      	mov	r1, r6
 8003190:	f7ff ffdd 	bl	800314e <_swiread>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d0f5      	beq.n	8003184 <_read+0x16>
 8003198:	686b      	ldr	r3, [r5, #4]
 800319a:	1a20      	subs	r0, r4, r0
 800319c:	4403      	add	r3, r0
 800319e:	606b      	str	r3, [r5, #4]
 80031a0:	e7f2      	b.n	8003188 <_read+0x1a>

080031a2 <_swilseek>:
 80031a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031a4:	460c      	mov	r4, r1
 80031a6:	4616      	mov	r6, r2
 80031a8:	f7ff ffa4 	bl	80030f4 <findslot>
 80031ac:	4605      	mov	r5, r0
 80031ae:	b940      	cbnz	r0, 80031c2 <_swilseek+0x20>
 80031b0:	f001 f8ea 	bl	8004388 <__errno>
 80031b4:	2309      	movs	r3, #9
 80031b6:	6003      	str	r3, [r0, #0]
 80031b8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80031bc:	4620      	mov	r0, r4
 80031be:	b003      	add	sp, #12
 80031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c2:	2e02      	cmp	r6, #2
 80031c4:	d903      	bls.n	80031ce <_swilseek+0x2c>
 80031c6:	f001 f8df 	bl	8004388 <__errno>
 80031ca:	2316      	movs	r3, #22
 80031cc:	e7f3      	b.n	80031b6 <_swilseek+0x14>
 80031ce:	2e01      	cmp	r6, #1
 80031d0:	d112      	bne.n	80031f8 <_swilseek+0x56>
 80031d2:	6843      	ldr	r3, [r0, #4]
 80031d4:	18e4      	adds	r4, r4, r3
 80031d6:	d4f6      	bmi.n	80031c6 <_swilseek+0x24>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	260a      	movs	r6, #10
 80031dc:	e9cd 3400 	strd	r3, r4, [sp]
 80031e0:	466f      	mov	r7, sp
 80031e2:	4630      	mov	r0, r6
 80031e4:	4639      	mov	r1, r7
 80031e6:	beab      	bkpt	0x00ab
 80031e8:	4606      	mov	r6, r0
 80031ea:	4630      	mov	r0, r6
 80031ec:	f7ff ffaa 	bl	8003144 <checkerror>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	dbe1      	blt.n	80031b8 <_swilseek+0x16>
 80031f4:	606c      	str	r4, [r5, #4]
 80031f6:	e7e1      	b.n	80031bc <_swilseek+0x1a>
 80031f8:	2e02      	cmp	r6, #2
 80031fa:	6803      	ldr	r3, [r0, #0]
 80031fc:	d1ec      	bne.n	80031d8 <_swilseek+0x36>
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	260c      	movs	r6, #12
 8003202:	466f      	mov	r7, sp
 8003204:	4630      	mov	r0, r6
 8003206:	4639      	mov	r1, r7
 8003208:	beab      	bkpt	0x00ab
 800320a:	4606      	mov	r6, r0
 800320c:	4630      	mov	r0, r6
 800320e:	f7ff ff99 	bl	8003144 <checkerror>
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	d0d0      	beq.n	80031b8 <_swilseek+0x16>
 8003216:	4404      	add	r4, r0
 8003218:	e7de      	b.n	80031d8 <_swilseek+0x36>

0800321a <_lseek>:
 800321a:	f7ff bfc2 	b.w	80031a2 <_swilseek>

0800321e <_swiwrite>:
 800321e:	b530      	push	{r4, r5, lr}
 8003220:	b085      	sub	sp, #20
 8003222:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003226:	9203      	str	r2, [sp, #12]
 8003228:	2405      	movs	r4, #5
 800322a:	ad01      	add	r5, sp, #4
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	beab      	bkpt	0x00ab
 8003232:	4604      	mov	r4, r0
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ff85 	bl	8003144 <checkerror>
 800323a:	b005      	add	sp, #20
 800323c:	bd30      	pop	{r4, r5, pc}

0800323e <_write>:
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	460e      	mov	r6, r1
 8003242:	4615      	mov	r5, r2
 8003244:	f7ff ff56 	bl	80030f4 <findslot>
 8003248:	4604      	mov	r4, r0
 800324a:	b930      	cbnz	r0, 800325a <_write+0x1c>
 800324c:	f001 f89c 	bl	8004388 <__errno>
 8003250:	2309      	movs	r3, #9
 8003252:	6003      	str	r3, [r0, #0]
 8003254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	6800      	ldr	r0, [r0, #0]
 800325c:	462a      	mov	r2, r5
 800325e:	4631      	mov	r1, r6
 8003260:	f7ff ffdd 	bl	800321e <_swiwrite>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	dbf5      	blt.n	8003254 <_write+0x16>
 8003268:	6862      	ldr	r2, [r4, #4]
 800326a:	1ae8      	subs	r0, r5, r3
 800326c:	4402      	add	r2, r0
 800326e:	42ab      	cmp	r3, r5
 8003270:	6062      	str	r2, [r4, #4]
 8003272:	d1f1      	bne.n	8003258 <_write+0x1a>
 8003274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003278:	2000      	movs	r0, #0
 800327a:	f7ff bf55 	b.w	8003128 <error>

0800327e <_swiclose>:
 800327e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003280:	2402      	movs	r4, #2
 8003282:	9001      	str	r0, [sp, #4]
 8003284:	ad01      	add	r5, sp, #4
 8003286:	4620      	mov	r0, r4
 8003288:	4629      	mov	r1, r5
 800328a:	beab      	bkpt	0x00ab
 800328c:	4604      	mov	r4, r0
 800328e:	4620      	mov	r0, r4
 8003290:	f7ff ff58 	bl	8003144 <checkerror>
 8003294:	b003      	add	sp, #12
 8003296:	bd30      	pop	{r4, r5, pc}

08003298 <_close>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	4605      	mov	r5, r0
 800329c:	f7ff ff2a 	bl	80030f4 <findslot>
 80032a0:	4604      	mov	r4, r0
 80032a2:	b930      	cbnz	r0, 80032b2 <_close+0x1a>
 80032a4:	f001 f870 	bl	8004388 <__errno>
 80032a8:	2309      	movs	r3, #9
 80032aa:	6003      	str	r3, [r0, #0]
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b0:	bd38      	pop	{r3, r4, r5, pc}
 80032b2:	3d01      	subs	r5, #1
 80032b4:	2d01      	cmp	r5, #1
 80032b6:	d809      	bhi.n	80032cc <_close+0x34>
 80032b8:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <_close+0x40>)
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d104      	bne.n	80032cc <_close+0x34>
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	2000      	movs	r0, #0
 80032ca:	e7f1      	b.n	80032b0 <_close+0x18>
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	f7ff ffd6 	bl	800327e <_swiclose>
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d0f5      	beq.n	80032c2 <_close+0x2a>
 80032d6:	e7eb      	b.n	80032b0 <_close+0x18>
 80032d8:	20000264 	.word	0x20000264

080032dc <_getpid>:
 80032dc:	2001      	movs	r0, #1
 80032de:	4770      	bx	lr

080032e0 <_swistat>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	460c      	mov	r4, r1
 80032e4:	f7ff ff06 	bl	80030f4 <findslot>
 80032e8:	4605      	mov	r5, r0
 80032ea:	b930      	cbnz	r0, 80032fa <_swistat+0x1a>
 80032ec:	f001 f84c 	bl	8004388 <__errno>
 80032f0:	2309      	movs	r3, #9
 80032f2:	6003      	str	r3, [r0, #0]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
 80032fa:	6863      	ldr	r3, [r4, #4]
 80032fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003300:	6063      	str	r3, [r4, #4]
 8003302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003306:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003308:	260c      	movs	r6, #12
 800330a:	4630      	mov	r0, r6
 800330c:	4629      	mov	r1, r5
 800330e:	beab      	bkpt	0x00ab
 8003310:	4605      	mov	r5, r0
 8003312:	4628      	mov	r0, r5
 8003314:	f7ff ff16 	bl	8003144 <checkerror>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d0eb      	beq.n	80032f4 <_swistat+0x14>
 800331c:	6120      	str	r0, [r4, #16]
 800331e:	2000      	movs	r0, #0
 8003320:	e7ea      	b.n	80032f8 <_swistat+0x18>

08003322 <_fstat>:
 8003322:	460b      	mov	r3, r1
 8003324:	b510      	push	{r4, lr}
 8003326:	2100      	movs	r1, #0
 8003328:	4604      	mov	r4, r0
 800332a:	2258      	movs	r2, #88	@ 0x58
 800332c:	4618      	mov	r0, r3
 800332e:	f000 ffd9 	bl	80042e4 <memset>
 8003332:	4601      	mov	r1, r0
 8003334:	4620      	mov	r0, r4
 8003336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333a:	f7ff bfd1 	b.w	80032e0 <_swistat>

0800333e <_stat>:
 800333e:	b538      	push	{r3, r4, r5, lr}
 8003340:	460d      	mov	r5, r1
 8003342:	4604      	mov	r4, r0
 8003344:	2258      	movs	r2, #88	@ 0x58
 8003346:	2100      	movs	r1, #0
 8003348:	4628      	mov	r0, r5
 800334a:	f000 ffcb 	bl	80042e4 <memset>
 800334e:	4620      	mov	r0, r4
 8003350:	2100      	movs	r1, #0
 8003352:	f000 f811 	bl	8003378 <_swiopen>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	4604      	mov	r4, r0
 800335a:	d00b      	beq.n	8003374 <_stat+0x36>
 800335c:	686b      	ldr	r3, [r5, #4]
 800335e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003362:	606b      	str	r3, [r5, #4]
 8003364:	4629      	mov	r1, r5
 8003366:	f7ff ffbb 	bl	80032e0 <_swistat>
 800336a:	4605      	mov	r5, r0
 800336c:	4620      	mov	r0, r4
 800336e:	f7ff ff93 	bl	8003298 <_close>
 8003372:	462c      	mov	r4, r5
 8003374:	4620      	mov	r0, r4
 8003376:	bd38      	pop	{r3, r4, r5, pc}

08003378 <_swiopen>:
 8003378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800337c:	4f29      	ldr	r7, [pc, #164]	@ (8003424 <_swiopen+0xac>)
 800337e:	b096      	sub	sp, #88	@ 0x58
 8003380:	4682      	mov	sl, r0
 8003382:	460e      	mov	r6, r1
 8003384:	2400      	movs	r4, #0
 8003386:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800338a:	3301      	adds	r3, #1
 800338c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003390:	d00c      	beq.n	80033ac <_swiopen+0x34>
 8003392:	3401      	adds	r4, #1
 8003394:	2c14      	cmp	r4, #20
 8003396:	d1f6      	bne.n	8003386 <_swiopen+0xe>
 8003398:	f000 fff6 	bl	8004388 <__errno>
 800339c:	2318      	movs	r3, #24
 800339e:	6003      	str	r3, [r0, #0]
 80033a0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80033a4:	4620      	mov	r0, r4
 80033a6:	b016      	add	sp, #88	@ 0x58
 80033a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ac:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80033b0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80033b4:	46e9      	mov	r9, sp
 80033b6:	d109      	bne.n	80033cc <_swiopen+0x54>
 80033b8:	4649      	mov	r1, r9
 80033ba:	4650      	mov	r0, sl
 80033bc:	f7ff ffbf 	bl	800333e <_stat>
 80033c0:	3001      	adds	r0, #1
 80033c2:	d003      	beq.n	80033cc <_swiopen+0x54>
 80033c4:	f000 ffe0 	bl	8004388 <__errno>
 80033c8:	2311      	movs	r3, #17
 80033ca:	e7e8      	b.n	800339e <_swiopen+0x26>
 80033cc:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80033d0:	f240 6301 	movw	r3, #1537	@ 0x601
 80033d4:	07b2      	lsls	r2, r6, #30
 80033d6:	bf48      	it	mi
 80033d8:	f045 0502 	orrmi.w	r5, r5, #2
 80033dc:	421e      	tst	r6, r3
 80033de:	bf18      	it	ne
 80033e0:	f045 0504 	orrne.w	r5, r5, #4
 80033e4:	0733      	lsls	r3, r6, #28
 80033e6:	bf48      	it	mi
 80033e8:	f025 0504 	bicmi.w	r5, r5, #4
 80033ec:	4650      	mov	r0, sl
 80033ee:	bf48      	it	mi
 80033f0:	f045 0508 	orrmi.w	r5, r5, #8
 80033f4:	f8cd a000 	str.w	sl, [sp]
 80033f8:	f7fc ff42 	bl	8000280 <strlen>
 80033fc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003400:	2501      	movs	r5, #1
 8003402:	4628      	mov	r0, r5
 8003404:	4649      	mov	r1, r9
 8003406:	beab      	bkpt	0x00ab
 8003408:	4605      	mov	r5, r0
 800340a:	2d00      	cmp	r5, #0
 800340c:	db05      	blt.n	800341a <_swiopen+0xa2>
 800340e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003412:	4447      	add	r7, r8
 8003414:	2300      	movs	r3, #0
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	e7c4      	b.n	80033a4 <_swiopen+0x2c>
 800341a:	4628      	mov	r0, r5
 800341c:	f7ff fe84 	bl	8003128 <error>
 8003420:	4604      	mov	r4, r0
 8003422:	e7bf      	b.n	80033a4 <_swiopen+0x2c>
 8003424:	20000264 	.word	0x20000264

08003428 <_get_semihosting_exts>:
 8003428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800342c:	4606      	mov	r6, r0
 800342e:	460f      	mov	r7, r1
 8003430:	4829      	ldr	r0, [pc, #164]	@ (80034d8 <_get_semihosting_exts+0xb0>)
 8003432:	2100      	movs	r1, #0
 8003434:	4615      	mov	r5, r2
 8003436:	f7ff ff9f 	bl	8003378 <_swiopen>
 800343a:	462a      	mov	r2, r5
 800343c:	4604      	mov	r4, r0
 800343e:	2100      	movs	r1, #0
 8003440:	4630      	mov	r0, r6
 8003442:	f000 ff4f 	bl	80042e4 <memset>
 8003446:	1c63      	adds	r3, r4, #1
 8003448:	d014      	beq.n	8003474 <_get_semihosting_exts+0x4c>
 800344a:	4620      	mov	r0, r4
 800344c:	f7ff fe52 	bl	80030f4 <findslot>
 8003450:	f04f 080c 	mov.w	r8, #12
 8003454:	4681      	mov	r9, r0
 8003456:	4640      	mov	r0, r8
 8003458:	4649      	mov	r1, r9
 800345a:	beab      	bkpt	0x00ab
 800345c:	4680      	mov	r8, r0
 800345e:	4640      	mov	r0, r8
 8003460:	f7ff fe70 	bl	8003144 <checkerror>
 8003464:	2803      	cmp	r0, #3
 8003466:	dd02      	ble.n	800346e <_get_semihosting_exts+0x46>
 8003468:	1ec3      	subs	r3, r0, #3
 800346a:	42ab      	cmp	r3, r5
 800346c:	dc07      	bgt.n	800347e <_get_semihosting_exts+0x56>
 800346e:	4620      	mov	r0, r4
 8003470:	f7ff ff12 	bl	8003298 <_close>
 8003474:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003478:	b003      	add	sp, #12
 800347a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800347e:	2204      	movs	r2, #4
 8003480:	eb0d 0102 	add.w	r1, sp, r2
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff fe72 	bl	800316e <_read>
 800348a:	2803      	cmp	r0, #3
 800348c:	ddef      	ble.n	800346e <_get_semihosting_exts+0x46>
 800348e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003492:	2b53      	cmp	r3, #83	@ 0x53
 8003494:	d1eb      	bne.n	800346e <_get_semihosting_exts+0x46>
 8003496:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800349a:	2b48      	cmp	r3, #72	@ 0x48
 800349c:	d1e7      	bne.n	800346e <_get_semihosting_exts+0x46>
 800349e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80034a2:	2b46      	cmp	r3, #70	@ 0x46
 80034a4:	d1e3      	bne.n	800346e <_get_semihosting_exts+0x46>
 80034a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80034aa:	2b42      	cmp	r3, #66	@ 0x42
 80034ac:	d1df      	bne.n	800346e <_get_semihosting_exts+0x46>
 80034ae:	2201      	movs	r2, #1
 80034b0:	4639      	mov	r1, r7
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff fe75 	bl	80031a2 <_swilseek>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	dbd8      	blt.n	800346e <_get_semihosting_exts+0x46>
 80034bc:	462a      	mov	r2, r5
 80034be:	4631      	mov	r1, r6
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff fe54 	bl	800316e <_read>
 80034c6:	4605      	mov	r5, r0
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fee5 	bl	8003298 <_close>
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7ff fe38 	bl	8003144 <checkerror>
 80034d4:	e7d0      	b.n	8003478 <_get_semihosting_exts+0x50>
 80034d6:	bf00      	nop
 80034d8:	080060c4 	.word	0x080060c4

080034dc <initialise_semihosting_exts>:
 80034dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034de:	4d0a      	ldr	r5, [pc, #40]	@ (8003508 <initialise_semihosting_exts+0x2c>)
 80034e0:	4c0a      	ldr	r4, [pc, #40]	@ (800350c <initialise_semihosting_exts+0x30>)
 80034e2:	2100      	movs	r1, #0
 80034e4:	2201      	movs	r2, #1
 80034e6:	a801      	add	r0, sp, #4
 80034e8:	6029      	str	r1, [r5, #0]
 80034ea:	6022      	str	r2, [r4, #0]
 80034ec:	f7ff ff9c 	bl	8003428 <_get_semihosting_exts>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	dd07      	ble.n	8003504 <initialise_semihosting_exts+0x28>
 80034f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034f8:	f003 0201 	and.w	r2, r3, #1
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	602a      	str	r2, [r5, #0]
 8003502:	6023      	str	r3, [r4, #0]
 8003504:	b003      	add	sp, #12
 8003506:	bd30      	pop	{r4, r5, pc}
 8003508:	20000010 	.word	0x20000010
 800350c:	2000000c 	.word	0x2000000c

08003510 <_has_ext_stdout_stderr>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4c04      	ldr	r4, [pc, #16]	@ (8003524 <_has_ext_stdout_stderr+0x14>)
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	da01      	bge.n	800351e <_has_ext_stdout_stderr+0xe>
 800351a:	f7ff ffdf 	bl	80034dc <initialise_semihosting_exts>
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	bd10      	pop	{r4, pc}
 8003522:	bf00      	nop
 8003524:	2000000c 	.word	0x2000000c

08003528 <initialise_monitor_handles>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	b085      	sub	sp, #20
 800352e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80035e0 <initialise_monitor_handles+0xb8>
 8003532:	f8cd 9004 	str.w	r9, [sp, #4]
 8003536:	2303      	movs	r3, #3
 8003538:	2400      	movs	r4, #0
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	af01      	add	r7, sp, #4
 800353e:	9402      	str	r4, [sp, #8]
 8003540:	2501      	movs	r5, #1
 8003542:	4628      	mov	r0, r5
 8003544:	4639      	mov	r1, r7
 8003546:	beab      	bkpt	0x00ab
 8003548:	4605      	mov	r5, r0
 800354a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80035e4 <initialise_monitor_handles+0xbc>
 800354e:	4623      	mov	r3, r4
 8003550:	4c20      	ldr	r4, [pc, #128]	@ (80035d4 <initialise_monitor_handles+0xac>)
 8003552:	f8c8 5000 	str.w	r5, [r8]
 8003556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800355a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800355e:	3301      	adds	r3, #1
 8003560:	2b14      	cmp	r3, #20
 8003562:	d1fa      	bne.n	800355a <initialise_monitor_handles+0x32>
 8003564:	f7ff ffd4 	bl	8003510 <_has_ext_stdout_stderr>
 8003568:	4d1b      	ldr	r5, [pc, #108]	@ (80035d8 <initialise_monitor_handles+0xb0>)
 800356a:	b1d0      	cbz	r0, 80035a2 <initialise_monitor_handles+0x7a>
 800356c:	f04f 0a03 	mov.w	sl, #3
 8003570:	2304      	movs	r3, #4
 8003572:	f8cd 9004 	str.w	r9, [sp, #4]
 8003576:	2601      	movs	r6, #1
 8003578:	f8cd a00c 	str.w	sl, [sp, #12]
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	4630      	mov	r0, r6
 8003580:	4639      	mov	r1, r7
 8003582:	beab      	bkpt	0x00ab
 8003584:	4683      	mov	fp, r0
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <initialise_monitor_handles+0xb4>)
 8003588:	f8cd 9004 	str.w	r9, [sp, #4]
 800358c:	f8c3 b000 	str.w	fp, [r3]
 8003590:	2308      	movs	r3, #8
 8003592:	f8cd a00c 	str.w	sl, [sp, #12]
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	4630      	mov	r0, r6
 800359a:	4639      	mov	r1, r7
 800359c:	beab      	bkpt	0x00ab
 800359e:	4606      	mov	r6, r0
 80035a0:	602e      	str	r6, [r5, #0]
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	bf02      	ittt	eq
 80035a8:	4b0c      	ldreq	r3, [pc, #48]	@ (80035dc <initialise_monitor_handles+0xb4>)
 80035aa:	681b      	ldreq	r3, [r3, #0]
 80035ac:	602b      	streq	r3, [r5, #0]
 80035ae:	2600      	movs	r6, #0
 80035b0:	f8d8 3000 	ldr.w	r3, [r8]
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	6066      	str	r6, [r4, #4]
 80035b8:	f7ff ffaa 	bl	8003510 <_has_ext_stdout_stderr>
 80035bc:	b130      	cbz	r0, 80035cc <initialise_monitor_handles+0xa4>
 80035be:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <initialise_monitor_handles+0xb4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80035cc:	b005      	add	sp, #20
 80035ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d2:	bf00      	nop
 80035d4:	20000264 	.word	0x20000264
 80035d8:	20000258 	.word	0x20000258
 80035dc:	2000025c 	.word	0x2000025c
 80035e0:	080060da 	.word	0x080060da
 80035e4:	20000260 	.word	0x20000260

080035e8 <_isatty>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	f7ff fd83 	bl	80030f4 <findslot>
 80035ee:	2409      	movs	r4, #9
 80035f0:	4605      	mov	r5, r0
 80035f2:	b920      	cbnz	r0, 80035fe <_isatty+0x16>
 80035f4:	f000 fec8 	bl	8004388 <__errno>
 80035f8:	6004      	str	r4, [r0, #0]
 80035fa:	2000      	movs	r0, #0
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	beab      	bkpt	0x00ab
 8003604:	4604      	mov	r4, r0
 8003606:	2c01      	cmp	r4, #1
 8003608:	4620      	mov	r0, r4
 800360a:	d0f7      	beq.n	80035fc <_isatty+0x14>
 800360c:	f000 febc 	bl	8004388 <__errno>
 8003610:	2513      	movs	r5, #19
 8003612:	4604      	mov	r4, r0
 8003614:	2600      	movs	r6, #0
 8003616:	4628      	mov	r0, r5
 8003618:	4631      	mov	r1, r6
 800361a:	beab      	bkpt	0x00ab
 800361c:	4605      	mov	r5, r0
 800361e:	6025      	str	r5, [r4, #0]
 8003620:	e7eb      	b.n	80035fa <_isatty+0x12>

08003622 <__cvt>:
 8003622:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003626:	ec57 6b10 	vmov	r6, r7, d0
 800362a:	2f00      	cmp	r7, #0
 800362c:	460c      	mov	r4, r1
 800362e:	4619      	mov	r1, r3
 8003630:	463b      	mov	r3, r7
 8003632:	bfbb      	ittet	lt
 8003634:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003638:	461f      	movlt	r7, r3
 800363a:	2300      	movge	r3, #0
 800363c:	232d      	movlt	r3, #45	@ 0x2d
 800363e:	700b      	strb	r3, [r1, #0]
 8003640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003642:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003646:	4691      	mov	r9, r2
 8003648:	f023 0820 	bic.w	r8, r3, #32
 800364c:	bfbc      	itt	lt
 800364e:	4632      	movlt	r2, r6
 8003650:	4616      	movlt	r6, r2
 8003652:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003656:	d005      	beq.n	8003664 <__cvt+0x42>
 8003658:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800365c:	d100      	bne.n	8003660 <__cvt+0x3e>
 800365e:	3401      	adds	r4, #1
 8003660:	2102      	movs	r1, #2
 8003662:	e000      	b.n	8003666 <__cvt+0x44>
 8003664:	2103      	movs	r1, #3
 8003666:	ab03      	add	r3, sp, #12
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	ab02      	add	r3, sp, #8
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	ec47 6b10 	vmov	d0, r6, r7
 8003672:	4653      	mov	r3, sl
 8003674:	4622      	mov	r2, r4
 8003676:	f000 ff3f 	bl	80044f8 <_dtoa_r>
 800367a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800367e:	4605      	mov	r5, r0
 8003680:	d119      	bne.n	80036b6 <__cvt+0x94>
 8003682:	f019 0f01 	tst.w	r9, #1
 8003686:	d00e      	beq.n	80036a6 <__cvt+0x84>
 8003688:	eb00 0904 	add.w	r9, r0, r4
 800368c:	2200      	movs	r2, #0
 800368e:	2300      	movs	r3, #0
 8003690:	4630      	mov	r0, r6
 8003692:	4639      	mov	r1, r7
 8003694:	f7fd fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8003698:	b108      	cbz	r0, 800369e <__cvt+0x7c>
 800369a:	f8cd 900c 	str.w	r9, [sp, #12]
 800369e:	2230      	movs	r2, #48	@ 0x30
 80036a0:	9b03      	ldr	r3, [sp, #12]
 80036a2:	454b      	cmp	r3, r9
 80036a4:	d31e      	bcc.n	80036e4 <__cvt+0xc2>
 80036a6:	9b03      	ldr	r3, [sp, #12]
 80036a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80036aa:	1b5b      	subs	r3, r3, r5
 80036ac:	4628      	mov	r0, r5
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	b004      	add	sp, #16
 80036b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036ba:	eb00 0904 	add.w	r9, r0, r4
 80036be:	d1e5      	bne.n	800368c <__cvt+0x6a>
 80036c0:	7803      	ldrb	r3, [r0, #0]
 80036c2:	2b30      	cmp	r3, #48	@ 0x30
 80036c4:	d10a      	bne.n	80036dc <__cvt+0xba>
 80036c6:	2200      	movs	r2, #0
 80036c8:	2300      	movs	r3, #0
 80036ca:	4630      	mov	r0, r6
 80036cc:	4639      	mov	r1, r7
 80036ce:	f7fd fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80036d2:	b918      	cbnz	r0, 80036dc <__cvt+0xba>
 80036d4:	f1c4 0401 	rsb	r4, r4, #1
 80036d8:	f8ca 4000 	str.w	r4, [sl]
 80036dc:	f8da 3000 	ldr.w	r3, [sl]
 80036e0:	4499      	add	r9, r3
 80036e2:	e7d3      	b.n	800368c <__cvt+0x6a>
 80036e4:	1c59      	adds	r1, r3, #1
 80036e6:	9103      	str	r1, [sp, #12]
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e7d9      	b.n	80036a0 <__cvt+0x7e>

080036ec <__exponent>:
 80036ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036ee:	2900      	cmp	r1, #0
 80036f0:	bfba      	itte	lt
 80036f2:	4249      	neglt	r1, r1
 80036f4:	232d      	movlt	r3, #45	@ 0x2d
 80036f6:	232b      	movge	r3, #43	@ 0x2b
 80036f8:	2909      	cmp	r1, #9
 80036fa:	7002      	strb	r2, [r0, #0]
 80036fc:	7043      	strb	r3, [r0, #1]
 80036fe:	dd29      	ble.n	8003754 <__exponent+0x68>
 8003700:	f10d 0307 	add.w	r3, sp, #7
 8003704:	461d      	mov	r5, r3
 8003706:	270a      	movs	r7, #10
 8003708:	461a      	mov	r2, r3
 800370a:	fbb1 f6f7 	udiv	r6, r1, r7
 800370e:	fb07 1416 	mls	r4, r7, r6, r1
 8003712:	3430      	adds	r4, #48	@ 0x30
 8003714:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003718:	460c      	mov	r4, r1
 800371a:	2c63      	cmp	r4, #99	@ 0x63
 800371c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003720:	4631      	mov	r1, r6
 8003722:	dcf1      	bgt.n	8003708 <__exponent+0x1c>
 8003724:	3130      	adds	r1, #48	@ 0x30
 8003726:	1e94      	subs	r4, r2, #2
 8003728:	f803 1c01 	strb.w	r1, [r3, #-1]
 800372c:	1c41      	adds	r1, r0, #1
 800372e:	4623      	mov	r3, r4
 8003730:	42ab      	cmp	r3, r5
 8003732:	d30a      	bcc.n	800374a <__exponent+0x5e>
 8003734:	f10d 0309 	add.w	r3, sp, #9
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	42ac      	cmp	r4, r5
 800373c:	bf88      	it	hi
 800373e:	2300      	movhi	r3, #0
 8003740:	3302      	adds	r3, #2
 8003742:	4403      	add	r3, r0
 8003744:	1a18      	subs	r0, r3, r0
 8003746:	b003      	add	sp, #12
 8003748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800374e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003752:	e7ed      	b.n	8003730 <__exponent+0x44>
 8003754:	2330      	movs	r3, #48	@ 0x30
 8003756:	3130      	adds	r1, #48	@ 0x30
 8003758:	7083      	strb	r3, [r0, #2]
 800375a:	70c1      	strb	r1, [r0, #3]
 800375c:	1d03      	adds	r3, r0, #4
 800375e:	e7f1      	b.n	8003744 <__exponent+0x58>

08003760 <_printf_float>:
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	b08d      	sub	sp, #52	@ 0x34
 8003766:	460c      	mov	r4, r1
 8003768:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800376c:	4616      	mov	r6, r2
 800376e:	461f      	mov	r7, r3
 8003770:	4605      	mov	r5, r0
 8003772:	f000 fdbf 	bl	80042f4 <_localeconv_r>
 8003776:	6803      	ldr	r3, [r0, #0]
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc fd80 	bl	8000280 <strlen>
 8003780:	2300      	movs	r3, #0
 8003782:	930a      	str	r3, [sp, #40]	@ 0x28
 8003784:	f8d8 3000 	ldr.w	r3, [r8]
 8003788:	9005      	str	r0, [sp, #20]
 800378a:	3307      	adds	r3, #7
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	f103 0208 	add.w	r2, r3, #8
 8003794:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003798:	f8d4 b000 	ldr.w	fp, [r4]
 800379c:	f8c8 2000 	str.w	r2, [r8]
 80037a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80037a8:	9307      	str	r3, [sp, #28]
 80037aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80037ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80037b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037b6:	4b9c      	ldr	r3, [pc, #624]	@ (8003a28 <_printf_float+0x2c8>)
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037bc:	f7fd f9be 	bl	8000b3c <__aeabi_dcmpun>
 80037c0:	bb70      	cbnz	r0, 8003820 <_printf_float+0xc0>
 80037c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037c6:	4b98      	ldr	r3, [pc, #608]	@ (8003a28 <_printf_float+0x2c8>)
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037cc:	f7fd f998 	bl	8000b00 <__aeabi_dcmple>
 80037d0:	bb30      	cbnz	r0, 8003820 <_printf_float+0xc0>
 80037d2:	2200      	movs	r2, #0
 80037d4:	2300      	movs	r3, #0
 80037d6:	4640      	mov	r0, r8
 80037d8:	4649      	mov	r1, r9
 80037da:	f7fd f987 	bl	8000aec <__aeabi_dcmplt>
 80037de:	b110      	cbz	r0, 80037e6 <_printf_float+0x86>
 80037e0:	232d      	movs	r3, #45	@ 0x2d
 80037e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037e6:	4a91      	ldr	r2, [pc, #580]	@ (8003a2c <_printf_float+0x2cc>)
 80037e8:	4b91      	ldr	r3, [pc, #580]	@ (8003a30 <_printf_float+0x2d0>)
 80037ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80037ee:	bf94      	ite	ls
 80037f0:	4690      	movls	r8, r2
 80037f2:	4698      	movhi	r8, r3
 80037f4:	2303      	movs	r3, #3
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	f02b 0304 	bic.w	r3, fp, #4
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	f04f 0900 	mov.w	r9, #0
 8003802:	9700      	str	r7, [sp, #0]
 8003804:	4633      	mov	r3, r6
 8003806:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003808:	4621      	mov	r1, r4
 800380a:	4628      	mov	r0, r5
 800380c:	f000 f9d2 	bl	8003bb4 <_printf_common>
 8003810:	3001      	adds	r0, #1
 8003812:	f040 808d 	bne.w	8003930 <_printf_float+0x1d0>
 8003816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800381a:	b00d      	add	sp, #52	@ 0x34
 800381c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	4640      	mov	r0, r8
 8003826:	4649      	mov	r1, r9
 8003828:	f7fd f988 	bl	8000b3c <__aeabi_dcmpun>
 800382c:	b140      	cbz	r0, 8003840 <_printf_float+0xe0>
 800382e:	464b      	mov	r3, r9
 8003830:	2b00      	cmp	r3, #0
 8003832:	bfbc      	itt	lt
 8003834:	232d      	movlt	r3, #45	@ 0x2d
 8003836:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800383a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a34 <_printf_float+0x2d4>)
 800383c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a38 <_printf_float+0x2d8>)
 800383e:	e7d4      	b.n	80037ea <_printf_float+0x8a>
 8003840:	6863      	ldr	r3, [r4, #4]
 8003842:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003846:	9206      	str	r2, [sp, #24]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	d13b      	bne.n	80038c4 <_printf_float+0x164>
 800384c:	2306      	movs	r3, #6
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003854:	2300      	movs	r3, #0
 8003856:	6022      	str	r2, [r4, #0]
 8003858:	9303      	str	r3, [sp, #12]
 800385a:	ab0a      	add	r3, sp, #40	@ 0x28
 800385c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003860:	ab09      	add	r3, sp, #36	@ 0x24
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	6861      	ldr	r1, [r4, #4]
 8003866:	ec49 8b10 	vmov	d0, r8, r9
 800386a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800386e:	4628      	mov	r0, r5
 8003870:	f7ff fed7 	bl	8003622 <__cvt>
 8003874:	9b06      	ldr	r3, [sp, #24]
 8003876:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003878:	2b47      	cmp	r3, #71	@ 0x47
 800387a:	4680      	mov	r8, r0
 800387c:	d129      	bne.n	80038d2 <_printf_float+0x172>
 800387e:	1cc8      	adds	r0, r1, #3
 8003880:	db02      	blt.n	8003888 <_printf_float+0x128>
 8003882:	6863      	ldr	r3, [r4, #4]
 8003884:	4299      	cmp	r1, r3
 8003886:	dd41      	ble.n	800390c <_printf_float+0x1ac>
 8003888:	f1aa 0a02 	sub.w	sl, sl, #2
 800388c:	fa5f fa8a 	uxtb.w	sl, sl
 8003890:	3901      	subs	r1, #1
 8003892:	4652      	mov	r2, sl
 8003894:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003898:	9109      	str	r1, [sp, #36]	@ 0x24
 800389a:	f7ff ff27 	bl	80036ec <__exponent>
 800389e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038a0:	1813      	adds	r3, r2, r0
 80038a2:	2a01      	cmp	r2, #1
 80038a4:	4681      	mov	r9, r0
 80038a6:	6123      	str	r3, [r4, #16]
 80038a8:	dc02      	bgt.n	80038b0 <_printf_float+0x150>
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	07d2      	lsls	r2, r2, #31
 80038ae:	d501      	bpl.n	80038b4 <_printf_float+0x154>
 80038b0:	3301      	adds	r3, #1
 80038b2:	6123      	str	r3, [r4, #16]
 80038b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0a2      	beq.n	8003802 <_printf_float+0xa2>
 80038bc:	232d      	movs	r3, #45	@ 0x2d
 80038be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038c2:	e79e      	b.n	8003802 <_printf_float+0xa2>
 80038c4:	9a06      	ldr	r2, [sp, #24]
 80038c6:	2a47      	cmp	r2, #71	@ 0x47
 80038c8:	d1c2      	bne.n	8003850 <_printf_float+0xf0>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1c0      	bne.n	8003850 <_printf_float+0xf0>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e7bd      	b.n	800384e <_printf_float+0xee>
 80038d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038d6:	d9db      	bls.n	8003890 <_printf_float+0x130>
 80038d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80038dc:	d118      	bne.n	8003910 <_printf_float+0x1b0>
 80038de:	2900      	cmp	r1, #0
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	dd0b      	ble.n	80038fc <_printf_float+0x19c>
 80038e4:	6121      	str	r1, [r4, #16]
 80038e6:	b913      	cbnz	r3, 80038ee <_printf_float+0x18e>
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	07d0      	lsls	r0, r2, #31
 80038ec:	d502      	bpl.n	80038f4 <_printf_float+0x194>
 80038ee:	3301      	adds	r3, #1
 80038f0:	440b      	add	r3, r1
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80038f6:	f04f 0900 	mov.w	r9, #0
 80038fa:	e7db      	b.n	80038b4 <_printf_float+0x154>
 80038fc:	b913      	cbnz	r3, 8003904 <_printf_float+0x1a4>
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	07d2      	lsls	r2, r2, #31
 8003902:	d501      	bpl.n	8003908 <_printf_float+0x1a8>
 8003904:	3302      	adds	r3, #2
 8003906:	e7f4      	b.n	80038f2 <_printf_float+0x192>
 8003908:	2301      	movs	r3, #1
 800390a:	e7f2      	b.n	80038f2 <_printf_float+0x192>
 800390c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003912:	4299      	cmp	r1, r3
 8003914:	db05      	blt.n	8003922 <_printf_float+0x1c2>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	6121      	str	r1, [r4, #16]
 800391a:	07d8      	lsls	r0, r3, #31
 800391c:	d5ea      	bpl.n	80038f4 <_printf_float+0x194>
 800391e:	1c4b      	adds	r3, r1, #1
 8003920:	e7e7      	b.n	80038f2 <_printf_float+0x192>
 8003922:	2900      	cmp	r1, #0
 8003924:	bfd4      	ite	le
 8003926:	f1c1 0202 	rsble	r2, r1, #2
 800392a:	2201      	movgt	r2, #1
 800392c:	4413      	add	r3, r2
 800392e:	e7e0      	b.n	80038f2 <_printf_float+0x192>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	055a      	lsls	r2, r3, #21
 8003934:	d407      	bmi.n	8003946 <_printf_float+0x1e6>
 8003936:	6923      	ldr	r3, [r4, #16]
 8003938:	4642      	mov	r2, r8
 800393a:	4631      	mov	r1, r6
 800393c:	4628      	mov	r0, r5
 800393e:	47b8      	blx	r7
 8003940:	3001      	adds	r0, #1
 8003942:	d12b      	bne.n	800399c <_printf_float+0x23c>
 8003944:	e767      	b.n	8003816 <_printf_float+0xb6>
 8003946:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800394a:	f240 80dd 	bls.w	8003b08 <_printf_float+0x3a8>
 800394e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003952:	2200      	movs	r2, #0
 8003954:	2300      	movs	r3, #0
 8003956:	f7fd f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800395a:	2800      	cmp	r0, #0
 800395c:	d033      	beq.n	80039c6 <_printf_float+0x266>
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <_printf_float+0x2dc>)
 8003960:	2301      	movs	r3, #1
 8003962:	4631      	mov	r1, r6
 8003964:	4628      	mov	r0, r5
 8003966:	47b8      	blx	r7
 8003968:	3001      	adds	r0, #1
 800396a:	f43f af54 	beq.w	8003816 <_printf_float+0xb6>
 800396e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003972:	4543      	cmp	r3, r8
 8003974:	db02      	blt.n	800397c <_printf_float+0x21c>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	07d8      	lsls	r0, r3, #31
 800397a:	d50f      	bpl.n	800399c <_printf_float+0x23c>
 800397c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	f43f af45 	beq.w	8003816 <_printf_float+0xb6>
 800398c:	f04f 0900 	mov.w	r9, #0
 8003990:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003994:	f104 0a1a 	add.w	sl, r4, #26
 8003998:	45c8      	cmp	r8, r9
 800399a:	dc09      	bgt.n	80039b0 <_printf_float+0x250>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	079b      	lsls	r3, r3, #30
 80039a0:	f100 8103 	bmi.w	8003baa <_printf_float+0x44a>
 80039a4:	68e0      	ldr	r0, [r4, #12]
 80039a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039a8:	4298      	cmp	r0, r3
 80039aa:	bfb8      	it	lt
 80039ac:	4618      	movlt	r0, r3
 80039ae:	e734      	b.n	800381a <_printf_float+0xba>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4652      	mov	r2, sl
 80039b4:	4631      	mov	r1, r6
 80039b6:	4628      	mov	r0, r5
 80039b8:	47b8      	blx	r7
 80039ba:	3001      	adds	r0, #1
 80039bc:	f43f af2b 	beq.w	8003816 <_printf_float+0xb6>
 80039c0:	f109 0901 	add.w	r9, r9, #1
 80039c4:	e7e8      	b.n	8003998 <_printf_float+0x238>
 80039c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dc39      	bgt.n	8003a40 <_printf_float+0x2e0>
 80039cc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a3c <_printf_float+0x2dc>)
 80039ce:	2301      	movs	r3, #1
 80039d0:	4631      	mov	r1, r6
 80039d2:	4628      	mov	r0, r5
 80039d4:	47b8      	blx	r7
 80039d6:	3001      	adds	r0, #1
 80039d8:	f43f af1d 	beq.w	8003816 <_printf_float+0xb6>
 80039dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80039e0:	ea59 0303 	orrs.w	r3, r9, r3
 80039e4:	d102      	bne.n	80039ec <_printf_float+0x28c>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	07d9      	lsls	r1, r3, #31
 80039ea:	d5d7      	bpl.n	800399c <_printf_float+0x23c>
 80039ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f0:	4631      	mov	r1, r6
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b8      	blx	r7
 80039f6:	3001      	adds	r0, #1
 80039f8:	f43f af0d 	beq.w	8003816 <_printf_float+0xb6>
 80039fc:	f04f 0a00 	mov.w	sl, #0
 8003a00:	f104 0b1a 	add.w	fp, r4, #26
 8003a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a06:	425b      	negs	r3, r3
 8003a08:	4553      	cmp	r3, sl
 8003a0a:	dc01      	bgt.n	8003a10 <_printf_float+0x2b0>
 8003a0c:	464b      	mov	r3, r9
 8003a0e:	e793      	b.n	8003938 <_printf_float+0x1d8>
 8003a10:	2301      	movs	r3, #1
 8003a12:	465a      	mov	r2, fp
 8003a14:	4631      	mov	r1, r6
 8003a16:	4628      	mov	r0, r5
 8003a18:	47b8      	blx	r7
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	f43f aefb 	beq.w	8003816 <_printf_float+0xb6>
 8003a20:	f10a 0a01 	add.w	sl, sl, #1
 8003a24:	e7ee      	b.n	8003a04 <_printf_float+0x2a4>
 8003a26:	bf00      	nop
 8003a28:	7fefffff 	.word	0x7fefffff
 8003a2c:	080060de 	.word	0x080060de
 8003a30:	080060e2 	.word	0x080060e2
 8003a34:	080060e6 	.word	0x080060e6
 8003a38:	080060ea 	.word	0x080060ea
 8003a3c:	080060ee 	.word	0x080060ee
 8003a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a46:	4553      	cmp	r3, sl
 8003a48:	bfa8      	it	ge
 8003a4a:	4653      	movge	r3, sl
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	4699      	mov	r9, r3
 8003a50:	dc36      	bgt.n	8003ac0 <_printf_float+0x360>
 8003a52:	f04f 0b00 	mov.w	fp, #0
 8003a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a5a:	f104 021a 	add.w	r2, r4, #26
 8003a5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a60:	9306      	str	r3, [sp, #24]
 8003a62:	eba3 0309 	sub.w	r3, r3, r9
 8003a66:	455b      	cmp	r3, fp
 8003a68:	dc31      	bgt.n	8003ace <_printf_float+0x36e>
 8003a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a6c:	459a      	cmp	sl, r3
 8003a6e:	dc3a      	bgt.n	8003ae6 <_printf_float+0x386>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	07da      	lsls	r2, r3, #31
 8003a74:	d437      	bmi.n	8003ae6 <_printf_float+0x386>
 8003a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a78:	ebaa 0903 	sub.w	r9, sl, r3
 8003a7c:	9b06      	ldr	r3, [sp, #24]
 8003a7e:	ebaa 0303 	sub.w	r3, sl, r3
 8003a82:	4599      	cmp	r9, r3
 8003a84:	bfa8      	it	ge
 8003a86:	4699      	movge	r9, r3
 8003a88:	f1b9 0f00 	cmp.w	r9, #0
 8003a8c:	dc33      	bgt.n	8003af6 <_printf_float+0x396>
 8003a8e:	f04f 0800 	mov.w	r8, #0
 8003a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a96:	f104 0b1a 	add.w	fp, r4, #26
 8003a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a9c:	ebaa 0303 	sub.w	r3, sl, r3
 8003aa0:	eba3 0309 	sub.w	r3, r3, r9
 8003aa4:	4543      	cmp	r3, r8
 8003aa6:	f77f af79 	ble.w	800399c <_printf_float+0x23c>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	465a      	mov	r2, fp
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	47b8      	blx	r7
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	f43f aeae 	beq.w	8003816 <_printf_float+0xb6>
 8003aba:	f108 0801 	add.w	r8, r8, #1
 8003abe:	e7ec      	b.n	8003a9a <_printf_float+0x33a>
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b8      	blx	r7
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d1c2      	bne.n	8003a52 <_printf_float+0x2f2>
 8003acc:	e6a3      	b.n	8003816 <_printf_float+0xb6>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4631      	mov	r1, r6
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	9206      	str	r2, [sp, #24]
 8003ad6:	47b8      	blx	r7
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f43f ae9c 	beq.w	8003816 <_printf_float+0xb6>
 8003ade:	9a06      	ldr	r2, [sp, #24]
 8003ae0:	f10b 0b01 	add.w	fp, fp, #1
 8003ae4:	e7bb      	b.n	8003a5e <_printf_float+0x2fe>
 8003ae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aea:	4631      	mov	r1, r6
 8003aec:	4628      	mov	r0, r5
 8003aee:	47b8      	blx	r7
 8003af0:	3001      	adds	r0, #1
 8003af2:	d1c0      	bne.n	8003a76 <_printf_float+0x316>
 8003af4:	e68f      	b.n	8003816 <_printf_float+0xb6>
 8003af6:	9a06      	ldr	r2, [sp, #24]
 8003af8:	464b      	mov	r3, r9
 8003afa:	4442      	add	r2, r8
 8003afc:	4631      	mov	r1, r6
 8003afe:	4628      	mov	r0, r5
 8003b00:	47b8      	blx	r7
 8003b02:	3001      	adds	r0, #1
 8003b04:	d1c3      	bne.n	8003a8e <_printf_float+0x32e>
 8003b06:	e686      	b.n	8003816 <_printf_float+0xb6>
 8003b08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003b0c:	f1ba 0f01 	cmp.w	sl, #1
 8003b10:	dc01      	bgt.n	8003b16 <_printf_float+0x3b6>
 8003b12:	07db      	lsls	r3, r3, #31
 8003b14:	d536      	bpl.n	8003b84 <_printf_float+0x424>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4642      	mov	r2, r8
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	f43f ae78 	beq.w	8003816 <_printf_float+0xb6>
 8003b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	47b8      	blx	r7
 8003b30:	3001      	adds	r0, #1
 8003b32:	f43f ae70 	beq.w	8003816 <_printf_float+0xb6>
 8003b36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003b42:	f7fc ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b46:	b9c0      	cbnz	r0, 8003b7a <_printf_float+0x41a>
 8003b48:	4653      	mov	r3, sl
 8003b4a:	f108 0201 	add.w	r2, r8, #1
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4628      	mov	r0, r5
 8003b52:	47b8      	blx	r7
 8003b54:	3001      	adds	r0, #1
 8003b56:	d10c      	bne.n	8003b72 <_printf_float+0x412>
 8003b58:	e65d      	b.n	8003816 <_printf_float+0xb6>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	465a      	mov	r2, fp
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4628      	mov	r0, r5
 8003b62:	47b8      	blx	r7
 8003b64:	3001      	adds	r0, #1
 8003b66:	f43f ae56 	beq.w	8003816 <_printf_float+0xb6>
 8003b6a:	f108 0801 	add.w	r8, r8, #1
 8003b6e:	45d0      	cmp	r8, sl
 8003b70:	dbf3      	blt.n	8003b5a <_printf_float+0x3fa>
 8003b72:	464b      	mov	r3, r9
 8003b74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b78:	e6df      	b.n	800393a <_printf_float+0x1da>
 8003b7a:	f04f 0800 	mov.w	r8, #0
 8003b7e:	f104 0b1a 	add.w	fp, r4, #26
 8003b82:	e7f4      	b.n	8003b6e <_printf_float+0x40e>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4642      	mov	r2, r8
 8003b88:	e7e1      	b.n	8003b4e <_printf_float+0x3ee>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	464a      	mov	r2, r9
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b8      	blx	r7
 8003b94:	3001      	adds	r0, #1
 8003b96:	f43f ae3e 	beq.w	8003816 <_printf_float+0xb6>
 8003b9a:	f108 0801 	add.w	r8, r8, #1
 8003b9e:	68e3      	ldr	r3, [r4, #12]
 8003ba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ba2:	1a5b      	subs	r3, r3, r1
 8003ba4:	4543      	cmp	r3, r8
 8003ba6:	dcf0      	bgt.n	8003b8a <_printf_float+0x42a>
 8003ba8:	e6fc      	b.n	80039a4 <_printf_float+0x244>
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	f104 0919 	add.w	r9, r4, #25
 8003bb2:	e7f4      	b.n	8003b9e <_printf_float+0x43e>

08003bb4 <_printf_common>:
 8003bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb8:	4616      	mov	r6, r2
 8003bba:	4698      	mov	r8, r3
 8003bbc:	688a      	ldr	r2, [r1, #8]
 8003bbe:	690b      	ldr	r3, [r1, #16]
 8003bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bfb8      	it	lt
 8003bc8:	4613      	movlt	r3, r2
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	b10a      	cbz	r2, 8003bda <_printf_common+0x26>
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	6033      	str	r3, [r6, #0]
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	0699      	lsls	r1, r3, #26
 8003bde:	bf42      	ittt	mi
 8003be0:	6833      	ldrmi	r3, [r6, #0]
 8003be2:	3302      	addmi	r3, #2
 8003be4:	6033      	strmi	r3, [r6, #0]
 8003be6:	6825      	ldr	r5, [r4, #0]
 8003be8:	f015 0506 	ands.w	r5, r5, #6
 8003bec:	d106      	bne.n	8003bfc <_printf_common+0x48>
 8003bee:	f104 0a19 	add.w	sl, r4, #25
 8003bf2:	68e3      	ldr	r3, [r4, #12]
 8003bf4:	6832      	ldr	r2, [r6, #0]
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	42ab      	cmp	r3, r5
 8003bfa:	dc26      	bgt.n	8003c4a <_printf_common+0x96>
 8003bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	3b00      	subs	r3, #0
 8003c04:	bf18      	it	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	0692      	lsls	r2, r2, #26
 8003c0a:	d42b      	bmi.n	8003c64 <_printf_common+0xb0>
 8003c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c10:	4641      	mov	r1, r8
 8003c12:	4638      	mov	r0, r7
 8003c14:	47c8      	blx	r9
 8003c16:	3001      	adds	r0, #1
 8003c18:	d01e      	beq.n	8003c58 <_printf_common+0xa4>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	6922      	ldr	r2, [r4, #16]
 8003c1e:	f003 0306 	and.w	r3, r3, #6
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	bf02      	ittt	eq
 8003c26:	68e5      	ldreq	r5, [r4, #12]
 8003c28:	6833      	ldreq	r3, [r6, #0]
 8003c2a:	1aed      	subeq	r5, r5, r3
 8003c2c:	68a3      	ldr	r3, [r4, #8]
 8003c2e:	bf0c      	ite	eq
 8003c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c34:	2500      	movne	r5, #0
 8003c36:	4293      	cmp	r3, r2
 8003c38:	bfc4      	itt	gt
 8003c3a:	1a9b      	subgt	r3, r3, r2
 8003c3c:	18ed      	addgt	r5, r5, r3
 8003c3e:	2600      	movs	r6, #0
 8003c40:	341a      	adds	r4, #26
 8003c42:	42b5      	cmp	r5, r6
 8003c44:	d11a      	bne.n	8003c7c <_printf_common+0xc8>
 8003c46:	2000      	movs	r0, #0
 8003c48:	e008      	b.n	8003c5c <_printf_common+0xa8>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4652      	mov	r2, sl
 8003c4e:	4641      	mov	r1, r8
 8003c50:	4638      	mov	r0, r7
 8003c52:	47c8      	blx	r9
 8003c54:	3001      	adds	r0, #1
 8003c56:	d103      	bne.n	8003c60 <_printf_common+0xac>
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c60:	3501      	adds	r5, #1
 8003c62:	e7c6      	b.n	8003bf2 <_printf_common+0x3e>
 8003c64:	18e1      	adds	r1, r4, r3
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	2030      	movs	r0, #48	@ 0x30
 8003c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c6e:	4422      	add	r2, r4
 8003c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c78:	3302      	adds	r3, #2
 8003c7a:	e7c7      	b.n	8003c0c <_printf_common+0x58>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4622      	mov	r2, r4
 8003c80:	4641      	mov	r1, r8
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c8      	blx	r9
 8003c86:	3001      	adds	r0, #1
 8003c88:	d0e6      	beq.n	8003c58 <_printf_common+0xa4>
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7d9      	b.n	8003c42 <_printf_common+0x8e>
	...

08003c90 <_printf_i>:
 8003c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	7e0f      	ldrb	r7, [r1, #24]
 8003c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c98:	2f78      	cmp	r7, #120	@ 0x78
 8003c9a:	4691      	mov	r9, r2
 8003c9c:	4680      	mov	r8, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	469a      	mov	sl, r3
 8003ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ca6:	d807      	bhi.n	8003cb8 <_printf_i+0x28>
 8003ca8:	2f62      	cmp	r7, #98	@ 0x62
 8003caa:	d80a      	bhi.n	8003cc2 <_printf_i+0x32>
 8003cac:	2f00      	cmp	r7, #0
 8003cae:	f000 80d2 	beq.w	8003e56 <_printf_i+0x1c6>
 8003cb2:	2f58      	cmp	r7, #88	@ 0x58
 8003cb4:	f000 80b9 	beq.w	8003e2a <_printf_i+0x19a>
 8003cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cc0:	e03a      	b.n	8003d38 <_printf_i+0xa8>
 8003cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cc6:	2b15      	cmp	r3, #21
 8003cc8:	d8f6      	bhi.n	8003cb8 <_printf_i+0x28>
 8003cca:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd0 <_printf_i+0x40>)
 8003ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d3d 	.word	0x08003d3d
 8003cd8:	08003cb9 	.word	0x08003cb9
 8003cdc:	08003cb9 	.word	0x08003cb9
 8003ce0:	08003cb9 	.word	0x08003cb9
 8003ce4:	08003cb9 	.word	0x08003cb9
 8003ce8:	08003d3d 	.word	0x08003d3d
 8003cec:	08003cb9 	.word	0x08003cb9
 8003cf0:	08003cb9 	.word	0x08003cb9
 8003cf4:	08003cb9 	.word	0x08003cb9
 8003cf8:	08003cb9 	.word	0x08003cb9
 8003cfc:	08003e3d 	.word	0x08003e3d
 8003d00:	08003d67 	.word	0x08003d67
 8003d04:	08003df7 	.word	0x08003df7
 8003d08:	08003cb9 	.word	0x08003cb9
 8003d0c:	08003cb9 	.word	0x08003cb9
 8003d10:	08003e5f 	.word	0x08003e5f
 8003d14:	08003cb9 	.word	0x08003cb9
 8003d18:	08003d67 	.word	0x08003d67
 8003d1c:	08003cb9 	.word	0x08003cb9
 8003d20:	08003cb9 	.word	0x08003cb9
 8003d24:	08003dff 	.word	0x08003dff
 8003d28:	6833      	ldr	r3, [r6, #0]
 8003d2a:	1d1a      	adds	r2, r3, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6032      	str	r2, [r6, #0]
 8003d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e09d      	b.n	8003e78 <_printf_i+0x1e8>
 8003d3c:	6833      	ldr	r3, [r6, #0]
 8003d3e:	6820      	ldr	r0, [r4, #0]
 8003d40:	1d19      	adds	r1, r3, #4
 8003d42:	6031      	str	r1, [r6, #0]
 8003d44:	0606      	lsls	r6, r0, #24
 8003d46:	d501      	bpl.n	8003d4c <_printf_i+0xbc>
 8003d48:	681d      	ldr	r5, [r3, #0]
 8003d4a:	e003      	b.n	8003d54 <_printf_i+0xc4>
 8003d4c:	0645      	lsls	r5, r0, #25
 8003d4e:	d5fb      	bpl.n	8003d48 <_printf_i+0xb8>
 8003d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d54:	2d00      	cmp	r5, #0
 8003d56:	da03      	bge.n	8003d60 <_printf_i+0xd0>
 8003d58:	232d      	movs	r3, #45	@ 0x2d
 8003d5a:	426d      	negs	r5, r5
 8003d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d60:	4859      	ldr	r0, [pc, #356]	@ (8003ec8 <_printf_i+0x238>)
 8003d62:	230a      	movs	r3, #10
 8003d64:	e011      	b.n	8003d8a <_printf_i+0xfa>
 8003d66:	6821      	ldr	r1, [r4, #0]
 8003d68:	6833      	ldr	r3, [r6, #0]
 8003d6a:	0608      	lsls	r0, r1, #24
 8003d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d70:	d402      	bmi.n	8003d78 <_printf_i+0xe8>
 8003d72:	0649      	lsls	r1, r1, #25
 8003d74:	bf48      	it	mi
 8003d76:	b2ad      	uxthmi	r5, r5
 8003d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d7a:	4853      	ldr	r0, [pc, #332]	@ (8003ec8 <_printf_i+0x238>)
 8003d7c:	6033      	str	r3, [r6, #0]
 8003d7e:	bf14      	ite	ne
 8003d80:	230a      	movne	r3, #10
 8003d82:	2308      	moveq	r3, #8
 8003d84:	2100      	movs	r1, #0
 8003d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d8a:	6866      	ldr	r6, [r4, #4]
 8003d8c:	60a6      	str	r6, [r4, #8]
 8003d8e:	2e00      	cmp	r6, #0
 8003d90:	bfa2      	ittt	ge
 8003d92:	6821      	ldrge	r1, [r4, #0]
 8003d94:	f021 0104 	bicge.w	r1, r1, #4
 8003d98:	6021      	strge	r1, [r4, #0]
 8003d9a:	b90d      	cbnz	r5, 8003da0 <_printf_i+0x110>
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	d04b      	beq.n	8003e38 <_printf_i+0x1a8>
 8003da0:	4616      	mov	r6, r2
 8003da2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003da6:	fb03 5711 	mls	r7, r3, r1, r5
 8003daa:	5dc7      	ldrb	r7, [r0, r7]
 8003dac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003db0:	462f      	mov	r7, r5
 8003db2:	42bb      	cmp	r3, r7
 8003db4:	460d      	mov	r5, r1
 8003db6:	d9f4      	bls.n	8003da2 <_printf_i+0x112>
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d10b      	bne.n	8003dd4 <_printf_i+0x144>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	07df      	lsls	r7, r3, #31
 8003dc0:	d508      	bpl.n	8003dd4 <_printf_i+0x144>
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	6861      	ldr	r1, [r4, #4]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	bfde      	ittt	le
 8003dca:	2330      	movle	r3, #48	@ 0x30
 8003dcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003dd4:	1b92      	subs	r2, r2, r6
 8003dd6:	6122      	str	r2, [r4, #16]
 8003dd8:	f8cd a000 	str.w	sl, [sp]
 8003ddc:	464b      	mov	r3, r9
 8003dde:	aa03      	add	r2, sp, #12
 8003de0:	4621      	mov	r1, r4
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7ff fee6 	bl	8003bb4 <_printf_common>
 8003de8:	3001      	adds	r0, #1
 8003dea:	d14a      	bne.n	8003e82 <_printf_i+0x1f2>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003df0:	b004      	add	sp, #16
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	f043 0320 	orr.w	r3, r3, #32
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	4833      	ldr	r0, [pc, #204]	@ (8003ecc <_printf_i+0x23c>)
 8003e00:	2778      	movs	r7, #120	@ 0x78
 8003e02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	6831      	ldr	r1, [r6, #0]
 8003e0a:	061f      	lsls	r7, r3, #24
 8003e0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e10:	d402      	bmi.n	8003e18 <_printf_i+0x188>
 8003e12:	065f      	lsls	r7, r3, #25
 8003e14:	bf48      	it	mi
 8003e16:	b2ad      	uxthmi	r5, r5
 8003e18:	6031      	str	r1, [r6, #0]
 8003e1a:	07d9      	lsls	r1, r3, #31
 8003e1c:	bf44      	itt	mi
 8003e1e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e22:	6023      	strmi	r3, [r4, #0]
 8003e24:	b11d      	cbz	r5, 8003e2e <_printf_i+0x19e>
 8003e26:	2310      	movs	r3, #16
 8003e28:	e7ac      	b.n	8003d84 <_printf_i+0xf4>
 8003e2a:	4827      	ldr	r0, [pc, #156]	@ (8003ec8 <_printf_i+0x238>)
 8003e2c:	e7e9      	b.n	8003e02 <_printf_i+0x172>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	f023 0320 	bic.w	r3, r3, #32
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	e7f6      	b.n	8003e26 <_printf_i+0x196>
 8003e38:	4616      	mov	r6, r2
 8003e3a:	e7bd      	b.n	8003db8 <_printf_i+0x128>
 8003e3c:	6833      	ldr	r3, [r6, #0]
 8003e3e:	6825      	ldr	r5, [r4, #0]
 8003e40:	6961      	ldr	r1, [r4, #20]
 8003e42:	1d18      	adds	r0, r3, #4
 8003e44:	6030      	str	r0, [r6, #0]
 8003e46:	062e      	lsls	r6, r5, #24
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	d501      	bpl.n	8003e50 <_printf_i+0x1c0>
 8003e4c:	6019      	str	r1, [r3, #0]
 8003e4e:	e002      	b.n	8003e56 <_printf_i+0x1c6>
 8003e50:	0668      	lsls	r0, r5, #25
 8003e52:	d5fb      	bpl.n	8003e4c <_printf_i+0x1bc>
 8003e54:	8019      	strh	r1, [r3, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	6123      	str	r3, [r4, #16]
 8003e5a:	4616      	mov	r6, r2
 8003e5c:	e7bc      	b.n	8003dd8 <_printf_i+0x148>
 8003e5e:	6833      	ldr	r3, [r6, #0]
 8003e60:	1d1a      	adds	r2, r3, #4
 8003e62:	6032      	str	r2, [r6, #0]
 8003e64:	681e      	ldr	r6, [r3, #0]
 8003e66:	6862      	ldr	r2, [r4, #4]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f7fc f9b8 	bl	80001e0 <memchr>
 8003e70:	b108      	cbz	r0, 8003e76 <_printf_i+0x1e6>
 8003e72:	1b80      	subs	r0, r0, r6
 8003e74:	6060      	str	r0, [r4, #4]
 8003e76:	6863      	ldr	r3, [r4, #4]
 8003e78:	6123      	str	r3, [r4, #16]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e80:	e7aa      	b.n	8003dd8 <_printf_i+0x148>
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	4632      	mov	r2, r6
 8003e86:	4649      	mov	r1, r9
 8003e88:	4640      	mov	r0, r8
 8003e8a:	47d0      	blx	sl
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d0ad      	beq.n	8003dec <_printf_i+0x15c>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	079b      	lsls	r3, r3, #30
 8003e94:	d413      	bmi.n	8003ebe <_printf_i+0x22e>
 8003e96:	68e0      	ldr	r0, [r4, #12]
 8003e98:	9b03      	ldr	r3, [sp, #12]
 8003e9a:	4298      	cmp	r0, r3
 8003e9c:	bfb8      	it	lt
 8003e9e:	4618      	movlt	r0, r3
 8003ea0:	e7a6      	b.n	8003df0 <_printf_i+0x160>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4632      	mov	r2, r6
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	4640      	mov	r0, r8
 8003eaa:	47d0      	blx	sl
 8003eac:	3001      	adds	r0, #1
 8003eae:	d09d      	beq.n	8003dec <_printf_i+0x15c>
 8003eb0:	3501      	adds	r5, #1
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	9903      	ldr	r1, [sp, #12]
 8003eb6:	1a5b      	subs	r3, r3, r1
 8003eb8:	42ab      	cmp	r3, r5
 8003eba:	dcf2      	bgt.n	8003ea2 <_printf_i+0x212>
 8003ebc:	e7eb      	b.n	8003e96 <_printf_i+0x206>
 8003ebe:	2500      	movs	r5, #0
 8003ec0:	f104 0619 	add.w	r6, r4, #25
 8003ec4:	e7f5      	b.n	8003eb2 <_printf_i+0x222>
 8003ec6:	bf00      	nop
 8003ec8:	080060f0 	.word	0x080060f0
 8003ecc:	08006101 	.word	0x08006101

08003ed0 <std>:
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8003eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ede:	6083      	str	r3, [r0, #8]
 8003ee0:	8181      	strh	r1, [r0, #12]
 8003ee2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ee4:	81c2      	strh	r2, [r0, #14]
 8003ee6:	6183      	str	r3, [r0, #24]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	2208      	movs	r2, #8
 8003eec:	305c      	adds	r0, #92	@ 0x5c
 8003eee:	f000 f9f9 	bl	80042e4 <memset>
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <std+0x58>)
 8003ef4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <std+0x5c>)
 8003ef8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003efa:	4b0d      	ldr	r3, [pc, #52]	@ (8003f30 <std+0x60>)
 8003efc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003efe:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <std+0x64>)
 8003f00:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f02:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <std+0x68>)
 8003f04:	6224      	str	r4, [r4, #32]
 8003f06:	429c      	cmp	r4, r3
 8003f08:	d006      	beq.n	8003f18 <std+0x48>
 8003f0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f0e:	4294      	cmp	r4, r2
 8003f10:	d002      	beq.n	8003f18 <std+0x48>
 8003f12:	33d0      	adds	r3, #208	@ 0xd0
 8003f14:	429c      	cmp	r4, r3
 8003f16:	d105      	bne.n	8003f24 <std+0x54>
 8003f18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f20:	f000 ba5c 	b.w	80043dc <__retarget_lock_init_recursive>
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	bf00      	nop
 8003f28:	08004135 	.word	0x08004135
 8003f2c:	08004157 	.word	0x08004157
 8003f30:	0800418f 	.word	0x0800418f
 8003f34:	080041b3 	.word	0x080041b3
 8003f38:	20000304 	.word	0x20000304

08003f3c <stdio_exit_handler>:
 8003f3c:	4a02      	ldr	r2, [pc, #8]	@ (8003f48 <stdio_exit_handler+0xc>)
 8003f3e:	4903      	ldr	r1, [pc, #12]	@ (8003f4c <stdio_exit_handler+0x10>)
 8003f40:	4803      	ldr	r0, [pc, #12]	@ (8003f50 <stdio_exit_handler+0x14>)
 8003f42:	f000 b869 	b.w	8004018 <_fwalk_sglue>
 8003f46:	bf00      	nop
 8003f48:	20000014 	.word	0x20000014
 8003f4c:	08005d11 	.word	0x08005d11
 8003f50:	20000024 	.word	0x20000024

08003f54 <cleanup_stdio>:
 8003f54:	6841      	ldr	r1, [r0, #4]
 8003f56:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <cleanup_stdio+0x34>)
 8003f58:	4299      	cmp	r1, r3
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	d001      	beq.n	8003f64 <cleanup_stdio+0x10>
 8003f60:	f001 fed6 	bl	8005d10 <_fflush_r>
 8003f64:	68a1      	ldr	r1, [r4, #8]
 8003f66:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <cleanup_stdio+0x38>)
 8003f68:	4299      	cmp	r1, r3
 8003f6a:	d002      	beq.n	8003f72 <cleanup_stdio+0x1e>
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f001 fecf 	bl	8005d10 <_fflush_r>
 8003f72:	68e1      	ldr	r1, [r4, #12]
 8003f74:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <cleanup_stdio+0x3c>)
 8003f76:	4299      	cmp	r1, r3
 8003f78:	d004      	beq.n	8003f84 <cleanup_stdio+0x30>
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f80:	f001 bec6 	b.w	8005d10 <_fflush_r>
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	20000304 	.word	0x20000304
 8003f8c:	2000036c 	.word	0x2000036c
 8003f90:	200003d4 	.word	0x200003d4

08003f94 <global_stdio_init.part.0>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <global_stdio_init.part.0+0x30>)
 8003f98:	4c0b      	ldr	r4, [pc, #44]	@ (8003fc8 <global_stdio_init.part.0+0x34>)
 8003f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fcc <global_stdio_init.part.0+0x38>)
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2104      	movs	r1, #4
 8003fa4:	f7ff ff94 	bl	8003ed0 <std>
 8003fa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fac:	2201      	movs	r2, #1
 8003fae:	2109      	movs	r1, #9
 8003fb0:	f7ff ff8e 	bl	8003ed0 <std>
 8003fb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fb8:	2202      	movs	r2, #2
 8003fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbe:	2112      	movs	r1, #18
 8003fc0:	f7ff bf86 	b.w	8003ed0 <std>
 8003fc4:	2000043c 	.word	0x2000043c
 8003fc8:	20000304 	.word	0x20000304
 8003fcc:	08003f3d 	.word	0x08003f3d

08003fd0 <__sfp_lock_acquire>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	@ (8003fd8 <__sfp_lock_acquire+0x8>)
 8003fd2:	f000 ba04 	b.w	80043de <__retarget_lock_acquire_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20000445 	.word	0x20000445

08003fdc <__sfp_lock_release>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	@ (8003fe4 <__sfp_lock_release+0x8>)
 8003fde:	f000 b9ff 	b.w	80043e0 <__retarget_lock_release_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000445 	.word	0x20000445

08003fe8 <__sinit>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4604      	mov	r4, r0
 8003fec:	f7ff fff0 	bl	8003fd0 <__sfp_lock_acquire>
 8003ff0:	6a23      	ldr	r3, [r4, #32]
 8003ff2:	b11b      	cbz	r3, 8003ffc <__sinit+0x14>
 8003ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff8:	f7ff bff0 	b.w	8003fdc <__sfp_lock_release>
 8003ffc:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <__sinit+0x28>)
 8003ffe:	6223      	str	r3, [r4, #32]
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <__sinit+0x2c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f5      	bne.n	8003ff4 <__sinit+0xc>
 8004008:	f7ff ffc4 	bl	8003f94 <global_stdio_init.part.0>
 800400c:	e7f2      	b.n	8003ff4 <__sinit+0xc>
 800400e:	bf00      	nop
 8004010:	08003f55 	.word	0x08003f55
 8004014:	2000043c 	.word	0x2000043c

08004018 <_fwalk_sglue>:
 8004018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800401c:	4607      	mov	r7, r0
 800401e:	4688      	mov	r8, r1
 8004020:	4614      	mov	r4, r2
 8004022:	2600      	movs	r6, #0
 8004024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004028:	f1b9 0901 	subs.w	r9, r9, #1
 800402c:	d505      	bpl.n	800403a <_fwalk_sglue+0x22>
 800402e:	6824      	ldr	r4, [r4, #0]
 8004030:	2c00      	cmp	r4, #0
 8004032:	d1f7      	bne.n	8004024 <_fwalk_sglue+0xc>
 8004034:	4630      	mov	r0, r6
 8004036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800403a:	89ab      	ldrh	r3, [r5, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d907      	bls.n	8004050 <_fwalk_sglue+0x38>
 8004040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004044:	3301      	adds	r3, #1
 8004046:	d003      	beq.n	8004050 <_fwalk_sglue+0x38>
 8004048:	4629      	mov	r1, r5
 800404a:	4638      	mov	r0, r7
 800404c:	47c0      	blx	r8
 800404e:	4306      	orrs	r6, r0
 8004050:	3568      	adds	r5, #104	@ 0x68
 8004052:	e7e9      	b.n	8004028 <_fwalk_sglue+0x10>

08004054 <iprintf>:
 8004054:	b40f      	push	{r0, r1, r2, r3}
 8004056:	b507      	push	{r0, r1, r2, lr}
 8004058:	4906      	ldr	r1, [pc, #24]	@ (8004074 <iprintf+0x20>)
 800405a:	ab04      	add	r3, sp, #16
 800405c:	6808      	ldr	r0, [r1, #0]
 800405e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004062:	6881      	ldr	r1, [r0, #8]
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	f001 fcb7 	bl	80059d8 <_vfiprintf_r>
 800406a:	b003      	add	sp, #12
 800406c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004070:	b004      	add	sp, #16
 8004072:	4770      	bx	lr
 8004074:	20000020 	.word	0x20000020

08004078 <_puts_r>:
 8004078:	6a03      	ldr	r3, [r0, #32]
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	6884      	ldr	r4, [r0, #8]
 800407e:	4605      	mov	r5, r0
 8004080:	460e      	mov	r6, r1
 8004082:	b90b      	cbnz	r3, 8004088 <_puts_r+0x10>
 8004084:	f7ff ffb0 	bl	8003fe8 <__sinit>
 8004088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800408a:	07db      	lsls	r3, r3, #31
 800408c:	d405      	bmi.n	800409a <_puts_r+0x22>
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	0598      	lsls	r0, r3, #22
 8004092:	d402      	bmi.n	800409a <_puts_r+0x22>
 8004094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004096:	f000 f9a2 	bl	80043de <__retarget_lock_acquire_recursive>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	0719      	lsls	r1, r3, #28
 800409e:	d502      	bpl.n	80040a6 <_puts_r+0x2e>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d135      	bne.n	8004112 <_puts_r+0x9a>
 80040a6:	4621      	mov	r1, r4
 80040a8:	4628      	mov	r0, r5
 80040aa:	f000 f8c5 	bl	8004238 <__swsetup_r>
 80040ae:	b380      	cbz	r0, 8004112 <_puts_r+0x9a>
 80040b0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80040b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040b6:	07da      	lsls	r2, r3, #31
 80040b8:	d405      	bmi.n	80040c6 <_puts_r+0x4e>
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	059b      	lsls	r3, r3, #22
 80040be:	d402      	bmi.n	80040c6 <_puts_r+0x4e>
 80040c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040c2:	f000 f98d 	bl	80043e0 <__retarget_lock_release_recursive>
 80040c6:	4628      	mov	r0, r5
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da04      	bge.n	80040d8 <_puts_r+0x60>
 80040ce:	69a2      	ldr	r2, [r4, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	dc17      	bgt.n	8004104 <_puts_r+0x8c>
 80040d4:	290a      	cmp	r1, #10
 80040d6:	d015      	beq.n	8004104 <_puts_r+0x8c>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	6022      	str	r2, [r4, #0]
 80040de:	7019      	strb	r1, [r3, #0]
 80040e0:	68a3      	ldr	r3, [r4, #8]
 80040e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040e6:	3b01      	subs	r3, #1
 80040e8:	60a3      	str	r3, [r4, #8]
 80040ea:	2900      	cmp	r1, #0
 80040ec:	d1ed      	bne.n	80040ca <_puts_r+0x52>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da11      	bge.n	8004116 <_puts_r+0x9e>
 80040f2:	4622      	mov	r2, r4
 80040f4:	210a      	movs	r1, #10
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 f85f 	bl	80041ba <__swbuf_r>
 80040fc:	3001      	adds	r0, #1
 80040fe:	d0d7      	beq.n	80040b0 <_puts_r+0x38>
 8004100:	250a      	movs	r5, #10
 8004102:	e7d7      	b.n	80040b4 <_puts_r+0x3c>
 8004104:	4622      	mov	r2, r4
 8004106:	4628      	mov	r0, r5
 8004108:	f000 f857 	bl	80041ba <__swbuf_r>
 800410c:	3001      	adds	r0, #1
 800410e:	d1e7      	bne.n	80040e0 <_puts_r+0x68>
 8004110:	e7ce      	b.n	80040b0 <_puts_r+0x38>
 8004112:	3e01      	subs	r6, #1
 8004114:	e7e4      	b.n	80040e0 <_puts_r+0x68>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	220a      	movs	r2, #10
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	e7ee      	b.n	8004100 <_puts_r+0x88>
	...

08004124 <puts>:
 8004124:	4b02      	ldr	r3, [pc, #8]	@ (8004130 <puts+0xc>)
 8004126:	4601      	mov	r1, r0
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	f7ff bfa5 	b.w	8004078 <_puts_r>
 800412e:	bf00      	nop
 8004130:	20000020 	.word	0x20000020

08004134 <__sread>:
 8004134:	b510      	push	{r4, lr}
 8004136:	460c      	mov	r4, r1
 8004138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413c:	f000 f900 	bl	8004340 <_read_r>
 8004140:	2800      	cmp	r0, #0
 8004142:	bfab      	itete	ge
 8004144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004146:	89a3      	ldrhlt	r3, [r4, #12]
 8004148:	181b      	addge	r3, r3, r0
 800414a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800414e:	bfac      	ite	ge
 8004150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004152:	81a3      	strhlt	r3, [r4, #12]
 8004154:	bd10      	pop	{r4, pc}

08004156 <__swrite>:
 8004156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	461f      	mov	r7, r3
 800415c:	898b      	ldrh	r3, [r1, #12]
 800415e:	05db      	lsls	r3, r3, #23
 8004160:	4605      	mov	r5, r0
 8004162:	460c      	mov	r4, r1
 8004164:	4616      	mov	r6, r2
 8004166:	d505      	bpl.n	8004174 <__swrite+0x1e>
 8004168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800416c:	2302      	movs	r3, #2
 800416e:	2200      	movs	r2, #0
 8004170:	f000 f8d4 	bl	800431c <_lseek_r>
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800417a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	4632      	mov	r2, r6
 8004182:	463b      	mov	r3, r7
 8004184:	4628      	mov	r0, r5
 8004186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418a:	f000 b8eb 	b.w	8004364 <_write_r>

0800418e <__sseek>:
 800418e:	b510      	push	{r4, lr}
 8004190:	460c      	mov	r4, r1
 8004192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004196:	f000 f8c1 	bl	800431c <_lseek_r>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	bf15      	itete	ne
 80041a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041aa:	81a3      	strheq	r3, [r4, #12]
 80041ac:	bf18      	it	ne
 80041ae:	81a3      	strhne	r3, [r4, #12]
 80041b0:	bd10      	pop	{r4, pc}

080041b2 <__sclose>:
 80041b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b6:	f000 b8a1 	b.w	80042fc <_close_r>

080041ba <__swbuf_r>:
 80041ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041bc:	460e      	mov	r6, r1
 80041be:	4614      	mov	r4, r2
 80041c0:	4605      	mov	r5, r0
 80041c2:	b118      	cbz	r0, 80041cc <__swbuf_r+0x12>
 80041c4:	6a03      	ldr	r3, [r0, #32]
 80041c6:	b90b      	cbnz	r3, 80041cc <__swbuf_r+0x12>
 80041c8:	f7ff ff0e 	bl	8003fe8 <__sinit>
 80041cc:	69a3      	ldr	r3, [r4, #24]
 80041ce:	60a3      	str	r3, [r4, #8]
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	071a      	lsls	r2, r3, #28
 80041d4:	d501      	bpl.n	80041da <__swbuf_r+0x20>
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	b943      	cbnz	r3, 80041ec <__swbuf_r+0x32>
 80041da:	4621      	mov	r1, r4
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f82b 	bl	8004238 <__swsetup_r>
 80041e2:	b118      	cbz	r0, 80041ec <__swbuf_r+0x32>
 80041e4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80041e8:	4638      	mov	r0, r7
 80041ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	6922      	ldr	r2, [r4, #16]
 80041f0:	1a98      	subs	r0, r3, r2
 80041f2:	6963      	ldr	r3, [r4, #20]
 80041f4:	b2f6      	uxtb	r6, r6
 80041f6:	4283      	cmp	r3, r0
 80041f8:	4637      	mov	r7, r6
 80041fa:	dc05      	bgt.n	8004208 <__swbuf_r+0x4e>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	f001 fd86 	bl	8005d10 <_fflush_r>
 8004204:	2800      	cmp	r0, #0
 8004206:	d1ed      	bne.n	80041e4 <__swbuf_r+0x2a>
 8004208:	68a3      	ldr	r3, [r4, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	60a3      	str	r3, [r4, #8]
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	701e      	strb	r6, [r3, #0]
 8004216:	6962      	ldr	r2, [r4, #20]
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	429a      	cmp	r2, r3
 800421c:	d004      	beq.n	8004228 <__swbuf_r+0x6e>
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	07db      	lsls	r3, r3, #31
 8004222:	d5e1      	bpl.n	80041e8 <__swbuf_r+0x2e>
 8004224:	2e0a      	cmp	r6, #10
 8004226:	d1df      	bne.n	80041e8 <__swbuf_r+0x2e>
 8004228:	4621      	mov	r1, r4
 800422a:	4628      	mov	r0, r5
 800422c:	f001 fd70 	bl	8005d10 <_fflush_r>
 8004230:	2800      	cmp	r0, #0
 8004232:	d0d9      	beq.n	80041e8 <__swbuf_r+0x2e>
 8004234:	e7d6      	b.n	80041e4 <__swbuf_r+0x2a>
	...

08004238 <__swsetup_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4b29      	ldr	r3, [pc, #164]	@ (80042e0 <__swsetup_r+0xa8>)
 800423c:	4605      	mov	r5, r0
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	460c      	mov	r4, r1
 8004242:	b118      	cbz	r0, 800424c <__swsetup_r+0x14>
 8004244:	6a03      	ldr	r3, [r0, #32]
 8004246:	b90b      	cbnz	r3, 800424c <__swsetup_r+0x14>
 8004248:	f7ff fece 	bl	8003fe8 <__sinit>
 800424c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004250:	0719      	lsls	r1, r3, #28
 8004252:	d422      	bmi.n	800429a <__swsetup_r+0x62>
 8004254:	06da      	lsls	r2, r3, #27
 8004256:	d407      	bmi.n	8004268 <__swsetup_r+0x30>
 8004258:	2209      	movs	r2, #9
 800425a:	602a      	str	r2, [r5, #0]
 800425c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004266:	e033      	b.n	80042d0 <__swsetup_r+0x98>
 8004268:	0758      	lsls	r0, r3, #29
 800426a:	d512      	bpl.n	8004292 <__swsetup_r+0x5a>
 800426c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800426e:	b141      	cbz	r1, 8004282 <__swsetup_r+0x4a>
 8004270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004274:	4299      	cmp	r1, r3
 8004276:	d002      	beq.n	800427e <__swsetup_r+0x46>
 8004278:	4628      	mov	r0, r5
 800427a:	f000 ff01 	bl	8005080 <_free_r>
 800427e:	2300      	movs	r3, #0
 8004280:	6363      	str	r3, [r4, #52]	@ 0x34
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	2300      	movs	r3, #0
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6923      	ldr	r3, [r4, #16]
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	f043 0308 	orr.w	r3, r3, #8
 8004298:	81a3      	strh	r3, [r4, #12]
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	b94b      	cbnz	r3, 80042b2 <__swsetup_r+0x7a>
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a8:	d003      	beq.n	80042b2 <__swsetup_r+0x7a>
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f001 fd7d 	bl	8005dac <__smakebuf_r>
 80042b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042b6:	f013 0201 	ands.w	r2, r3, #1
 80042ba:	d00a      	beq.n	80042d2 <__swsetup_r+0x9a>
 80042bc:	2200      	movs	r2, #0
 80042be:	60a2      	str	r2, [r4, #8]
 80042c0:	6962      	ldr	r2, [r4, #20]
 80042c2:	4252      	negs	r2, r2
 80042c4:	61a2      	str	r2, [r4, #24]
 80042c6:	6922      	ldr	r2, [r4, #16]
 80042c8:	b942      	cbnz	r2, 80042dc <__swsetup_r+0xa4>
 80042ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042ce:	d1c5      	bne.n	800425c <__swsetup_r+0x24>
 80042d0:	bd38      	pop	{r3, r4, r5, pc}
 80042d2:	0799      	lsls	r1, r3, #30
 80042d4:	bf58      	it	pl
 80042d6:	6962      	ldrpl	r2, [r4, #20]
 80042d8:	60a2      	str	r2, [r4, #8]
 80042da:	e7f4      	b.n	80042c6 <__swsetup_r+0x8e>
 80042dc:	2000      	movs	r0, #0
 80042de:	e7f7      	b.n	80042d0 <__swsetup_r+0x98>
 80042e0:	20000020 	.word	0x20000020

080042e4 <memset>:
 80042e4:	4402      	add	r2, r0
 80042e6:	4603      	mov	r3, r0
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d100      	bne.n	80042ee <memset+0xa>
 80042ec:	4770      	bx	lr
 80042ee:	f803 1b01 	strb.w	r1, [r3], #1
 80042f2:	e7f9      	b.n	80042e8 <memset+0x4>

080042f4 <_localeconv_r>:
 80042f4:	4800      	ldr	r0, [pc, #0]	@ (80042f8 <_localeconv_r+0x4>)
 80042f6:	4770      	bx	lr
 80042f8:	20000160 	.word	0x20000160

080042fc <_close_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d06      	ldr	r5, [pc, #24]	@ (8004318 <_close_r+0x1c>)
 8004300:	2300      	movs	r3, #0
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fe ffc6 	bl	8003298 <_close>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_close_r+0x1a>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b103      	cbz	r3, 8004316 <_close_r+0x1a>
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	20000440 	.word	0x20000440

0800431c <_lseek_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d07      	ldr	r5, [pc, #28]	@ (800433c <_lseek_r+0x20>)
 8004320:	4604      	mov	r4, r0
 8004322:	4608      	mov	r0, r1
 8004324:	4611      	mov	r1, r2
 8004326:	2200      	movs	r2, #0
 8004328:	602a      	str	r2, [r5, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fe ff75 	bl	800321a <_lseek>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_lseek_r+0x1e>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_lseek_r+0x1e>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	20000440 	.word	0x20000440

08004340 <_read_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4d07      	ldr	r5, [pc, #28]	@ (8004360 <_read_r+0x20>)
 8004344:	4604      	mov	r4, r0
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	2200      	movs	r2, #0
 800434c:	602a      	str	r2, [r5, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fe ff0d 	bl	800316e <_read>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_read_r+0x1e>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_read_r+0x1e>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000440 	.word	0x20000440

08004364 <_write_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d07      	ldr	r5, [pc, #28]	@ (8004384 <_write_r+0x20>)
 8004368:	4604      	mov	r4, r0
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	2200      	movs	r2, #0
 8004370:	602a      	str	r2, [r5, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f7fe ff63 	bl	800323e <_write>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_write_r+0x1e>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	b103      	cbz	r3, 8004382 <_write_r+0x1e>
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	20000440 	.word	0x20000440

08004388 <__errno>:
 8004388:	4b01      	ldr	r3, [pc, #4]	@ (8004390 <__errno+0x8>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000020 	.word	0x20000020

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	@ (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	@ (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	@ (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	@ (80043d8 <__libc_init_array+0x44>)
 80043a8:	f001 fe36 	bl	8006018 <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08006458 	.word	0x08006458
 80043d0:	08006458 	.word	0x08006458
 80043d4:	08006458 	.word	0x08006458
 80043d8:	0800645c 	.word	0x0800645c

080043dc <__retarget_lock_init_recursive>:
 80043dc:	4770      	bx	lr

080043de <__retarget_lock_acquire_recursive>:
 80043de:	4770      	bx	lr

080043e0 <__retarget_lock_release_recursive>:
 80043e0:	4770      	bx	lr

080043e2 <quorem>:
 80043e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e6:	6903      	ldr	r3, [r0, #16]
 80043e8:	690c      	ldr	r4, [r1, #16]
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	4607      	mov	r7, r0
 80043ee:	db7e      	blt.n	80044ee <quorem+0x10c>
 80043f0:	3c01      	subs	r4, #1
 80043f2:	f101 0814 	add.w	r8, r1, #20
 80043f6:	00a3      	lsls	r3, r4, #2
 80043f8:	f100 0514 	add.w	r5, r0, #20
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800440c:	3301      	adds	r3, #1
 800440e:	429a      	cmp	r2, r3
 8004410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004414:	fbb2 f6f3 	udiv	r6, r2, r3
 8004418:	d32e      	bcc.n	8004478 <quorem+0x96>
 800441a:	f04f 0a00 	mov.w	sl, #0
 800441e:	46c4      	mov	ip, r8
 8004420:	46ae      	mov	lr, r5
 8004422:	46d3      	mov	fp, sl
 8004424:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004428:	b298      	uxth	r0, r3
 800442a:	fb06 a000 	mla	r0, r6, r0, sl
 800442e:	0c02      	lsrs	r2, r0, #16
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	fb06 2303 	mla	r3, r6, r3, r2
 8004436:	f8de 2000 	ldr.w	r2, [lr]
 800443a:	b280      	uxth	r0, r0
 800443c:	b292      	uxth	r2, r2
 800443e:	1a12      	subs	r2, r2, r0
 8004440:	445a      	add	r2, fp
 8004442:	f8de 0000 	ldr.w	r0, [lr]
 8004446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800444a:	b29b      	uxth	r3, r3
 800444c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004450:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004454:	b292      	uxth	r2, r2
 8004456:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800445a:	45e1      	cmp	r9, ip
 800445c:	f84e 2b04 	str.w	r2, [lr], #4
 8004460:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004464:	d2de      	bcs.n	8004424 <quorem+0x42>
 8004466:	9b00      	ldr	r3, [sp, #0]
 8004468:	58eb      	ldr	r3, [r5, r3]
 800446a:	b92b      	cbnz	r3, 8004478 <quorem+0x96>
 800446c:	9b01      	ldr	r3, [sp, #4]
 800446e:	3b04      	subs	r3, #4
 8004470:	429d      	cmp	r5, r3
 8004472:	461a      	mov	r2, r3
 8004474:	d32f      	bcc.n	80044d6 <quorem+0xf4>
 8004476:	613c      	str	r4, [r7, #16]
 8004478:	4638      	mov	r0, r7
 800447a:	f001 f97b 	bl	8005774 <__mcmp>
 800447e:	2800      	cmp	r0, #0
 8004480:	db25      	blt.n	80044ce <quorem+0xec>
 8004482:	4629      	mov	r1, r5
 8004484:	2000      	movs	r0, #0
 8004486:	f858 2b04 	ldr.w	r2, [r8], #4
 800448a:	f8d1 c000 	ldr.w	ip, [r1]
 800448e:	fa1f fe82 	uxth.w	lr, r2
 8004492:	fa1f f38c 	uxth.w	r3, ip
 8004496:	eba3 030e 	sub.w	r3, r3, lr
 800449a:	4403      	add	r3, r0
 800449c:	0c12      	lsrs	r2, r2, #16
 800449e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80044a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044ac:	45c1      	cmp	r9, r8
 80044ae:	f841 3b04 	str.w	r3, [r1], #4
 80044b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80044b6:	d2e6      	bcs.n	8004486 <quorem+0xa4>
 80044b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044c0:	b922      	cbnz	r2, 80044cc <quorem+0xea>
 80044c2:	3b04      	subs	r3, #4
 80044c4:	429d      	cmp	r5, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	d30b      	bcc.n	80044e2 <quorem+0x100>
 80044ca:	613c      	str	r4, [r7, #16]
 80044cc:	3601      	adds	r6, #1
 80044ce:	4630      	mov	r0, r6
 80044d0:	b003      	add	sp, #12
 80044d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	3b04      	subs	r3, #4
 80044da:	2a00      	cmp	r2, #0
 80044dc:	d1cb      	bne.n	8004476 <quorem+0x94>
 80044de:	3c01      	subs	r4, #1
 80044e0:	e7c6      	b.n	8004470 <quorem+0x8e>
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	3b04      	subs	r3, #4
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	d1ef      	bne.n	80044ca <quorem+0xe8>
 80044ea:	3c01      	subs	r4, #1
 80044ec:	e7ea      	b.n	80044c4 <quorem+0xe2>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e7ee      	b.n	80044d0 <quorem+0xee>
 80044f2:	0000      	movs	r0, r0
 80044f4:	0000      	movs	r0, r0
	...

080044f8 <_dtoa_r>:
 80044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fc:	69c7      	ldr	r7, [r0, #28]
 80044fe:	b099      	sub	sp, #100	@ 0x64
 8004500:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004504:	ec55 4b10 	vmov	r4, r5, d0
 8004508:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800450a:	9109      	str	r1, [sp, #36]	@ 0x24
 800450c:	4683      	mov	fp, r0
 800450e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004510:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004512:	b97f      	cbnz	r7, 8004534 <_dtoa_r+0x3c>
 8004514:	2010      	movs	r0, #16
 8004516:	f000 fdfd 	bl	8005114 <malloc>
 800451a:	4602      	mov	r2, r0
 800451c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004520:	b920      	cbnz	r0, 800452c <_dtoa_r+0x34>
 8004522:	4ba7      	ldr	r3, [pc, #668]	@ (80047c0 <_dtoa_r+0x2c8>)
 8004524:	21ef      	movs	r1, #239	@ 0xef
 8004526:	48a7      	ldr	r0, [pc, #668]	@ (80047c4 <_dtoa_r+0x2cc>)
 8004528:	f001 fcbc 	bl	8005ea4 <__assert_func>
 800452c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004530:	6007      	str	r7, [r0, #0]
 8004532:	60c7      	str	r7, [r0, #12]
 8004534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	b159      	cbz	r1, 8004554 <_dtoa_r+0x5c>
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	604a      	str	r2, [r1, #4]
 8004540:	2301      	movs	r3, #1
 8004542:	4093      	lsls	r3, r2
 8004544:	608b      	str	r3, [r1, #8]
 8004546:	4658      	mov	r0, fp
 8004548:	f000 feda 	bl	8005300 <_Bfree>
 800454c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	1e2b      	subs	r3, r5, #0
 8004556:	bfb9      	ittee	lt
 8004558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800455c:	9303      	strlt	r3, [sp, #12]
 800455e:	2300      	movge	r3, #0
 8004560:	6033      	strge	r3, [r6, #0]
 8004562:	9f03      	ldr	r7, [sp, #12]
 8004564:	4b98      	ldr	r3, [pc, #608]	@ (80047c8 <_dtoa_r+0x2d0>)
 8004566:	bfbc      	itt	lt
 8004568:	2201      	movlt	r2, #1
 800456a:	6032      	strlt	r2, [r6, #0]
 800456c:	43bb      	bics	r3, r7
 800456e:	d112      	bne.n	8004596 <_dtoa_r+0x9e>
 8004570:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004572:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800457c:	4323      	orrs	r3, r4
 800457e:	f000 854d 	beq.w	800501c <_dtoa_r+0xb24>
 8004582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004584:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80047dc <_dtoa_r+0x2e4>
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 854f 	beq.w	800502c <_dtoa_r+0xb34>
 800458e:	f10a 0303 	add.w	r3, sl, #3
 8004592:	f000 bd49 	b.w	8005028 <_dtoa_r+0xb30>
 8004596:	ed9d 7b02 	vldr	d7, [sp, #8]
 800459a:	2200      	movs	r2, #0
 800459c:	ec51 0b17 	vmov	r0, r1, d7
 80045a0:	2300      	movs	r3, #0
 80045a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80045a6:	f7fc fa97 	bl	8000ad8 <__aeabi_dcmpeq>
 80045aa:	4680      	mov	r8, r0
 80045ac:	b158      	cbz	r0, 80045c6 <_dtoa_r+0xce>
 80045ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80045b0:	2301      	movs	r3, #1
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045b6:	b113      	cbz	r3, 80045be <_dtoa_r+0xc6>
 80045b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80045ba:	4b84      	ldr	r3, [pc, #528]	@ (80047cc <_dtoa_r+0x2d4>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80047e0 <_dtoa_r+0x2e8>
 80045c2:	f000 bd33 	b.w	800502c <_dtoa_r+0xb34>
 80045c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80045ca:	aa16      	add	r2, sp, #88	@ 0x58
 80045cc:	a917      	add	r1, sp, #92	@ 0x5c
 80045ce:	4658      	mov	r0, fp
 80045d0:	f001 f980 	bl	80058d4 <__d2b>
 80045d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80045d8:	4681      	mov	r9, r0
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d077      	beq.n	80046ce <_dtoa_r+0x1d6>
 80045de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80045e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045f8:	4619      	mov	r1, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	4b74      	ldr	r3, [pc, #464]	@ (80047d0 <_dtoa_r+0x2d8>)
 80045fe:	f7fb fe4b 	bl	8000298 <__aeabi_dsub>
 8004602:	a369      	add	r3, pc, #420	@ (adr r3, 80047a8 <_dtoa_r+0x2b0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fb fffe 	bl	8000608 <__aeabi_dmul>
 800460c:	a368      	add	r3, pc, #416	@ (adr r3, 80047b0 <_dtoa_r+0x2b8>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fe43 	bl	800029c <__adddf3>
 8004616:	4604      	mov	r4, r0
 8004618:	4630      	mov	r0, r6
 800461a:	460d      	mov	r5, r1
 800461c:	f7fb ff8a 	bl	8000534 <__aeabi_i2d>
 8004620:	a365      	add	r3, pc, #404	@ (adr r3, 80047b8 <_dtoa_r+0x2c0>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f7fb ffef 	bl	8000608 <__aeabi_dmul>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4620      	mov	r0, r4
 8004630:	4629      	mov	r1, r5
 8004632:	f7fb fe33 	bl	800029c <__adddf3>
 8004636:	4604      	mov	r4, r0
 8004638:	460d      	mov	r5, r1
 800463a:	f7fc fa95 	bl	8000b68 <__aeabi_d2iz>
 800463e:	2200      	movs	r2, #0
 8004640:	4607      	mov	r7, r0
 8004642:	2300      	movs	r3, #0
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fc fa50 	bl	8000aec <__aeabi_dcmplt>
 800464c:	b140      	cbz	r0, 8004660 <_dtoa_r+0x168>
 800464e:	4638      	mov	r0, r7
 8004650:	f7fb ff70 	bl	8000534 <__aeabi_i2d>
 8004654:	4622      	mov	r2, r4
 8004656:	462b      	mov	r3, r5
 8004658:	f7fc fa3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800465c:	b900      	cbnz	r0, 8004660 <_dtoa_r+0x168>
 800465e:	3f01      	subs	r7, #1
 8004660:	2f16      	cmp	r7, #22
 8004662:	d851      	bhi.n	8004708 <_dtoa_r+0x210>
 8004664:	4b5b      	ldr	r3, [pc, #364]	@ (80047d4 <_dtoa_r+0x2dc>)
 8004666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004672:	f7fc fa3b 	bl	8000aec <__aeabi_dcmplt>
 8004676:	2800      	cmp	r0, #0
 8004678:	d048      	beq.n	800470c <_dtoa_r+0x214>
 800467a:	3f01      	subs	r7, #1
 800467c:	2300      	movs	r3, #0
 800467e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004680:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004682:	1b9b      	subs	r3, r3, r6
 8004684:	1e5a      	subs	r2, r3, #1
 8004686:	bf44      	itt	mi
 8004688:	f1c3 0801 	rsbmi	r8, r3, #1
 800468c:	2300      	movmi	r3, #0
 800468e:	9208      	str	r2, [sp, #32]
 8004690:	bf54      	ite	pl
 8004692:	f04f 0800 	movpl.w	r8, #0
 8004696:	9308      	strmi	r3, [sp, #32]
 8004698:	2f00      	cmp	r7, #0
 800469a:	db39      	blt.n	8004710 <_dtoa_r+0x218>
 800469c:	9b08      	ldr	r3, [sp, #32]
 800469e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80046a0:	443b      	add	r3, r7
 80046a2:	9308      	str	r3, [sp, #32]
 80046a4:	2300      	movs	r3, #0
 80046a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80046a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	d864      	bhi.n	8004778 <_dtoa_r+0x280>
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	bfc4      	itt	gt
 80046b2:	3b04      	subgt	r3, #4
 80046b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80046b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046b8:	f1a3 0302 	sub.w	r3, r3, #2
 80046bc:	bfcc      	ite	gt
 80046be:	2400      	movgt	r4, #0
 80046c0:	2401      	movle	r4, #1
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d863      	bhi.n	800478e <_dtoa_r+0x296>
 80046c6:	e8df f003 	tbb	[pc, r3]
 80046ca:	372a      	.short	0x372a
 80046cc:	5535      	.short	0x5535
 80046ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80046d2:	441e      	add	r6, r3
 80046d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80046d8:	2b20      	cmp	r3, #32
 80046da:	bfc1      	itttt	gt
 80046dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046e0:	409f      	lslgt	r7, r3
 80046e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046ea:	bfd6      	itet	le
 80046ec:	f1c3 0320 	rsble	r3, r3, #32
 80046f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80046f4:	fa04 f003 	lslle.w	r0, r4, r3
 80046f8:	f7fb ff0c 	bl	8000514 <__aeabi_ui2d>
 80046fc:	2201      	movs	r2, #1
 80046fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004702:	3e01      	subs	r6, #1
 8004704:	9214      	str	r2, [sp, #80]	@ 0x50
 8004706:	e777      	b.n	80045f8 <_dtoa_r+0x100>
 8004708:	2301      	movs	r3, #1
 800470a:	e7b8      	b.n	800467e <_dtoa_r+0x186>
 800470c:	9012      	str	r0, [sp, #72]	@ 0x48
 800470e:	e7b7      	b.n	8004680 <_dtoa_r+0x188>
 8004710:	427b      	negs	r3, r7
 8004712:	930a      	str	r3, [sp, #40]	@ 0x28
 8004714:	2300      	movs	r3, #0
 8004716:	eba8 0807 	sub.w	r8, r8, r7
 800471a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800471c:	e7c4      	b.n	80046a8 <_dtoa_r+0x1b0>
 800471e:	2300      	movs	r3, #0
 8004720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc35      	bgt.n	8004794 <_dtoa_r+0x29c>
 8004728:	2301      	movs	r3, #1
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	461a      	mov	r2, r3
 8004730:	920e      	str	r2, [sp, #56]	@ 0x38
 8004732:	e00b      	b.n	800474c <_dtoa_r+0x254>
 8004734:	2301      	movs	r3, #1
 8004736:	e7f3      	b.n	8004720 <_dtoa_r+0x228>
 8004738:	2300      	movs	r3, #0
 800473a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800473c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	bfb8      	it	lt
 800474a:	2301      	movlt	r3, #1
 800474c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004750:	2100      	movs	r1, #0
 8004752:	2204      	movs	r2, #4
 8004754:	f102 0514 	add.w	r5, r2, #20
 8004758:	429d      	cmp	r5, r3
 800475a:	d91f      	bls.n	800479c <_dtoa_r+0x2a4>
 800475c:	6041      	str	r1, [r0, #4]
 800475e:	4658      	mov	r0, fp
 8004760:	f000 fd8e 	bl	8005280 <_Balloc>
 8004764:	4682      	mov	sl, r0
 8004766:	2800      	cmp	r0, #0
 8004768:	d13c      	bne.n	80047e4 <_dtoa_r+0x2ec>
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <_dtoa_r+0x2e0>)
 800476c:	4602      	mov	r2, r0
 800476e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004772:	e6d8      	b.n	8004526 <_dtoa_r+0x2e>
 8004774:	2301      	movs	r3, #1
 8004776:	e7e0      	b.n	800473a <_dtoa_r+0x242>
 8004778:	2401      	movs	r4, #1
 800477a:	2300      	movs	r3, #0
 800477c:	9309      	str	r3, [sp, #36]	@ 0x24
 800477e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	9307      	str	r3, [sp, #28]
 8004788:	2200      	movs	r2, #0
 800478a:	2312      	movs	r3, #18
 800478c:	e7d0      	b.n	8004730 <_dtoa_r+0x238>
 800478e:	2301      	movs	r3, #1
 8004790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004792:	e7f5      	b.n	8004780 <_dtoa_r+0x288>
 8004794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	9307      	str	r3, [sp, #28]
 800479a:	e7d7      	b.n	800474c <_dtoa_r+0x254>
 800479c:	3101      	adds	r1, #1
 800479e:	0052      	lsls	r2, r2, #1
 80047a0:	e7d8      	b.n	8004754 <_dtoa_r+0x25c>
 80047a2:	bf00      	nop
 80047a4:	f3af 8000 	nop.w
 80047a8:	636f4361 	.word	0x636f4361
 80047ac:	3fd287a7 	.word	0x3fd287a7
 80047b0:	8b60c8b3 	.word	0x8b60c8b3
 80047b4:	3fc68a28 	.word	0x3fc68a28
 80047b8:	509f79fb 	.word	0x509f79fb
 80047bc:	3fd34413 	.word	0x3fd34413
 80047c0:	0800611f 	.word	0x0800611f
 80047c4:	08006136 	.word	0x08006136
 80047c8:	7ff00000 	.word	0x7ff00000
 80047cc:	080060ef 	.word	0x080060ef
 80047d0:	3ff80000 	.word	0x3ff80000
 80047d4:	08006230 	.word	0x08006230
 80047d8:	0800618e 	.word	0x0800618e
 80047dc:	0800611b 	.word	0x0800611b
 80047e0:	080060ee 	.word	0x080060ee
 80047e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047e8:	6018      	str	r0, [r3, #0]
 80047ea:	9b07      	ldr	r3, [sp, #28]
 80047ec:	2b0e      	cmp	r3, #14
 80047ee:	f200 80a4 	bhi.w	800493a <_dtoa_r+0x442>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	f000 80a1 	beq.w	800493a <_dtoa_r+0x442>
 80047f8:	2f00      	cmp	r7, #0
 80047fa:	dd33      	ble.n	8004864 <_dtoa_r+0x36c>
 80047fc:	4bad      	ldr	r3, [pc, #692]	@ (8004ab4 <_dtoa_r+0x5bc>)
 80047fe:	f007 020f 	and.w	r2, r7, #15
 8004802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004806:	ed93 7b00 	vldr	d7, [r3]
 800480a:	05f8      	lsls	r0, r7, #23
 800480c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004810:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004814:	d516      	bpl.n	8004844 <_dtoa_r+0x34c>
 8004816:	4ba8      	ldr	r3, [pc, #672]	@ (8004ab8 <_dtoa_r+0x5c0>)
 8004818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800481c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004820:	f7fc f81c 	bl	800085c <__aeabi_ddiv>
 8004824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004828:	f004 040f 	and.w	r4, r4, #15
 800482c:	2603      	movs	r6, #3
 800482e:	4da2      	ldr	r5, [pc, #648]	@ (8004ab8 <_dtoa_r+0x5c0>)
 8004830:	b954      	cbnz	r4, 8004848 <_dtoa_r+0x350>
 8004832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800483a:	f7fc f80f 	bl	800085c <__aeabi_ddiv>
 800483e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004842:	e028      	b.n	8004896 <_dtoa_r+0x39e>
 8004844:	2602      	movs	r6, #2
 8004846:	e7f2      	b.n	800482e <_dtoa_r+0x336>
 8004848:	07e1      	lsls	r1, r4, #31
 800484a:	d508      	bpl.n	800485e <_dtoa_r+0x366>
 800484c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004850:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004854:	f7fb fed8 	bl	8000608 <__aeabi_dmul>
 8004858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800485c:	3601      	adds	r6, #1
 800485e:	1064      	asrs	r4, r4, #1
 8004860:	3508      	adds	r5, #8
 8004862:	e7e5      	b.n	8004830 <_dtoa_r+0x338>
 8004864:	f000 80d2 	beq.w	8004a0c <_dtoa_r+0x514>
 8004868:	427c      	negs	r4, r7
 800486a:	4b92      	ldr	r3, [pc, #584]	@ (8004ab4 <_dtoa_r+0x5bc>)
 800486c:	4d92      	ldr	r5, [pc, #584]	@ (8004ab8 <_dtoa_r+0x5c0>)
 800486e:	f004 020f 	and.w	r2, r4, #15
 8004872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800487e:	f7fb fec3 	bl	8000608 <__aeabi_dmul>
 8004882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004886:	1124      	asrs	r4, r4, #4
 8004888:	2300      	movs	r3, #0
 800488a:	2602      	movs	r6, #2
 800488c:	2c00      	cmp	r4, #0
 800488e:	f040 80b2 	bne.w	80049f6 <_dtoa_r+0x4fe>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1d3      	bne.n	800483e <_dtoa_r+0x346>
 8004896:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004898:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80b7 	beq.w	8004a10 <_dtoa_r+0x518>
 80048a2:	4b86      	ldr	r3, [pc, #536]	@ (8004abc <_dtoa_r+0x5c4>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fc f91f 	bl	8000aec <__aeabi_dcmplt>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	f000 80ae 	beq.w	8004a10 <_dtoa_r+0x518>
 80048b4:	9b07      	ldr	r3, [sp, #28]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80aa 	beq.w	8004a10 <_dtoa_r+0x518>
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dd37      	ble.n	8004932 <_dtoa_r+0x43a>
 80048c2:	1e7b      	subs	r3, r7, #1
 80048c4:	9304      	str	r3, [sp, #16]
 80048c6:	4620      	mov	r0, r4
 80048c8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ac0 <_dtoa_r+0x5c8>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fe9b 	bl	8000608 <__aeabi_dmul>
 80048d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048d6:	9c00      	ldr	r4, [sp, #0]
 80048d8:	3601      	adds	r6, #1
 80048da:	4630      	mov	r0, r6
 80048dc:	f7fb fe2a 	bl	8000534 <__aeabi_i2d>
 80048e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048e4:	f7fb fe90 	bl	8000608 <__aeabi_dmul>
 80048e8:	4b76      	ldr	r3, [pc, #472]	@ (8004ac4 <_dtoa_r+0x5cc>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	f7fb fcd6 	bl	800029c <__adddf3>
 80048f0:	4605      	mov	r5, r0
 80048f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	f040 808d 	bne.w	8004a16 <_dtoa_r+0x51e>
 80048fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004900:	4b71      	ldr	r3, [pc, #452]	@ (8004ac8 <_dtoa_r+0x5d0>)
 8004902:	2200      	movs	r2, #0
 8004904:	f7fb fcc8 	bl	8000298 <__aeabi_dsub>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004910:	462a      	mov	r2, r5
 8004912:	4633      	mov	r3, r6
 8004914:	f7fc f908 	bl	8000b28 <__aeabi_dcmpgt>
 8004918:	2800      	cmp	r0, #0
 800491a:	f040 828b 	bne.w	8004e34 <_dtoa_r+0x93c>
 800491e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004922:	462a      	mov	r2, r5
 8004924:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004928:	f7fc f8e0 	bl	8000aec <__aeabi_dcmplt>
 800492c:	2800      	cmp	r0, #0
 800492e:	f040 8128 	bne.w	8004b82 <_dtoa_r+0x68a>
 8004932:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800493a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800493c:	2b00      	cmp	r3, #0
 800493e:	f2c0 815a 	blt.w	8004bf6 <_dtoa_r+0x6fe>
 8004942:	2f0e      	cmp	r7, #14
 8004944:	f300 8157 	bgt.w	8004bf6 <_dtoa_r+0x6fe>
 8004948:	4b5a      	ldr	r3, [pc, #360]	@ (8004ab4 <_dtoa_r+0x5bc>)
 800494a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800494e:	ed93 7b00 	vldr	d7, [r3]
 8004952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004954:	2b00      	cmp	r3, #0
 8004956:	ed8d 7b00 	vstr	d7, [sp]
 800495a:	da03      	bge.n	8004964 <_dtoa_r+0x46c>
 800495c:	9b07      	ldr	r3, [sp, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f340 8101 	ble.w	8004b66 <_dtoa_r+0x66e>
 8004964:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004968:	4656      	mov	r6, sl
 800496a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fb ff73 	bl	800085c <__aeabi_ddiv>
 8004976:	f7fc f8f7 	bl	8000b68 <__aeabi_d2iz>
 800497a:	4680      	mov	r8, r0
 800497c:	f7fb fdda 	bl	8000534 <__aeabi_i2d>
 8004980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004984:	f7fb fe40 	bl	8000608 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4620      	mov	r0, r4
 800498e:	4629      	mov	r1, r5
 8004990:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004994:	f7fb fc80 	bl	8000298 <__aeabi_dsub>
 8004998:	f806 4b01 	strb.w	r4, [r6], #1
 800499c:	9d07      	ldr	r5, [sp, #28]
 800499e:	eba6 040a 	sub.w	r4, r6, sl
 80049a2:	42a5      	cmp	r5, r4
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	f040 8117 	bne.w	8004bda <_dtoa_r+0x6e2>
 80049ac:	f7fb fc76 	bl	800029c <__adddf3>
 80049b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049b4:	4604      	mov	r4, r0
 80049b6:	460d      	mov	r5, r1
 80049b8:	f7fc f8b6 	bl	8000b28 <__aeabi_dcmpgt>
 80049bc:	2800      	cmp	r0, #0
 80049be:	f040 80f9 	bne.w	8004bb4 <_dtoa_r+0x6bc>
 80049c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fc f885 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ce:	b118      	cbz	r0, 80049d8 <_dtoa_r+0x4e0>
 80049d0:	f018 0f01 	tst.w	r8, #1
 80049d4:	f040 80ee 	bne.w	8004bb4 <_dtoa_r+0x6bc>
 80049d8:	4649      	mov	r1, r9
 80049da:	4658      	mov	r0, fp
 80049dc:	f000 fc90 	bl	8005300 <_Bfree>
 80049e0:	2300      	movs	r3, #0
 80049e2:	7033      	strb	r3, [r6, #0]
 80049e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80049e6:	3701      	adds	r7, #1
 80049e8:	601f      	str	r7, [r3, #0]
 80049ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 831d 	beq.w	800502c <_dtoa_r+0xb34>
 80049f2:	601e      	str	r6, [r3, #0]
 80049f4:	e31a      	b.n	800502c <_dtoa_r+0xb34>
 80049f6:	07e2      	lsls	r2, r4, #31
 80049f8:	d505      	bpl.n	8004a06 <_dtoa_r+0x50e>
 80049fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049fe:	f7fb fe03 	bl	8000608 <__aeabi_dmul>
 8004a02:	3601      	adds	r6, #1
 8004a04:	2301      	movs	r3, #1
 8004a06:	1064      	asrs	r4, r4, #1
 8004a08:	3508      	adds	r5, #8
 8004a0a:	e73f      	b.n	800488c <_dtoa_r+0x394>
 8004a0c:	2602      	movs	r6, #2
 8004a0e:	e742      	b.n	8004896 <_dtoa_r+0x39e>
 8004a10:	9c07      	ldr	r4, [sp, #28]
 8004a12:	9704      	str	r7, [sp, #16]
 8004a14:	e761      	b.n	80048da <_dtoa_r+0x3e2>
 8004a16:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <_dtoa_r+0x5bc>)
 8004a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a22:	4454      	add	r4, sl
 8004a24:	2900      	cmp	r1, #0
 8004a26:	d053      	beq.n	8004ad0 <_dtoa_r+0x5d8>
 8004a28:	4928      	ldr	r1, [pc, #160]	@ (8004acc <_dtoa_r+0x5d4>)
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fb ff16 	bl	800085c <__aeabi_ddiv>
 8004a30:	4633      	mov	r3, r6
 8004a32:	462a      	mov	r2, r5
 8004a34:	f7fb fc30 	bl	8000298 <__aeabi_dsub>
 8004a38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a3c:	4656      	mov	r6, sl
 8004a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a42:	f7fc f891 	bl	8000b68 <__aeabi_d2iz>
 8004a46:	4605      	mov	r5, r0
 8004a48:	f7fb fd74 	bl	8000534 <__aeabi_i2d>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a54:	f7fb fc20 	bl	8000298 <__aeabi_dsub>
 8004a58:	3530      	adds	r5, #48	@ 0x30
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a62:	f806 5b01 	strb.w	r5, [r6], #1
 8004a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a6a:	f7fc f83f 	bl	8000aec <__aeabi_dcmplt>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d171      	bne.n	8004b56 <_dtoa_r+0x65e>
 8004a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a76:	4911      	ldr	r1, [pc, #68]	@ (8004abc <_dtoa_r+0x5c4>)
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f7fb fc0d 	bl	8000298 <__aeabi_dsub>
 8004a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a82:	f7fc f833 	bl	8000aec <__aeabi_dcmplt>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f040 8095 	bne.w	8004bb6 <_dtoa_r+0x6be>
 8004a8c:	42a6      	cmp	r6, r4
 8004a8e:	f43f af50 	beq.w	8004932 <_dtoa_r+0x43a>
 8004a92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <_dtoa_r+0x5c8>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f7fb fdb5 	bl	8000608 <__aeabi_dmul>
 8004a9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <_dtoa_r+0x5c8>)
 8004aa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aaa:	f7fb fdad 	bl	8000608 <__aeabi_dmul>
 8004aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ab2:	e7c4      	b.n	8004a3e <_dtoa_r+0x546>
 8004ab4:	08006230 	.word	0x08006230
 8004ab8:	08006208 	.word	0x08006208
 8004abc:	3ff00000 	.word	0x3ff00000
 8004ac0:	40240000 	.word	0x40240000
 8004ac4:	401c0000 	.word	0x401c0000
 8004ac8:	40140000 	.word	0x40140000
 8004acc:	3fe00000 	.word	0x3fe00000
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f7fb fd98 	bl	8000608 <__aeabi_dmul>
 8004ad8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004adc:	9415      	str	r4, [sp, #84]	@ 0x54
 8004ade:	4656      	mov	r6, sl
 8004ae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae4:	f7fc f840 	bl	8000b68 <__aeabi_d2iz>
 8004ae8:	4605      	mov	r5, r0
 8004aea:	f7fb fd23 	bl	8000534 <__aeabi_i2d>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af6:	f7fb fbcf 	bl	8000298 <__aeabi_dsub>
 8004afa:	3530      	adds	r5, #48	@ 0x30
 8004afc:	f806 5b01 	strb.w	r5, [r6], #1
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	42a6      	cmp	r6, r4
 8004b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	d124      	bne.n	8004b5a <_dtoa_r+0x662>
 8004b10:	4bac      	ldr	r3, [pc, #688]	@ (8004dc4 <_dtoa_r+0x8cc>)
 8004b12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b16:	f7fb fbc1 	bl	800029c <__adddf3>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b22:	f7fc f801 	bl	8000b28 <__aeabi_dcmpgt>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d145      	bne.n	8004bb6 <_dtoa_r+0x6be>
 8004b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b2e:	49a5      	ldr	r1, [pc, #660]	@ (8004dc4 <_dtoa_r+0x8cc>)
 8004b30:	2000      	movs	r0, #0
 8004b32:	f7fb fbb1 	bl	8000298 <__aeabi_dsub>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b3e:	f7fb ffd5 	bl	8000aec <__aeabi_dcmplt>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	f43f aef5 	beq.w	8004932 <_dtoa_r+0x43a>
 8004b48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004b4a:	1e73      	subs	r3, r6, #1
 8004b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004b4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b52:	2b30      	cmp	r3, #48	@ 0x30
 8004b54:	d0f8      	beq.n	8004b48 <_dtoa_r+0x650>
 8004b56:	9f04      	ldr	r7, [sp, #16]
 8004b58:	e73e      	b.n	80049d8 <_dtoa_r+0x4e0>
 8004b5a:	4b9b      	ldr	r3, [pc, #620]	@ (8004dc8 <_dtoa_r+0x8d0>)
 8004b5c:	f7fb fd54 	bl	8000608 <__aeabi_dmul>
 8004b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b64:	e7bc      	b.n	8004ae0 <_dtoa_r+0x5e8>
 8004b66:	d10c      	bne.n	8004b82 <_dtoa_r+0x68a>
 8004b68:	4b98      	ldr	r3, [pc, #608]	@ (8004dcc <_dtoa_r+0x8d4>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b70:	f7fb fd4a 	bl	8000608 <__aeabi_dmul>
 8004b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b78:	f7fb ffcc 	bl	8000b14 <__aeabi_dcmpge>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f000 8157 	beq.w	8004e30 <_dtoa_r+0x938>
 8004b82:	2400      	movs	r4, #0
 8004b84:	4625      	mov	r5, r4
 8004b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	9304      	str	r3, [sp, #16]
 8004b8c:	4656      	mov	r6, sl
 8004b8e:	2700      	movs	r7, #0
 8004b90:	4621      	mov	r1, r4
 8004b92:	4658      	mov	r0, fp
 8004b94:	f000 fbb4 	bl	8005300 <_Bfree>
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	d0dc      	beq.n	8004b56 <_dtoa_r+0x65e>
 8004b9c:	b12f      	cbz	r7, 8004baa <_dtoa_r+0x6b2>
 8004b9e:	42af      	cmp	r7, r5
 8004ba0:	d003      	beq.n	8004baa <_dtoa_r+0x6b2>
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	4658      	mov	r0, fp
 8004ba6:	f000 fbab 	bl	8005300 <_Bfree>
 8004baa:	4629      	mov	r1, r5
 8004bac:	4658      	mov	r0, fp
 8004bae:	f000 fba7 	bl	8005300 <_Bfree>
 8004bb2:	e7d0      	b.n	8004b56 <_dtoa_r+0x65e>
 8004bb4:	9704      	str	r7, [sp, #16]
 8004bb6:	4633      	mov	r3, r6
 8004bb8:	461e      	mov	r6, r3
 8004bba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bbe:	2a39      	cmp	r2, #57	@ 0x39
 8004bc0:	d107      	bne.n	8004bd2 <_dtoa_r+0x6da>
 8004bc2:	459a      	cmp	sl, r3
 8004bc4:	d1f8      	bne.n	8004bb8 <_dtoa_r+0x6c0>
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	3201      	adds	r2, #1
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	2230      	movs	r2, #48	@ 0x30
 8004bce:	f88a 2000 	strb.w	r2, [sl]
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	3201      	adds	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	e7bd      	b.n	8004b56 <_dtoa_r+0x65e>
 8004bda:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <_dtoa_r+0x8d0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f7fb fd13 	bl	8000608 <__aeabi_dmul>
 8004be2:	2200      	movs	r2, #0
 8004be4:	2300      	movs	r3, #0
 8004be6:	4604      	mov	r4, r0
 8004be8:	460d      	mov	r5, r1
 8004bea:	f7fb ff75 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f43f aebb 	beq.w	800496a <_dtoa_r+0x472>
 8004bf4:	e6f0      	b.n	80049d8 <_dtoa_r+0x4e0>
 8004bf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	f000 80db 	beq.w	8004db4 <_dtoa_r+0x8bc>
 8004bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c00:	2a01      	cmp	r2, #1
 8004c02:	f300 80bf 	bgt.w	8004d84 <_dtoa_r+0x88c>
 8004c06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	f000 80b7 	beq.w	8004d7c <_dtoa_r+0x884>
 8004c0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c14:	4646      	mov	r6, r8
 8004c16:	9a08      	ldr	r2, [sp, #32]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	441a      	add	r2, r3
 8004c1c:	4658      	mov	r0, fp
 8004c1e:	4498      	add	r8, r3
 8004c20:	9208      	str	r2, [sp, #32]
 8004c22:	f000 fc21 	bl	8005468 <__i2b>
 8004c26:	4605      	mov	r5, r0
 8004c28:	b15e      	cbz	r6, 8004c42 <_dtoa_r+0x74a>
 8004c2a:	9b08      	ldr	r3, [sp, #32]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dd08      	ble.n	8004c42 <_dtoa_r+0x74a>
 8004c30:	42b3      	cmp	r3, r6
 8004c32:	9a08      	ldr	r2, [sp, #32]
 8004c34:	bfa8      	it	ge
 8004c36:	4633      	movge	r3, r6
 8004c38:	eba8 0803 	sub.w	r8, r8, r3
 8004c3c:	1af6      	subs	r6, r6, r3
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	9308      	str	r3, [sp, #32]
 8004c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c44:	b1f3      	cbz	r3, 8004c84 <_dtoa_r+0x78c>
 8004c46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80b7 	beq.w	8004dbc <_dtoa_r+0x8c4>
 8004c4e:	b18c      	cbz	r4, 8004c74 <_dtoa_r+0x77c>
 8004c50:	4629      	mov	r1, r5
 8004c52:	4622      	mov	r2, r4
 8004c54:	4658      	mov	r0, fp
 8004c56:	f000 fcc7 	bl	80055e8 <__pow5mult>
 8004c5a:	464a      	mov	r2, r9
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4605      	mov	r5, r0
 8004c60:	4658      	mov	r0, fp
 8004c62:	f000 fc17 	bl	8005494 <__multiply>
 8004c66:	4649      	mov	r1, r9
 8004c68:	9004      	str	r0, [sp, #16]
 8004c6a:	4658      	mov	r0, fp
 8004c6c:	f000 fb48 	bl	8005300 <_Bfree>
 8004c70:	9b04      	ldr	r3, [sp, #16]
 8004c72:	4699      	mov	r9, r3
 8004c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c76:	1b1a      	subs	r2, r3, r4
 8004c78:	d004      	beq.n	8004c84 <_dtoa_r+0x78c>
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	4658      	mov	r0, fp
 8004c7e:	f000 fcb3 	bl	80055e8 <__pow5mult>
 8004c82:	4681      	mov	r9, r0
 8004c84:	2101      	movs	r1, #1
 8004c86:	4658      	mov	r0, fp
 8004c88:	f000 fbee 	bl	8005468 <__i2b>
 8004c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c8e:	4604      	mov	r4, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 81cf 	beq.w	8005034 <_dtoa_r+0xb3c>
 8004c96:	461a      	mov	r2, r3
 8004c98:	4601      	mov	r1, r0
 8004c9a:	4658      	mov	r0, fp
 8004c9c:	f000 fca4 	bl	80055e8 <__pow5mult>
 8004ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	f300 8095 	bgt.w	8004dd4 <_dtoa_r+0x8dc>
 8004caa:	9b02      	ldr	r3, [sp, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 8087 	bne.w	8004dc0 <_dtoa_r+0x8c8>
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 8089 	bne.w	8004dd0 <_dtoa_r+0x8d8>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	051b      	lsls	r3, r3, #20
 8004cc8:	b12b      	cbz	r3, 8004cd6 <_dtoa_r+0x7de>
 8004cca:	9b08      	ldr	r3, [sp, #32]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	9308      	str	r3, [sp, #32]
 8004cd0:	f108 0801 	add.w	r8, r8, #1
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 81b0 	beq.w	8005040 <_dtoa_r+0xb48>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ce6:	6918      	ldr	r0, [r3, #16]
 8004ce8:	f000 fb72 	bl	80053d0 <__hi0bits>
 8004cec:	f1c0 0020 	rsb	r0, r0, #32
 8004cf0:	9b08      	ldr	r3, [sp, #32]
 8004cf2:	4418      	add	r0, r3
 8004cf4:	f010 001f 	ands.w	r0, r0, #31
 8004cf8:	d077      	beq.n	8004dea <_dtoa_r+0x8f2>
 8004cfa:	f1c0 0320 	rsb	r3, r0, #32
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	dd6b      	ble.n	8004dda <_dtoa_r+0x8e2>
 8004d02:	9b08      	ldr	r3, [sp, #32]
 8004d04:	f1c0 001c 	rsb	r0, r0, #28
 8004d08:	4403      	add	r3, r0
 8004d0a:	4480      	add	r8, r0
 8004d0c:	4406      	add	r6, r0
 8004d0e:	9308      	str	r3, [sp, #32]
 8004d10:	f1b8 0f00 	cmp.w	r8, #0
 8004d14:	dd05      	ble.n	8004d22 <_dtoa_r+0x82a>
 8004d16:	4649      	mov	r1, r9
 8004d18:	4642      	mov	r2, r8
 8004d1a:	4658      	mov	r0, fp
 8004d1c:	f000 fcbe 	bl	800569c <__lshift>
 8004d20:	4681      	mov	r9, r0
 8004d22:	9b08      	ldr	r3, [sp, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd05      	ble.n	8004d34 <_dtoa_r+0x83c>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4658      	mov	r0, fp
 8004d2e:	f000 fcb5 	bl	800569c <__lshift>
 8004d32:	4604      	mov	r4, r0
 8004d34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d059      	beq.n	8004dee <_dtoa_r+0x8f6>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4648      	mov	r0, r9
 8004d3e:	f000 fd19 	bl	8005774 <__mcmp>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	da53      	bge.n	8004dee <_dtoa_r+0x8f6>
 8004d46:	1e7b      	subs	r3, r7, #1
 8004d48:	9304      	str	r3, [sp, #16]
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	220a      	movs	r2, #10
 8004d50:	4658      	mov	r0, fp
 8004d52:	f000 faf7 	bl	8005344 <__multadd>
 8004d56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d58:	4681      	mov	r9, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8172 	beq.w	8005044 <_dtoa_r+0xb4c>
 8004d60:	2300      	movs	r3, #0
 8004d62:	4629      	mov	r1, r5
 8004d64:	220a      	movs	r2, #10
 8004d66:	4658      	mov	r0, fp
 8004d68:	f000 faec 	bl	8005344 <__multadd>
 8004d6c:	9b00      	ldr	r3, [sp, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	4605      	mov	r5, r0
 8004d72:	dc67      	bgt.n	8004e44 <_dtoa_r+0x94c>
 8004d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	dc41      	bgt.n	8004dfe <_dtoa_r+0x906>
 8004d7a:	e063      	b.n	8004e44 <_dtoa_r+0x94c>
 8004d7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d82:	e746      	b.n	8004c12 <_dtoa_r+0x71a>
 8004d84:	9b07      	ldr	r3, [sp, #28]
 8004d86:	1e5c      	subs	r4, r3, #1
 8004d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d8a:	42a3      	cmp	r3, r4
 8004d8c:	bfbf      	itttt	lt
 8004d8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004d92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d94:	1ae3      	sublt	r3, r4, r3
 8004d96:	bfb4      	ite	lt
 8004d98:	18d2      	addlt	r2, r2, r3
 8004d9a:	1b1c      	subge	r4, r3, r4
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	bfbc      	itt	lt
 8004da0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004da2:	2400      	movlt	r4, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bfb5      	itete	lt
 8004da8:	eba8 0603 	sublt.w	r6, r8, r3
 8004dac:	9b07      	ldrge	r3, [sp, #28]
 8004dae:	2300      	movlt	r3, #0
 8004db0:	4646      	movge	r6, r8
 8004db2:	e730      	b.n	8004c16 <_dtoa_r+0x71e>
 8004db4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004db6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004db8:	4646      	mov	r6, r8
 8004dba:	e735      	b.n	8004c28 <_dtoa_r+0x730>
 8004dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dbe:	e75c      	b.n	8004c7a <_dtoa_r+0x782>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e788      	b.n	8004cd6 <_dtoa_r+0x7de>
 8004dc4:	3fe00000 	.word	0x3fe00000
 8004dc8:	40240000 	.word	0x40240000
 8004dcc:	40140000 	.word	0x40140000
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	e780      	b.n	8004cd6 <_dtoa_r+0x7de>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dd8:	e782      	b.n	8004ce0 <_dtoa_r+0x7e8>
 8004dda:	d099      	beq.n	8004d10 <_dtoa_r+0x818>
 8004ddc:	9a08      	ldr	r2, [sp, #32]
 8004dde:	331c      	adds	r3, #28
 8004de0:	441a      	add	r2, r3
 8004de2:	4498      	add	r8, r3
 8004de4:	441e      	add	r6, r3
 8004de6:	9208      	str	r2, [sp, #32]
 8004de8:	e792      	b.n	8004d10 <_dtoa_r+0x818>
 8004dea:	4603      	mov	r3, r0
 8004dec:	e7f6      	b.n	8004ddc <_dtoa_r+0x8e4>
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	9704      	str	r7, [sp, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc20      	bgt.n	8004e38 <_dtoa_r+0x940>
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	dd1e      	ble.n	8004e3c <_dtoa_r+0x944>
 8004dfe:	9b00      	ldr	r3, [sp, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f aec0 	bne.w	8004b86 <_dtoa_r+0x68e>
 8004e06:	4621      	mov	r1, r4
 8004e08:	2205      	movs	r2, #5
 8004e0a:	4658      	mov	r0, fp
 8004e0c:	f000 fa9a 	bl	8005344 <__multadd>
 8004e10:	4601      	mov	r1, r0
 8004e12:	4604      	mov	r4, r0
 8004e14:	4648      	mov	r0, r9
 8004e16:	f000 fcad 	bl	8005774 <__mcmp>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f77f aeb3 	ble.w	8004b86 <_dtoa_r+0x68e>
 8004e20:	4656      	mov	r6, sl
 8004e22:	2331      	movs	r3, #49	@ 0x31
 8004e24:	f806 3b01 	strb.w	r3, [r6], #1
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	9304      	str	r3, [sp, #16]
 8004e2e:	e6ae      	b.n	8004b8e <_dtoa_r+0x696>
 8004e30:	9c07      	ldr	r4, [sp, #28]
 8004e32:	9704      	str	r7, [sp, #16]
 8004e34:	4625      	mov	r5, r4
 8004e36:	e7f3      	b.n	8004e20 <_dtoa_r+0x928>
 8004e38:	9b07      	ldr	r3, [sp, #28]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8104 	beq.w	800504c <_dtoa_r+0xb54>
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	dd05      	ble.n	8004e54 <_dtoa_r+0x95c>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fc25 	bl	800569c <__lshift>
 8004e52:	4605      	mov	r5, r0
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05a      	beq.n	8004f10 <_dtoa_r+0xa18>
 8004e5a:	6869      	ldr	r1, [r5, #4]
 8004e5c:	4658      	mov	r0, fp
 8004e5e:	f000 fa0f 	bl	8005280 <_Balloc>
 8004e62:	4606      	mov	r6, r0
 8004e64:	b928      	cbnz	r0, 8004e72 <_dtoa_r+0x97a>
 8004e66:	4b84      	ldr	r3, [pc, #528]	@ (8005078 <_dtoa_r+0xb80>)
 8004e68:	4602      	mov	r2, r0
 8004e6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e6e:	f7ff bb5a 	b.w	8004526 <_dtoa_r+0x2e>
 8004e72:	692a      	ldr	r2, [r5, #16]
 8004e74:	3202      	adds	r2, #2
 8004e76:	0092      	lsls	r2, r2, #2
 8004e78:	f105 010c 	add.w	r1, r5, #12
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	f001 f803 	bl	8005e88 <memcpy>
 8004e82:	2201      	movs	r2, #1
 8004e84:	4631      	mov	r1, r6
 8004e86:	4658      	mov	r0, fp
 8004e88:	f000 fc08 	bl	800569c <__lshift>
 8004e8c:	f10a 0301 	add.w	r3, sl, #1
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	9b00      	ldr	r3, [sp, #0]
 8004e94:	4453      	add	r3, sl
 8004e96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	462f      	mov	r7, r5
 8004ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	9b07      	ldr	r3, [sp, #28]
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	4648      	mov	r0, r9
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	f7ff fa98 	bl	80043e2 <quorem>
 8004eb2:	4639      	mov	r1, r7
 8004eb4:	9002      	str	r0, [sp, #8]
 8004eb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004eba:	4648      	mov	r0, r9
 8004ebc:	f000 fc5a 	bl	8005774 <__mcmp>
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	9008      	str	r0, [sp, #32]
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4658      	mov	r0, fp
 8004ec8:	f000 fc70 	bl	80057ac <__mdiff>
 8004ecc:	68c2      	ldr	r2, [r0, #12]
 8004ece:	4606      	mov	r6, r0
 8004ed0:	bb02      	cbnz	r2, 8004f14 <_dtoa_r+0xa1c>
 8004ed2:	4601      	mov	r1, r0
 8004ed4:	4648      	mov	r0, r9
 8004ed6:	f000 fc4d 	bl	8005774 <__mcmp>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4631      	mov	r1, r6
 8004ede:	4658      	mov	r0, fp
 8004ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ee2:	f000 fa0d 	bl	8005300 <_Bfree>
 8004ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004eea:	9e07      	ldr	r6, [sp, #28]
 8004eec:	ea43 0102 	orr.w	r1, r3, r2
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ef2:	4319      	orrs	r1, r3
 8004ef4:	d110      	bne.n	8004f18 <_dtoa_r+0xa20>
 8004ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004efa:	d029      	beq.n	8004f50 <_dtoa_r+0xa58>
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	dd02      	ble.n	8004f08 <_dtoa_r+0xa10>
 8004f02:	9b02      	ldr	r3, [sp, #8]
 8004f04:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004f08:	9b00      	ldr	r3, [sp, #0]
 8004f0a:	f883 8000 	strb.w	r8, [r3]
 8004f0e:	e63f      	b.n	8004b90 <_dtoa_r+0x698>
 8004f10:	4628      	mov	r0, r5
 8004f12:	e7bb      	b.n	8004e8c <_dtoa_r+0x994>
 8004f14:	2201      	movs	r2, #1
 8004f16:	e7e1      	b.n	8004edc <_dtoa_r+0x9e4>
 8004f18:	9b08      	ldr	r3, [sp, #32]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	db04      	blt.n	8004f28 <_dtoa_r+0xa30>
 8004f1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f20:	430b      	orrs	r3, r1
 8004f22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f24:	430b      	orrs	r3, r1
 8004f26:	d120      	bne.n	8004f6a <_dtoa_r+0xa72>
 8004f28:	2a00      	cmp	r2, #0
 8004f2a:	dded      	ble.n	8004f08 <_dtoa_r+0xa10>
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4658      	mov	r0, fp
 8004f32:	f000 fbb3 	bl	800569c <__lshift>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4681      	mov	r9, r0
 8004f3a:	f000 fc1b 	bl	8005774 <__mcmp>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	dc03      	bgt.n	8004f4a <_dtoa_r+0xa52>
 8004f42:	d1e1      	bne.n	8004f08 <_dtoa_r+0xa10>
 8004f44:	f018 0f01 	tst.w	r8, #1
 8004f48:	d0de      	beq.n	8004f08 <_dtoa_r+0xa10>
 8004f4a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f4e:	d1d8      	bne.n	8004f02 <_dtoa_r+0xa0a>
 8004f50:	9a00      	ldr	r2, [sp, #0]
 8004f52:	2339      	movs	r3, #57	@ 0x39
 8004f54:	7013      	strb	r3, [r2, #0]
 8004f56:	4633      	mov	r3, r6
 8004f58:	461e      	mov	r6, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f60:	2a39      	cmp	r2, #57	@ 0x39
 8004f62:	d052      	beq.n	800500a <_dtoa_r+0xb12>
 8004f64:	3201      	adds	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	e612      	b.n	8004b90 <_dtoa_r+0x698>
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	dd07      	ble.n	8004f7e <_dtoa_r+0xa86>
 8004f6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f72:	d0ed      	beq.n	8004f50 <_dtoa_r+0xa58>
 8004f74:	9a00      	ldr	r2, [sp, #0]
 8004f76:	f108 0301 	add.w	r3, r8, #1
 8004f7a:	7013      	strb	r3, [r2, #0]
 8004f7c:	e608      	b.n	8004b90 <_dtoa_r+0x698>
 8004f7e:	9b07      	ldr	r3, [sp, #28]
 8004f80:	9a07      	ldr	r2, [sp, #28]
 8004f82:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d028      	beq.n	8004fde <_dtoa_r+0xae6>
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	2300      	movs	r3, #0
 8004f90:	220a      	movs	r2, #10
 8004f92:	4658      	mov	r0, fp
 8004f94:	f000 f9d6 	bl	8005344 <__multadd>
 8004f98:	42af      	cmp	r7, r5
 8004f9a:	4681      	mov	r9, r0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	f04f 020a 	mov.w	r2, #10
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	d107      	bne.n	8004fba <_dtoa_r+0xac2>
 8004faa:	f000 f9cb 	bl	8005344 <__multadd>
 8004fae:	4607      	mov	r7, r0
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	e774      	b.n	8004ea4 <_dtoa_r+0x9ac>
 8004fba:	f000 f9c3 	bl	8005344 <__multadd>
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	4658      	mov	r0, fp
 8004fc8:	f000 f9bc 	bl	8005344 <__multadd>
 8004fcc:	4605      	mov	r5, r0
 8004fce:	e7f0      	b.n	8004fb2 <_dtoa_r+0xaba>
 8004fd0:	9b00      	ldr	r3, [sp, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bfcc      	ite	gt
 8004fd6:	461e      	movgt	r6, r3
 8004fd8:	2601      	movle	r6, #1
 8004fda:	4456      	add	r6, sl
 8004fdc:	2700      	movs	r7, #0
 8004fde:	4649      	mov	r1, r9
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f000 fb5a 	bl	800569c <__lshift>
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4681      	mov	r9, r0
 8004fec:	f000 fbc2 	bl	8005774 <__mcmp>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	dcb0      	bgt.n	8004f56 <_dtoa_r+0xa5e>
 8004ff4:	d102      	bne.n	8004ffc <_dtoa_r+0xb04>
 8004ff6:	f018 0f01 	tst.w	r8, #1
 8004ffa:	d1ac      	bne.n	8004f56 <_dtoa_r+0xa5e>
 8004ffc:	4633      	mov	r3, r6
 8004ffe:	461e      	mov	r6, r3
 8005000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005004:	2a30      	cmp	r2, #48	@ 0x30
 8005006:	d0fa      	beq.n	8004ffe <_dtoa_r+0xb06>
 8005008:	e5c2      	b.n	8004b90 <_dtoa_r+0x698>
 800500a:	459a      	cmp	sl, r3
 800500c:	d1a4      	bne.n	8004f58 <_dtoa_r+0xa60>
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	2331      	movs	r3, #49	@ 0x31
 8005016:	f88a 3000 	strb.w	r3, [sl]
 800501a:	e5b9      	b.n	8004b90 <_dtoa_r+0x698>
 800501c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800501e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800507c <_dtoa_r+0xb84>
 8005022:	b11b      	cbz	r3, 800502c <_dtoa_r+0xb34>
 8005024:	f10a 0308 	add.w	r3, sl, #8
 8005028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4650      	mov	r0, sl
 800502e:	b019      	add	sp, #100	@ 0x64
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005036:	2b01      	cmp	r3, #1
 8005038:	f77f ae37 	ble.w	8004caa <_dtoa_r+0x7b2>
 800503c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800503e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005040:	2001      	movs	r0, #1
 8005042:	e655      	b.n	8004cf0 <_dtoa_r+0x7f8>
 8005044:	9b00      	ldr	r3, [sp, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	f77f aed6 	ble.w	8004df8 <_dtoa_r+0x900>
 800504c:	4656      	mov	r6, sl
 800504e:	4621      	mov	r1, r4
 8005050:	4648      	mov	r0, r9
 8005052:	f7ff f9c6 	bl	80043e2 <quorem>
 8005056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800505a:	f806 8b01 	strb.w	r8, [r6], #1
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	eba6 020a 	sub.w	r2, r6, sl
 8005064:	4293      	cmp	r3, r2
 8005066:	ddb3      	ble.n	8004fd0 <_dtoa_r+0xad8>
 8005068:	4649      	mov	r1, r9
 800506a:	2300      	movs	r3, #0
 800506c:	220a      	movs	r2, #10
 800506e:	4658      	mov	r0, fp
 8005070:	f000 f968 	bl	8005344 <__multadd>
 8005074:	4681      	mov	r9, r0
 8005076:	e7ea      	b.n	800504e <_dtoa_r+0xb56>
 8005078:	0800618e 	.word	0x0800618e
 800507c:	08006112 	.word	0x08006112

08005080 <_free_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	2900      	cmp	r1, #0
 8005086:	d041      	beq.n	800510c <_free_r+0x8c>
 8005088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508c:	1f0c      	subs	r4, r1, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	18e4      	addlt	r4, r4, r3
 8005094:	f000 f8e8 	bl	8005268 <__malloc_lock>
 8005098:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <_free_r+0x90>)
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	b933      	cbnz	r3, 80050ac <_free_r+0x2c>
 800509e:	6063      	str	r3, [r4, #4]
 80050a0:	6014      	str	r4, [r2, #0]
 80050a2:	4628      	mov	r0, r5
 80050a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a8:	f000 b8e4 	b.w	8005274 <__malloc_unlock>
 80050ac:	42a3      	cmp	r3, r4
 80050ae:	d908      	bls.n	80050c2 <_free_r+0x42>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	1821      	adds	r1, r4, r0
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf01      	itttt	eq
 80050b8:	6819      	ldreq	r1, [r3, #0]
 80050ba:	685b      	ldreq	r3, [r3, #4]
 80050bc:	1809      	addeq	r1, r1, r0
 80050be:	6021      	streq	r1, [r4, #0]
 80050c0:	e7ed      	b.n	800509e <_free_r+0x1e>
 80050c2:	461a      	mov	r2, r3
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	b10b      	cbz	r3, 80050cc <_free_r+0x4c>
 80050c8:	42a3      	cmp	r3, r4
 80050ca:	d9fa      	bls.n	80050c2 <_free_r+0x42>
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	1850      	adds	r0, r2, r1
 80050d0:	42a0      	cmp	r0, r4
 80050d2:	d10b      	bne.n	80050ec <_free_r+0x6c>
 80050d4:	6820      	ldr	r0, [r4, #0]
 80050d6:	4401      	add	r1, r0
 80050d8:	1850      	adds	r0, r2, r1
 80050da:	4283      	cmp	r3, r0
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	d1e0      	bne.n	80050a2 <_free_r+0x22>
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	6053      	str	r3, [r2, #4]
 80050e6:	4408      	add	r0, r1
 80050e8:	6010      	str	r0, [r2, #0]
 80050ea:	e7da      	b.n	80050a2 <_free_r+0x22>
 80050ec:	d902      	bls.n	80050f4 <_free_r+0x74>
 80050ee:	230c      	movs	r3, #12
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	e7d6      	b.n	80050a2 <_free_r+0x22>
 80050f4:	6820      	ldr	r0, [r4, #0]
 80050f6:	1821      	adds	r1, r4, r0
 80050f8:	428b      	cmp	r3, r1
 80050fa:	bf04      	itt	eq
 80050fc:	6819      	ldreq	r1, [r3, #0]
 80050fe:	685b      	ldreq	r3, [r3, #4]
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	bf04      	itt	eq
 8005104:	1809      	addeq	r1, r1, r0
 8005106:	6021      	streq	r1, [r4, #0]
 8005108:	6054      	str	r4, [r2, #4]
 800510a:	e7ca      	b.n	80050a2 <_free_r+0x22>
 800510c:	bd38      	pop	{r3, r4, r5, pc}
 800510e:	bf00      	nop
 8005110:	2000044c 	.word	0x2000044c

08005114 <malloc>:
 8005114:	4b02      	ldr	r3, [pc, #8]	@ (8005120 <malloc+0xc>)
 8005116:	4601      	mov	r1, r0
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f000 b825 	b.w	8005168 <_malloc_r>
 800511e:	bf00      	nop
 8005120:	20000020 	.word	0x20000020

08005124 <sbrk_aligned>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4e0f      	ldr	r6, [pc, #60]	@ (8005164 <sbrk_aligned+0x40>)
 8005128:	460c      	mov	r4, r1
 800512a:	6831      	ldr	r1, [r6, #0]
 800512c:	4605      	mov	r5, r0
 800512e:	b911      	cbnz	r1, 8005136 <sbrk_aligned+0x12>
 8005130:	f000 fe9a 	bl	8005e68 <_sbrk_r>
 8005134:	6030      	str	r0, [r6, #0]
 8005136:	4621      	mov	r1, r4
 8005138:	4628      	mov	r0, r5
 800513a:	f000 fe95 	bl	8005e68 <_sbrk_r>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	d103      	bne.n	800514a <sbrk_aligned+0x26>
 8005142:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005146:	4620      	mov	r0, r4
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 800514a:	1cc4      	adds	r4, r0, #3
 800514c:	f024 0403 	bic.w	r4, r4, #3
 8005150:	42a0      	cmp	r0, r4
 8005152:	d0f8      	beq.n	8005146 <sbrk_aligned+0x22>
 8005154:	1a21      	subs	r1, r4, r0
 8005156:	4628      	mov	r0, r5
 8005158:	f000 fe86 	bl	8005e68 <_sbrk_r>
 800515c:	3001      	adds	r0, #1
 800515e:	d1f2      	bne.n	8005146 <sbrk_aligned+0x22>
 8005160:	e7ef      	b.n	8005142 <sbrk_aligned+0x1e>
 8005162:	bf00      	nop
 8005164:	20000448 	.word	0x20000448

08005168 <_malloc_r>:
 8005168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800516c:	1ccd      	adds	r5, r1, #3
 800516e:	f025 0503 	bic.w	r5, r5, #3
 8005172:	3508      	adds	r5, #8
 8005174:	2d0c      	cmp	r5, #12
 8005176:	bf38      	it	cc
 8005178:	250c      	movcc	r5, #12
 800517a:	2d00      	cmp	r5, #0
 800517c:	4606      	mov	r6, r0
 800517e:	db01      	blt.n	8005184 <_malloc_r+0x1c>
 8005180:	42a9      	cmp	r1, r5
 8005182:	d904      	bls.n	800518e <_malloc_r+0x26>
 8005184:	230c      	movs	r3, #12
 8005186:	6033      	str	r3, [r6, #0]
 8005188:	2000      	movs	r0, #0
 800518a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800518e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005264 <_malloc_r+0xfc>
 8005192:	f000 f869 	bl	8005268 <__malloc_lock>
 8005196:	f8d8 3000 	ldr.w	r3, [r8]
 800519a:	461c      	mov	r4, r3
 800519c:	bb44      	cbnz	r4, 80051f0 <_malloc_r+0x88>
 800519e:	4629      	mov	r1, r5
 80051a0:	4630      	mov	r0, r6
 80051a2:	f7ff ffbf 	bl	8005124 <sbrk_aligned>
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	4604      	mov	r4, r0
 80051aa:	d158      	bne.n	800525e <_malloc_r+0xf6>
 80051ac:	f8d8 4000 	ldr.w	r4, [r8]
 80051b0:	4627      	mov	r7, r4
 80051b2:	2f00      	cmp	r7, #0
 80051b4:	d143      	bne.n	800523e <_malloc_r+0xd6>
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	d04b      	beq.n	8005252 <_malloc_r+0xea>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	4639      	mov	r1, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	eb04 0903 	add.w	r9, r4, r3
 80051c4:	f000 fe50 	bl	8005e68 <_sbrk_r>
 80051c8:	4581      	cmp	r9, r0
 80051ca:	d142      	bne.n	8005252 <_malloc_r+0xea>
 80051cc:	6821      	ldr	r1, [r4, #0]
 80051ce:	1a6d      	subs	r5, r5, r1
 80051d0:	4629      	mov	r1, r5
 80051d2:	4630      	mov	r0, r6
 80051d4:	f7ff ffa6 	bl	8005124 <sbrk_aligned>
 80051d8:	3001      	adds	r0, #1
 80051da:	d03a      	beq.n	8005252 <_malloc_r+0xea>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	442b      	add	r3, r5
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	f8d8 3000 	ldr.w	r3, [r8]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	bb62      	cbnz	r2, 8005244 <_malloc_r+0xdc>
 80051ea:	f8c8 7000 	str.w	r7, [r8]
 80051ee:	e00f      	b.n	8005210 <_malloc_r+0xa8>
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	1b52      	subs	r2, r2, r5
 80051f4:	d420      	bmi.n	8005238 <_malloc_r+0xd0>
 80051f6:	2a0b      	cmp	r2, #11
 80051f8:	d917      	bls.n	800522a <_malloc_r+0xc2>
 80051fa:	1961      	adds	r1, r4, r5
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	6025      	str	r5, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	6059      	strne	r1, [r3, #4]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	bf08      	it	eq
 8005208:	f8c8 1000 	streq.w	r1, [r8]
 800520c:	5162      	str	r2, [r4, r5]
 800520e:	604b      	str	r3, [r1, #4]
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f82f 	bl	8005274 <__malloc_unlock>
 8005216:	f104 000b 	add.w	r0, r4, #11
 800521a:	1d23      	adds	r3, r4, #4
 800521c:	f020 0007 	bic.w	r0, r0, #7
 8005220:	1ac2      	subs	r2, r0, r3
 8005222:	bf1c      	itt	ne
 8005224:	1a1b      	subne	r3, r3, r0
 8005226:	50a3      	strne	r3, [r4, r2]
 8005228:	e7af      	b.n	800518a <_malloc_r+0x22>
 800522a:	6862      	ldr	r2, [r4, #4]
 800522c:	42a3      	cmp	r3, r4
 800522e:	bf0c      	ite	eq
 8005230:	f8c8 2000 	streq.w	r2, [r8]
 8005234:	605a      	strne	r2, [r3, #4]
 8005236:	e7eb      	b.n	8005210 <_malloc_r+0xa8>
 8005238:	4623      	mov	r3, r4
 800523a:	6864      	ldr	r4, [r4, #4]
 800523c:	e7ae      	b.n	800519c <_malloc_r+0x34>
 800523e:	463c      	mov	r4, r7
 8005240:	687f      	ldr	r7, [r7, #4]
 8005242:	e7b6      	b.n	80051b2 <_malloc_r+0x4a>
 8005244:	461a      	mov	r2, r3
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	42a3      	cmp	r3, r4
 800524a:	d1fb      	bne.n	8005244 <_malloc_r+0xdc>
 800524c:	2300      	movs	r3, #0
 800524e:	6053      	str	r3, [r2, #4]
 8005250:	e7de      	b.n	8005210 <_malloc_r+0xa8>
 8005252:	230c      	movs	r3, #12
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	4630      	mov	r0, r6
 8005258:	f000 f80c 	bl	8005274 <__malloc_unlock>
 800525c:	e794      	b.n	8005188 <_malloc_r+0x20>
 800525e:	6005      	str	r5, [r0, #0]
 8005260:	e7d6      	b.n	8005210 <_malloc_r+0xa8>
 8005262:	bf00      	nop
 8005264:	2000044c 	.word	0x2000044c

08005268 <__malloc_lock>:
 8005268:	4801      	ldr	r0, [pc, #4]	@ (8005270 <__malloc_lock+0x8>)
 800526a:	f7ff b8b8 	b.w	80043de <__retarget_lock_acquire_recursive>
 800526e:	bf00      	nop
 8005270:	20000444 	.word	0x20000444

08005274 <__malloc_unlock>:
 8005274:	4801      	ldr	r0, [pc, #4]	@ (800527c <__malloc_unlock+0x8>)
 8005276:	f7ff b8b3 	b.w	80043e0 <__retarget_lock_release_recursive>
 800527a:	bf00      	nop
 800527c:	20000444 	.word	0x20000444

08005280 <_Balloc>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	69c6      	ldr	r6, [r0, #28]
 8005284:	4604      	mov	r4, r0
 8005286:	460d      	mov	r5, r1
 8005288:	b976      	cbnz	r6, 80052a8 <_Balloc+0x28>
 800528a:	2010      	movs	r0, #16
 800528c:	f7ff ff42 	bl	8005114 <malloc>
 8005290:	4602      	mov	r2, r0
 8005292:	61e0      	str	r0, [r4, #28]
 8005294:	b920      	cbnz	r0, 80052a0 <_Balloc+0x20>
 8005296:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <_Balloc+0x78>)
 8005298:	4818      	ldr	r0, [pc, #96]	@ (80052fc <_Balloc+0x7c>)
 800529a:	216b      	movs	r1, #107	@ 0x6b
 800529c:	f000 fe02 	bl	8005ea4 <__assert_func>
 80052a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052a4:	6006      	str	r6, [r0, #0]
 80052a6:	60c6      	str	r6, [r0, #12]
 80052a8:	69e6      	ldr	r6, [r4, #28]
 80052aa:	68f3      	ldr	r3, [r6, #12]
 80052ac:	b183      	cbz	r3, 80052d0 <_Balloc+0x50>
 80052ae:	69e3      	ldr	r3, [r4, #28]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052b6:	b9b8      	cbnz	r0, 80052e8 <_Balloc+0x68>
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f605 	lsl.w	r6, r1, r5
 80052be:	1d72      	adds	r2, r6, #5
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fe0c 	bl	8005ee0 <_calloc_r>
 80052c8:	b160      	cbz	r0, 80052e4 <_Balloc+0x64>
 80052ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052ce:	e00e      	b.n	80052ee <_Balloc+0x6e>
 80052d0:	2221      	movs	r2, #33	@ 0x21
 80052d2:	2104      	movs	r1, #4
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 fe03 	bl	8005ee0 <_calloc_r>
 80052da:	69e3      	ldr	r3, [r4, #28]
 80052dc:	60f0      	str	r0, [r6, #12]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e4      	bne.n	80052ae <_Balloc+0x2e>
 80052e4:	2000      	movs	r0, #0
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	6802      	ldr	r2, [r0, #0]
 80052ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052ee:	2300      	movs	r3, #0
 80052f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052f4:	e7f7      	b.n	80052e6 <_Balloc+0x66>
 80052f6:	bf00      	nop
 80052f8:	0800611f 	.word	0x0800611f
 80052fc:	0800619f 	.word	0x0800619f

08005300 <_Bfree>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	69c6      	ldr	r6, [r0, #28]
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b976      	cbnz	r6, 8005328 <_Bfree+0x28>
 800530a:	2010      	movs	r0, #16
 800530c:	f7ff ff02 	bl	8005114 <malloc>
 8005310:	4602      	mov	r2, r0
 8005312:	61e8      	str	r0, [r5, #28]
 8005314:	b920      	cbnz	r0, 8005320 <_Bfree+0x20>
 8005316:	4b09      	ldr	r3, [pc, #36]	@ (800533c <_Bfree+0x3c>)
 8005318:	4809      	ldr	r0, [pc, #36]	@ (8005340 <_Bfree+0x40>)
 800531a:	218f      	movs	r1, #143	@ 0x8f
 800531c:	f000 fdc2 	bl	8005ea4 <__assert_func>
 8005320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005324:	6006      	str	r6, [r0, #0]
 8005326:	60c6      	str	r6, [r0, #12]
 8005328:	b13c      	cbz	r4, 800533a <_Bfree+0x3a>
 800532a:	69eb      	ldr	r3, [r5, #28]
 800532c:	6862      	ldr	r2, [r4, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005334:	6021      	str	r1, [r4, #0]
 8005336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	0800611f 	.word	0x0800611f
 8005340:	0800619f 	.word	0x0800619f

08005344 <__multadd>:
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005348:	690d      	ldr	r5, [r1, #16]
 800534a:	4607      	mov	r7, r0
 800534c:	460c      	mov	r4, r1
 800534e:	461e      	mov	r6, r3
 8005350:	f101 0c14 	add.w	ip, r1, #20
 8005354:	2000      	movs	r0, #0
 8005356:	f8dc 3000 	ldr.w	r3, [ip]
 800535a:	b299      	uxth	r1, r3
 800535c:	fb02 6101 	mla	r1, r2, r1, r6
 8005360:	0c1e      	lsrs	r6, r3, #16
 8005362:	0c0b      	lsrs	r3, r1, #16
 8005364:	fb02 3306 	mla	r3, r2, r6, r3
 8005368:	b289      	uxth	r1, r1
 800536a:	3001      	adds	r0, #1
 800536c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005370:	4285      	cmp	r5, r0
 8005372:	f84c 1b04 	str.w	r1, [ip], #4
 8005376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800537a:	dcec      	bgt.n	8005356 <__multadd+0x12>
 800537c:	b30e      	cbz	r6, 80053c2 <__multadd+0x7e>
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc19      	bgt.n	80053b8 <__multadd+0x74>
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	4638      	mov	r0, r7
 8005388:	3101      	adds	r1, #1
 800538a:	f7ff ff79 	bl	8005280 <_Balloc>
 800538e:	4680      	mov	r8, r0
 8005390:	b928      	cbnz	r0, 800539e <__multadd+0x5a>
 8005392:	4602      	mov	r2, r0
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <__multadd+0x84>)
 8005396:	480d      	ldr	r0, [pc, #52]	@ (80053cc <__multadd+0x88>)
 8005398:	21ba      	movs	r1, #186	@ 0xba
 800539a:	f000 fd83 	bl	8005ea4 <__assert_func>
 800539e:	6922      	ldr	r2, [r4, #16]
 80053a0:	3202      	adds	r2, #2
 80053a2:	f104 010c 	add.w	r1, r4, #12
 80053a6:	0092      	lsls	r2, r2, #2
 80053a8:	300c      	adds	r0, #12
 80053aa:	f000 fd6d 	bl	8005e88 <memcpy>
 80053ae:	4621      	mov	r1, r4
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ffa5 	bl	8005300 <_Bfree>
 80053b6:	4644      	mov	r4, r8
 80053b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053bc:	3501      	adds	r5, #1
 80053be:	615e      	str	r6, [r3, #20]
 80053c0:	6125      	str	r5, [r4, #16]
 80053c2:	4620      	mov	r0, r4
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	0800618e 	.word	0x0800618e
 80053cc:	0800619f 	.word	0x0800619f

080053d0 <__hi0bits>:
 80053d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80053d4:	4603      	mov	r3, r0
 80053d6:	bf36      	itet	cc
 80053d8:	0403      	lslcc	r3, r0, #16
 80053da:	2000      	movcs	r0, #0
 80053dc:	2010      	movcc	r0, #16
 80053de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e2:	bf3c      	itt	cc
 80053e4:	021b      	lslcc	r3, r3, #8
 80053e6:	3008      	addcc	r0, #8
 80053e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ec:	bf3c      	itt	cc
 80053ee:	011b      	lslcc	r3, r3, #4
 80053f0:	3004      	addcc	r0, #4
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	bf3c      	itt	cc
 80053f8:	009b      	lslcc	r3, r3, #2
 80053fa:	3002      	addcc	r0, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	db05      	blt.n	800540c <__hi0bits+0x3c>
 8005400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005404:	f100 0001 	add.w	r0, r0, #1
 8005408:	bf08      	it	eq
 800540a:	2020      	moveq	r0, #32
 800540c:	4770      	bx	lr

0800540e <__lo0bits>:
 800540e:	6803      	ldr	r3, [r0, #0]
 8005410:	4602      	mov	r2, r0
 8005412:	f013 0007 	ands.w	r0, r3, #7
 8005416:	d00b      	beq.n	8005430 <__lo0bits+0x22>
 8005418:	07d9      	lsls	r1, r3, #31
 800541a:	d421      	bmi.n	8005460 <__lo0bits+0x52>
 800541c:	0798      	lsls	r0, r3, #30
 800541e:	bf49      	itett	mi
 8005420:	085b      	lsrmi	r3, r3, #1
 8005422:	089b      	lsrpl	r3, r3, #2
 8005424:	2001      	movmi	r0, #1
 8005426:	6013      	strmi	r3, [r2, #0]
 8005428:	bf5c      	itt	pl
 800542a:	6013      	strpl	r3, [r2, #0]
 800542c:	2002      	movpl	r0, #2
 800542e:	4770      	bx	lr
 8005430:	b299      	uxth	r1, r3
 8005432:	b909      	cbnz	r1, 8005438 <__lo0bits+0x2a>
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	2010      	movs	r0, #16
 8005438:	b2d9      	uxtb	r1, r3
 800543a:	b909      	cbnz	r1, 8005440 <__lo0bits+0x32>
 800543c:	3008      	adds	r0, #8
 800543e:	0a1b      	lsrs	r3, r3, #8
 8005440:	0719      	lsls	r1, r3, #28
 8005442:	bf04      	itt	eq
 8005444:	091b      	lsreq	r3, r3, #4
 8005446:	3004      	addeq	r0, #4
 8005448:	0799      	lsls	r1, r3, #30
 800544a:	bf04      	itt	eq
 800544c:	089b      	lsreq	r3, r3, #2
 800544e:	3002      	addeq	r0, #2
 8005450:	07d9      	lsls	r1, r3, #31
 8005452:	d403      	bmi.n	800545c <__lo0bits+0x4e>
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f100 0001 	add.w	r0, r0, #1
 800545a:	d003      	beq.n	8005464 <__lo0bits+0x56>
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4770      	bx	lr
 8005460:	2000      	movs	r0, #0
 8005462:	4770      	bx	lr
 8005464:	2020      	movs	r0, #32
 8005466:	4770      	bx	lr

08005468 <__i2b>:
 8005468:	b510      	push	{r4, lr}
 800546a:	460c      	mov	r4, r1
 800546c:	2101      	movs	r1, #1
 800546e:	f7ff ff07 	bl	8005280 <_Balloc>
 8005472:	4602      	mov	r2, r0
 8005474:	b928      	cbnz	r0, 8005482 <__i2b+0x1a>
 8005476:	4b05      	ldr	r3, [pc, #20]	@ (800548c <__i2b+0x24>)
 8005478:	4805      	ldr	r0, [pc, #20]	@ (8005490 <__i2b+0x28>)
 800547a:	f240 1145 	movw	r1, #325	@ 0x145
 800547e:	f000 fd11 	bl	8005ea4 <__assert_func>
 8005482:	2301      	movs	r3, #1
 8005484:	6144      	str	r4, [r0, #20]
 8005486:	6103      	str	r3, [r0, #16]
 8005488:	bd10      	pop	{r4, pc}
 800548a:	bf00      	nop
 800548c:	0800618e 	.word	0x0800618e
 8005490:	0800619f 	.word	0x0800619f

08005494 <__multiply>:
 8005494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	4614      	mov	r4, r2
 800549a:	690a      	ldr	r2, [r1, #16]
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	429a      	cmp	r2, r3
 80054a0:	bfa8      	it	ge
 80054a2:	4623      	movge	r3, r4
 80054a4:	460f      	mov	r7, r1
 80054a6:	bfa4      	itt	ge
 80054a8:	460c      	movge	r4, r1
 80054aa:	461f      	movge	r7, r3
 80054ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80054b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80054b4:	68a3      	ldr	r3, [r4, #8]
 80054b6:	6861      	ldr	r1, [r4, #4]
 80054b8:	eb0a 0609 	add.w	r6, sl, r9
 80054bc:	42b3      	cmp	r3, r6
 80054be:	b085      	sub	sp, #20
 80054c0:	bfb8      	it	lt
 80054c2:	3101      	addlt	r1, #1
 80054c4:	f7ff fedc 	bl	8005280 <_Balloc>
 80054c8:	b930      	cbnz	r0, 80054d8 <__multiply+0x44>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b44      	ldr	r3, [pc, #272]	@ (80055e0 <__multiply+0x14c>)
 80054ce:	4845      	ldr	r0, [pc, #276]	@ (80055e4 <__multiply+0x150>)
 80054d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80054d4:	f000 fce6 	bl	8005ea4 <__assert_func>
 80054d8:	f100 0514 	add.w	r5, r0, #20
 80054dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054e0:	462b      	mov	r3, r5
 80054e2:	2200      	movs	r2, #0
 80054e4:	4543      	cmp	r3, r8
 80054e6:	d321      	bcc.n	800552c <__multiply+0x98>
 80054e8:	f107 0114 	add.w	r1, r7, #20
 80054ec:	f104 0214 	add.w	r2, r4, #20
 80054f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80054f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	1b13      	subs	r3, r2, r4
 80054fc:	3b15      	subs	r3, #21
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	3304      	adds	r3, #4
 8005504:	f104 0715 	add.w	r7, r4, #21
 8005508:	42ba      	cmp	r2, r7
 800550a:	bf38      	it	cc
 800550c:	2304      	movcc	r3, #4
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	428b      	cmp	r3, r1
 8005516:	d80c      	bhi.n	8005532 <__multiply+0x9e>
 8005518:	2e00      	cmp	r6, #0
 800551a:	dd03      	ble.n	8005524 <__multiply+0x90>
 800551c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05b      	beq.n	80055dc <__multiply+0x148>
 8005524:	6106      	str	r6, [r0, #16]
 8005526:	b005      	add	sp, #20
 8005528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552c:	f843 2b04 	str.w	r2, [r3], #4
 8005530:	e7d8      	b.n	80054e4 <__multiply+0x50>
 8005532:	f8b1 a000 	ldrh.w	sl, [r1]
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	d024      	beq.n	8005586 <__multiply+0xf2>
 800553c:	f104 0e14 	add.w	lr, r4, #20
 8005540:	46a9      	mov	r9, r5
 8005542:	f04f 0c00 	mov.w	ip, #0
 8005546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800554a:	f8d9 3000 	ldr.w	r3, [r9]
 800554e:	fa1f fb87 	uxth.w	fp, r7
 8005552:	b29b      	uxth	r3, r3
 8005554:	fb0a 330b 	mla	r3, sl, fp, r3
 8005558:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800555c:	f8d9 7000 	ldr.w	r7, [r9]
 8005560:	4463      	add	r3, ip
 8005562:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005566:	fb0a c70b 	mla	r7, sl, fp, ip
 800556a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005574:	4572      	cmp	r2, lr
 8005576:	f849 3b04 	str.w	r3, [r9], #4
 800557a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800557e:	d8e2      	bhi.n	8005546 <__multiply+0xb2>
 8005580:	9b01      	ldr	r3, [sp, #4]
 8005582:	f845 c003 	str.w	ip, [r5, r3]
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800558c:	3104      	adds	r1, #4
 800558e:	f1b9 0f00 	cmp.w	r9, #0
 8005592:	d021      	beq.n	80055d8 <__multiply+0x144>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	f104 0c14 	add.w	ip, r4, #20
 800559a:	46ae      	mov	lr, r5
 800559c:	f04f 0a00 	mov.w	sl, #0
 80055a0:	f8bc b000 	ldrh.w	fp, [ip]
 80055a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80055a8:	fb09 770b 	mla	r7, r9, fp, r7
 80055ac:	4457      	add	r7, sl
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055b4:	f84e 3b04 	str.w	r3, [lr], #4
 80055b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055c0:	f8be 3000 	ldrh.w	r3, [lr]
 80055c4:	fb09 330a 	mla	r3, r9, sl, r3
 80055c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80055cc:	4562      	cmp	r2, ip
 80055ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055d2:	d8e5      	bhi.n	80055a0 <__multiply+0x10c>
 80055d4:	9f01      	ldr	r7, [sp, #4]
 80055d6:	51eb      	str	r3, [r5, r7]
 80055d8:	3504      	adds	r5, #4
 80055da:	e799      	b.n	8005510 <__multiply+0x7c>
 80055dc:	3e01      	subs	r6, #1
 80055de:	e79b      	b.n	8005518 <__multiply+0x84>
 80055e0:	0800618e 	.word	0x0800618e
 80055e4:	0800619f 	.word	0x0800619f

080055e8 <__pow5mult>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4615      	mov	r5, r2
 80055ee:	f012 0203 	ands.w	r2, r2, #3
 80055f2:	4607      	mov	r7, r0
 80055f4:	460e      	mov	r6, r1
 80055f6:	d007      	beq.n	8005608 <__pow5mult+0x20>
 80055f8:	4c25      	ldr	r4, [pc, #148]	@ (8005690 <__pow5mult+0xa8>)
 80055fa:	3a01      	subs	r2, #1
 80055fc:	2300      	movs	r3, #0
 80055fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005602:	f7ff fe9f 	bl	8005344 <__multadd>
 8005606:	4606      	mov	r6, r0
 8005608:	10ad      	asrs	r5, r5, #2
 800560a:	d03d      	beq.n	8005688 <__pow5mult+0xa0>
 800560c:	69fc      	ldr	r4, [r7, #28]
 800560e:	b97c      	cbnz	r4, 8005630 <__pow5mult+0x48>
 8005610:	2010      	movs	r0, #16
 8005612:	f7ff fd7f 	bl	8005114 <malloc>
 8005616:	4602      	mov	r2, r0
 8005618:	61f8      	str	r0, [r7, #28]
 800561a:	b928      	cbnz	r0, 8005628 <__pow5mult+0x40>
 800561c:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <__pow5mult+0xac>)
 800561e:	481e      	ldr	r0, [pc, #120]	@ (8005698 <__pow5mult+0xb0>)
 8005620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005624:	f000 fc3e 	bl	8005ea4 <__assert_func>
 8005628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800562c:	6004      	str	r4, [r0, #0]
 800562e:	60c4      	str	r4, [r0, #12]
 8005630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005638:	b94c      	cbnz	r4, 800564e <__pow5mult+0x66>
 800563a:	f240 2171 	movw	r1, #625	@ 0x271
 800563e:	4638      	mov	r0, r7
 8005640:	f7ff ff12 	bl	8005468 <__i2b>
 8005644:	2300      	movs	r3, #0
 8005646:	f8c8 0008 	str.w	r0, [r8, #8]
 800564a:	4604      	mov	r4, r0
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	f04f 0900 	mov.w	r9, #0
 8005652:	07eb      	lsls	r3, r5, #31
 8005654:	d50a      	bpl.n	800566c <__pow5mult+0x84>
 8005656:	4631      	mov	r1, r6
 8005658:	4622      	mov	r2, r4
 800565a:	4638      	mov	r0, r7
 800565c:	f7ff ff1a 	bl	8005494 <__multiply>
 8005660:	4631      	mov	r1, r6
 8005662:	4680      	mov	r8, r0
 8005664:	4638      	mov	r0, r7
 8005666:	f7ff fe4b 	bl	8005300 <_Bfree>
 800566a:	4646      	mov	r6, r8
 800566c:	106d      	asrs	r5, r5, #1
 800566e:	d00b      	beq.n	8005688 <__pow5mult+0xa0>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	b938      	cbnz	r0, 8005684 <__pow5mult+0x9c>
 8005674:	4622      	mov	r2, r4
 8005676:	4621      	mov	r1, r4
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff ff0b 	bl	8005494 <__multiply>
 800567e:	6020      	str	r0, [r4, #0]
 8005680:	f8c0 9000 	str.w	r9, [r0]
 8005684:	4604      	mov	r4, r0
 8005686:	e7e4      	b.n	8005652 <__pow5mult+0x6a>
 8005688:	4630      	mov	r0, r6
 800568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568e:	bf00      	nop
 8005690:	080061f8 	.word	0x080061f8
 8005694:	0800611f 	.word	0x0800611f
 8005698:	0800619f 	.word	0x0800619f

0800569c <__lshift>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	460c      	mov	r4, r1
 80056a2:	6849      	ldr	r1, [r1, #4]
 80056a4:	6923      	ldr	r3, [r4, #16]
 80056a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	4607      	mov	r7, r0
 80056ae:	4691      	mov	r9, r2
 80056b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056b4:	f108 0601 	add.w	r6, r8, #1
 80056b8:	42b3      	cmp	r3, r6
 80056ba:	db0b      	blt.n	80056d4 <__lshift+0x38>
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff fddf 	bl	8005280 <_Balloc>
 80056c2:	4605      	mov	r5, r0
 80056c4:	b948      	cbnz	r0, 80056da <__lshift+0x3e>
 80056c6:	4602      	mov	r2, r0
 80056c8:	4b28      	ldr	r3, [pc, #160]	@ (800576c <__lshift+0xd0>)
 80056ca:	4829      	ldr	r0, [pc, #164]	@ (8005770 <__lshift+0xd4>)
 80056cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80056d0:	f000 fbe8 	bl	8005ea4 <__assert_func>
 80056d4:	3101      	adds	r1, #1
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	e7ee      	b.n	80056b8 <__lshift+0x1c>
 80056da:	2300      	movs	r3, #0
 80056dc:	f100 0114 	add.w	r1, r0, #20
 80056e0:	f100 0210 	add.w	r2, r0, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	4553      	cmp	r3, sl
 80056e8:	db33      	blt.n	8005752 <__lshift+0xb6>
 80056ea:	6920      	ldr	r0, [r4, #16]
 80056ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056f0:	f104 0314 	add.w	r3, r4, #20
 80056f4:	f019 091f 	ands.w	r9, r9, #31
 80056f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005700:	d02b      	beq.n	800575a <__lshift+0xbe>
 8005702:	f1c9 0e20 	rsb	lr, r9, #32
 8005706:	468a      	mov	sl, r1
 8005708:	2200      	movs	r2, #0
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	fa00 f009 	lsl.w	r0, r0, r9
 8005710:	4310      	orrs	r0, r2
 8005712:	f84a 0b04 	str.w	r0, [sl], #4
 8005716:	f853 2b04 	ldr.w	r2, [r3], #4
 800571a:	459c      	cmp	ip, r3
 800571c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005720:	d8f3      	bhi.n	800570a <__lshift+0x6e>
 8005722:	ebac 0304 	sub.w	r3, ip, r4
 8005726:	3b15      	subs	r3, #21
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	3304      	adds	r3, #4
 800572e:	f104 0015 	add.w	r0, r4, #21
 8005732:	4584      	cmp	ip, r0
 8005734:	bf38      	it	cc
 8005736:	2304      	movcc	r3, #4
 8005738:	50ca      	str	r2, [r1, r3]
 800573a:	b10a      	cbz	r2, 8005740 <__lshift+0xa4>
 800573c:	f108 0602 	add.w	r6, r8, #2
 8005740:	3e01      	subs	r6, #1
 8005742:	4638      	mov	r0, r7
 8005744:	612e      	str	r6, [r5, #16]
 8005746:	4621      	mov	r1, r4
 8005748:	f7ff fdda 	bl	8005300 <_Bfree>
 800574c:	4628      	mov	r0, r5
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	f842 0f04 	str.w	r0, [r2, #4]!
 8005756:	3301      	adds	r3, #1
 8005758:	e7c5      	b.n	80056e6 <__lshift+0x4a>
 800575a:	3904      	subs	r1, #4
 800575c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005760:	f841 2f04 	str.w	r2, [r1, #4]!
 8005764:	459c      	cmp	ip, r3
 8005766:	d8f9      	bhi.n	800575c <__lshift+0xc0>
 8005768:	e7ea      	b.n	8005740 <__lshift+0xa4>
 800576a:	bf00      	nop
 800576c:	0800618e 	.word	0x0800618e
 8005770:	0800619f 	.word	0x0800619f

08005774 <__mcmp>:
 8005774:	690a      	ldr	r2, [r1, #16]
 8005776:	4603      	mov	r3, r0
 8005778:	6900      	ldr	r0, [r0, #16]
 800577a:	1a80      	subs	r0, r0, r2
 800577c:	b530      	push	{r4, r5, lr}
 800577e:	d10e      	bne.n	800579e <__mcmp+0x2a>
 8005780:	3314      	adds	r3, #20
 8005782:	3114      	adds	r1, #20
 8005784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800578c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005794:	4295      	cmp	r5, r2
 8005796:	d003      	beq.n	80057a0 <__mcmp+0x2c>
 8005798:	d205      	bcs.n	80057a6 <__mcmp+0x32>
 800579a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800579e:	bd30      	pop	{r4, r5, pc}
 80057a0:	42a3      	cmp	r3, r4
 80057a2:	d3f3      	bcc.n	800578c <__mcmp+0x18>
 80057a4:	e7fb      	b.n	800579e <__mcmp+0x2a>
 80057a6:	2001      	movs	r0, #1
 80057a8:	e7f9      	b.n	800579e <__mcmp+0x2a>
	...

080057ac <__mdiff>:
 80057ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b0:	4689      	mov	r9, r1
 80057b2:	4606      	mov	r6, r0
 80057b4:	4611      	mov	r1, r2
 80057b6:	4648      	mov	r0, r9
 80057b8:	4614      	mov	r4, r2
 80057ba:	f7ff ffdb 	bl	8005774 <__mcmp>
 80057be:	1e05      	subs	r5, r0, #0
 80057c0:	d112      	bne.n	80057e8 <__mdiff+0x3c>
 80057c2:	4629      	mov	r1, r5
 80057c4:	4630      	mov	r0, r6
 80057c6:	f7ff fd5b 	bl	8005280 <_Balloc>
 80057ca:	4602      	mov	r2, r0
 80057cc:	b928      	cbnz	r0, 80057da <__mdiff+0x2e>
 80057ce:	4b3f      	ldr	r3, [pc, #252]	@ (80058cc <__mdiff+0x120>)
 80057d0:	f240 2137 	movw	r1, #567	@ 0x237
 80057d4:	483e      	ldr	r0, [pc, #248]	@ (80058d0 <__mdiff+0x124>)
 80057d6:	f000 fb65 	bl	8005ea4 <__assert_func>
 80057da:	2301      	movs	r3, #1
 80057dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057e0:	4610      	mov	r0, r2
 80057e2:	b003      	add	sp, #12
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	bfbc      	itt	lt
 80057ea:	464b      	movlt	r3, r9
 80057ec:	46a1      	movlt	r9, r4
 80057ee:	4630      	mov	r0, r6
 80057f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057f4:	bfba      	itte	lt
 80057f6:	461c      	movlt	r4, r3
 80057f8:	2501      	movlt	r5, #1
 80057fa:	2500      	movge	r5, #0
 80057fc:	f7ff fd40 	bl	8005280 <_Balloc>
 8005800:	4602      	mov	r2, r0
 8005802:	b918      	cbnz	r0, 800580c <__mdiff+0x60>
 8005804:	4b31      	ldr	r3, [pc, #196]	@ (80058cc <__mdiff+0x120>)
 8005806:	f240 2145 	movw	r1, #581	@ 0x245
 800580a:	e7e3      	b.n	80057d4 <__mdiff+0x28>
 800580c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005810:	6926      	ldr	r6, [r4, #16]
 8005812:	60c5      	str	r5, [r0, #12]
 8005814:	f109 0310 	add.w	r3, r9, #16
 8005818:	f109 0514 	add.w	r5, r9, #20
 800581c:	f104 0e14 	add.w	lr, r4, #20
 8005820:	f100 0b14 	add.w	fp, r0, #20
 8005824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	46d9      	mov	r9, fp
 8005830:	f04f 0c00 	mov.w	ip, #0
 8005834:	9b01      	ldr	r3, [sp, #4]
 8005836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800583a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	fa1f f38a 	uxth.w	r3, sl
 8005844:	4619      	mov	r1, r3
 8005846:	b283      	uxth	r3, r0
 8005848:	1acb      	subs	r3, r1, r3
 800584a:	0c00      	lsrs	r0, r0, #16
 800584c:	4463      	add	r3, ip
 800584e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800585c:	4576      	cmp	r6, lr
 800585e:	f849 3b04 	str.w	r3, [r9], #4
 8005862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005866:	d8e5      	bhi.n	8005834 <__mdiff+0x88>
 8005868:	1b33      	subs	r3, r6, r4
 800586a:	3b15      	subs	r3, #21
 800586c:	f023 0303 	bic.w	r3, r3, #3
 8005870:	3415      	adds	r4, #21
 8005872:	3304      	adds	r3, #4
 8005874:	42a6      	cmp	r6, r4
 8005876:	bf38      	it	cc
 8005878:	2304      	movcc	r3, #4
 800587a:	441d      	add	r5, r3
 800587c:	445b      	add	r3, fp
 800587e:	461e      	mov	r6, r3
 8005880:	462c      	mov	r4, r5
 8005882:	4544      	cmp	r4, r8
 8005884:	d30e      	bcc.n	80058a4 <__mdiff+0xf8>
 8005886:	f108 0103 	add.w	r1, r8, #3
 800588a:	1b49      	subs	r1, r1, r5
 800588c:	f021 0103 	bic.w	r1, r1, #3
 8005890:	3d03      	subs	r5, #3
 8005892:	45a8      	cmp	r8, r5
 8005894:	bf38      	it	cc
 8005896:	2100      	movcc	r1, #0
 8005898:	440b      	add	r3, r1
 800589a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800589e:	b191      	cbz	r1, 80058c6 <__mdiff+0x11a>
 80058a0:	6117      	str	r7, [r2, #16]
 80058a2:	e79d      	b.n	80057e0 <__mdiff+0x34>
 80058a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80058a8:	46e6      	mov	lr, ip
 80058aa:	0c08      	lsrs	r0, r1, #16
 80058ac:	fa1c fc81 	uxtah	ip, ip, r1
 80058b0:	4471      	add	r1, lr
 80058b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80058b6:	b289      	uxth	r1, r1
 80058b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058bc:	f846 1b04 	str.w	r1, [r6], #4
 80058c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058c4:	e7dd      	b.n	8005882 <__mdiff+0xd6>
 80058c6:	3f01      	subs	r7, #1
 80058c8:	e7e7      	b.n	800589a <__mdiff+0xee>
 80058ca:	bf00      	nop
 80058cc:	0800618e 	.word	0x0800618e
 80058d0:	0800619f 	.word	0x0800619f

080058d4 <__d2b>:
 80058d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	460f      	mov	r7, r1
 80058da:	2101      	movs	r1, #1
 80058dc:	ec59 8b10 	vmov	r8, r9, d0
 80058e0:	4616      	mov	r6, r2
 80058e2:	f7ff fccd 	bl	8005280 <_Balloc>
 80058e6:	4604      	mov	r4, r0
 80058e8:	b930      	cbnz	r0, 80058f8 <__d2b+0x24>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b23      	ldr	r3, [pc, #140]	@ (800597c <__d2b+0xa8>)
 80058ee:	4824      	ldr	r0, [pc, #144]	@ (8005980 <__d2b+0xac>)
 80058f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80058f4:	f000 fad6 	bl	8005ea4 <__assert_func>
 80058f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005900:	b10d      	cbz	r5, 8005906 <__d2b+0x32>
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f1b8 0300 	subs.w	r3, r8, #0
 800590c:	d023      	beq.n	8005956 <__d2b+0x82>
 800590e:	4668      	mov	r0, sp
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	f7ff fd7c 	bl	800540e <__lo0bits>
 8005916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800591a:	b1d0      	cbz	r0, 8005952 <__d2b+0x7e>
 800591c:	f1c0 0320 	rsb	r3, r0, #32
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	430b      	orrs	r3, r1
 8005926:	40c2      	lsrs	r2, r0
 8005928:	6163      	str	r3, [r4, #20]
 800592a:	9201      	str	r2, [sp, #4]
 800592c:	9b01      	ldr	r3, [sp, #4]
 800592e:	61a3      	str	r3, [r4, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2201      	moveq	r2, #1
 8005936:	2202      	movne	r2, #2
 8005938:	6122      	str	r2, [r4, #16]
 800593a:	b1a5      	cbz	r5, 8005966 <__d2b+0x92>
 800593c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005940:	4405      	add	r5, r0
 8005942:	603d      	str	r5, [r7, #0]
 8005944:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005948:	6030      	str	r0, [r6, #0]
 800594a:	4620      	mov	r0, r4
 800594c:	b003      	add	sp, #12
 800594e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005952:	6161      	str	r1, [r4, #20]
 8005954:	e7ea      	b.n	800592c <__d2b+0x58>
 8005956:	a801      	add	r0, sp, #4
 8005958:	f7ff fd59 	bl	800540e <__lo0bits>
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	6163      	str	r3, [r4, #20]
 8005960:	3020      	adds	r0, #32
 8005962:	2201      	movs	r2, #1
 8005964:	e7e8      	b.n	8005938 <__d2b+0x64>
 8005966:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800596a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800596e:	6038      	str	r0, [r7, #0]
 8005970:	6918      	ldr	r0, [r3, #16]
 8005972:	f7ff fd2d 	bl	80053d0 <__hi0bits>
 8005976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800597a:	e7e5      	b.n	8005948 <__d2b+0x74>
 800597c:	0800618e 	.word	0x0800618e
 8005980:	0800619f 	.word	0x0800619f

08005984 <__sfputc_r>:
 8005984:	6893      	ldr	r3, [r2, #8]
 8005986:	3b01      	subs	r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	b410      	push	{r4}
 800598c:	6093      	str	r3, [r2, #8]
 800598e:	da08      	bge.n	80059a2 <__sfputc_r+0x1e>
 8005990:	6994      	ldr	r4, [r2, #24]
 8005992:	42a3      	cmp	r3, r4
 8005994:	db01      	blt.n	800599a <__sfputc_r+0x16>
 8005996:	290a      	cmp	r1, #10
 8005998:	d103      	bne.n	80059a2 <__sfputc_r+0x1e>
 800599a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800599e:	f7fe bc0c 	b.w	80041ba <__swbuf_r>
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	1c58      	adds	r0, r3, #1
 80059a6:	6010      	str	r0, [r2, #0]
 80059a8:	7019      	strb	r1, [r3, #0]
 80059aa:	4608      	mov	r0, r1
 80059ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <__sfputs_r>:
 80059b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	18d5      	adds	r5, r2, r3
 80059bc:	42ac      	cmp	r4, r5
 80059be:	d101      	bne.n	80059c4 <__sfputs_r+0x12>
 80059c0:	2000      	movs	r0, #0
 80059c2:	e007      	b.n	80059d4 <__sfputs_r+0x22>
 80059c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c8:	463a      	mov	r2, r7
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ffda 	bl	8005984 <__sfputc_r>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d1f3      	bne.n	80059bc <__sfputs_r+0xa>
 80059d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059d8 <_vfiprintf_r>:
 80059d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059dc:	460d      	mov	r5, r1
 80059de:	b09d      	sub	sp, #116	@ 0x74
 80059e0:	4614      	mov	r4, r2
 80059e2:	4698      	mov	r8, r3
 80059e4:	4606      	mov	r6, r0
 80059e6:	b118      	cbz	r0, 80059f0 <_vfiprintf_r+0x18>
 80059e8:	6a03      	ldr	r3, [r0, #32]
 80059ea:	b90b      	cbnz	r3, 80059f0 <_vfiprintf_r+0x18>
 80059ec:	f7fe fafc 	bl	8003fe8 <__sinit>
 80059f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059f2:	07d9      	lsls	r1, r3, #31
 80059f4:	d405      	bmi.n	8005a02 <_vfiprintf_r+0x2a>
 80059f6:	89ab      	ldrh	r3, [r5, #12]
 80059f8:	059a      	lsls	r2, r3, #22
 80059fa:	d402      	bmi.n	8005a02 <_vfiprintf_r+0x2a>
 80059fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059fe:	f7fe fcee 	bl	80043de <__retarget_lock_acquire_recursive>
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	071b      	lsls	r3, r3, #28
 8005a06:	d501      	bpl.n	8005a0c <_vfiprintf_r+0x34>
 8005a08:	692b      	ldr	r3, [r5, #16]
 8005a0a:	b99b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x5c>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f7fe fc12 	bl	8004238 <__swsetup_r>
 8005a14:	b170      	cbz	r0, 8005a34 <_vfiprintf_r+0x5c>
 8005a16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a18:	07dc      	lsls	r4, r3, #31
 8005a1a:	d504      	bpl.n	8005a26 <_vfiprintf_r+0x4e>
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a20:	b01d      	add	sp, #116	@ 0x74
 8005a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a26:	89ab      	ldrh	r3, [r5, #12]
 8005a28:	0598      	lsls	r0, r3, #22
 8005a2a:	d4f7      	bmi.n	8005a1c <_vfiprintf_r+0x44>
 8005a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a2e:	f7fe fcd7 	bl	80043e0 <__retarget_lock_release_recursive>
 8005a32:	e7f3      	b.n	8005a1c <_vfiprintf_r+0x44>
 8005a34:	2300      	movs	r3, #0
 8005a36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a42:	2330      	movs	r3, #48	@ 0x30
 8005a44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bf4 <_vfiprintf_r+0x21c>
 8005a48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a4c:	f04f 0901 	mov.w	r9, #1
 8005a50:	4623      	mov	r3, r4
 8005a52:	469a      	mov	sl, r3
 8005a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a58:	b10a      	cbz	r2, 8005a5e <_vfiprintf_r+0x86>
 8005a5a:	2a25      	cmp	r2, #37	@ 0x25
 8005a5c:	d1f9      	bne.n	8005a52 <_vfiprintf_r+0x7a>
 8005a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a62:	d00b      	beq.n	8005a7c <_vfiprintf_r+0xa4>
 8005a64:	465b      	mov	r3, fp
 8005a66:	4622      	mov	r2, r4
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7ff ffa1 	bl	80059b2 <__sfputs_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	f000 80a7 	beq.w	8005bc4 <_vfiprintf_r+0x1ec>
 8005a76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a78:	445a      	add	r2, fp
 8005a7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 809f 	beq.w	8005bc4 <_vfiprintf_r+0x1ec>
 8005a86:	2300      	movs	r3, #0
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a90:	f10a 0a01 	add.w	sl, sl, #1
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a9e:	4654      	mov	r4, sl
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa6:	4853      	ldr	r0, [pc, #332]	@ (8005bf4 <_vfiprintf_r+0x21c>)
 8005aa8:	f7fa fb9a 	bl	80001e0 <memchr>
 8005aac:	9a04      	ldr	r2, [sp, #16]
 8005aae:	b9d8      	cbnz	r0, 8005ae8 <_vfiprintf_r+0x110>
 8005ab0:	06d1      	lsls	r1, r2, #27
 8005ab2:	bf44      	itt	mi
 8005ab4:	2320      	movmi	r3, #32
 8005ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005aba:	0713      	lsls	r3, r2, #28
 8005abc:	bf44      	itt	mi
 8005abe:	232b      	movmi	r3, #43	@ 0x2b
 8005ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aca:	d015      	beq.n	8005af8 <_vfiprintf_r+0x120>
 8005acc:	9a07      	ldr	r2, [sp, #28]
 8005ace:	4654      	mov	r4, sl
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f04f 0c0a 	mov.w	ip, #10
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005adc:	3b30      	subs	r3, #48	@ 0x30
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	d94b      	bls.n	8005b7a <_vfiprintf_r+0x1a2>
 8005ae2:	b1b0      	cbz	r0, 8005b12 <_vfiprintf_r+0x13a>
 8005ae4:	9207      	str	r2, [sp, #28]
 8005ae6:	e014      	b.n	8005b12 <_vfiprintf_r+0x13a>
 8005ae8:	eba0 0308 	sub.w	r3, r0, r8
 8005aec:	fa09 f303 	lsl.w	r3, r9, r3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	46a2      	mov	sl, r4
 8005af6:	e7d2      	b.n	8005a9e <_vfiprintf_r+0xc6>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	1d19      	adds	r1, r3, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	9103      	str	r1, [sp, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	bfbb      	ittet	lt
 8005b04:	425b      	neglt	r3, r3
 8005b06:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0a:	9307      	strge	r3, [sp, #28]
 8005b0c:	9307      	strlt	r3, [sp, #28]
 8005b0e:	bfb8      	it	lt
 8005b10:	9204      	strlt	r2, [sp, #16]
 8005b12:	7823      	ldrb	r3, [r4, #0]
 8005b14:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b16:	d10a      	bne.n	8005b2e <_vfiprintf_r+0x156>
 8005b18:	7863      	ldrb	r3, [r4, #1]
 8005b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1c:	d132      	bne.n	8005b84 <_vfiprintf_r+0x1ac>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	1d1a      	adds	r2, r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	9203      	str	r2, [sp, #12]
 8005b26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b2a:	3402      	adds	r4, #2
 8005b2c:	9305      	str	r3, [sp, #20]
 8005b2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c04 <_vfiprintf_r+0x22c>
 8005b32:	7821      	ldrb	r1, [r4, #0]
 8005b34:	2203      	movs	r2, #3
 8005b36:	4650      	mov	r0, sl
 8005b38:	f7fa fb52 	bl	80001e0 <memchr>
 8005b3c:	b138      	cbz	r0, 8005b4e <_vfiprintf_r+0x176>
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	eba0 000a 	sub.w	r0, r0, sl
 8005b44:	2240      	movs	r2, #64	@ 0x40
 8005b46:	4082      	lsls	r2, r0
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	3401      	adds	r4, #1
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b52:	4829      	ldr	r0, [pc, #164]	@ (8005bf8 <_vfiprintf_r+0x220>)
 8005b54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b58:	2206      	movs	r2, #6
 8005b5a:	f7fa fb41 	bl	80001e0 <memchr>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d03f      	beq.n	8005be2 <_vfiprintf_r+0x20a>
 8005b62:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <_vfiprintf_r+0x224>)
 8005b64:	bb1b      	cbnz	r3, 8005bae <_vfiprintf_r+0x1d6>
 8005b66:	9b03      	ldr	r3, [sp, #12]
 8005b68:	3307      	adds	r3, #7
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	3308      	adds	r3, #8
 8005b70:	9303      	str	r3, [sp, #12]
 8005b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b74:	443b      	add	r3, r7
 8005b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b78:	e76a      	b.n	8005a50 <_vfiprintf_r+0x78>
 8005b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b7e:	460c      	mov	r4, r1
 8005b80:	2001      	movs	r0, #1
 8005b82:	e7a8      	b.n	8005ad6 <_vfiprintf_r+0xfe>
 8005b84:	2300      	movs	r3, #0
 8005b86:	3401      	adds	r4, #1
 8005b88:	9305      	str	r3, [sp, #20]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f04f 0c0a 	mov.w	ip, #10
 8005b90:	4620      	mov	r0, r4
 8005b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b96:	3a30      	subs	r2, #48	@ 0x30
 8005b98:	2a09      	cmp	r2, #9
 8005b9a:	d903      	bls.n	8005ba4 <_vfiprintf_r+0x1cc>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0c6      	beq.n	8005b2e <_vfiprintf_r+0x156>
 8005ba0:	9105      	str	r1, [sp, #20]
 8005ba2:	e7c4      	b.n	8005b2e <_vfiprintf_r+0x156>
 8005ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba8:	4604      	mov	r4, r0
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7f0      	b.n	8005b90 <_vfiprintf_r+0x1b8>
 8005bae:	ab03      	add	r3, sp, #12
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	462a      	mov	r2, r5
 8005bb4:	4b12      	ldr	r3, [pc, #72]	@ (8005c00 <_vfiprintf_r+0x228>)
 8005bb6:	a904      	add	r1, sp, #16
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7fd fdd1 	bl	8003760 <_printf_float>
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	1c78      	adds	r0, r7, #1
 8005bc2:	d1d6      	bne.n	8005b72 <_vfiprintf_r+0x19a>
 8005bc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d405      	bmi.n	8005bd6 <_vfiprintf_r+0x1fe>
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	059a      	lsls	r2, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_vfiprintf_r+0x1fe>
 8005bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bd2:	f7fe fc05 	bl	80043e0 <__retarget_lock_release_recursive>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	065b      	lsls	r3, r3, #25
 8005bda:	f53f af1f 	bmi.w	8005a1c <_vfiprintf_r+0x44>
 8005bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005be0:	e71e      	b.n	8005a20 <_vfiprintf_r+0x48>
 8005be2:	ab03      	add	r3, sp, #12
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	462a      	mov	r2, r5
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <_vfiprintf_r+0x228>)
 8005bea:	a904      	add	r1, sp, #16
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7fe f84f 	bl	8003c90 <_printf_i>
 8005bf2:	e7e4      	b.n	8005bbe <_vfiprintf_r+0x1e6>
 8005bf4:	080062f8 	.word	0x080062f8
 8005bf8:	08006302 	.word	0x08006302
 8005bfc:	08003761 	.word	0x08003761
 8005c00:	080059b3 	.word	0x080059b3
 8005c04:	080062fe 	.word	0x080062fe

08005c08 <__sflush_r>:
 8005c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	0716      	lsls	r6, r2, #28
 8005c12:	4605      	mov	r5, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	d454      	bmi.n	8005cc2 <__sflush_r+0xba>
 8005c18:	684b      	ldr	r3, [r1, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	dc02      	bgt.n	8005c24 <__sflush_r+0x1c>
 8005c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dd48      	ble.n	8005cb6 <__sflush_r+0xae>
 8005c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	d045      	beq.n	8005cb6 <__sflush_r+0xae>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c30:	682f      	ldr	r7, [r5, #0]
 8005c32:	6a21      	ldr	r1, [r4, #32]
 8005c34:	602b      	str	r3, [r5, #0]
 8005c36:	d030      	beq.n	8005c9a <__sflush_r+0x92>
 8005c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	0759      	lsls	r1, r3, #29
 8005c3e:	d505      	bpl.n	8005c4c <__sflush_r+0x44>
 8005c40:	6863      	ldr	r3, [r4, #4]
 8005c42:	1ad2      	subs	r2, r2, r3
 8005c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c46:	b10b      	cbz	r3, 8005c4c <__sflush_r+0x44>
 8005c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c50:	6a21      	ldr	r1, [r4, #32]
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b0      	blx	r6
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	d106      	bne.n	8005c6a <__sflush_r+0x62>
 8005c5c:	6829      	ldr	r1, [r5, #0]
 8005c5e:	291d      	cmp	r1, #29
 8005c60:	d82b      	bhi.n	8005cba <__sflush_r+0xb2>
 8005c62:	4a2a      	ldr	r2, [pc, #168]	@ (8005d0c <__sflush_r+0x104>)
 8005c64:	410a      	asrs	r2, r1
 8005c66:	07d6      	lsls	r6, r2, #31
 8005c68:	d427      	bmi.n	8005cba <__sflush_r+0xb2>
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	6062      	str	r2, [r4, #4]
 8005c6e:	04d9      	lsls	r1, r3, #19
 8005c70:	6922      	ldr	r2, [r4, #16]
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	d504      	bpl.n	8005c80 <__sflush_r+0x78>
 8005c76:	1c42      	adds	r2, r0, #1
 8005c78:	d101      	bne.n	8005c7e <__sflush_r+0x76>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	b903      	cbnz	r3, 8005c80 <__sflush_r+0x78>
 8005c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c82:	602f      	str	r7, [r5, #0]
 8005c84:	b1b9      	cbz	r1, 8005cb6 <__sflush_r+0xae>
 8005c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	d002      	beq.n	8005c94 <__sflush_r+0x8c>
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f7ff f9f6 	bl	8005080 <_free_r>
 8005c94:	2300      	movs	r3, #0
 8005c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c98:	e00d      	b.n	8005cb6 <__sflush_r+0xae>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	1c50      	adds	r0, r2, #1
 8005ca4:	d1c9      	bne.n	8005c3a <__sflush_r+0x32>
 8005ca6:	682b      	ldr	r3, [r5, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0c6      	beq.n	8005c3a <__sflush_r+0x32>
 8005cac:	2b1d      	cmp	r3, #29
 8005cae:	d001      	beq.n	8005cb4 <__sflush_r+0xac>
 8005cb0:	2b16      	cmp	r3, #22
 8005cb2:	d11e      	bne.n	8005cf2 <__sflush_r+0xea>
 8005cb4:	602f      	str	r7, [r5, #0]
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	e022      	b.n	8005d00 <__sflush_r+0xf8>
 8005cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cbe:	b21b      	sxth	r3, r3
 8005cc0:	e01b      	b.n	8005cfa <__sflush_r+0xf2>
 8005cc2:	690f      	ldr	r7, [r1, #16]
 8005cc4:	2f00      	cmp	r7, #0
 8005cc6:	d0f6      	beq.n	8005cb6 <__sflush_r+0xae>
 8005cc8:	0793      	lsls	r3, r2, #30
 8005cca:	680e      	ldr	r6, [r1, #0]
 8005ccc:	bf08      	it	eq
 8005cce:	694b      	ldreq	r3, [r1, #20]
 8005cd0:	600f      	str	r7, [r1, #0]
 8005cd2:	bf18      	it	ne
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	eba6 0807 	sub.w	r8, r6, r7
 8005cda:	608b      	str	r3, [r1, #8]
 8005cdc:	f1b8 0f00 	cmp.w	r8, #0
 8005ce0:	dde9      	ble.n	8005cb6 <__sflush_r+0xae>
 8005ce2:	6a21      	ldr	r1, [r4, #32]
 8005ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ce6:	4643      	mov	r3, r8
 8005ce8:	463a      	mov	r2, r7
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b0      	blx	r6
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	dc08      	bgt.n	8005d04 <__sflush_r+0xfc>
 8005cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d04:	4407      	add	r7, r0
 8005d06:	eba8 0800 	sub.w	r8, r8, r0
 8005d0a:	e7e7      	b.n	8005cdc <__sflush_r+0xd4>
 8005d0c:	dfbffffe 	.word	0xdfbffffe

08005d10 <_fflush_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	4605      	mov	r5, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	b913      	cbnz	r3, 8005d20 <_fflush_r+0x10>
 8005d1a:	2500      	movs	r5, #0
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	b118      	cbz	r0, 8005d2a <_fflush_r+0x1a>
 8005d22:	6a03      	ldr	r3, [r0, #32]
 8005d24:	b90b      	cbnz	r3, 8005d2a <_fflush_r+0x1a>
 8005d26:	f7fe f95f 	bl	8003fe8 <__sinit>
 8005d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f3      	beq.n	8005d1a <_fflush_r+0xa>
 8005d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d34:	07d0      	lsls	r0, r2, #31
 8005d36:	d404      	bmi.n	8005d42 <_fflush_r+0x32>
 8005d38:	0599      	lsls	r1, r3, #22
 8005d3a:	d402      	bmi.n	8005d42 <_fflush_r+0x32>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d3e:	f7fe fb4e 	bl	80043de <__retarget_lock_acquire_recursive>
 8005d42:	4628      	mov	r0, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	f7ff ff5f 	bl	8005c08 <__sflush_r>
 8005d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d4c:	07da      	lsls	r2, r3, #31
 8005d4e:	4605      	mov	r5, r0
 8005d50:	d4e4      	bmi.n	8005d1c <_fflush_r+0xc>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	059b      	lsls	r3, r3, #22
 8005d56:	d4e1      	bmi.n	8005d1c <_fflush_r+0xc>
 8005d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d5a:	f7fe fb41 	bl	80043e0 <__retarget_lock_release_recursive>
 8005d5e:	e7dd      	b.n	8005d1c <_fflush_r+0xc>

08005d60 <__swhatbuf_r>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	460c      	mov	r4, r1
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	b096      	sub	sp, #88	@ 0x58
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	461e      	mov	r6, r3
 8005d70:	da0d      	bge.n	8005d8e <__swhatbuf_r+0x2e>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	bf14      	ite	ne
 8005d7e:	2340      	movne	r3, #64	@ 0x40
 8005d80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d84:	2000      	movs	r0, #0
 8005d86:	6031      	str	r1, [r6, #0]
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	b016      	add	sp, #88	@ 0x58
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	466a      	mov	r2, sp
 8005d90:	f000 f848 	bl	8005e24 <_fstat_r>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	dbec      	blt.n	8005d72 <__swhatbuf_r+0x12>
 8005d98:	9901      	ldr	r1, [sp, #4]
 8005d9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005da2:	4259      	negs	r1, r3
 8005da4:	4159      	adcs	r1, r3
 8005da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005daa:	e7eb      	b.n	8005d84 <__swhatbuf_r+0x24>

08005dac <__smakebuf_r>:
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005db0:	079d      	lsls	r5, r3, #30
 8005db2:	4606      	mov	r6, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	d507      	bpl.n	8005dc8 <__smakebuf_r+0x1c>
 8005db8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	6163      	str	r3, [r4, #20]
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc8:	ab01      	add	r3, sp, #4
 8005dca:	466a      	mov	r2, sp
 8005dcc:	f7ff ffc8 	bl	8005d60 <__swhatbuf_r>
 8005dd0:	9f00      	ldr	r7, [sp, #0]
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7ff f9c6 	bl	8005168 <_malloc_r>
 8005ddc:	b948      	cbnz	r0, 8005df2 <__smakebuf_r+0x46>
 8005dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de2:	059a      	lsls	r2, r3, #22
 8005de4:	d4ee      	bmi.n	8005dc4 <__smakebuf_r+0x18>
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	81a3      	strh	r3, [r4, #12]
 8005df0:	e7e2      	b.n	8005db8 <__smakebuf_r+0xc>
 8005df2:	89a3      	ldrh	r3, [r4, #12]
 8005df4:	6020      	str	r0, [r4, #0]
 8005df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e02:	b15b      	cbz	r3, 8005e1c <__smakebuf_r+0x70>
 8005e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 f81d 	bl	8005e48 <_isatty_r>
 8005e0e:	b128      	cbz	r0, 8005e1c <__smakebuf_r+0x70>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	431d      	orrs	r5, r3
 8005e20:	81a5      	strh	r5, [r4, #12]
 8005e22:	e7cf      	b.n	8005dc4 <__smakebuf_r+0x18>

08005e24 <_fstat_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d07      	ldr	r5, [pc, #28]	@ (8005e44 <_fstat_r+0x20>)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	f7fd fa76 	bl	8003322 <_fstat>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d102      	bne.n	8005e40 <_fstat_r+0x1c>
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	b103      	cbz	r3, 8005e40 <_fstat_r+0x1c>
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	bf00      	nop
 8005e44:	20000440 	.word	0x20000440

08005e48 <_isatty_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d06      	ldr	r5, [pc, #24]	@ (8005e64 <_isatty_r+0x1c>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f7fd fbc8 	bl	80035e8 <_isatty>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_isatty_r+0x1a>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_isatty_r+0x1a>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	20000440 	.word	0x20000440

08005e68 <_sbrk_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d06      	ldr	r5, [pc, #24]	@ (8005e84 <_sbrk_r+0x1c>)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	602b      	str	r3, [r5, #0]
 8005e74:	f7fb fb7c 	bl	8001570 <_sbrk>
 8005e78:	1c43      	adds	r3, r0, #1
 8005e7a:	d102      	bne.n	8005e82 <_sbrk_r+0x1a>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	b103      	cbz	r3, 8005e82 <_sbrk_r+0x1a>
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	bd38      	pop	{r3, r4, r5, pc}
 8005e84:	20000440 	.word	0x20000440

08005e88 <memcpy>:
 8005e88:	440a      	add	r2, r1
 8005e8a:	4291      	cmp	r1, r2
 8005e8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005e90:	d100      	bne.n	8005e94 <memcpy+0xc>
 8005e92:	4770      	bx	lr
 8005e94:	b510      	push	{r4, lr}
 8005e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e9e:	4291      	cmp	r1, r2
 8005ea0:	d1f9      	bne.n	8005e96 <memcpy+0xe>
 8005ea2:	bd10      	pop	{r4, pc}

08005ea4 <__assert_func>:
 8005ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ea6:	4614      	mov	r4, r2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4b09      	ldr	r3, [pc, #36]	@ (8005ed0 <__assert_func+0x2c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4605      	mov	r5, r0
 8005eb0:	68d8      	ldr	r0, [r3, #12]
 8005eb2:	b954      	cbnz	r4, 8005eca <__assert_func+0x26>
 8005eb4:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <__assert_func+0x30>)
 8005eb6:	461c      	mov	r4, r3
 8005eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ebc:	9100      	str	r1, [sp, #0]
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	4905      	ldr	r1, [pc, #20]	@ (8005ed8 <__assert_func+0x34>)
 8005ec2:	f000 f841 	bl	8005f48 <fiprintf>
 8005ec6:	f000 f851 	bl	8005f6c <abort>
 8005eca:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <__assert_func+0x38>)
 8005ecc:	e7f4      	b.n	8005eb8 <__assert_func+0x14>
 8005ece:	bf00      	nop
 8005ed0:	20000020 	.word	0x20000020
 8005ed4:	0800634e 	.word	0x0800634e
 8005ed8:	08006320 	.word	0x08006320
 8005edc:	08006313 	.word	0x08006313

08005ee0 <_calloc_r>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	fba1 5402 	umull	r5, r4, r1, r2
 8005ee6:	b93c      	cbnz	r4, 8005ef8 <_calloc_r+0x18>
 8005ee8:	4629      	mov	r1, r5
 8005eea:	f7ff f93d 	bl	8005168 <_malloc_r>
 8005eee:	4606      	mov	r6, r0
 8005ef0:	b928      	cbnz	r0, 8005efe <_calloc_r+0x1e>
 8005ef2:	2600      	movs	r6, #0
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	220c      	movs	r2, #12
 8005efa:	6002      	str	r2, [r0, #0]
 8005efc:	e7f9      	b.n	8005ef2 <_calloc_r+0x12>
 8005efe:	462a      	mov	r2, r5
 8005f00:	4621      	mov	r1, r4
 8005f02:	f7fe f9ef 	bl	80042e4 <memset>
 8005f06:	e7f5      	b.n	8005ef4 <_calloc_r+0x14>

08005f08 <__ascii_mbtowc>:
 8005f08:	b082      	sub	sp, #8
 8005f0a:	b901      	cbnz	r1, 8005f0e <__ascii_mbtowc+0x6>
 8005f0c:	a901      	add	r1, sp, #4
 8005f0e:	b142      	cbz	r2, 8005f22 <__ascii_mbtowc+0x1a>
 8005f10:	b14b      	cbz	r3, 8005f26 <__ascii_mbtowc+0x1e>
 8005f12:	7813      	ldrb	r3, [r2, #0]
 8005f14:	600b      	str	r3, [r1, #0]
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	1e10      	subs	r0, r2, #0
 8005f1a:	bf18      	it	ne
 8005f1c:	2001      	movne	r0, #1
 8005f1e:	b002      	add	sp, #8
 8005f20:	4770      	bx	lr
 8005f22:	4610      	mov	r0, r2
 8005f24:	e7fb      	b.n	8005f1e <__ascii_mbtowc+0x16>
 8005f26:	f06f 0001 	mvn.w	r0, #1
 8005f2a:	e7f8      	b.n	8005f1e <__ascii_mbtowc+0x16>

08005f2c <__ascii_wctomb>:
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4608      	mov	r0, r1
 8005f30:	b141      	cbz	r1, 8005f44 <__ascii_wctomb+0x18>
 8005f32:	2aff      	cmp	r2, #255	@ 0xff
 8005f34:	d904      	bls.n	8005f40 <__ascii_wctomb+0x14>
 8005f36:	228a      	movs	r2, #138	@ 0x8a
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f3e:	4770      	bx	lr
 8005f40:	700a      	strb	r2, [r1, #0]
 8005f42:	2001      	movs	r0, #1
 8005f44:	4770      	bx	lr
	...

08005f48 <fiprintf>:
 8005f48:	b40e      	push	{r1, r2, r3}
 8005f4a:	b503      	push	{r0, r1, lr}
 8005f4c:	4601      	mov	r1, r0
 8005f4e:	ab03      	add	r3, sp, #12
 8005f50:	4805      	ldr	r0, [pc, #20]	@ (8005f68 <fiprintf+0x20>)
 8005f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f56:	6800      	ldr	r0, [r0, #0]
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	f7ff fd3d 	bl	80059d8 <_vfiprintf_r>
 8005f5e:	b002      	add	sp, #8
 8005f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f64:	b003      	add	sp, #12
 8005f66:	4770      	bx	lr
 8005f68:	20000020 	.word	0x20000020

08005f6c <abort>:
 8005f6c:	b508      	push	{r3, lr}
 8005f6e:	2006      	movs	r0, #6
 8005f70:	f000 f82c 	bl	8005fcc <raise>
 8005f74:	2001      	movs	r0, #1
 8005f76:	f000 f84d 	bl	8006014 <_exit>

08005f7a <_raise_r>:
 8005f7a:	291f      	cmp	r1, #31
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4605      	mov	r5, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	d904      	bls.n	8005f8e <_raise_r+0x14>
 8005f84:	2316      	movs	r3, #22
 8005f86:	6003      	str	r3, [r0, #0]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
 8005f8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005f90:	b112      	cbz	r2, 8005f98 <_raise_r+0x1e>
 8005f92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f96:	b94b      	cbnz	r3, 8005fac <_raise_r+0x32>
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f000 f831 	bl	8006000 <_getpid_r>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa8:	f000 b818 	b.w	8005fdc <_kill_r>
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d00a      	beq.n	8005fc6 <_raise_r+0x4c>
 8005fb0:	1c59      	adds	r1, r3, #1
 8005fb2:	d103      	bne.n	8005fbc <_raise_r+0x42>
 8005fb4:	2316      	movs	r3, #22
 8005fb6:	6003      	str	r3, [r0, #0]
 8005fb8:	2001      	movs	r0, #1
 8005fba:	e7e7      	b.n	8005f8c <_raise_r+0x12>
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4798      	blx	r3
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e7e0      	b.n	8005f8c <_raise_r+0x12>
	...

08005fcc <raise>:
 8005fcc:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <raise+0xc>)
 8005fce:	4601      	mov	r1, r0
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f7ff bfd2 	b.w	8005f7a <_raise_r>
 8005fd6:	bf00      	nop
 8005fd8:	20000020 	.word	0x20000020

08005fdc <_kill_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d07      	ldr	r5, [pc, #28]	@ (8005ffc <_kill_r+0x20>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	f000 f80b 	bl	8006004 <_kill>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d102      	bne.n	8005ff8 <_kill_r+0x1c>
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	b103      	cbz	r3, 8005ff8 <_kill_r+0x1c>
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000440 	.word	0x20000440

08006000 <_getpid_r>:
 8006000:	f7fd b96c 	b.w	80032dc <_getpid>

08006004 <_kill>:
 8006004:	4b02      	ldr	r3, [pc, #8]	@ (8006010 <_kill+0xc>)
 8006006:	2258      	movs	r2, #88	@ 0x58
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800600e:	4770      	bx	lr
 8006010:	20000440 	.word	0x20000440

08006014 <_exit>:
 8006014:	e7fe      	b.n	8006014 <_exit>
	...

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
