
acc_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007850  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080079f0  080079f0  000089f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e20  08007e20  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007e20  08007e20  00008e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e28  08007e28  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e28  08007e28  00008e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e2c  08007e2c  00008e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007e30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001dc  0800800c  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800800c  000094a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b968  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a67  00000000  00000000  00014b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000165e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bb  00000000  00000000  00017230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001686b  00000000  00000000  00017beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c3  00000000  00000000  0002e456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef92  00000000  00000000  0003cb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbaab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  000cbaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000d03ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079d8 	.word	0x080079d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080079d8 	.word	0x080079d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f4c:	b08e      	sub	sp, #56	@ 0x38
 8000f4e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fde0 	bl	8001b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f950 	bl	80011f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  	initialise_monitor_handles();
 8000f58:	f003 ffc6 	bl	8004ee8 <initialise_monitor_handles>
	printf("Hello World!\n");
 8000f5c:	489b      	ldr	r0, [pc, #620]	@ (80011cc <main+0x284>)
 8000f5e:	f004 fdc1 	bl	8005ae4 <puts>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 fa79 	bl	8001458 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f66:	f000 f9b1 	bl	80012cc <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f6a:	f000 f9dd 	bl	8001328 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // uruchomienie zegara i ch3
	  HAL_TIM_Base_Start_IT(&htim4);
 8000f6e:	4898      	ldr	r0, [pc, #608]	@ (80011d0 <main+0x288>)
 8000f70:	f002 fdea 	bl	8003b48 <HAL_TIM_Base_Start_IT>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8000f74:	2100      	movs	r1, #0
 8000f76:	4896      	ldr	r0, [pc, #600]	@ (80011d0 <main+0x288>)
 8000f78:	f002 fea2 	bl	8003cc0 <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4894      	ldr	r0, [pc, #592]	@ (80011d0 <main+0x288>)
 8000f80:	f002 fe9e 	bl	8003cc0 <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4892      	ldr	r0, [pc, #584]	@ (80011d0 <main+0x288>)
 8000f88:	f002 fe9a 	bl	8003cc0 <HAL_TIM_PWM_Start_IT>
  	  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	4890      	ldr	r0, [pc, #576]	@ (80011d0 <main+0x288>)
 8000f90:	f002 fe96 	bl	8003cc0 <HAL_TIM_PWM_Start_IT>


   uint8_t i2c_receive_buf[6];
   uint8_t i2c_transmit_buf[6];

   uint8_t WHO_AM_I_reg = 0x0F;
 8000f94:	230f      	movs	r3, #15
 8000f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

   uint8_t ACC_I2C_ADDR = 0b0011001 << 1;
 8000f9a:	2332      	movs	r3, #50	@ 0x32
 8000f9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

   uint8_t bytes_to_receive = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

   HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, WHO_AM_I_reg, 1,i2c_receive_buf, bytes_to_receive, 50);
 8000fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000faa:	b299      	uxth	r1, r3
 8000fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	2032      	movs	r0, #50	@ 0x32
 8000fba:	9002      	str	r0, [sp, #8]
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4883      	ldr	r0, [pc, #524]	@ (80011d4 <main+0x28c>)
 8000fc8:	f001 fb04 	bl	80025d4 <HAL_I2C_Mem_Read>

   printf("WHO_AM_I_A: 0x%02X\n", i2c_receive_buf[0]);
 8000fcc:	7c3b      	ldrb	r3, [r7, #16]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4881      	ldr	r0, [pc, #516]	@ (80011d8 <main+0x290>)
 8000fd2:	f004 fd1f 	bl	8005a14 <iprintf>

 // ------------------------------------------------------- //
   uint8_t CTRL_REG1_A_reg = 0x20;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
   HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, CTRL_REG1_A_reg, 1,i2c_receive_buf, bytes_to_receive, 50);
 8000fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2032      	movs	r0, #50	@ 0x32
 8000ff0:	9002      	str	r0, [sp, #8]
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	4875      	ldr	r0, [pc, #468]	@ (80011d4 <main+0x28c>)
 8000ffe:	f001 fae9 	bl	80025d4 <HAL_I2C_Mem_Read>
   printf("CTRL_REG1_A przed zapisem: 0x%02X\n", i2c_receive_buf[0]);
 8001002:	7c3b      	ldrb	r3, [r7, #16]
 8001004:	4619      	mov	r1, r3
 8001006:	4875      	ldr	r0, [pc, #468]	@ (80011dc <main+0x294>)
 8001008:	f004 fd04 	bl	8005a14 <iprintf>

   i2c_transmit_buf[0] = 0b01010111;
 800100c:	2357      	movs	r3, #87	@ 0x57
 800100e:	723b      	strb	r3, [r7, #8]
   HAL_I2C_Mem_Write(&hi2c1, ACC_I2C_ADDR, CTRL_REG1_A_reg, 1, i2c_transmit_buf, 1, 50);
 8001010:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001014:	b299      	uxth	r1, r3
 8001016:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800101a:	b29a      	uxth	r2, r3
 800101c:	2332      	movs	r3, #50	@ 0x32
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4869      	ldr	r0, [pc, #420]	@ (80011d4 <main+0x28c>)
 800102e:	f001 f9d7 	bl	80023e0 <HAL_I2C_Mem_Write>

   HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, CTRL_REG1_A_reg, 1,i2c_receive_buf, bytes_to_receive, 50);
 8001032:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001036:	b299      	uxth	r1, r3
 8001038:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800103c:	b29a      	uxth	r2, r3
 800103e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001042:	b29b      	uxth	r3, r3
 8001044:	2032      	movs	r0, #50	@ 0x32
 8001046:	9002      	str	r0, [sp, #8]
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	4860      	ldr	r0, [pc, #384]	@ (80011d4 <main+0x28c>)
 8001054:	f001 fabe 	bl	80025d4 <HAL_I2C_Mem_Read>
   printf("CTRL_REG1_A po zapisie: 0x%02X\n", i2c_receive_buf[0]);
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	4619      	mov	r1, r3
 800105c:	4860      	ldr	r0, [pc, #384]	@ (80011e0 <main+0x298>)
 800105e:	f004 fcd9 	bl	8005a14 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   int16_t x, y, z;

   	float wspolczynnik_fizyczny = 2;
 8001062:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001066:	623b      	str	r3, [r7, #32]

   // float xf, yf, zf;

   	int16_t i2c_receive16bit_buf[3];
   	uint8_t SAMPLES_START_reg = 0x28;
 8001068:	2328      	movs	r3, #40	@ 0x28
 800106a:	77fb      	strb	r3, [r7, #31]
   	uint8_t AUTO_INCREMENT_ADDR = 0x01 << 7;
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	77bb      	strb	r3, [r7, #30]
   	bytes_to_receive = 6;
 8001070:	2306      	movs	r3, #6
 8001072:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

     while (1)
     {
   	  	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, SAMPLES_START_reg | AUTO_INCREMENT_ADDR, 1, i2c_receive16bit_buf, bytes_to_receive, 50);
 8001076:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800107a:	b299      	uxth	r1, r3
 800107c:	7ffa      	ldrb	r2, [r7, #31]
 800107e:	7fbb      	ldrb	r3, [r7, #30]
 8001080:	4313      	orrs	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800108a:	b29b      	uxth	r3, r3
 800108c:	2232      	movs	r2, #50	@ 0x32
 800108e:	9202      	str	r2, [sp, #8]
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	463b      	mov	r3, r7
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	4602      	mov	r2, r0
 800109a:	484e      	ldr	r0, [pc, #312]	@ (80011d4 <main+0x28c>)
 800109c:	f001 fa9a 	bl	80025d4 <HAL_I2C_Mem_Read>
   		x = i2c_receive16bit_buf[0];
 80010a0:	883b      	ldrh	r3, [r7, #0]
 80010a2:	83bb      	strh	r3, [r7, #28]
   		y = i2c_receive16bit_buf[1];
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	837b      	strh	r3, [r7, #26]
   		z = i2c_receive16bit_buf[2];
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	833b      	strh	r3, [r7, #24]

   		xf = (float)x / pow(2,15)*wspolczynnik_fizyczny;
 80010ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	ee17 0a90 	vmov	r0, s15
 80010bc:	f7ff fa4c 	bl	8000558 <__aeabi_f2d>
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b47      	ldr	r3, [pc, #284]	@ (80011e4 <main+0x29c>)
 80010c6:	f7ff fbc9 	bl	800085c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	461d      	mov	r5, r3
 80010d2:	6a38      	ldr	r0, [r7, #32]
 80010d4:	f7ff fa40 	bl	8000558 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff fa92 	bl	8000608 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f7ff fd64 	bl	8000bb8 <__aeabi_d2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a3d      	ldr	r2, [pc, #244]	@ (80011e8 <main+0x2a0>)
 80010f4:	6013      	str	r3, [r2, #0]
   		yf = (float)y / pow(2,15)*wspolczynnik_fizyczny;
 80010f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	ee17 0a90 	vmov	r0, s15
 8001106:	f7ff fa27 	bl	8000558 <__aeabi_f2d>
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <main+0x29c>)
 8001110:	f7ff fba4 	bl	800085c <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4614      	mov	r4, r2
 800111a:	461d      	mov	r5, r3
 800111c:	6a38      	ldr	r0, [r7, #32]
 800111e:	f7ff fa1b 	bl	8000558 <__aeabi_f2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4620      	mov	r0, r4
 8001128:	4629      	mov	r1, r5
 800112a:	f7ff fa6d 	bl	8000608 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd3f 	bl	8000bb8 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a2b      	ldr	r2, [pc, #172]	@ (80011ec <main+0x2a4>)
 800113e:	6013      	str	r3, [r2, #0]
   		zf = (float)z / pow(2,15)*wspolczynnik_fizyczny;
 8001140:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114c:	ee17 0a90 	vmov	r0, s15
 8001150:	f7ff fa02 	bl	8000558 <__aeabi_f2d>
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <main+0x29c>)
 800115a:	f7ff fb7f 	bl	800085c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4614      	mov	r4, r2
 8001164:	461d      	mov	r5, r3
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f7ff f9f6 	bl	8000558 <__aeabi_f2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff fa48 	bl	8000608 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fd1a 	bl	8000bb8 <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	4a1a      	ldr	r2, [pc, #104]	@ (80011f0 <main+0x2a8>)
 8001188:	6013      	str	r3, [r2, #0]

   		printf("xf: %04.2f, yf: %04.2f, zf: %04.2f\n", xf, yf, zf);
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <main+0x2a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9e2 	bl	8000558 <__aeabi_f2d>
 8001194:	4680      	mov	r8, r0
 8001196:	4689      	mov	r9, r1
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <main+0x2a4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9db 	bl	8000558 <__aeabi_f2d>
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <main+0x2a8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9d4 	bl	8000558 <__aeabi_f2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011b8:	e9cd 4500 	strd	r4, r5, [sp]
 80011bc:	4642      	mov	r2, r8
 80011be:	464b      	mov	r3, r9
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <main+0x2ac>)
 80011c2:	f004 fc27 	bl	8005a14 <iprintf>
   	  	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, SAMPLES_START_reg | AUTO_INCREMENT_ADDR, 1, i2c_receive16bit_buf, bytes_to_receive, 50);
 80011c6:	bf00      	nop
 80011c8:	e755      	b.n	8001076 <main+0x12e>
 80011ca:	bf00      	nop
 80011cc:	080079f0 	.word	0x080079f0
 80011d0:	20000258 	.word	0x20000258
 80011d4:	20000204 	.word	0x20000204
 80011d8:	08007a00 	.word	0x08007a00
 80011dc:	08007a14 	.word	0x08007a14
 80011e0:	08007a38 	.word	0x08007a38
 80011e4:	40e00000 	.word	0x40e00000
 80011e8:	200001f8 	.word	0x200001f8
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	20000200 	.word	0x20000200
 80011f4:	08007a58 	.word	0x08007a58

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	@ 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	@ 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f004 fd4c 	bl	8005ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	4a27      	ldr	r2, [pc, #156]	@ (80012c4 <SystemClock_Config+0xcc>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	@ 0x40
 800122c:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <SystemClock_Config+0xd0>)
 8001242:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125c:	2310      	movs	r3, #16
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001268:	2308      	movs	r3, #8
 800126a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800126c:	23c0      	movs	r3, #192	@ 0xc0
 800126e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001270:	2304      	movs	r3, #4
 8001272:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001274:	2308      	movs	r3, #8
 8001276:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f001 ff8f 	bl	80031a0 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001288:	f000 fac0 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2103      	movs	r1, #3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f9f0 	bl	8003690 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b6:	f000 faa9 	bl	800180c <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	@ 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_I2C1_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <MX_I2C1_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_I2C1_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_I2C1_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_I2C1_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_I2C1_Init+0x50>)
 800130a:	f000 ff25 	bl	8002158 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 fa7a 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000204 	.word	0x20000204
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	@ 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001358:	4b3d      	ldr	r3, [pc, #244]	@ (8001450 <MX_TIM4_Init+0x128>)
 800135a:	4a3e      	ldr	r2, [pc, #248]	@ (8001454 <MX_TIM4_Init+0x12c>)
 800135c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 480-1;
 800135e:	4b3c      	ldr	r3, [pc, #240]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001360:	f240 12df 	movw	r2, #479	@ 0x1df
 8001364:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b3a      	ldr	r3, [pc, #232]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800136c:	4b38      	ldr	r3, [pc, #224]	@ (8001450 <MX_TIM4_Init+0x128>)
 800136e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001372:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b36      	ldr	r3, [pc, #216]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b35      	ldr	r3, [pc, #212]	@ (8001450 <MX_TIM4_Init+0x128>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001380:	4833      	ldr	r0, [pc, #204]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001382:	f002 fb91 	bl	8003aa8 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800138c:	f000 fa3e 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139a:	4619      	mov	r1, r3
 800139c:	482c      	ldr	r0, [pc, #176]	@ (8001450 <MX_TIM4_Init+0x128>)
 800139e:	f002 ff3f 	bl	8004220 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80013a8:	f000 fa30 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013ac:	4828      	ldr	r0, [pc, #160]	@ (8001450 <MX_TIM4_Init+0x128>)
 80013ae:	f002 fc2d 	bl	8003c0c <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80013b8:	f000 fa28 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	4619      	mov	r1, r3
 80013ca:	4821      	ldr	r0, [pc, #132]	@ (8001450 <MX_TIM4_Init+0x128>)
 80013cc:	f003 faf0 	bl	80049b0 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013d6:	f000 fa19 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	@ 0x60
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 80013de:	23fa      	movs	r3, #250	@ 0xfa
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <MX_TIM4_Init+0x128>)
 80013f2:	f002 fe53 	bl	800409c <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013fc:	f000 fa06 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2204      	movs	r2, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4812      	ldr	r0, [pc, #72]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001408:	f002 fe48 	bl	800409c <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001412:	f000 f9fb 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2208      	movs	r2, #8
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_TIM4_Init+0x128>)
 800141e:	f002 fe3d 	bl	800409c <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001428:	f000 f9f0 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	220c      	movs	r2, #12
 8001430:	4619      	mov	r1, r3
 8001432:	4807      	ldr	r0, [pc, #28]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001434:	f002 fe32 	bl	800409c <HAL_TIM_PWM_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800143e:	f000 f9e5 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001442:	4803      	ldr	r0, [pc, #12]	@ (8001450 <MX_TIM4_Init+0x128>)
 8001444:	f000 fa80 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8001448:	bf00      	nop
 800144a:	3738      	adds	r7, #56	@ 0x38
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000258 	.word	0x20000258
 8001454:	40000800 	.word	0x40000800

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	4b98      	ldr	r3, [pc, #608]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a97      	ldr	r2, [pc, #604]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b95      	ldr	r3, [pc, #596]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	4b91      	ldr	r3, [pc, #580]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a90      	ldr	r2, [pc, #576]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b8e      	ldr	r3, [pc, #568]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b8a      	ldr	r3, [pc, #552]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a89      	ldr	r2, [pc, #548]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b87      	ldr	r3, [pc, #540]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b83      	ldr	r3, [pc, #524]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a82      	ldr	r2, [pc, #520]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b7c      	ldr	r3, [pc, #496]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a7b      	ldr	r2, [pc, #492]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b79      	ldr	r3, [pc, #484]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b75      	ldr	r3, [pc, #468]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a74      	ldr	r2, [pc, #464]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b72      	ldr	r3, [pc, #456]	@ (80016d4 <MX_GPIO_Init+0x27c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2108      	movs	r1, #8
 800151a:	486f      	ldr	r0, [pc, #444]	@ (80016d8 <MX_GPIO_Init+0x280>)
 800151c:	f000 fe02 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2101      	movs	r1, #1
 8001524:	486d      	ldr	r0, [pc, #436]	@ (80016dc <MX_GPIO_Init+0x284>)
 8001526:	f000 fdfd 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2110      	movs	r1, #16
 800152e:	486c      	ldr	r0, [pc, #432]	@ (80016e0 <MX_GPIO_Init+0x288>)
 8001530:	f000 fdf8 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001534:	2304      	movs	r3, #4
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4864      	ldr	r0, [pc, #400]	@ (80016d8 <MX_GPIO_Init+0x280>)
 8001548:	f000 fc68 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800154c:	2308      	movs	r3, #8
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	485d      	ldr	r0, [pc, #372]	@ (80016d8 <MX_GPIO_Init+0x280>)
 8001564:	f000 fc5a 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001568:	2332      	movs	r3, #50	@ 0x32
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800156c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4856      	ldr	r0, [pc, #344]	@ (80016d8 <MX_GPIO_Init+0x280>)
 800157e:	f000 fc4d 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001582:	2301      	movs	r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4850      	ldr	r0, [pc, #320]	@ (80016dc <MX_GPIO_Init+0x284>)
 800159a:	f000 fc3f 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800159e:	2308      	movs	r3, #8
 80015a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ae:	2305      	movs	r3, #5
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4848      	ldr	r0, [pc, #288]	@ (80016dc <MX_GPIO_Init+0x284>)
 80015ba:	f000 fc2f 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015be:	2301      	movs	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4619      	mov	r1, r3
 80015d2:	4844      	ldr	r0, [pc, #272]	@ (80016e4 <MX_GPIO_Init+0x28c>)
 80015d4:	f000 fc22 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015d8:	2310      	movs	r3, #16
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e8:	2306      	movs	r3, #6
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	483c      	ldr	r0, [pc, #240]	@ (80016e4 <MX_GPIO_Init+0x28c>)
 80015f4:	f000 fc12 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015f8:	23e0      	movs	r3, #224	@ 0xe0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001608:	2305      	movs	r3, #5
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4834      	ldr	r0, [pc, #208]	@ (80016e4 <MX_GPIO_Init+0x28c>)
 8001614:	f000 fc02 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001618:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162a:	2305      	movs	r3, #5
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	482c      	ldr	r0, [pc, #176]	@ (80016e8 <MX_GPIO_Init+0x290>)
 8001636:	f000 fbf1 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800163a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800164c:	2306      	movs	r3, #6
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4821      	ldr	r0, [pc, #132]	@ (80016dc <MX_GPIO_Init+0x284>)
 8001658:	f000 fbe0 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800165c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	481c      	ldr	r0, [pc, #112]	@ (80016e4 <MX_GPIO_Init+0x28c>)
 8001672:	f000 fbd3 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001676:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001688:	230a      	movs	r3, #10
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4814      	ldr	r0, [pc, #80]	@ (80016e4 <MX_GPIO_Init+0x28c>)
 8001694:	f000 fbc2 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001698:	2310      	movs	r3, #16
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <MX_GPIO_Init+0x288>)
 80016b0:	f000 fbb4 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016b4:	2320      	movs	r3, #32
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <MX_GPIO_Init+0x288>)
 80016c8:	f000 fba8 	bl	8001e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016cc:	bf00      	nop
 80016ce:	3730      	adds	r7, #48	@ 0x30
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400

080016ec <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
// do PWM
uint32_t pulse_val;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    if(htim == &htim4) // Sprawdzenie, czy to właściwy timer
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a41      	ldr	r2, [pc, #260]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d17b      	bne.n	80017f4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
    {
    	int xf_pulse,yf_pulse;

    	//x
        xf_pulse = fabs(xf) * 1000;
 80016fc:	4b40      	ldr	r3, [pc, #256]	@ (8001800 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	eef0 7ae7 	vabs.f32	s15, s15
 8001706:	ee17 0a90 	vmov	r0, s15
 800170a:	f7fe ff25 	bl	8000558 <__aeabi_f2d>
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001714:	f7fe ff78 	bl	8000608 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f7ff fa22 	bl	8000b68 <__aeabi_d2iz>
 8001724:	4603      	mov	r3, r0
 8001726:	60fb      	str	r3, [r7, #12]
        if (xf_pulse > 1000) {
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800172e:	dd02      	ble.n	8001736 <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
            xf_pulse = 1000;
 8001730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001734:	60fb      	str	r3, [r7, #12]
        }
        if(xf>0){
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	dd08      	ble.n	8001758 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, xf_pulse);
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800174e:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40
 8001756:	e00f      	b.n	8001778 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>
        }else if(xf==0){
 8001758:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <HAL_TIM_PWM_PulseFinishedCallback+0x114>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d007      	beq.n	8001778 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>

        }else{
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, xf_pulse);
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001770:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2200      	movs	r2, #0
 8001776:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        //y
        yf_pulse = fabs(yf) * 1000;
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	eef0 7ae7 	vabs.f32	s15, s15
 8001782:	ee17 0a90 	vmov	r0, s15
 8001786:	f7fe fee7 	bl	8000558 <__aeabi_f2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <HAL_TIM_PWM_PulseFinishedCallback+0x118>)
 8001790:	f7fe ff3a 	bl	8000608 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff f9e4 	bl	8000b68 <__aeabi_d2iz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	60bb      	str	r3, [r7, #8]
        if (yf_pulse > 1000) {
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017aa:	dd02      	ble.n	80017b2 <HAL_TIM_PWM_PulseFinishedCallback+0xc6>
            yf_pulse = 1000;
 80017ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b0:	60bb      	str	r3, [r7, #8]
        }

        if(yf>0){
 80017b2:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	dd08      	ble.n	80017d4 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, yf_pulse);
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, yf_pulse);
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
        }

    }
}
 80017d2:	e00f      	b.n	80017f4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
        }else if(yf==0){
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d007      	beq.n	80017f4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, yf_pulse);
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_TIM_PWM_PulseFinishedCallback+0x110>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000258 	.word	0x20000258
 8001800:	200001f8 	.word	0x200001f8
 8001804:	408f4000 	.word	0x408f4000
 8001808:	200001fc 	.word	0x200001fc

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <Error_Handler+0x8>

08001818 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b10      	ldr	r3, [pc, #64]	@ (8001864 <HAL_MspInit+0x4c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <HAL_MspInit+0x4c>)
 8001828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <HAL_MspInit+0x4c>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_MspInit+0x4c>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <HAL_MspInit+0x4c>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_MspInit+0x4c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001856:	2007      	movs	r0, #7
 8001858:	f000 fa9e 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800

08001868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	@ (80018ec <HAL_I2C_MspInit+0x84>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12c      	bne.n	80018e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_I2C_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <HAL_I2C_MspInit+0x88>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_I2C_MspInit+0x88>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80018a6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b8:	2304      	movs	r3, #4
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <HAL_I2C_MspInit+0x8c>)
 80018c4:	f000 faaa 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <HAL_I2C_MspInit+0x88>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <HAL_I2C_MspInit+0x88>)
 80018d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_I2C_MspInit+0x88>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	@ 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40005400 	.word	0x40005400
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020400 	.word	0x40020400

080018f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <HAL_TIM_Base_MspInit+0x48>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d115      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_TIM_Base_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	201e      	movs	r0, #30
 800192c:	f000 fa3f 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001930:	201e      	movs	r0, #30
 8001932:	f000 fa58 	bl	8001de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40000800 	.word	0x40000800
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <HAL_TIM_MspPostInit+0x68>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d11e      	bne.n	80019a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a10      	ldr	r2, [pc, #64]	@ (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_TIM_MspPostInit+0x6c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001986:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800198a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001998:	2302      	movs	r3, #2
 800199a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <HAL_TIM_MspPostInit+0x70>)
 80019a4:	f000 fa3a 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40000800 	.word	0x40000800
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020c00 	.word	0x40020c00

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <NMI_Handler+0x4>

080019c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <MemManage_Handler+0x4>

080019d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a12:	f000 f8d1 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a20:	4802      	ldr	r0, [pc, #8]	@ (8001a2c <TIM4_IRQHandler+0x10>)
 8001a22:	f002 fa4b 	bl	8003ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000258 	.word	0x20000258

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f004 f972 	bl	8005d48 <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20020000 	.word	0x20020000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	200002a0 	.word	0x200002a0
 8001a98:	200004a0 	.word	0x200004a0

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001af8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ac4:	f7ff ffea 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aca:	490d      	ldr	r1, [pc, #52]	@ (8001b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001acc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8001b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aee:	f004 f931 	bl	8005d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7ff fa29 	bl	8000f48 <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b04:	08007e30 	.word	0x08007e30
  ldr r2, =_sbss
 8001b08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b0c:	200004a0 	.word	0x200004a0

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f92b 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fe66 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f943 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f90b 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000008 	.word	0x20000008
 8001bb4:	20000004 	.word	0x20000004

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	200002a4 	.word	0x200002a4

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	@ (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200002a4 	.word	0x200002a4

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	@ (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	@ (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	@ 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e159      	b.n	80020ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8148 	bne.w	80020e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80a2 	beq.w	80020e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b57      	ldr	r3, [pc, #348]	@ (8002104 <HAL_GPIO_Init+0x2e8>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4a56      	ldr	r2, [pc, #344]	@ (8002104 <HAL_GPIO_Init+0x2e8>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	4b54      	ldr	r3, [pc, #336]	@ (8002104 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a52      	ldr	r2, [pc, #328]	@ (8002108 <HAL_GPIO_Init+0x2ec>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a49      	ldr	r2, [pc, #292]	@ (800210c <HAL_GPIO_Init+0x2f0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d019      	beq.n	800201e <HAL_GPIO_Init+0x202>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a48      	ldr	r2, [pc, #288]	@ (8002110 <HAL_GPIO_Init+0x2f4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_GPIO_Init+0x1fe>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a47      	ldr	r2, [pc, #284]	@ (8002114 <HAL_GPIO_Init+0x2f8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00d      	beq.n	8002016 <HAL_GPIO_Init+0x1fa>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a46      	ldr	r2, [pc, #280]	@ (8002118 <HAL_GPIO_Init+0x2fc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d007      	beq.n	8002012 <HAL_GPIO_Init+0x1f6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a45      	ldr	r2, [pc, #276]	@ (800211c <HAL_GPIO_Init+0x300>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_GPIO_Init+0x1f2>
 800200a:	2304      	movs	r3, #4
 800200c:	e008      	b.n	8002020 <HAL_GPIO_Init+0x204>
 800200e:	2307      	movs	r3, #7
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x204>
 8002012:	2303      	movs	r3, #3
 8002014:	e004      	b.n	8002020 <HAL_GPIO_Init+0x204>
 8002016:	2302      	movs	r3, #2
 8002018:	e002      	b.n	8002020 <HAL_GPIO_Init+0x204>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_GPIO_Init+0x204>
 800201e:	2300      	movs	r3, #0
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	f002 0203 	and.w	r2, r2, #3
 8002026:	0092      	lsls	r2, r2, #2
 8002028:	4093      	lsls	r3, r2
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002030:	4935      	ldr	r1, [pc, #212]	@ (8002108 <HAL_GPIO_Init+0x2ec>)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b38      	ldr	r3, [pc, #224]	@ (8002120 <HAL_GPIO_Init+0x304>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002062:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <HAL_GPIO_Init+0x304>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002068:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <HAL_GPIO_Init+0x304>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800208c:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <HAL_GPIO_Init+0x304>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002092:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <HAL_GPIO_Init+0x304>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_GPIO_Init+0x304>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020bc:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <HAL_GPIO_Init+0x304>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HAL_GPIO_Init+0x304>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3301      	adds	r3, #1
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	f67f aea2 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	40013800 	.word	0x40013800
 800210c:	40020000 	.word	0x40020000
 8002110:	40020400 	.word	0x40020400
 8002114:	40020800 	.word	0x40020800
 8002118:	40020c00 	.word	0x40020c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40013c00 	.word	0x40013c00

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e12b      	b.n	80023c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fb72 	bl	8001868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2224      	movs	r2, #36	@ 0x24
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021bc:	f001 fc60 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80021c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4a81      	ldr	r2, [pc, #516]	@ (80023cc <HAL_I2C_Init+0x274>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d807      	bhi.n	80021dc <HAL_I2C_Init+0x84>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a80      	ldr	r2, [pc, #512]	@ (80023d0 <HAL_I2C_Init+0x278>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	bf94      	ite	ls
 80021d4:	2301      	movls	r3, #1
 80021d6:	2300      	movhi	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e006      	b.n	80021ea <HAL_I2C_Init+0x92>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a7d      	ldr	r2, [pc, #500]	@ (80023d4 <HAL_I2C_Init+0x27c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bf94      	ite	ls
 80021e4:	2301      	movls	r3, #1
 80021e6:	2300      	movhi	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0e7      	b.n	80023c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a78      	ldr	r2, [pc, #480]	@ (80023d8 <HAL_I2C_Init+0x280>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9b      	lsrs	r3, r3, #18
 80021fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a6a      	ldr	r2, [pc, #424]	@ (80023cc <HAL_I2C_Init+0x274>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d802      	bhi.n	800222c <HAL_I2C_Init+0xd4>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3301      	adds	r3, #1
 800222a:	e009      	b.n	8002240 <HAL_I2C_Init+0xe8>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	4a69      	ldr	r2, [pc, #420]	@ (80023dc <HAL_I2C_Init+0x284>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	3301      	adds	r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002252:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	495c      	ldr	r1, [pc, #368]	@ (80023cc <HAL_I2C_Init+0x274>)
 800225c:	428b      	cmp	r3, r1
 800225e:	d819      	bhi.n	8002294 <HAL_I2C_Init+0x13c>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e59      	subs	r1, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fbb1 f3f3 	udiv	r3, r1, r3
 800226e:	1c59      	adds	r1, r3, #1
 8002270:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002274:	400b      	ands	r3, r1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_I2C_Init+0x138>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e59      	subs	r1, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fbb1 f3f3 	udiv	r3, r1, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	e051      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002290:	2304      	movs	r3, #4
 8002292:	e04f      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_I2C_Init+0x168>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	440b      	add	r3, r1
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e012      	b.n	80022e6 <HAL_I2C_Init+0x18e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	0099      	lsls	r1, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Init+0x196>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e022      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10e      	bne.n	8002314 <HAL_I2C_Init+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1e58      	subs	r0, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	440b      	add	r3, r1
 8002304:	fbb0 f3f3 	udiv	r3, r0, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002312:	e00f      	b.n	8002334 <HAL_I2C_Init+0x1dc>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	0099      	lsls	r1, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	fbb0 f3f3 	udiv	r3, r0, r3
 800232a:	3301      	adds	r3, #1
 800232c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002330:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	6809      	ldr	r1, [r1, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002362:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6911      	ldr	r1, [r2, #16]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68d2      	ldr	r2, [r2, #12]
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2220      	movs	r2, #32
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	000186a0 	.word	0x000186a0
 80023d0:	001e847f 	.word	0x001e847f
 80023d4:	003d08ff 	.word	0x003d08ff
 80023d8:	431bde83 	.word	0x431bde83
 80023dc:	10624dd3 	.word	0x10624dd3

080023e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	817b      	strh	r3, [r7, #10]
 80023f2:	460b      	mov	r3, r1
 80023f4:	813b      	strh	r3, [r7, #8]
 80023f6:	4613      	mov	r3, r2
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fa:	f7ff fbf1 	bl	8001be0 <HAL_GetTick>
 80023fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	f040 80d9 	bne.w	80025c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2319      	movs	r3, #25
 8002414:	2201      	movs	r2, #1
 8002416:	496d      	ldr	r1, [pc, #436]	@ (80025cc <HAL_I2C_Mem_Write+0x1ec>)
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 fc8b 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	e0cc      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Mem_Write+0x56>
 8002432:	2302      	movs	r3, #2
 8002434:	e0c5      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d007      	beq.n	800245c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2221      	movs	r2, #33	@ 0x21
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800248c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a4d      	ldr	r2, [pc, #308]	@ (80025d0 <HAL_I2C_Mem_Write+0x1f0>)
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800249e:	88f8      	ldrh	r0, [r7, #6]
 80024a0:	893a      	ldrh	r2, [r7, #8]
 80024a2:	8979      	ldrh	r1, [r7, #10]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fac2 	bl	8002a38 <I2C_RequestMemoryWrite>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d052      	beq.n	8002560 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e081      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fd50 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00d      	beq.n	80024ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d107      	bne.n	80024e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06b      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d11b      	bne.n	8002560 <HAL_I2C_Mem_Write+0x180>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1aa      	bne.n	80024be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fd43 	bl	8002ff8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e016      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	00100002 	.word	0x00100002
 80025d0:	ffff0000 	.word	0xffff0000

080025d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	@ 0x30
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	460b      	mov	r3, r1
 80025e8:	813b      	strh	r3, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ee:	f7ff faf7 	bl	8001be0 <HAL_GetTick>
 80025f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	f040 8214 	bne.w	8002a2a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2319      	movs	r3, #25
 8002608:	2201      	movs	r2, #1
 800260a:	497b      	ldr	r1, [pc, #492]	@ (80027f8 <HAL_I2C_Mem_Read+0x224>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb91 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
 800261a:	e207      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_I2C_Mem_Read+0x56>
 8002626:	2302      	movs	r3, #2
 8002628:	e200      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d007      	beq.n	8002650 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2222      	movs	r2, #34	@ 0x22
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a5b      	ldr	r2, [pc, #364]	@ (80027fc <HAL_I2C_Mem_Read+0x228>)
 8002690:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002692:	88f8      	ldrh	r0, [r7, #6]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	8979      	ldrh	r1, [r7, #10]
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4603      	mov	r3, r0
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fa5e 	bl	8002b64 <I2C_RequestMemoryRead>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e1bc      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	623b      	str	r3, [r7, #32]
 80026ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e190      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d11b      	bne.n	8002722 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e170      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002726:	2b02      	cmp	r3, #2
 8002728:	d11b      	bne.n	8002762 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002738:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	e150      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002778:	e144      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	2b03      	cmp	r3, #3
 8002780:	f200 80f1 	bhi.w	8002966 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002788:	2b01      	cmp	r3, #1
 800278a:	d123      	bne.n	80027d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800278e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fc79 	bl	8003088 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e145      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027d2:	e117      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d14e      	bne.n	800287a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e2:	2200      	movs	r2, #0
 80027e4:	4906      	ldr	r1, [pc, #24]	@ (8002800 <HAL_I2C_Mem_Read+0x22c>)
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 faa4 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e11a      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000
 8002800:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002878:	e0c4      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	2200      	movs	r2, #0
 8002882:	496c      	ldr	r1, [pc, #432]	@ (8002a34 <HAL_I2C_Mem_Read+0x460>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fa55 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0cb      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	2200      	movs	r2, #0
 80028de:	4955      	ldr	r1, [pc, #340]	@ (8002a34 <HAL_I2C_Mem_Read+0x460>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fa27 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e09d      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002964:	e04e      	b.n	8002a04 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002968:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fb8c 	bl	8003088 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e058      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d124      	bne.n	8002a04 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f aeb6 	bne.w	800277a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
  }
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3728      	adds	r7, #40	@ 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	00010004 	.word	0x00010004

08002a38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f960 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a88:	d103      	bne.n	8002a92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e05f      	b.n	8002b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	6a3a      	ldr	r2, [r7, #32]
 8002aaa:	492d      	ldr	r1, [pc, #180]	@ (8002b60 <I2C_RequestMemoryWrite+0x128>)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f9bb 	bl	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04c      	b.n	8002b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad4:	6a39      	ldr	r1, [r7, #32]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa46 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d107      	bne.n	8002afa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e02b      	b.n	8002b56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b04:	893b      	ldrh	r3, [r7, #8]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	e021      	b.n	8002b54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b10:	893b      	ldrh	r3, [r7, #8]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa20 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e005      	b.n	8002b56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	00010002 	.word	0x00010002

08002b64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	4611      	mov	r1, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	817b      	strh	r3, [r7, #10]
 8002b76:	460b      	mov	r3, r1
 8002b78:	813b      	strh	r3, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f8c2 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00d      	beq.n	8002bd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bc4:	d103      	bne.n	8002bce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e0aa      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bd2:	897b      	ldrh	r3, [r7, #10]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	4952      	ldr	r1, [pc, #328]	@ (8002d30 <I2C_RequestMemoryRead+0x1cc>)
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f91d 	bl	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e097      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c10:	6a39      	ldr	r1, [r7, #32]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f9a8 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d107      	bne.n	8002c36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e076      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c40:	893b      	ldrh	r3, [r7, #8]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]
 8002c4a:	e021      	b.n	8002c90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c4c:	893b      	ldrh	r3, [r7, #8]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f982 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e050      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c92:	6a39      	ldr	r1, [r7, #32]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f967 	bl	8002f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d107      	bne.n	8002cb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e035      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f82b 	bl	8002d34 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cf2:	d103      	bne.n	8002cfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e013      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	6a3a      	ldr	r2, [r7, #32]
 8002d14:	4906      	ldr	r1, [pc, #24]	@ (8002d30 <I2C_RequestMemoryRead+0x1cc>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f886 	bl	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	00010002 	.word	0x00010002

08002d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d44:	e048      	b.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d044      	beq.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe ff47 	bl	8001be0 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d139      	bne.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10d      	bne.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	43da      	mvns	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	e00c      	b.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	43da      	mvns	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d116      	bne.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e023      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10d      	bne.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	e00c      	b.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d093      	beq.n	8002d46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e36:	e071      	b.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e46:	d123      	bne.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e067      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d041      	beq.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe fea2 	bl	8001be0 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d136      	bne.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d10c      	bne.n	8002ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	e00b      	b.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e021      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d10c      	bne.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e00b      	b.n	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f47f af6d 	bne.w	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f74:	e034      	b.n	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8e3 	bl	8003142 <I2C_IsAcknowledgeFailed>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d028      	beq.n	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7fe fe27 	bl	8001be0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11d      	bne.n	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fae:	2b80      	cmp	r3, #128	@ 0x80
 8002fb0:	d016      	beq.n	8002fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e007      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b80      	cmp	r3, #128	@ 0x80
 8002fec:	d1c3      	bne.n	8002f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003004:	e034      	b.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f89b 	bl	8003142 <I2C_IsAcknowledgeFailed>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e034      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d028      	beq.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7fe fddf 	bl	8001be0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d11d      	bne.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d016      	beq.n	8003070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e007      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d1c3      	bne.n	8003006 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003094:	e049      	b.n	800312a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d119      	bne.n	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0210 	mvn.w	r2, #16
 80030ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e030      	b.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d8:	f7fe fd82 	bl	8001be0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d302      	bcc.n	80030ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11d      	bne.n	800312a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b40      	cmp	r3, #64	@ 0x40
 80030fa:	d016      	beq.n	800312a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e007      	b.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d1ae      	bne.n	8003096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003158:	d11b      	bne.n	8003192 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003162:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e267      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d075      	beq.n	80032aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031be:	4b88      	ldr	r3, [pc, #544]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d00c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ca:	4b85      	ldr	r3, [pc, #532]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d112      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4b82      	ldr	r3, [pc, #520]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e2:	d10b      	bne.n	80031fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	4b7e      	ldr	r3, [pc, #504]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d05b      	beq.n	80032a8 <HAL_RCC_OscConfig+0x108>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d157      	bne.n	80032a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e242      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x74>
 8003206:	4b76      	ldr	r3, [pc, #472]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a75      	ldr	r2, [pc, #468]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e01d      	b.n	8003250 <HAL_RCC_OscConfig+0xb0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b70      	ldr	r3, [pc, #448]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6f      	ldr	r2, [pc, #444]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6d      	ldr	r3, [pc, #436]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6c      	ldr	r2, [pc, #432]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0xb0>
 8003238:	4b69      	ldr	r3, [pc, #420]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a68      	ldr	r2, [pc, #416]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b66      	ldr	r3, [pc, #408]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a65      	ldr	r2, [pc, #404]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800324e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fcc2 	bl	8001be0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003260:	f7fe fcbe 	bl	8001be0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	@ 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e207      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0xc0>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fcae 	bl	8001be0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7fe fcaa 	bl	8001be0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	@ 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1f3      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	4b51      	ldr	r3, [pc, #324]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f0      	bne.n	8003288 <HAL_RCC_OscConfig+0xe8>
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032b6:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00b      	beq.n	80032da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d11c      	bne.n	8003308 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b44      	ldr	r3, [pc, #272]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d116      	bne.n	8003308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RCC_OscConfig+0x152>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1c7      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f2:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4937      	ldr	r1, [pc, #220]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e03a      	b.n	800337e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003310:	4b34      	ldr	r3, [pc, #208]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe fc63 	bl	8001be0 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7fe fc5f 	bl	8001be0 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1a8      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4925      	ldr	r1, [pc, #148]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 800334c:	4313      	orrs	r3, r2
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	e015      	b.n	800337e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_RCC_OscConfig+0x244>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fc42 	bl	8001be0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7fe fc3e 	bl	8001be0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e187      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d036      	beq.n	80033f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <HAL_RCC_OscConfig+0x248>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe fc22 	bl	8001be0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a0:	f7fe fc1e 	bl	8001be0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e167      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_OscConfig+0x240>)
 80033b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x200>
 80033be:	e01b      	b.n	80033f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCC_OscConfig+0x248>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7fe fc0b 	bl	8001be0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	e00e      	b.n	80033ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ce:	f7fe fc07 	bl	8001be0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d907      	bls.n	80033ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e150      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
 80033e0:	40023800 	.word	0x40023800
 80033e4:	42470000 	.word	0x42470000
 80033e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1ea      	bne.n	80033ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8097 	beq.w	8003534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b81      	ldr	r3, [pc, #516]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b7d      	ldr	r3, [pc, #500]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	4a7c      	ldr	r2, [pc, #496]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	@ 0x40
 8003426:	4b7a      	ldr	r3, [pc, #488]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b77      	ldr	r3, [pc, #476]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b74      	ldr	r3, [pc, #464]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a73      	ldr	r2, [pc, #460]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fe fbc7 	bl	8001be0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fe fbc3 	bl	8001be0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e10c      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCC_OscConfig+0x474>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x2ea>
 800347c:	4b64      	ldr	r3, [pc, #400]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003480:	4a63      	ldr	r2, [pc, #396]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6713      	str	r3, [r2, #112]	@ 0x70
 8003488:	e01c      	b.n	80034c4 <HAL_RCC_OscConfig+0x324>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x30c>
 8003492:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	4a5e      	ldr	r2, [pc, #376]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6713      	str	r3, [r2, #112]	@ 0x70
 800349e:	4b5c      	ldr	r3, [pc, #368]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0x324>
 80034ac:	4b58      	ldr	r3, [pc, #352]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b0:	4a57      	ldr	r2, [pc, #348]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b8:	4b55      	ldr	r3, [pc, #340]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034bc:	4a54      	ldr	r2, [pc, #336]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034be:	f023 0304 	bic.w	r3, r3, #4
 80034c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe fb88 	bl	8001be0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe fb84 	bl	8001be0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0cb      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	4b49      	ldr	r3, [pc, #292]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ee      	beq.n	80034d4 <HAL_RCC_OscConfig+0x334>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f8:	f7fe fb72 	bl	8001be0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fe fb6e 	bl	8001be0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e0b5      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ee      	bne.n	8003500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003528:	4b39      	ldr	r3, [pc, #228]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 800352e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a1 	beq.w	8003680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800353e:	4b34      	ldr	r3, [pc, #208]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b08      	cmp	r3, #8
 8003548:	d05c      	beq.n	8003604 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d141      	bne.n	80035d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_RCC_OscConfig+0x478>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fb42 	bl	8001be0 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fb3e 	bl	8001be0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e087      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	491b      	ldr	r1, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <HAL_RCC_OscConfig+0x478>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fe fb17 	bl	8001be0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fe fb13 	bl	8001be0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e05c      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x416>
 80035d4:	e054      	b.n	8003680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <HAL_RCC_OscConfig+0x478>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fb00 	bl	8001be0 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe fafc 	bl	8001be0 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e045      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_OscConfig+0x470>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x444>
 8003602:	e03d      	b.n	8003680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e038      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
 8003618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x4ec>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d028      	beq.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d121      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d11a      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0cc      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b68      	ldr	r3, [pc, #416]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d90c      	bls.n	80036cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b65      	ldr	r3, [pc, #404]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a58      	ldr	r2, [pc, #352]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d044      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d119      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d003      	beq.n	800374e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	2b03      	cmp	r3, #3
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e067      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4934      	ldr	r1, [pc, #208]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe fa2e 	bl	8001be0 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe fa2a 	bl	8001be0 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e04f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b25      	ldr	r3, [pc, #148]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d20c      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f821 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe f98e 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023c00 	.word	0x40023c00
 800384c:	40023800 	.word	0x40023800
 8003850:	08007a7c 	.word	0x08007a7c
 8003854:	20000000 	.word	0x20000000
 8003858:	20000004 	.word	0x20000004

0800385c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003860:	b094      	sub	sp, #80	@ 0x50
 8003862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003874:	4b79      	ldr	r3, [pc, #484]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d00d      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x40>
 8003880:	2b08      	cmp	r3, #8
 8003882:	f200 80e1 	bhi.w	8003a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x34>
 800388a:	2b04      	cmp	r3, #4
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x3a>
 800388e:	e0db      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4b73      	ldr	r3, [pc, #460]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003892:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003894:	e0db      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003896:	4b73      	ldr	r3, [pc, #460]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800389a:	e0d8      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d063      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	099b      	lsrs	r3, r3, #6
 80038b8:	2200      	movs	r2, #0
 80038ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c6:	2300      	movs	r3, #0
 80038c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038ce:	4622      	mov	r2, r4
 80038d0:	462b      	mov	r3, r5
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	0159      	lsls	r1, r3, #5
 80038dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e0:	0150      	lsls	r0, r2, #5
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4621      	mov	r1, r4
 80038e8:	1a51      	subs	r1, r2, r1
 80038ea:	6139      	str	r1, [r7, #16]
 80038ec:	4629      	mov	r1, r5
 80038ee:	eb63 0301 	sbc.w	r3, r3, r1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003900:	4659      	mov	r1, fp
 8003902:	018b      	lsls	r3, r1, #6
 8003904:	4651      	mov	r1, sl
 8003906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800390a:	4651      	mov	r1, sl
 800390c:	018a      	lsls	r2, r1, #6
 800390e:	4651      	mov	r1, sl
 8003910:	ebb2 0801 	subs.w	r8, r2, r1
 8003914:	4659      	mov	r1, fp
 8003916:	eb63 0901 	sbc.w	r9, r3, r1
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800392a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392e:	4690      	mov	r8, r2
 8003930:	4699      	mov	r9, r3
 8003932:	4623      	mov	r3, r4
 8003934:	eb18 0303 	adds.w	r3, r8, r3
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	462b      	mov	r3, r5
 800393c:	eb49 0303 	adc.w	r3, r9, r3
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800394e:	4629      	mov	r1, r5
 8003950:	024b      	lsls	r3, r1, #9
 8003952:	4621      	mov	r1, r4
 8003954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003958:	4621      	mov	r1, r4
 800395a:	024a      	lsls	r2, r1, #9
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800396c:	f7fd f974 	bl	8000c58 <__aeabi_uldivmod>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4613      	mov	r3, r2
 8003976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003978:	e058      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397a:	4b38      	ldr	r3, [pc, #224]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	099b      	lsrs	r3, r3, #6
 8003980:	2200      	movs	r2, #0
 8003982:	4618      	mov	r0, r3
 8003984:	4611      	mov	r1, r2
 8003986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003994:	4642      	mov	r2, r8
 8003996:	464b      	mov	r3, r9
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	0159      	lsls	r1, r3, #5
 80039a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a6:	0150      	lsls	r0, r2, #5
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4641      	mov	r1, r8
 80039ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80039b2:	4649      	mov	r1, r9
 80039b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039cc:	ebb2 040a 	subs.w	r4, r2, sl
 80039d0:	eb63 050b 	sbc.w	r5, r3, fp
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	00eb      	lsls	r3, r5, #3
 80039de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039e2:	00e2      	lsls	r2, r4, #3
 80039e4:	4614      	mov	r4, r2
 80039e6:	461d      	mov	r5, r3
 80039e8:	4643      	mov	r3, r8
 80039ea:	18e3      	adds	r3, r4, r3
 80039ec:	603b      	str	r3, [r7, #0]
 80039ee:	464b      	mov	r3, r9
 80039f0:	eb45 0303 	adc.w	r3, r5, r3
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a02:	4629      	mov	r1, r5
 8003a04:	028b      	lsls	r3, r1, #10
 8003a06:	4621      	mov	r1, r4
 8003a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	028a      	lsls	r2, r1, #10
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a16:	2200      	movs	r2, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	61fa      	str	r2, [r7, #28]
 8003a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a20:	f7fd f91a 	bl	8000c58 <__aeabi_uldivmod>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4613      	mov	r3, r2
 8003a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	3301      	adds	r3, #1
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3750      	adds	r7, #80	@ 0x50
 8003a54:	46bd      	mov	sp, r7
 8003a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	007a1200 	.word	0x007a1200

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4903      	ldr	r1, [pc, #12]	@ (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08007a8c 	.word	0x08007a8c

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd ff12 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 fc8a 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e044      	b.n	8003bea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b8a:	d013      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <HAL_TIM_Base_Start_IT+0xb4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	@ (8003c00 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a16      	ldr	r2, [pc, #88]	@ (8003c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d111      	bne.n	8003bd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b06      	cmp	r3, #6
 8003bc4:	d010      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	e007      	b.n	8003be8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40014000 	.word	0x40014000

08003c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f839 	bl	8003caa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fbd8 	bl	8004400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start_IT+0x28>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e022      	b.n	8003d2e <HAL_TIM_PWM_Start_IT+0x6e>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d109      	bne.n	8003d02 <HAL_TIM_PWM_Start_IT+0x42>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e015      	b.n	8003d2e <HAL_TIM_PWM_Start_IT+0x6e>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_PWM_Start_IT+0x5c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e008      	b.n	8003d2e <HAL_TIM_PWM_Start_IT+0x6e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	bf14      	ite	ne
 8003d28:	2301      	movne	r3, #1
 8003d2a:	2300      	moveq	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0b3      	b.n	8003e9e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start_IT+0x86>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_PWM_Start_IT+0xae>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start_IT+0x96>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_PWM_Start_IT+0xae>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_PWM_Start_IT+0xa6>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_PWM_Start_IT+0xae>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d841      	bhi.n	8003df8 <HAL_TIM_PWM_Start_IT+0x138>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <HAL_TIM_PWM_Start_IT+0xbc>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003df9 	.word	0x08003df9
 8003d84:	08003df9 	.word	0x08003df9
 8003d88:	08003df9 	.word	0x08003df9
 8003d8c:	08003dc3 	.word	0x08003dc3
 8003d90:	08003df9 	.word	0x08003df9
 8003d94:	08003df9 	.word	0x08003df9
 8003d98:	08003df9 	.word	0x08003df9
 8003d9c:	08003dd5 	.word	0x08003dd5
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003df9 	.word	0x08003df9
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003de7 	.word	0x08003de7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0202 	orr.w	r2, r2, #2
 8003dbe:	60da      	str	r2, [r3, #12]
      break;
 8003dc0:	e01d      	b.n	8003dfe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0204 	orr.w	r2, r2, #4
 8003dd0:	60da      	str	r2, [r3, #12]
      break;
 8003dd2:	e014      	b.n	8003dfe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0208 	orr.w	r2, r2, #8
 8003de2:	60da      	str	r2, [r3, #12]
      break;
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0210 	orr.w	r2, r2, #16
 8003df4:	60da      	str	r2, [r3, #12]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d14b      	bne.n	8003e9c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	6839      	ldr	r1, [r7, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fda9 	bl	8004964 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d018      	beq.n	8003e68 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3e:	d013      	beq.n	8003e68 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a19      	ldr	r2, [pc, #100]	@ (8003eac <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	@ (8003eb0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a16      	ldr	r2, [pc, #88]	@ (8003eb4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a15      	ldr	r2, [pc, #84]	@ (8003eb8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d111      	bne.n	8003e8c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d010      	beq.n	8003e9c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	e007      	b.n	8003e9c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40014000 	.word	0x40014000

08003ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01b      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0202 	mvn.w	r2, #2
 8003ef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa65 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa57 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fd fbe9 	bl	80016ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d020      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01b      	beq.n	8003f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0204 	mvn.w	r2, #4
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa3f 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa31 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fd fbc3 	bl	80016ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d020      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01b      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0208 	mvn.w	r2, #8
 8003f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa19 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa0b 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fd fb9d 	bl	80016ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0210 	mvn.w	r2, #16
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f9f3 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f9e5 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fd fb77 	bl	80016ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0201 	mvn.w	r2, #1
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f9c3 	bl	80043ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fd2a 	bl	8004aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9bd 	bl	80043ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0220 	mvn.w	r2, #32
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fcfc 	bl	8004a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0ae      	b.n	8004218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	f200 809f 	bhi.w	8004208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040ca:	a201      	add	r2, pc, #4	@ (adr r2, 80040d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	08004105 	.word	0x08004105
 80040d4:	08004209 	.word	0x08004209
 80040d8:	08004209 	.word	0x08004209
 80040dc:	08004209 	.word	0x08004209
 80040e0:	08004145 	.word	0x08004145
 80040e4:	08004209 	.word	0x08004209
 80040e8:	08004209 	.word	0x08004209
 80040ec:	08004209 	.word	0x08004209
 80040f0:	08004187 	.word	0x08004187
 80040f4:	08004209 	.word	0x08004209
 80040f8:	08004209 	.word	0x08004209
 80040fc:	08004209 	.word	0x08004209
 8004100:	080041c7 	.word	0x080041c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fa04 	bl	8004518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0208 	orr.w	r2, r2, #8
 800411e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6999      	ldr	r1, [r3, #24]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	619a      	str	r2, [r3, #24]
      break;
 8004142:	e064      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa4a 	bl	80045e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6999      	ldr	r1, [r3, #24]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	021a      	lsls	r2, r3, #8
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	619a      	str	r2, [r3, #24]
      break;
 8004184:	e043      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fa95 	bl	80046bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69da      	ldr	r2, [r3, #28]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0208 	orr.w	r2, r2, #8
 80041a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0204 	bic.w	r2, r2, #4
 80041b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69d9      	ldr	r1, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	61da      	str	r2, [r3, #28]
      break;
 80041c4:	e023      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fadf 	bl	8004790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69d9      	ldr	r1, [r3, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	021a      	lsls	r2, r3, #8
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	61da      	str	r2, [r3, #28]
      break;
 8004206:	e002      	b.n	800420e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
      break;
 800420c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_TIM_ConfigClockSource+0x1c>
 8004238:	2302      	movs	r3, #2
 800423a:	e0b4      	b.n	80043a6 <HAL_TIM_ConfigClockSource+0x186>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800425a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004274:	d03e      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427a:	f200 8087 	bhi.w	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	f000 8086 	beq.w	8004392 <HAL_TIM_ConfigClockSource+0x172>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800428a:	d87f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b70      	cmp	r3, #112	@ 0x70
 800428e:	d01a      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004290:	2b70      	cmp	r3, #112	@ 0x70
 8004292:	d87b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b60      	cmp	r3, #96	@ 0x60
 8004296:	d050      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x11a>
 8004298:	2b60      	cmp	r3, #96	@ 0x60
 800429a:	d877      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b50      	cmp	r3, #80	@ 0x50
 800429e:	d03c      	beq.n	800431a <HAL_TIM_ConfigClockSource+0xfa>
 80042a0:	2b50      	cmp	r3, #80	@ 0x50
 80042a2:	d873      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d058      	beq.n	800435a <HAL_TIM_ConfigClockSource+0x13a>
 80042a8:	2b40      	cmp	r3, #64	@ 0x40
 80042aa:	d86f      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b30      	cmp	r3, #48	@ 0x30
 80042ae:	d064      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b30      	cmp	r3, #48	@ 0x30
 80042b2:	d86b      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d060      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d867      	bhi.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d05a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	e062      	b.n	800438c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	f000 fb25 	bl	8004924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
      break;
 80042f2:	e04f      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	f000 fb0e 	bl	8004924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004316:	609a      	str	r2, [r3, #8]
      break;
 8004318:	e03c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	f000 fa82 	bl	8004830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2150      	movs	r1, #80	@ 0x50
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fadb 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 8004338:	e02c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004346:	461a      	mov	r2, r3
 8004348:	f000 faa1 	bl	800488e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2160      	movs	r1, #96	@ 0x60
 8004352:	4618      	mov	r0, r3
 8004354:	f000 facb 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 8004358:	e01c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fa62 	bl	8004830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2140      	movs	r1, #64	@ 0x40
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fabb 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 8004378:	e00c      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fab2 	bl	80048ee <TIM_ITRx_SetConfig>
      break;
 800438a:	e003      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
      break;
 8004390:	e000      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a3a      	ldr	r2, [pc, #232]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a37      	ldr	r2, [pc, #220]	@ (8004500 <TIM_Base_SetConfig+0x100>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a36      	ldr	r2, [pc, #216]	@ (8004504 <TIM_Base_SetConfig+0x104>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x38>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a35      	ldr	r2, [pc, #212]	@ (8004508 <TIM_Base_SetConfig+0x108>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2b      	ldr	r2, [pc, #172]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01b      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d017      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a28      	ldr	r2, [pc, #160]	@ (8004500 <TIM_Base_SetConfig+0x100>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a27      	ldr	r2, [pc, #156]	@ (8004504 <TIM_Base_SetConfig+0x104>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00f      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <TIM_Base_SetConfig+0x108>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a25      	ldr	r2, [pc, #148]	@ (800450c <TIM_Base_SetConfig+0x10c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a24      	ldr	r2, [pc, #144]	@ (8004510 <TIM_Base_SetConfig+0x110>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a23      	ldr	r2, [pc, #140]	@ (8004514 <TIM_Base_SetConfig+0x114>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a0e      	ldr	r2, [pc, #56]	@ (80044fc <TIM_Base_SetConfig+0xfc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d105      	bne.n	80044ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f023 0201 	bic.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]
  }
}
 80044ee:	bf00      	nop
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800
 8004508:	40000c00 	.word	0x40000c00
 800450c:	40014000 	.word	0x40014000
 8004510:	40014400 	.word	0x40014400
 8004514:	40014800 	.word	0x40014800

08004518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 0201 	bic.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f023 0302 	bic.w	r3, r3, #2
 8004560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <TIM_OC1_SetConfig+0xc8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10c      	bne.n	800458e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0308 	bic.w	r3, r3, #8
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <TIM_OC1_SetConfig+0xc8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d111      	bne.n	80045ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40010000 	.word	0x40010000

080045e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f023 0210 	bic.w	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800461a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0320 	bic.w	r3, r3, #32
 800462e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a1e      	ldr	r2, [pc, #120]	@ (80046b8 <TIM_OC2_SetConfig+0xd4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10d      	bne.n	8004660 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a15      	ldr	r2, [pc, #84]	@ (80046b8 <TIM_OC2_SetConfig+0xd4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d113      	bne.n	8004690 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800466e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000

080046bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <TIM_OC3_SetConfig+0xd0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d10d      	bne.n	8004736 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a14      	ldr	r2, [pc, #80]	@ (800478c <TIM_OC3_SetConfig+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d113      	bne.n	8004766 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	bf00      	nop
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	40010000 	.word	0x40010000

08004790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a10      	ldr	r2, [pc, #64]	@ (800482c <TIM_OC4_SetConfig+0x9c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d109      	bne.n	8004804 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	019b      	lsls	r3, r3, #6
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40010000 	.word	0x40010000

08004830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800485a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 030a 	bic.w	r3, r3, #10
 800486c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b087      	sub	sp, #28
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	f023 0210 	bic.w	r2, r3, #16
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	031b      	lsls	r3, r3, #12
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	f043 0307 	orr.w	r3, r3, #7
 8004910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	609a      	str	r2, [r3, #8]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800493e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	021a      	lsls	r2, r3, #8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	431a      	orrs	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	609a      	str	r2, [r3, #8]
}
 8004958:	bf00      	nop
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2201      	movs	r2, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	43db      	mvns	r3, r3
 8004986:	401a      	ands	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	fa01 f303 	lsl.w	r3, r1, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e050      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1c      	ldr	r2, [pc, #112]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d018      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a14:	d013      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a16      	ldr	r2, [pc, #88]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a15      	ldr	r2, [pc, #84]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a13      	ldr	r2, [pc, #76]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40014000 	.word	0x40014000

08004a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <findslot>:
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <findslot+0x2c>)
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	4604      	mov	r4, r0
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	b118      	cbz	r0, 8004ac6 <findslot+0x12>
 8004abe:	6a03      	ldr	r3, [r0, #32]
 8004ac0:	b90b      	cbnz	r3, 8004ac6 <findslot+0x12>
 8004ac2:	f000 ff71 	bl	80059a8 <__sinit>
 8004ac6:	2c13      	cmp	r4, #19
 8004ac8:	d807      	bhi.n	8004ada <findslot+0x26>
 8004aca:	4806      	ldr	r0, [pc, #24]	@ (8004ae4 <findslot+0x30>)
 8004acc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004ad0:	3201      	adds	r2, #1
 8004ad2:	d002      	beq.n	8004ada <findslot+0x26>
 8004ad4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	2000      	movs	r0, #0
 8004adc:	e7fc      	b.n	8004ad8 <findslot+0x24>
 8004ade:	bf00      	nop
 8004ae0:	20000020 	.word	0x20000020
 8004ae4:	200002b4 	.word	0x200002b4

08004ae8 <error>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	4604      	mov	r4, r0
 8004aec:	f001 f92c 	bl	8005d48 <__errno>
 8004af0:	2613      	movs	r6, #19
 8004af2:	4605      	mov	r5, r0
 8004af4:	2700      	movs	r7, #0
 8004af6:	4630      	mov	r0, r6
 8004af8:	4639      	mov	r1, r7
 8004afa:	beab      	bkpt	0x00ab
 8004afc:	4606      	mov	r6, r0
 8004afe:	602e      	str	r6, [r5, #0]
 8004b00:	4620      	mov	r0, r4
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b04 <checkerror>:
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d101      	bne.n	8004b0c <checkerror+0x8>
 8004b08:	f7ff bfee 	b.w	8004ae8 <error>
 8004b0c:	4770      	bx	lr

08004b0e <_swiread>:
 8004b0e:	b530      	push	{r4, r5, lr}
 8004b10:	b085      	sub	sp, #20
 8004b12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004b16:	9203      	str	r2, [sp, #12]
 8004b18:	2406      	movs	r4, #6
 8004b1a:	ad01      	add	r5, sp, #4
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	beab      	bkpt	0x00ab
 8004b22:	4604      	mov	r4, r0
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff ffed 	bl	8004b04 <checkerror>
 8004b2a:	b005      	add	sp, #20
 8004b2c:	bd30      	pop	{r4, r5, pc}

08004b2e <_read>:
 8004b2e:	b570      	push	{r4, r5, r6, lr}
 8004b30:	460e      	mov	r6, r1
 8004b32:	4614      	mov	r4, r2
 8004b34:	f7ff ffbe 	bl	8004ab4 <findslot>
 8004b38:	4605      	mov	r5, r0
 8004b3a:	b930      	cbnz	r0, 8004b4a <_read+0x1c>
 8004b3c:	f001 f904 	bl	8005d48 <__errno>
 8004b40:	2309      	movs	r3, #9
 8004b42:	6003      	str	r3, [r0, #0]
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
 8004b4a:	6800      	ldr	r0, [r0, #0]
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	4631      	mov	r1, r6
 8004b50:	f7ff ffdd 	bl	8004b0e <_swiread>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d0f5      	beq.n	8004b44 <_read+0x16>
 8004b58:	686b      	ldr	r3, [r5, #4]
 8004b5a:	1a20      	subs	r0, r4, r0
 8004b5c:	4403      	add	r3, r0
 8004b5e:	606b      	str	r3, [r5, #4]
 8004b60:	e7f2      	b.n	8004b48 <_read+0x1a>

08004b62 <_swilseek>:
 8004b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b64:	460c      	mov	r4, r1
 8004b66:	4616      	mov	r6, r2
 8004b68:	f7ff ffa4 	bl	8004ab4 <findslot>
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	b940      	cbnz	r0, 8004b82 <_swilseek+0x20>
 8004b70:	f001 f8ea 	bl	8005d48 <__errno>
 8004b74:	2309      	movs	r3, #9
 8004b76:	6003      	str	r3, [r0, #0]
 8004b78:	f04f 34ff 	mov.w	r4, #4294967295
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	b003      	add	sp, #12
 8004b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b82:	2e02      	cmp	r6, #2
 8004b84:	d903      	bls.n	8004b8e <_swilseek+0x2c>
 8004b86:	f001 f8df 	bl	8005d48 <__errno>
 8004b8a:	2316      	movs	r3, #22
 8004b8c:	e7f3      	b.n	8004b76 <_swilseek+0x14>
 8004b8e:	2e01      	cmp	r6, #1
 8004b90:	d112      	bne.n	8004bb8 <_swilseek+0x56>
 8004b92:	6843      	ldr	r3, [r0, #4]
 8004b94:	18e4      	adds	r4, r4, r3
 8004b96:	d4f6      	bmi.n	8004b86 <_swilseek+0x24>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	260a      	movs	r6, #10
 8004b9c:	e9cd 3400 	strd	r3, r4, [sp]
 8004ba0:	466f      	mov	r7, sp
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	beab      	bkpt	0x00ab
 8004ba8:	4606      	mov	r6, r0
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7ff ffaa 	bl	8004b04 <checkerror>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	dbe1      	blt.n	8004b78 <_swilseek+0x16>
 8004bb4:	606c      	str	r4, [r5, #4]
 8004bb6:	e7e1      	b.n	8004b7c <_swilseek+0x1a>
 8004bb8:	2e02      	cmp	r6, #2
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	d1ec      	bne.n	8004b98 <_swilseek+0x36>
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	260c      	movs	r6, #12
 8004bc2:	466f      	mov	r7, sp
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	beab      	bkpt	0x00ab
 8004bca:	4606      	mov	r6, r0
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7ff ff99 	bl	8004b04 <checkerror>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d0d0      	beq.n	8004b78 <_swilseek+0x16>
 8004bd6:	4404      	add	r4, r0
 8004bd8:	e7de      	b.n	8004b98 <_swilseek+0x36>

08004bda <_lseek>:
 8004bda:	f7ff bfc2 	b.w	8004b62 <_swilseek>

08004bde <_swiwrite>:
 8004bde:	b530      	push	{r4, r5, lr}
 8004be0:	b085      	sub	sp, #20
 8004be2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004be6:	9203      	str	r2, [sp, #12]
 8004be8:	2405      	movs	r4, #5
 8004bea:	ad01      	add	r5, sp, #4
 8004bec:	4620      	mov	r0, r4
 8004bee:	4629      	mov	r1, r5
 8004bf0:	beab      	bkpt	0x00ab
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff ff85 	bl	8004b04 <checkerror>
 8004bfa:	b005      	add	sp, #20
 8004bfc:	bd30      	pop	{r4, r5, pc}

08004bfe <_write>:
 8004bfe:	b570      	push	{r4, r5, r6, lr}
 8004c00:	460e      	mov	r6, r1
 8004c02:	4615      	mov	r5, r2
 8004c04:	f7ff ff56 	bl	8004ab4 <findslot>
 8004c08:	4604      	mov	r4, r0
 8004c0a:	b930      	cbnz	r0, 8004c1a <_write+0x1c>
 8004c0c:	f001 f89c 	bl	8005d48 <__errno>
 8004c10:	2309      	movs	r3, #9
 8004c12:	6003      	str	r3, [r0, #0]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	6800      	ldr	r0, [r0, #0]
 8004c1c:	462a      	mov	r2, r5
 8004c1e:	4631      	mov	r1, r6
 8004c20:	f7ff ffdd 	bl	8004bde <_swiwrite>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	dbf5      	blt.n	8004c14 <_write+0x16>
 8004c28:	6862      	ldr	r2, [r4, #4]
 8004c2a:	1ae8      	subs	r0, r5, r3
 8004c2c:	4402      	add	r2, r0
 8004c2e:	42ab      	cmp	r3, r5
 8004c30:	6062      	str	r2, [r4, #4]
 8004c32:	d1f1      	bne.n	8004c18 <_write+0x1a>
 8004c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f7ff bf55 	b.w	8004ae8 <error>

08004c3e <_swiclose>:
 8004c3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c40:	2402      	movs	r4, #2
 8004c42:	9001      	str	r0, [sp, #4]
 8004c44:	ad01      	add	r5, sp, #4
 8004c46:	4620      	mov	r0, r4
 8004c48:	4629      	mov	r1, r5
 8004c4a:	beab      	bkpt	0x00ab
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f7ff ff58 	bl	8004b04 <checkerror>
 8004c54:	b003      	add	sp, #12
 8004c56:	bd30      	pop	{r4, r5, pc}

08004c58 <_close>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	f7ff ff2a 	bl	8004ab4 <findslot>
 8004c60:	4604      	mov	r4, r0
 8004c62:	b930      	cbnz	r0, 8004c72 <_close+0x1a>
 8004c64:	f001 f870 	bl	8005d48 <__errno>
 8004c68:	2309      	movs	r3, #9
 8004c6a:	6003      	str	r3, [r0, #0]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
 8004c72:	3d01      	subs	r5, #1
 8004c74:	2d01      	cmp	r5, #1
 8004c76:	d809      	bhi.n	8004c8c <_close+0x34>
 8004c78:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <_close+0x40>)
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d104      	bne.n	8004c8c <_close+0x34>
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e7f1      	b.n	8004c70 <_close+0x18>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	f7ff ffd6 	bl	8004c3e <_swiclose>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d0f5      	beq.n	8004c82 <_close+0x2a>
 8004c96:	e7eb      	b.n	8004c70 <_close+0x18>
 8004c98:	200002b4 	.word	0x200002b4

08004c9c <_getpid>:
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	4770      	bx	lr

08004ca0 <_swistat>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	f7ff ff06 	bl	8004ab4 <findslot>
 8004ca8:	4605      	mov	r5, r0
 8004caa:	b930      	cbnz	r0, 8004cba <_swistat+0x1a>
 8004cac:	f001 f84c 	bl	8005d48 <__errno>
 8004cb0:	2309      	movs	r3, #9
 8004cb2:	6003      	str	r3, [r0, #0]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cc0:	6063      	str	r3, [r4, #4]
 8004cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004cc8:	260c      	movs	r6, #12
 8004cca:	4630      	mov	r0, r6
 8004ccc:	4629      	mov	r1, r5
 8004cce:	beab      	bkpt	0x00ab
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f7ff ff16 	bl	8004b04 <checkerror>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d0eb      	beq.n	8004cb4 <_swistat+0x14>
 8004cdc:	6120      	str	r0, [r4, #16]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e7ea      	b.n	8004cb8 <_swistat+0x18>

08004ce2 <_fstat>:
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4604      	mov	r4, r0
 8004cea:	2258      	movs	r2, #88	@ 0x58
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 ffd9 	bl	8005ca4 <memset>
 8004cf2:	4601      	mov	r1, r0
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cfa:	f7ff bfd1 	b.w	8004ca0 <_swistat>

08004cfe <_stat>:
 8004cfe:	b538      	push	{r3, r4, r5, lr}
 8004d00:	460d      	mov	r5, r1
 8004d02:	4604      	mov	r4, r0
 8004d04:	2258      	movs	r2, #88	@ 0x58
 8004d06:	2100      	movs	r1, #0
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f000 ffcb 	bl	8005ca4 <memset>
 8004d0e:	4620      	mov	r0, r4
 8004d10:	2100      	movs	r1, #0
 8004d12:	f000 f811 	bl	8004d38 <_swiopen>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	4604      	mov	r4, r0
 8004d1a:	d00b      	beq.n	8004d34 <_stat+0x36>
 8004d1c:	686b      	ldr	r3, [r5, #4]
 8004d1e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d22:	606b      	str	r3, [r5, #4]
 8004d24:	4629      	mov	r1, r5
 8004d26:	f7ff ffbb 	bl	8004ca0 <_swistat>
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7ff ff93 	bl	8004c58 <_close>
 8004d32:	462c      	mov	r4, r5
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd38      	pop	{r3, r4, r5, pc}

08004d38 <_swiopen>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	4f29      	ldr	r7, [pc, #164]	@ (8004de4 <_swiopen+0xac>)
 8004d3e:	b096      	sub	sp, #88	@ 0x58
 8004d40:	4682      	mov	sl, r0
 8004d42:	460e      	mov	r6, r1
 8004d44:	2400      	movs	r4, #0
 8004d46:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004d50:	d00c      	beq.n	8004d6c <_swiopen+0x34>
 8004d52:	3401      	adds	r4, #1
 8004d54:	2c14      	cmp	r4, #20
 8004d56:	d1f6      	bne.n	8004d46 <_swiopen+0xe>
 8004d58:	f000 fff6 	bl	8005d48 <__errno>
 8004d5c:	2318      	movs	r3, #24
 8004d5e:	6003      	str	r3, [r0, #0]
 8004d60:	f04f 34ff 	mov.w	r4, #4294967295
 8004d64:	4620      	mov	r0, r4
 8004d66:	b016      	add	sp, #88	@ 0x58
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004d70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d74:	46e9      	mov	r9, sp
 8004d76:	d109      	bne.n	8004d8c <_swiopen+0x54>
 8004d78:	4649      	mov	r1, r9
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	f7ff ffbf 	bl	8004cfe <_stat>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d003      	beq.n	8004d8c <_swiopen+0x54>
 8004d84:	f000 ffe0 	bl	8005d48 <__errno>
 8004d88:	2311      	movs	r3, #17
 8004d8a:	e7e8      	b.n	8004d5e <_swiopen+0x26>
 8004d8c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004d90:	f240 6301 	movw	r3, #1537	@ 0x601
 8004d94:	07b2      	lsls	r2, r6, #30
 8004d96:	bf48      	it	mi
 8004d98:	f045 0502 	orrmi.w	r5, r5, #2
 8004d9c:	421e      	tst	r6, r3
 8004d9e:	bf18      	it	ne
 8004da0:	f045 0504 	orrne.w	r5, r5, #4
 8004da4:	0733      	lsls	r3, r6, #28
 8004da6:	bf48      	it	mi
 8004da8:	f025 0504 	bicmi.w	r5, r5, #4
 8004dac:	4650      	mov	r0, sl
 8004dae:	bf48      	it	mi
 8004db0:	f045 0508 	orrmi.w	r5, r5, #8
 8004db4:	f8cd a000 	str.w	sl, [sp]
 8004db8:	f7fb fa62 	bl	8000280 <strlen>
 8004dbc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004dc0:	2501      	movs	r5, #1
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	beab      	bkpt	0x00ab
 8004dc8:	4605      	mov	r5, r0
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	db05      	blt.n	8004dda <_swiopen+0xa2>
 8004dce:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8004dd2:	4447      	add	r7, r8
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	607b      	str	r3, [r7, #4]
 8004dd8:	e7c4      	b.n	8004d64 <_swiopen+0x2c>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f7ff fe84 	bl	8004ae8 <error>
 8004de0:	4604      	mov	r4, r0
 8004de2:	e7bf      	b.n	8004d64 <_swiopen+0x2c>
 8004de4:	200002b4 	.word	0x200002b4

08004de8 <_get_semihosting_exts>:
 8004de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004dec:	4606      	mov	r6, r0
 8004dee:	460f      	mov	r7, r1
 8004df0:	4829      	ldr	r0, [pc, #164]	@ (8004e98 <_get_semihosting_exts+0xb0>)
 8004df2:	2100      	movs	r1, #0
 8004df4:	4615      	mov	r5, r2
 8004df6:	f7ff ff9f 	bl	8004d38 <_swiopen>
 8004dfa:	462a      	mov	r2, r5
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 ff4f 	bl	8005ca4 <memset>
 8004e06:	1c63      	adds	r3, r4, #1
 8004e08:	d014      	beq.n	8004e34 <_get_semihosting_exts+0x4c>
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f7ff fe52 	bl	8004ab4 <findslot>
 8004e10:	f04f 080c 	mov.w	r8, #12
 8004e14:	4681      	mov	r9, r0
 8004e16:	4640      	mov	r0, r8
 8004e18:	4649      	mov	r1, r9
 8004e1a:	beab      	bkpt	0x00ab
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	4640      	mov	r0, r8
 8004e20:	f7ff fe70 	bl	8004b04 <checkerror>
 8004e24:	2803      	cmp	r0, #3
 8004e26:	dd02      	ble.n	8004e2e <_get_semihosting_exts+0x46>
 8004e28:	1ec3      	subs	r3, r0, #3
 8004e2a:	42ab      	cmp	r3, r5
 8004e2c:	dc07      	bgt.n	8004e3e <_get_semihosting_exts+0x56>
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7ff ff12 	bl	8004c58 <_close>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b003      	add	sp, #12
 8004e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e3e:	2204      	movs	r2, #4
 8004e40:	eb0d 0102 	add.w	r1, sp, r2
 8004e44:	4620      	mov	r0, r4
 8004e46:	f7ff fe72 	bl	8004b2e <_read>
 8004e4a:	2803      	cmp	r0, #3
 8004e4c:	ddef      	ble.n	8004e2e <_get_semihosting_exts+0x46>
 8004e4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004e52:	2b53      	cmp	r3, #83	@ 0x53
 8004e54:	d1eb      	bne.n	8004e2e <_get_semihosting_exts+0x46>
 8004e56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e5a:	2b48      	cmp	r3, #72	@ 0x48
 8004e5c:	d1e7      	bne.n	8004e2e <_get_semihosting_exts+0x46>
 8004e5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004e62:	2b46      	cmp	r3, #70	@ 0x46
 8004e64:	d1e3      	bne.n	8004e2e <_get_semihosting_exts+0x46>
 8004e66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e6a:	2b42      	cmp	r3, #66	@ 0x42
 8004e6c:	d1df      	bne.n	8004e2e <_get_semihosting_exts+0x46>
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4639      	mov	r1, r7
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff fe75 	bl	8004b62 <_swilseek>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	dbd8      	blt.n	8004e2e <_get_semihosting_exts+0x46>
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7ff fe54 	bl	8004b2e <_read>
 8004e86:	4605      	mov	r5, r0
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f7ff fee5 	bl	8004c58 <_close>
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f7ff fe38 	bl	8004b04 <checkerror>
 8004e94:	e7d0      	b.n	8004e38 <_get_semihosting_exts+0x50>
 8004e96:	bf00      	nop
 8004e98:	08007a94 	.word	0x08007a94

08004e9c <initialise_semihosting_exts>:
 8004e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e9e:	4d0a      	ldr	r5, [pc, #40]	@ (8004ec8 <initialise_semihosting_exts+0x2c>)
 8004ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8004ecc <initialise_semihosting_exts+0x30>)
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	a801      	add	r0, sp, #4
 8004ea8:	6029      	str	r1, [r5, #0]
 8004eaa:	6022      	str	r2, [r4, #0]
 8004eac:	f7ff ff9c 	bl	8004de8 <_get_semihosting_exts>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	dd07      	ble.n	8004ec4 <initialise_semihosting_exts+0x28>
 8004eb4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004eb8:	f003 0201 	and.w	r2, r3, #1
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	b003      	add	sp, #12
 8004ec6:	bd30      	pop	{r4, r5, pc}
 8004ec8:	20000010 	.word	0x20000010
 8004ecc:	2000000c 	.word	0x2000000c

08004ed0 <_has_ext_stdout_stderr>:
 8004ed0:	b510      	push	{r4, lr}
 8004ed2:	4c04      	ldr	r4, [pc, #16]	@ (8004ee4 <_has_ext_stdout_stderr+0x14>)
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da01      	bge.n	8004ede <_has_ext_stdout_stderr+0xe>
 8004eda:	f7ff ffdf 	bl	8004e9c <initialise_semihosting_exts>
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	bf00      	nop
 8004ee4:	2000000c 	.word	0x2000000c

08004ee8 <initialise_monitor_handles>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	b085      	sub	sp, #20
 8004eee:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8004fa0 <initialise_monitor_handles+0xb8>
 8004ef2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	2400      	movs	r4, #0
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	af01      	add	r7, sp, #4
 8004efe:	9402      	str	r4, [sp, #8]
 8004f00:	2501      	movs	r5, #1
 8004f02:	4628      	mov	r0, r5
 8004f04:	4639      	mov	r1, r7
 8004f06:	beab      	bkpt	0x00ab
 8004f08:	4605      	mov	r5, r0
 8004f0a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004fa4 <initialise_monitor_handles+0xbc>
 8004f0e:	4623      	mov	r3, r4
 8004f10:	4c20      	ldr	r4, [pc, #128]	@ (8004f94 <initialise_monitor_handles+0xac>)
 8004f12:	f8c8 5000 	str.w	r5, [r8]
 8004f16:	f04f 32ff 	mov.w	r2, #4294967295
 8004f1a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	2b14      	cmp	r3, #20
 8004f22:	d1fa      	bne.n	8004f1a <initialise_monitor_handles+0x32>
 8004f24:	f7ff ffd4 	bl	8004ed0 <_has_ext_stdout_stderr>
 8004f28:	4d1b      	ldr	r5, [pc, #108]	@ (8004f98 <initialise_monitor_handles+0xb0>)
 8004f2a:	b1d0      	cbz	r0, 8004f62 <initialise_monitor_handles+0x7a>
 8004f2c:	f04f 0a03 	mov.w	sl, #3
 8004f30:	2304      	movs	r3, #4
 8004f32:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f36:	2601      	movs	r6, #1
 8004f38:	f8cd a00c 	str.w	sl, [sp, #12]
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	beab      	bkpt	0x00ab
 8004f44:	4683      	mov	fp, r0
 8004f46:	4b15      	ldr	r3, [pc, #84]	@ (8004f9c <initialise_monitor_handles+0xb4>)
 8004f48:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f4c:	f8c3 b000 	str.w	fp, [r3]
 8004f50:	2308      	movs	r3, #8
 8004f52:	f8cd a00c 	str.w	sl, [sp, #12]
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	beab      	bkpt	0x00ab
 8004f5e:	4606      	mov	r6, r0
 8004f60:	602e      	str	r6, [r5, #0]
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	bf02      	ittt	eq
 8004f68:	4b0c      	ldreq	r3, [pc, #48]	@ (8004f9c <initialise_monitor_handles+0xb4>)
 8004f6a:	681b      	ldreq	r3, [r3, #0]
 8004f6c:	602b      	streq	r3, [r5, #0]
 8004f6e:	2600      	movs	r6, #0
 8004f70:	f8d8 3000 	ldr.w	r3, [r8]
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	6066      	str	r6, [r4, #4]
 8004f78:	f7ff ffaa 	bl	8004ed0 <_has_ext_stdout_stderr>
 8004f7c:	b130      	cbz	r0, 8004f8c <initialise_monitor_handles+0xa4>
 8004f7e:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <initialise_monitor_handles+0xb4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004f86:	682b      	ldr	r3, [r5, #0]
 8004f88:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004f8c:	b005      	add	sp, #20
 8004f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	200002b4 	.word	0x200002b4
 8004f98:	200002a8 	.word	0x200002a8
 8004f9c:	200002ac 	.word	0x200002ac
 8004fa0:	08007aaa 	.word	0x08007aaa
 8004fa4:	200002b0 	.word	0x200002b0

08004fa8 <_isatty>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	f7ff fd83 	bl	8004ab4 <findslot>
 8004fae:	2409      	movs	r4, #9
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	b920      	cbnz	r0, 8004fbe <_isatty+0x16>
 8004fb4:	f000 fec8 	bl	8005d48 <__errno>
 8004fb8:	6004      	str	r4, [r0, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	beab      	bkpt	0x00ab
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	2c01      	cmp	r4, #1
 8004fc8:	4620      	mov	r0, r4
 8004fca:	d0f7      	beq.n	8004fbc <_isatty+0x14>
 8004fcc:	f000 febc 	bl	8005d48 <__errno>
 8004fd0:	2513      	movs	r5, #19
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	4631      	mov	r1, r6
 8004fda:	beab      	bkpt	0x00ab
 8004fdc:	4605      	mov	r5, r0
 8004fde:	6025      	str	r5, [r4, #0]
 8004fe0:	e7eb      	b.n	8004fba <_isatty+0x12>

08004fe2 <__cvt>:
 8004fe2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe6:	ec57 6b10 	vmov	r6, r7, d0
 8004fea:	2f00      	cmp	r7, #0
 8004fec:	460c      	mov	r4, r1
 8004fee:	4619      	mov	r1, r3
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	bfbb      	ittet	lt
 8004ff4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ff8:	461f      	movlt	r7, r3
 8004ffa:	2300      	movge	r3, #0
 8004ffc:	232d      	movlt	r3, #45	@ 0x2d
 8004ffe:	700b      	strb	r3, [r1, #0]
 8005000:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005002:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005006:	4691      	mov	r9, r2
 8005008:	f023 0820 	bic.w	r8, r3, #32
 800500c:	bfbc      	itt	lt
 800500e:	4632      	movlt	r2, r6
 8005010:	4616      	movlt	r6, r2
 8005012:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005016:	d005      	beq.n	8005024 <__cvt+0x42>
 8005018:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800501c:	d100      	bne.n	8005020 <__cvt+0x3e>
 800501e:	3401      	adds	r4, #1
 8005020:	2102      	movs	r1, #2
 8005022:	e000      	b.n	8005026 <__cvt+0x44>
 8005024:	2103      	movs	r1, #3
 8005026:	ab03      	add	r3, sp, #12
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	ab02      	add	r3, sp, #8
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	ec47 6b10 	vmov	d0, r6, r7
 8005032:	4653      	mov	r3, sl
 8005034:	4622      	mov	r2, r4
 8005036:	f000 ff3f 	bl	8005eb8 <_dtoa_r>
 800503a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800503e:	4605      	mov	r5, r0
 8005040:	d119      	bne.n	8005076 <__cvt+0x94>
 8005042:	f019 0f01 	tst.w	r9, #1
 8005046:	d00e      	beq.n	8005066 <__cvt+0x84>
 8005048:	eb00 0904 	add.w	r9, r0, r4
 800504c:	2200      	movs	r2, #0
 800504e:	2300      	movs	r3, #0
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005058:	b108      	cbz	r0, 800505e <__cvt+0x7c>
 800505a:	f8cd 900c 	str.w	r9, [sp, #12]
 800505e:	2230      	movs	r2, #48	@ 0x30
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	454b      	cmp	r3, r9
 8005064:	d31e      	bcc.n	80050a4 <__cvt+0xc2>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800506a:	1b5b      	subs	r3, r3, r5
 800506c:	4628      	mov	r0, r5
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	b004      	add	sp, #16
 8005072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005076:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800507a:	eb00 0904 	add.w	r9, r0, r4
 800507e:	d1e5      	bne.n	800504c <__cvt+0x6a>
 8005080:	7803      	ldrb	r3, [r0, #0]
 8005082:	2b30      	cmp	r3, #48	@ 0x30
 8005084:	d10a      	bne.n	800509c <__cvt+0xba>
 8005086:	2200      	movs	r2, #0
 8005088:	2300      	movs	r3, #0
 800508a:	4630      	mov	r0, r6
 800508c:	4639      	mov	r1, r7
 800508e:	f7fb fd23 	bl	8000ad8 <__aeabi_dcmpeq>
 8005092:	b918      	cbnz	r0, 800509c <__cvt+0xba>
 8005094:	f1c4 0401 	rsb	r4, r4, #1
 8005098:	f8ca 4000 	str.w	r4, [sl]
 800509c:	f8da 3000 	ldr.w	r3, [sl]
 80050a0:	4499      	add	r9, r3
 80050a2:	e7d3      	b.n	800504c <__cvt+0x6a>
 80050a4:	1c59      	adds	r1, r3, #1
 80050a6:	9103      	str	r1, [sp, #12]
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e7d9      	b.n	8005060 <__cvt+0x7e>

080050ac <__exponent>:
 80050ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ae:	2900      	cmp	r1, #0
 80050b0:	bfba      	itte	lt
 80050b2:	4249      	neglt	r1, r1
 80050b4:	232d      	movlt	r3, #45	@ 0x2d
 80050b6:	232b      	movge	r3, #43	@ 0x2b
 80050b8:	2909      	cmp	r1, #9
 80050ba:	7002      	strb	r2, [r0, #0]
 80050bc:	7043      	strb	r3, [r0, #1]
 80050be:	dd29      	ble.n	8005114 <__exponent+0x68>
 80050c0:	f10d 0307 	add.w	r3, sp, #7
 80050c4:	461d      	mov	r5, r3
 80050c6:	270a      	movs	r7, #10
 80050c8:	461a      	mov	r2, r3
 80050ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80050ce:	fb07 1416 	mls	r4, r7, r6, r1
 80050d2:	3430      	adds	r4, #48	@ 0x30
 80050d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050d8:	460c      	mov	r4, r1
 80050da:	2c63      	cmp	r4, #99	@ 0x63
 80050dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80050e0:	4631      	mov	r1, r6
 80050e2:	dcf1      	bgt.n	80050c8 <__exponent+0x1c>
 80050e4:	3130      	adds	r1, #48	@ 0x30
 80050e6:	1e94      	subs	r4, r2, #2
 80050e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050ec:	1c41      	adds	r1, r0, #1
 80050ee:	4623      	mov	r3, r4
 80050f0:	42ab      	cmp	r3, r5
 80050f2:	d30a      	bcc.n	800510a <__exponent+0x5e>
 80050f4:	f10d 0309 	add.w	r3, sp, #9
 80050f8:	1a9b      	subs	r3, r3, r2
 80050fa:	42ac      	cmp	r4, r5
 80050fc:	bf88      	it	hi
 80050fe:	2300      	movhi	r3, #0
 8005100:	3302      	adds	r3, #2
 8005102:	4403      	add	r3, r0
 8005104:	1a18      	subs	r0, r3, r0
 8005106:	b003      	add	sp, #12
 8005108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800510a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800510e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005112:	e7ed      	b.n	80050f0 <__exponent+0x44>
 8005114:	2330      	movs	r3, #48	@ 0x30
 8005116:	3130      	adds	r1, #48	@ 0x30
 8005118:	7083      	strb	r3, [r0, #2]
 800511a:	70c1      	strb	r1, [r0, #3]
 800511c:	1d03      	adds	r3, r0, #4
 800511e:	e7f1      	b.n	8005104 <__exponent+0x58>

08005120 <_printf_float>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	b08d      	sub	sp, #52	@ 0x34
 8005126:	460c      	mov	r4, r1
 8005128:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800512c:	4616      	mov	r6, r2
 800512e:	461f      	mov	r7, r3
 8005130:	4605      	mov	r5, r0
 8005132:	f000 fdbf 	bl	8005cb4 <_localeconv_r>
 8005136:	6803      	ldr	r3, [r0, #0]
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb f8a0 	bl	8000280 <strlen>
 8005140:	2300      	movs	r3, #0
 8005142:	930a      	str	r3, [sp, #40]	@ 0x28
 8005144:	f8d8 3000 	ldr.w	r3, [r8]
 8005148:	9005      	str	r0, [sp, #20]
 800514a:	3307      	adds	r3, #7
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	f103 0208 	add.w	r2, r3, #8
 8005154:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005158:	f8d4 b000 	ldr.w	fp, [r4]
 800515c:	f8c8 2000 	str.w	r2, [r8]
 8005160:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005164:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005168:	9307      	str	r3, [sp, #28]
 800516a:	f8cd 8018 	str.w	r8, [sp, #24]
 800516e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005176:	4b9c      	ldr	r3, [pc, #624]	@ (80053e8 <_printf_float+0x2c8>)
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	f7fb fcde 	bl	8000b3c <__aeabi_dcmpun>
 8005180:	bb70      	cbnz	r0, 80051e0 <_printf_float+0xc0>
 8005182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005186:	4b98      	ldr	r3, [pc, #608]	@ (80053e8 <_printf_float+0x2c8>)
 8005188:	f04f 32ff 	mov.w	r2, #4294967295
 800518c:	f7fb fcb8 	bl	8000b00 <__aeabi_dcmple>
 8005190:	bb30      	cbnz	r0, 80051e0 <_printf_float+0xc0>
 8005192:	2200      	movs	r2, #0
 8005194:	2300      	movs	r3, #0
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb fca7 	bl	8000aec <__aeabi_dcmplt>
 800519e:	b110      	cbz	r0, 80051a6 <_printf_float+0x86>
 80051a0:	232d      	movs	r3, #45	@ 0x2d
 80051a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a6:	4a91      	ldr	r2, [pc, #580]	@ (80053ec <_printf_float+0x2cc>)
 80051a8:	4b91      	ldr	r3, [pc, #580]	@ (80053f0 <_printf_float+0x2d0>)
 80051aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051ae:	bf94      	ite	ls
 80051b0:	4690      	movls	r8, r2
 80051b2:	4698      	movhi	r8, r3
 80051b4:	2303      	movs	r3, #3
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	f02b 0304 	bic.w	r3, fp, #4
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	f04f 0900 	mov.w	r9, #0
 80051c2:	9700      	str	r7, [sp, #0]
 80051c4:	4633      	mov	r3, r6
 80051c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051c8:	4621      	mov	r1, r4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f9d2 	bl	8005574 <_printf_common>
 80051d0:	3001      	adds	r0, #1
 80051d2:	f040 808d 	bne.w	80052f0 <_printf_float+0x1d0>
 80051d6:	f04f 30ff 	mov.w	r0, #4294967295
 80051da:	b00d      	add	sp, #52	@ 0x34
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	4649      	mov	r1, r9
 80051e8:	f7fb fca8 	bl	8000b3c <__aeabi_dcmpun>
 80051ec:	b140      	cbz	r0, 8005200 <_printf_float+0xe0>
 80051ee:	464b      	mov	r3, r9
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfbc      	itt	lt
 80051f4:	232d      	movlt	r3, #45	@ 0x2d
 80051f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051fa:	4a7e      	ldr	r2, [pc, #504]	@ (80053f4 <_printf_float+0x2d4>)
 80051fc:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <_printf_float+0x2d8>)
 80051fe:	e7d4      	b.n	80051aa <_printf_float+0x8a>
 8005200:	6863      	ldr	r3, [r4, #4]
 8005202:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005206:	9206      	str	r2, [sp, #24]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	d13b      	bne.n	8005284 <_printf_float+0x164>
 800520c:	2306      	movs	r3, #6
 800520e:	6063      	str	r3, [r4, #4]
 8005210:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005214:	2300      	movs	r3, #0
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	9303      	str	r3, [sp, #12]
 800521a:	ab0a      	add	r3, sp, #40	@ 0x28
 800521c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005220:	ab09      	add	r3, sp, #36	@ 0x24
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	6861      	ldr	r1, [r4, #4]
 8005226:	ec49 8b10 	vmov	d0, r8, r9
 800522a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800522e:	4628      	mov	r0, r5
 8005230:	f7ff fed7 	bl	8004fe2 <__cvt>
 8005234:	9b06      	ldr	r3, [sp, #24]
 8005236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005238:	2b47      	cmp	r3, #71	@ 0x47
 800523a:	4680      	mov	r8, r0
 800523c:	d129      	bne.n	8005292 <_printf_float+0x172>
 800523e:	1cc8      	adds	r0, r1, #3
 8005240:	db02      	blt.n	8005248 <_printf_float+0x128>
 8005242:	6863      	ldr	r3, [r4, #4]
 8005244:	4299      	cmp	r1, r3
 8005246:	dd41      	ble.n	80052cc <_printf_float+0x1ac>
 8005248:	f1aa 0a02 	sub.w	sl, sl, #2
 800524c:	fa5f fa8a 	uxtb.w	sl, sl
 8005250:	3901      	subs	r1, #1
 8005252:	4652      	mov	r2, sl
 8005254:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005258:	9109      	str	r1, [sp, #36]	@ 0x24
 800525a:	f7ff ff27 	bl	80050ac <__exponent>
 800525e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005260:	1813      	adds	r3, r2, r0
 8005262:	2a01      	cmp	r2, #1
 8005264:	4681      	mov	r9, r0
 8005266:	6123      	str	r3, [r4, #16]
 8005268:	dc02      	bgt.n	8005270 <_printf_float+0x150>
 800526a:	6822      	ldr	r2, [r4, #0]
 800526c:	07d2      	lsls	r2, r2, #31
 800526e:	d501      	bpl.n	8005274 <_printf_float+0x154>
 8005270:	3301      	adds	r3, #1
 8005272:	6123      	str	r3, [r4, #16]
 8005274:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0a2      	beq.n	80051c2 <_printf_float+0xa2>
 800527c:	232d      	movs	r3, #45	@ 0x2d
 800527e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005282:	e79e      	b.n	80051c2 <_printf_float+0xa2>
 8005284:	9a06      	ldr	r2, [sp, #24]
 8005286:	2a47      	cmp	r2, #71	@ 0x47
 8005288:	d1c2      	bne.n	8005210 <_printf_float+0xf0>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1c0      	bne.n	8005210 <_printf_float+0xf0>
 800528e:	2301      	movs	r3, #1
 8005290:	e7bd      	b.n	800520e <_printf_float+0xee>
 8005292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005296:	d9db      	bls.n	8005250 <_printf_float+0x130>
 8005298:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800529c:	d118      	bne.n	80052d0 <_printf_float+0x1b0>
 800529e:	2900      	cmp	r1, #0
 80052a0:	6863      	ldr	r3, [r4, #4]
 80052a2:	dd0b      	ble.n	80052bc <_printf_float+0x19c>
 80052a4:	6121      	str	r1, [r4, #16]
 80052a6:	b913      	cbnz	r3, 80052ae <_printf_float+0x18e>
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	07d0      	lsls	r0, r2, #31
 80052ac:	d502      	bpl.n	80052b4 <_printf_float+0x194>
 80052ae:	3301      	adds	r3, #1
 80052b0:	440b      	add	r3, r1
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052b6:	f04f 0900 	mov.w	r9, #0
 80052ba:	e7db      	b.n	8005274 <_printf_float+0x154>
 80052bc:	b913      	cbnz	r3, 80052c4 <_printf_float+0x1a4>
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	07d2      	lsls	r2, r2, #31
 80052c2:	d501      	bpl.n	80052c8 <_printf_float+0x1a8>
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7f4      	b.n	80052b2 <_printf_float+0x192>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e7f2      	b.n	80052b2 <_printf_float+0x192>
 80052cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052d2:	4299      	cmp	r1, r3
 80052d4:	db05      	blt.n	80052e2 <_printf_float+0x1c2>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	6121      	str	r1, [r4, #16]
 80052da:	07d8      	lsls	r0, r3, #31
 80052dc:	d5ea      	bpl.n	80052b4 <_printf_float+0x194>
 80052de:	1c4b      	adds	r3, r1, #1
 80052e0:	e7e7      	b.n	80052b2 <_printf_float+0x192>
 80052e2:	2900      	cmp	r1, #0
 80052e4:	bfd4      	ite	le
 80052e6:	f1c1 0202 	rsble	r2, r1, #2
 80052ea:	2201      	movgt	r2, #1
 80052ec:	4413      	add	r3, r2
 80052ee:	e7e0      	b.n	80052b2 <_printf_float+0x192>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	055a      	lsls	r2, r3, #21
 80052f4:	d407      	bmi.n	8005306 <_printf_float+0x1e6>
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	4642      	mov	r2, r8
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	d12b      	bne.n	800535c <_printf_float+0x23c>
 8005304:	e767      	b.n	80051d6 <_printf_float+0xb6>
 8005306:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800530a:	f240 80dd 	bls.w	80054c8 <_printf_float+0x3a8>
 800530e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005312:	2200      	movs	r2, #0
 8005314:	2300      	movs	r3, #0
 8005316:	f7fb fbdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800531a:	2800      	cmp	r0, #0
 800531c:	d033      	beq.n	8005386 <_printf_float+0x266>
 800531e:	4a37      	ldr	r2, [pc, #220]	@ (80053fc <_printf_float+0x2dc>)
 8005320:	2301      	movs	r3, #1
 8005322:	4631      	mov	r1, r6
 8005324:	4628      	mov	r0, r5
 8005326:	47b8      	blx	r7
 8005328:	3001      	adds	r0, #1
 800532a:	f43f af54 	beq.w	80051d6 <_printf_float+0xb6>
 800532e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005332:	4543      	cmp	r3, r8
 8005334:	db02      	blt.n	800533c <_printf_float+0x21c>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	07d8      	lsls	r0, r3, #31
 800533a:	d50f      	bpl.n	800535c <_printf_float+0x23c>
 800533c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	f43f af45 	beq.w	80051d6 <_printf_float+0xb6>
 800534c:	f04f 0900 	mov.w	r9, #0
 8005350:	f108 38ff 	add.w	r8, r8, #4294967295
 8005354:	f104 0a1a 	add.w	sl, r4, #26
 8005358:	45c8      	cmp	r8, r9
 800535a:	dc09      	bgt.n	8005370 <_printf_float+0x250>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	079b      	lsls	r3, r3, #30
 8005360:	f100 8103 	bmi.w	800556a <_printf_float+0x44a>
 8005364:	68e0      	ldr	r0, [r4, #12]
 8005366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005368:	4298      	cmp	r0, r3
 800536a:	bfb8      	it	lt
 800536c:	4618      	movlt	r0, r3
 800536e:	e734      	b.n	80051da <_printf_float+0xba>
 8005370:	2301      	movs	r3, #1
 8005372:	4652      	mov	r2, sl
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f af2b 	beq.w	80051d6 <_printf_float+0xb6>
 8005380:	f109 0901 	add.w	r9, r9, #1
 8005384:	e7e8      	b.n	8005358 <_printf_float+0x238>
 8005386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	dc39      	bgt.n	8005400 <_printf_float+0x2e0>
 800538c:	4a1b      	ldr	r2, [pc, #108]	@ (80053fc <_printf_float+0x2dc>)
 800538e:	2301      	movs	r3, #1
 8005390:	4631      	mov	r1, r6
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f af1d 	beq.w	80051d6 <_printf_float+0xb6>
 800539c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053a0:	ea59 0303 	orrs.w	r3, r9, r3
 80053a4:	d102      	bne.n	80053ac <_printf_float+0x28c>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	07d9      	lsls	r1, r3, #31
 80053aa:	d5d7      	bpl.n	800535c <_printf_float+0x23c>
 80053ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	f43f af0d 	beq.w	80051d6 <_printf_float+0xb6>
 80053bc:	f04f 0a00 	mov.w	sl, #0
 80053c0:	f104 0b1a 	add.w	fp, r4, #26
 80053c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053c6:	425b      	negs	r3, r3
 80053c8:	4553      	cmp	r3, sl
 80053ca:	dc01      	bgt.n	80053d0 <_printf_float+0x2b0>
 80053cc:	464b      	mov	r3, r9
 80053ce:	e793      	b.n	80052f8 <_printf_float+0x1d8>
 80053d0:	2301      	movs	r3, #1
 80053d2:	465a      	mov	r2, fp
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b8      	blx	r7
 80053da:	3001      	adds	r0, #1
 80053dc:	f43f aefb 	beq.w	80051d6 <_printf_float+0xb6>
 80053e0:	f10a 0a01 	add.w	sl, sl, #1
 80053e4:	e7ee      	b.n	80053c4 <_printf_float+0x2a4>
 80053e6:	bf00      	nop
 80053e8:	7fefffff 	.word	0x7fefffff
 80053ec:	08007aae 	.word	0x08007aae
 80053f0:	08007ab2 	.word	0x08007ab2
 80053f4:	08007ab6 	.word	0x08007ab6
 80053f8:	08007aba 	.word	0x08007aba
 80053fc:	08007abe 	.word	0x08007abe
 8005400:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005402:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005406:	4553      	cmp	r3, sl
 8005408:	bfa8      	it	ge
 800540a:	4653      	movge	r3, sl
 800540c:	2b00      	cmp	r3, #0
 800540e:	4699      	mov	r9, r3
 8005410:	dc36      	bgt.n	8005480 <_printf_float+0x360>
 8005412:	f04f 0b00 	mov.w	fp, #0
 8005416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800541a:	f104 021a 	add.w	r2, r4, #26
 800541e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005420:	9306      	str	r3, [sp, #24]
 8005422:	eba3 0309 	sub.w	r3, r3, r9
 8005426:	455b      	cmp	r3, fp
 8005428:	dc31      	bgt.n	800548e <_printf_float+0x36e>
 800542a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800542c:	459a      	cmp	sl, r3
 800542e:	dc3a      	bgt.n	80054a6 <_printf_float+0x386>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	07da      	lsls	r2, r3, #31
 8005434:	d437      	bmi.n	80054a6 <_printf_float+0x386>
 8005436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005438:	ebaa 0903 	sub.w	r9, sl, r3
 800543c:	9b06      	ldr	r3, [sp, #24]
 800543e:	ebaa 0303 	sub.w	r3, sl, r3
 8005442:	4599      	cmp	r9, r3
 8005444:	bfa8      	it	ge
 8005446:	4699      	movge	r9, r3
 8005448:	f1b9 0f00 	cmp.w	r9, #0
 800544c:	dc33      	bgt.n	80054b6 <_printf_float+0x396>
 800544e:	f04f 0800 	mov.w	r8, #0
 8005452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005456:	f104 0b1a 	add.w	fp, r4, #26
 800545a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800545c:	ebaa 0303 	sub.w	r3, sl, r3
 8005460:	eba3 0309 	sub.w	r3, r3, r9
 8005464:	4543      	cmp	r3, r8
 8005466:	f77f af79 	ble.w	800535c <_printf_float+0x23c>
 800546a:	2301      	movs	r3, #1
 800546c:	465a      	mov	r2, fp
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	f43f aeae 	beq.w	80051d6 <_printf_float+0xb6>
 800547a:	f108 0801 	add.w	r8, r8, #1
 800547e:	e7ec      	b.n	800545a <_printf_float+0x33a>
 8005480:	4642      	mov	r2, r8
 8005482:	4631      	mov	r1, r6
 8005484:	4628      	mov	r0, r5
 8005486:	47b8      	blx	r7
 8005488:	3001      	adds	r0, #1
 800548a:	d1c2      	bne.n	8005412 <_printf_float+0x2f2>
 800548c:	e6a3      	b.n	80051d6 <_printf_float+0xb6>
 800548e:	2301      	movs	r3, #1
 8005490:	4631      	mov	r1, r6
 8005492:	4628      	mov	r0, r5
 8005494:	9206      	str	r2, [sp, #24]
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	f43f ae9c 	beq.w	80051d6 <_printf_float+0xb6>
 800549e:	9a06      	ldr	r2, [sp, #24]
 80054a0:	f10b 0b01 	add.w	fp, fp, #1
 80054a4:	e7bb      	b.n	800541e <_printf_float+0x2fe>
 80054a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054aa:	4631      	mov	r1, r6
 80054ac:	4628      	mov	r0, r5
 80054ae:	47b8      	blx	r7
 80054b0:	3001      	adds	r0, #1
 80054b2:	d1c0      	bne.n	8005436 <_printf_float+0x316>
 80054b4:	e68f      	b.n	80051d6 <_printf_float+0xb6>
 80054b6:	9a06      	ldr	r2, [sp, #24]
 80054b8:	464b      	mov	r3, r9
 80054ba:	4442      	add	r2, r8
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	d1c3      	bne.n	800544e <_printf_float+0x32e>
 80054c6:	e686      	b.n	80051d6 <_printf_float+0xb6>
 80054c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054cc:	f1ba 0f01 	cmp.w	sl, #1
 80054d0:	dc01      	bgt.n	80054d6 <_printf_float+0x3b6>
 80054d2:	07db      	lsls	r3, r3, #31
 80054d4:	d536      	bpl.n	8005544 <_printf_float+0x424>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4642      	mov	r2, r8
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	f43f ae78 	beq.w	80051d6 <_printf_float+0xb6>
 80054e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ea:	4631      	mov	r1, r6
 80054ec:	4628      	mov	r0, r5
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f ae70 	beq.w	80051d6 <_printf_float+0xb6>
 80054f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054fa:	2200      	movs	r2, #0
 80054fc:	2300      	movs	r3, #0
 80054fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005502:	f7fb fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005506:	b9c0      	cbnz	r0, 800553a <_printf_float+0x41a>
 8005508:	4653      	mov	r3, sl
 800550a:	f108 0201 	add.w	r2, r8, #1
 800550e:	4631      	mov	r1, r6
 8005510:	4628      	mov	r0, r5
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	d10c      	bne.n	8005532 <_printf_float+0x412>
 8005518:	e65d      	b.n	80051d6 <_printf_float+0xb6>
 800551a:	2301      	movs	r3, #1
 800551c:	465a      	mov	r2, fp
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f ae56 	beq.w	80051d6 <_printf_float+0xb6>
 800552a:	f108 0801 	add.w	r8, r8, #1
 800552e:	45d0      	cmp	r8, sl
 8005530:	dbf3      	blt.n	800551a <_printf_float+0x3fa>
 8005532:	464b      	mov	r3, r9
 8005534:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005538:	e6df      	b.n	80052fa <_printf_float+0x1da>
 800553a:	f04f 0800 	mov.w	r8, #0
 800553e:	f104 0b1a 	add.w	fp, r4, #26
 8005542:	e7f4      	b.n	800552e <_printf_float+0x40e>
 8005544:	2301      	movs	r3, #1
 8005546:	4642      	mov	r2, r8
 8005548:	e7e1      	b.n	800550e <_printf_float+0x3ee>
 800554a:	2301      	movs	r3, #1
 800554c:	464a      	mov	r2, r9
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	f43f ae3e 	beq.w	80051d6 <_printf_float+0xb6>
 800555a:	f108 0801 	add.w	r8, r8, #1
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005562:	1a5b      	subs	r3, r3, r1
 8005564:	4543      	cmp	r3, r8
 8005566:	dcf0      	bgt.n	800554a <_printf_float+0x42a>
 8005568:	e6fc      	b.n	8005364 <_printf_float+0x244>
 800556a:	f04f 0800 	mov.w	r8, #0
 800556e:	f104 0919 	add.w	r9, r4, #25
 8005572:	e7f4      	b.n	800555e <_printf_float+0x43e>

08005574 <_printf_common>:
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	4616      	mov	r6, r2
 800557a:	4698      	mov	r8, r3
 800557c:	688a      	ldr	r2, [r1, #8]
 800557e:	690b      	ldr	r3, [r1, #16]
 8005580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005584:	4293      	cmp	r3, r2
 8005586:	bfb8      	it	lt
 8005588:	4613      	movlt	r3, r2
 800558a:	6033      	str	r3, [r6, #0]
 800558c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005590:	4607      	mov	r7, r0
 8005592:	460c      	mov	r4, r1
 8005594:	b10a      	cbz	r2, 800559a <_printf_common+0x26>
 8005596:	3301      	adds	r3, #1
 8005598:	6033      	str	r3, [r6, #0]
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	0699      	lsls	r1, r3, #26
 800559e:	bf42      	ittt	mi
 80055a0:	6833      	ldrmi	r3, [r6, #0]
 80055a2:	3302      	addmi	r3, #2
 80055a4:	6033      	strmi	r3, [r6, #0]
 80055a6:	6825      	ldr	r5, [r4, #0]
 80055a8:	f015 0506 	ands.w	r5, r5, #6
 80055ac:	d106      	bne.n	80055bc <_printf_common+0x48>
 80055ae:	f104 0a19 	add.w	sl, r4, #25
 80055b2:	68e3      	ldr	r3, [r4, #12]
 80055b4:	6832      	ldr	r2, [r6, #0]
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	dc26      	bgt.n	800560a <_printf_common+0x96>
 80055bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055c0:	6822      	ldr	r2, [r4, #0]
 80055c2:	3b00      	subs	r3, #0
 80055c4:	bf18      	it	ne
 80055c6:	2301      	movne	r3, #1
 80055c8:	0692      	lsls	r2, r2, #26
 80055ca:	d42b      	bmi.n	8005624 <_printf_common+0xb0>
 80055cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055d0:	4641      	mov	r1, r8
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c8      	blx	r9
 80055d6:	3001      	adds	r0, #1
 80055d8:	d01e      	beq.n	8005618 <_printf_common+0xa4>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	6922      	ldr	r2, [r4, #16]
 80055de:	f003 0306 	and.w	r3, r3, #6
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	bf02      	ittt	eq
 80055e6:	68e5      	ldreq	r5, [r4, #12]
 80055e8:	6833      	ldreq	r3, [r6, #0]
 80055ea:	1aed      	subeq	r5, r5, r3
 80055ec:	68a3      	ldr	r3, [r4, #8]
 80055ee:	bf0c      	ite	eq
 80055f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f4:	2500      	movne	r5, #0
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bfc4      	itt	gt
 80055fa:	1a9b      	subgt	r3, r3, r2
 80055fc:	18ed      	addgt	r5, r5, r3
 80055fe:	2600      	movs	r6, #0
 8005600:	341a      	adds	r4, #26
 8005602:	42b5      	cmp	r5, r6
 8005604:	d11a      	bne.n	800563c <_printf_common+0xc8>
 8005606:	2000      	movs	r0, #0
 8005608:	e008      	b.n	800561c <_printf_common+0xa8>
 800560a:	2301      	movs	r3, #1
 800560c:	4652      	mov	r2, sl
 800560e:	4641      	mov	r1, r8
 8005610:	4638      	mov	r0, r7
 8005612:	47c8      	blx	r9
 8005614:	3001      	adds	r0, #1
 8005616:	d103      	bne.n	8005620 <_printf_common+0xac>
 8005618:	f04f 30ff 	mov.w	r0, #4294967295
 800561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005620:	3501      	adds	r5, #1
 8005622:	e7c6      	b.n	80055b2 <_printf_common+0x3e>
 8005624:	18e1      	adds	r1, r4, r3
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	2030      	movs	r0, #48	@ 0x30
 800562a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800562e:	4422      	add	r2, r4
 8005630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005638:	3302      	adds	r3, #2
 800563a:	e7c7      	b.n	80055cc <_printf_common+0x58>
 800563c:	2301      	movs	r3, #1
 800563e:	4622      	mov	r2, r4
 8005640:	4641      	mov	r1, r8
 8005642:	4638      	mov	r0, r7
 8005644:	47c8      	blx	r9
 8005646:	3001      	adds	r0, #1
 8005648:	d0e6      	beq.n	8005618 <_printf_common+0xa4>
 800564a:	3601      	adds	r6, #1
 800564c:	e7d9      	b.n	8005602 <_printf_common+0x8e>
	...

08005650 <_printf_i>:
 8005650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	7e0f      	ldrb	r7, [r1, #24]
 8005656:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005658:	2f78      	cmp	r7, #120	@ 0x78
 800565a:	4691      	mov	r9, r2
 800565c:	4680      	mov	r8, r0
 800565e:	460c      	mov	r4, r1
 8005660:	469a      	mov	sl, r3
 8005662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005666:	d807      	bhi.n	8005678 <_printf_i+0x28>
 8005668:	2f62      	cmp	r7, #98	@ 0x62
 800566a:	d80a      	bhi.n	8005682 <_printf_i+0x32>
 800566c:	2f00      	cmp	r7, #0
 800566e:	f000 80d2 	beq.w	8005816 <_printf_i+0x1c6>
 8005672:	2f58      	cmp	r7, #88	@ 0x58
 8005674:	f000 80b9 	beq.w	80057ea <_printf_i+0x19a>
 8005678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800567c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005680:	e03a      	b.n	80056f8 <_printf_i+0xa8>
 8005682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005686:	2b15      	cmp	r3, #21
 8005688:	d8f6      	bhi.n	8005678 <_printf_i+0x28>
 800568a:	a101      	add	r1, pc, #4	@ (adr r1, 8005690 <_printf_i+0x40>)
 800568c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056fd 	.word	0x080056fd
 8005698:	08005679 	.word	0x08005679
 800569c:	08005679 	.word	0x08005679
 80056a0:	08005679 	.word	0x08005679
 80056a4:	08005679 	.word	0x08005679
 80056a8:	080056fd 	.word	0x080056fd
 80056ac:	08005679 	.word	0x08005679
 80056b0:	08005679 	.word	0x08005679
 80056b4:	08005679 	.word	0x08005679
 80056b8:	08005679 	.word	0x08005679
 80056bc:	080057fd 	.word	0x080057fd
 80056c0:	08005727 	.word	0x08005727
 80056c4:	080057b7 	.word	0x080057b7
 80056c8:	08005679 	.word	0x08005679
 80056cc:	08005679 	.word	0x08005679
 80056d0:	0800581f 	.word	0x0800581f
 80056d4:	08005679 	.word	0x08005679
 80056d8:	08005727 	.word	0x08005727
 80056dc:	08005679 	.word	0x08005679
 80056e0:	08005679 	.word	0x08005679
 80056e4:	080057bf 	.word	0x080057bf
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6032      	str	r2, [r6, #0]
 80056f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056f8:	2301      	movs	r3, #1
 80056fa:	e09d      	b.n	8005838 <_printf_i+0x1e8>
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	6820      	ldr	r0, [r4, #0]
 8005700:	1d19      	adds	r1, r3, #4
 8005702:	6031      	str	r1, [r6, #0]
 8005704:	0606      	lsls	r6, r0, #24
 8005706:	d501      	bpl.n	800570c <_printf_i+0xbc>
 8005708:	681d      	ldr	r5, [r3, #0]
 800570a:	e003      	b.n	8005714 <_printf_i+0xc4>
 800570c:	0645      	lsls	r5, r0, #25
 800570e:	d5fb      	bpl.n	8005708 <_printf_i+0xb8>
 8005710:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005714:	2d00      	cmp	r5, #0
 8005716:	da03      	bge.n	8005720 <_printf_i+0xd0>
 8005718:	232d      	movs	r3, #45	@ 0x2d
 800571a:	426d      	negs	r5, r5
 800571c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005720:	4859      	ldr	r0, [pc, #356]	@ (8005888 <_printf_i+0x238>)
 8005722:	230a      	movs	r3, #10
 8005724:	e011      	b.n	800574a <_printf_i+0xfa>
 8005726:	6821      	ldr	r1, [r4, #0]
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	0608      	lsls	r0, r1, #24
 800572c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005730:	d402      	bmi.n	8005738 <_printf_i+0xe8>
 8005732:	0649      	lsls	r1, r1, #25
 8005734:	bf48      	it	mi
 8005736:	b2ad      	uxthmi	r5, r5
 8005738:	2f6f      	cmp	r7, #111	@ 0x6f
 800573a:	4853      	ldr	r0, [pc, #332]	@ (8005888 <_printf_i+0x238>)
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	bf14      	ite	ne
 8005740:	230a      	movne	r3, #10
 8005742:	2308      	moveq	r3, #8
 8005744:	2100      	movs	r1, #0
 8005746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800574a:	6866      	ldr	r6, [r4, #4]
 800574c:	60a6      	str	r6, [r4, #8]
 800574e:	2e00      	cmp	r6, #0
 8005750:	bfa2      	ittt	ge
 8005752:	6821      	ldrge	r1, [r4, #0]
 8005754:	f021 0104 	bicge.w	r1, r1, #4
 8005758:	6021      	strge	r1, [r4, #0]
 800575a:	b90d      	cbnz	r5, 8005760 <_printf_i+0x110>
 800575c:	2e00      	cmp	r6, #0
 800575e:	d04b      	beq.n	80057f8 <_printf_i+0x1a8>
 8005760:	4616      	mov	r6, r2
 8005762:	fbb5 f1f3 	udiv	r1, r5, r3
 8005766:	fb03 5711 	mls	r7, r3, r1, r5
 800576a:	5dc7      	ldrb	r7, [r0, r7]
 800576c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005770:	462f      	mov	r7, r5
 8005772:	42bb      	cmp	r3, r7
 8005774:	460d      	mov	r5, r1
 8005776:	d9f4      	bls.n	8005762 <_printf_i+0x112>
 8005778:	2b08      	cmp	r3, #8
 800577a:	d10b      	bne.n	8005794 <_printf_i+0x144>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	07df      	lsls	r7, r3, #31
 8005780:	d508      	bpl.n	8005794 <_printf_i+0x144>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	6861      	ldr	r1, [r4, #4]
 8005786:	4299      	cmp	r1, r3
 8005788:	bfde      	ittt	le
 800578a:	2330      	movle	r3, #48	@ 0x30
 800578c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005794:	1b92      	subs	r2, r2, r6
 8005796:	6122      	str	r2, [r4, #16]
 8005798:	f8cd a000 	str.w	sl, [sp]
 800579c:	464b      	mov	r3, r9
 800579e:	aa03      	add	r2, sp, #12
 80057a0:	4621      	mov	r1, r4
 80057a2:	4640      	mov	r0, r8
 80057a4:	f7ff fee6 	bl	8005574 <_printf_common>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d14a      	bne.n	8005842 <_printf_i+0x1f2>
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	b004      	add	sp, #16
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	4833      	ldr	r0, [pc, #204]	@ (800588c <_printf_i+0x23c>)
 80057c0:	2778      	movs	r7, #120	@ 0x78
 80057c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	6831      	ldr	r1, [r6, #0]
 80057ca:	061f      	lsls	r7, r3, #24
 80057cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80057d0:	d402      	bmi.n	80057d8 <_printf_i+0x188>
 80057d2:	065f      	lsls	r7, r3, #25
 80057d4:	bf48      	it	mi
 80057d6:	b2ad      	uxthmi	r5, r5
 80057d8:	6031      	str	r1, [r6, #0]
 80057da:	07d9      	lsls	r1, r3, #31
 80057dc:	bf44      	itt	mi
 80057de:	f043 0320 	orrmi.w	r3, r3, #32
 80057e2:	6023      	strmi	r3, [r4, #0]
 80057e4:	b11d      	cbz	r5, 80057ee <_printf_i+0x19e>
 80057e6:	2310      	movs	r3, #16
 80057e8:	e7ac      	b.n	8005744 <_printf_i+0xf4>
 80057ea:	4827      	ldr	r0, [pc, #156]	@ (8005888 <_printf_i+0x238>)
 80057ec:	e7e9      	b.n	80057c2 <_printf_i+0x172>
 80057ee:	6823      	ldr	r3, [r4, #0]
 80057f0:	f023 0320 	bic.w	r3, r3, #32
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	e7f6      	b.n	80057e6 <_printf_i+0x196>
 80057f8:	4616      	mov	r6, r2
 80057fa:	e7bd      	b.n	8005778 <_printf_i+0x128>
 80057fc:	6833      	ldr	r3, [r6, #0]
 80057fe:	6825      	ldr	r5, [r4, #0]
 8005800:	6961      	ldr	r1, [r4, #20]
 8005802:	1d18      	adds	r0, r3, #4
 8005804:	6030      	str	r0, [r6, #0]
 8005806:	062e      	lsls	r6, r5, #24
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	d501      	bpl.n	8005810 <_printf_i+0x1c0>
 800580c:	6019      	str	r1, [r3, #0]
 800580e:	e002      	b.n	8005816 <_printf_i+0x1c6>
 8005810:	0668      	lsls	r0, r5, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0x1bc>
 8005814:	8019      	strh	r1, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	4616      	mov	r6, r2
 800581c:	e7bc      	b.n	8005798 <_printf_i+0x148>
 800581e:	6833      	ldr	r3, [r6, #0]
 8005820:	1d1a      	adds	r2, r3, #4
 8005822:	6032      	str	r2, [r6, #0]
 8005824:	681e      	ldr	r6, [r3, #0]
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	2100      	movs	r1, #0
 800582a:	4630      	mov	r0, r6
 800582c:	f7fa fcd8 	bl	80001e0 <memchr>
 8005830:	b108      	cbz	r0, 8005836 <_printf_i+0x1e6>
 8005832:	1b80      	subs	r0, r0, r6
 8005834:	6060      	str	r0, [r4, #4]
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	2300      	movs	r3, #0
 800583c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005840:	e7aa      	b.n	8005798 <_printf_i+0x148>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	4632      	mov	r2, r6
 8005846:	4649      	mov	r1, r9
 8005848:	4640      	mov	r0, r8
 800584a:	47d0      	blx	sl
 800584c:	3001      	adds	r0, #1
 800584e:	d0ad      	beq.n	80057ac <_printf_i+0x15c>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	079b      	lsls	r3, r3, #30
 8005854:	d413      	bmi.n	800587e <_printf_i+0x22e>
 8005856:	68e0      	ldr	r0, [r4, #12]
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	4298      	cmp	r0, r3
 800585c:	bfb8      	it	lt
 800585e:	4618      	movlt	r0, r3
 8005860:	e7a6      	b.n	80057b0 <_printf_i+0x160>
 8005862:	2301      	movs	r3, #1
 8005864:	4632      	mov	r2, r6
 8005866:	4649      	mov	r1, r9
 8005868:	4640      	mov	r0, r8
 800586a:	47d0      	blx	sl
 800586c:	3001      	adds	r0, #1
 800586e:	d09d      	beq.n	80057ac <_printf_i+0x15c>
 8005870:	3501      	adds	r5, #1
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	9903      	ldr	r1, [sp, #12]
 8005876:	1a5b      	subs	r3, r3, r1
 8005878:	42ab      	cmp	r3, r5
 800587a:	dcf2      	bgt.n	8005862 <_printf_i+0x212>
 800587c:	e7eb      	b.n	8005856 <_printf_i+0x206>
 800587e:	2500      	movs	r5, #0
 8005880:	f104 0619 	add.w	r6, r4, #25
 8005884:	e7f5      	b.n	8005872 <_printf_i+0x222>
 8005886:	bf00      	nop
 8005888:	08007ac0 	.word	0x08007ac0
 800588c:	08007ad1 	.word	0x08007ad1

08005890 <std>:
 8005890:	2300      	movs	r3, #0
 8005892:	b510      	push	{r4, lr}
 8005894:	4604      	mov	r4, r0
 8005896:	e9c0 3300 	strd	r3, r3, [r0]
 800589a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800589e:	6083      	str	r3, [r0, #8]
 80058a0:	8181      	strh	r1, [r0, #12]
 80058a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80058a4:	81c2      	strh	r2, [r0, #14]
 80058a6:	6183      	str	r3, [r0, #24]
 80058a8:	4619      	mov	r1, r3
 80058aa:	2208      	movs	r2, #8
 80058ac:	305c      	adds	r0, #92	@ 0x5c
 80058ae:	f000 f9f9 	bl	8005ca4 <memset>
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <std+0x58>)
 80058b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <std+0x5c>)
 80058b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058ba:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <std+0x60>)
 80058bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <std+0x64>)
 80058c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x68>)
 80058c4:	6224      	str	r4, [r4, #32]
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d006      	beq.n	80058d8 <std+0x48>
 80058ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058ce:	4294      	cmp	r4, r2
 80058d0:	d002      	beq.n	80058d8 <std+0x48>
 80058d2:	33d0      	adds	r3, #208	@ 0xd0
 80058d4:	429c      	cmp	r4, r3
 80058d6:	d105      	bne.n	80058e4 <std+0x54>
 80058d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f000 ba5c 	b.w	8005d9c <__retarget_lock_init_recursive>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	08005af5 	.word	0x08005af5
 80058ec:	08005b17 	.word	0x08005b17
 80058f0:	08005b4f 	.word	0x08005b4f
 80058f4:	08005b73 	.word	0x08005b73
 80058f8:	20000354 	.word	0x20000354

080058fc <stdio_exit_handler>:
 80058fc:	4a02      	ldr	r2, [pc, #8]	@ (8005908 <stdio_exit_handler+0xc>)
 80058fe:	4903      	ldr	r1, [pc, #12]	@ (800590c <stdio_exit_handler+0x10>)
 8005900:	4803      	ldr	r0, [pc, #12]	@ (8005910 <stdio_exit_handler+0x14>)
 8005902:	f000 b869 	b.w	80059d8 <_fwalk_sglue>
 8005906:	bf00      	nop
 8005908:	20000014 	.word	0x20000014
 800590c:	080076d1 	.word	0x080076d1
 8005910:	20000024 	.word	0x20000024

08005914 <cleanup_stdio>:
 8005914:	6841      	ldr	r1, [r0, #4]
 8005916:	4b0c      	ldr	r3, [pc, #48]	@ (8005948 <cleanup_stdio+0x34>)
 8005918:	4299      	cmp	r1, r3
 800591a:	b510      	push	{r4, lr}
 800591c:	4604      	mov	r4, r0
 800591e:	d001      	beq.n	8005924 <cleanup_stdio+0x10>
 8005920:	f001 fed6 	bl	80076d0 <_fflush_r>
 8005924:	68a1      	ldr	r1, [r4, #8]
 8005926:	4b09      	ldr	r3, [pc, #36]	@ (800594c <cleanup_stdio+0x38>)
 8005928:	4299      	cmp	r1, r3
 800592a:	d002      	beq.n	8005932 <cleanup_stdio+0x1e>
 800592c:	4620      	mov	r0, r4
 800592e:	f001 fecf 	bl	80076d0 <_fflush_r>
 8005932:	68e1      	ldr	r1, [r4, #12]
 8005934:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <cleanup_stdio+0x3c>)
 8005936:	4299      	cmp	r1, r3
 8005938:	d004      	beq.n	8005944 <cleanup_stdio+0x30>
 800593a:	4620      	mov	r0, r4
 800593c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005940:	f001 bec6 	b.w	80076d0 <_fflush_r>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	bf00      	nop
 8005948:	20000354 	.word	0x20000354
 800594c:	200003bc 	.word	0x200003bc
 8005950:	20000424 	.word	0x20000424

08005954 <global_stdio_init.part.0>:
 8005954:	b510      	push	{r4, lr}
 8005956:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <global_stdio_init.part.0+0x30>)
 8005958:	4c0b      	ldr	r4, [pc, #44]	@ (8005988 <global_stdio_init.part.0+0x34>)
 800595a:	4a0c      	ldr	r2, [pc, #48]	@ (800598c <global_stdio_init.part.0+0x38>)
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	4620      	mov	r0, r4
 8005960:	2200      	movs	r2, #0
 8005962:	2104      	movs	r1, #4
 8005964:	f7ff ff94 	bl	8005890 <std>
 8005968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800596c:	2201      	movs	r2, #1
 800596e:	2109      	movs	r1, #9
 8005970:	f7ff ff8e 	bl	8005890 <std>
 8005974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005978:	2202      	movs	r2, #2
 800597a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800597e:	2112      	movs	r1, #18
 8005980:	f7ff bf86 	b.w	8005890 <std>
 8005984:	2000048c 	.word	0x2000048c
 8005988:	20000354 	.word	0x20000354
 800598c:	080058fd 	.word	0x080058fd

08005990 <__sfp_lock_acquire>:
 8005990:	4801      	ldr	r0, [pc, #4]	@ (8005998 <__sfp_lock_acquire+0x8>)
 8005992:	f000 ba04 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 8005996:	bf00      	nop
 8005998:	20000495 	.word	0x20000495

0800599c <__sfp_lock_release>:
 800599c:	4801      	ldr	r0, [pc, #4]	@ (80059a4 <__sfp_lock_release+0x8>)
 800599e:	f000 b9ff 	b.w	8005da0 <__retarget_lock_release_recursive>
 80059a2:	bf00      	nop
 80059a4:	20000495 	.word	0x20000495

080059a8 <__sinit>:
 80059a8:	b510      	push	{r4, lr}
 80059aa:	4604      	mov	r4, r0
 80059ac:	f7ff fff0 	bl	8005990 <__sfp_lock_acquire>
 80059b0:	6a23      	ldr	r3, [r4, #32]
 80059b2:	b11b      	cbz	r3, 80059bc <__sinit+0x14>
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f7ff bff0 	b.w	800599c <__sfp_lock_release>
 80059bc:	4b04      	ldr	r3, [pc, #16]	@ (80059d0 <__sinit+0x28>)
 80059be:	6223      	str	r3, [r4, #32]
 80059c0:	4b04      	ldr	r3, [pc, #16]	@ (80059d4 <__sinit+0x2c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f5      	bne.n	80059b4 <__sinit+0xc>
 80059c8:	f7ff ffc4 	bl	8005954 <global_stdio_init.part.0>
 80059cc:	e7f2      	b.n	80059b4 <__sinit+0xc>
 80059ce:	bf00      	nop
 80059d0:	08005915 	.word	0x08005915
 80059d4:	2000048c 	.word	0x2000048c

080059d8 <_fwalk_sglue>:
 80059d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	4607      	mov	r7, r0
 80059de:	4688      	mov	r8, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	2600      	movs	r6, #0
 80059e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059e8:	f1b9 0901 	subs.w	r9, r9, #1
 80059ec:	d505      	bpl.n	80059fa <_fwalk_sglue+0x22>
 80059ee:	6824      	ldr	r4, [r4, #0]
 80059f0:	2c00      	cmp	r4, #0
 80059f2:	d1f7      	bne.n	80059e4 <_fwalk_sglue+0xc>
 80059f4:	4630      	mov	r0, r6
 80059f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fa:	89ab      	ldrh	r3, [r5, #12]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d907      	bls.n	8005a10 <_fwalk_sglue+0x38>
 8005a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a04:	3301      	adds	r3, #1
 8005a06:	d003      	beq.n	8005a10 <_fwalk_sglue+0x38>
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	47c0      	blx	r8
 8005a0e:	4306      	orrs	r6, r0
 8005a10:	3568      	adds	r5, #104	@ 0x68
 8005a12:	e7e9      	b.n	80059e8 <_fwalk_sglue+0x10>

08005a14 <iprintf>:
 8005a14:	b40f      	push	{r0, r1, r2, r3}
 8005a16:	b507      	push	{r0, r1, r2, lr}
 8005a18:	4906      	ldr	r1, [pc, #24]	@ (8005a34 <iprintf+0x20>)
 8005a1a:	ab04      	add	r3, sp, #16
 8005a1c:	6808      	ldr	r0, [r1, #0]
 8005a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a22:	6881      	ldr	r1, [r0, #8]
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	f001 fcb7 	bl	8007398 <_vfiprintf_r>
 8005a2a:	b003      	add	sp, #12
 8005a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a30:	b004      	add	sp, #16
 8005a32:	4770      	bx	lr
 8005a34:	20000020 	.word	0x20000020

08005a38 <_puts_r>:
 8005a38:	6a03      	ldr	r3, [r0, #32]
 8005a3a:	b570      	push	{r4, r5, r6, lr}
 8005a3c:	6884      	ldr	r4, [r0, #8]
 8005a3e:	4605      	mov	r5, r0
 8005a40:	460e      	mov	r6, r1
 8005a42:	b90b      	cbnz	r3, 8005a48 <_puts_r+0x10>
 8005a44:	f7ff ffb0 	bl	80059a8 <__sinit>
 8005a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a4a:	07db      	lsls	r3, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <_puts_r+0x22>
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	0598      	lsls	r0, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_puts_r+0x22>
 8005a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a56:	f000 f9a2 	bl	8005d9e <__retarget_lock_acquire_recursive>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	0719      	lsls	r1, r3, #28
 8005a5e:	d502      	bpl.n	8005a66 <_puts_r+0x2e>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d135      	bne.n	8005ad2 <_puts_r+0x9a>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 f8c5 	bl	8005bf8 <__swsetup_r>
 8005a6e:	b380      	cbz	r0, 8005ad2 <_puts_r+0x9a>
 8005a70:	f04f 35ff 	mov.w	r5, #4294967295
 8005a74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a76:	07da      	lsls	r2, r3, #31
 8005a78:	d405      	bmi.n	8005a86 <_puts_r+0x4e>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	059b      	lsls	r3, r3, #22
 8005a7e:	d402      	bmi.n	8005a86 <_puts_r+0x4e>
 8005a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a82:	f000 f98d 	bl	8005da0 <__retarget_lock_release_recursive>
 8005a86:	4628      	mov	r0, r5
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da04      	bge.n	8005a98 <_puts_r+0x60>
 8005a8e:	69a2      	ldr	r2, [r4, #24]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	dc17      	bgt.n	8005ac4 <_puts_r+0x8c>
 8005a94:	290a      	cmp	r1, #10
 8005a96:	d015      	beq.n	8005ac4 <_puts_r+0x8c>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	6022      	str	r2, [r4, #0]
 8005a9e:	7019      	strb	r1, [r3, #0]
 8005aa0:	68a3      	ldr	r3, [r4, #8]
 8005aa2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	60a3      	str	r3, [r4, #8]
 8005aaa:	2900      	cmp	r1, #0
 8005aac:	d1ed      	bne.n	8005a8a <_puts_r+0x52>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da11      	bge.n	8005ad6 <_puts_r+0x9e>
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	210a      	movs	r1, #10
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f85f 	bl	8005b7a <__swbuf_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d0d7      	beq.n	8005a70 <_puts_r+0x38>
 8005ac0:	250a      	movs	r5, #10
 8005ac2:	e7d7      	b.n	8005a74 <_puts_r+0x3c>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f857 	bl	8005b7a <__swbuf_r>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d1e7      	bne.n	8005aa0 <_puts_r+0x68>
 8005ad0:	e7ce      	b.n	8005a70 <_puts_r+0x38>
 8005ad2:	3e01      	subs	r6, #1
 8005ad4:	e7e4      	b.n	8005aa0 <_puts_r+0x68>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	6022      	str	r2, [r4, #0]
 8005adc:	220a      	movs	r2, #10
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e7ee      	b.n	8005ac0 <_puts_r+0x88>
	...

08005ae4 <puts>:
 8005ae4:	4b02      	ldr	r3, [pc, #8]	@ (8005af0 <puts+0xc>)
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	f7ff bfa5 	b.w	8005a38 <_puts_r>
 8005aee:	bf00      	nop
 8005af0:	20000020 	.word	0x20000020

08005af4 <__sread>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	460c      	mov	r4, r1
 8005af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afc:	f000 f900 	bl	8005d00 <_read_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	bfab      	itete	ge
 8005b04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b06:	89a3      	ldrhlt	r3, [r4, #12]
 8005b08:	181b      	addge	r3, r3, r0
 8005b0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b0e:	bfac      	ite	ge
 8005b10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b12:	81a3      	strhlt	r3, [r4, #12]
 8005b14:	bd10      	pop	{r4, pc}

08005b16 <__swrite>:
 8005b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1a:	461f      	mov	r7, r3
 8005b1c:	898b      	ldrh	r3, [r1, #12]
 8005b1e:	05db      	lsls	r3, r3, #23
 8005b20:	4605      	mov	r5, r0
 8005b22:	460c      	mov	r4, r1
 8005b24:	4616      	mov	r6, r2
 8005b26:	d505      	bpl.n	8005b34 <__swrite+0x1e>
 8005b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f000 f8d4 	bl	8005cdc <_lseek_r>
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b3e:	81a3      	strh	r3, [r4, #12]
 8005b40:	4632      	mov	r2, r6
 8005b42:	463b      	mov	r3, r7
 8005b44:	4628      	mov	r0, r5
 8005b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4a:	f000 b8eb 	b.w	8005d24 <_write_r>

08005b4e <__sseek>:
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	460c      	mov	r4, r1
 8005b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b56:	f000 f8c1 	bl	8005cdc <_lseek_r>
 8005b5a:	1c43      	adds	r3, r0, #1
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	bf15      	itete	ne
 8005b60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b6a:	81a3      	strheq	r3, [r4, #12]
 8005b6c:	bf18      	it	ne
 8005b6e:	81a3      	strhne	r3, [r4, #12]
 8005b70:	bd10      	pop	{r4, pc}

08005b72 <__sclose>:
 8005b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b76:	f000 b8a1 	b.w	8005cbc <_close_r>

08005b7a <__swbuf_r>:
 8005b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7c:	460e      	mov	r6, r1
 8005b7e:	4614      	mov	r4, r2
 8005b80:	4605      	mov	r5, r0
 8005b82:	b118      	cbz	r0, 8005b8c <__swbuf_r+0x12>
 8005b84:	6a03      	ldr	r3, [r0, #32]
 8005b86:	b90b      	cbnz	r3, 8005b8c <__swbuf_r+0x12>
 8005b88:	f7ff ff0e 	bl	80059a8 <__sinit>
 8005b8c:	69a3      	ldr	r3, [r4, #24]
 8005b8e:	60a3      	str	r3, [r4, #8]
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	071a      	lsls	r2, r3, #28
 8005b94:	d501      	bpl.n	8005b9a <__swbuf_r+0x20>
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	b943      	cbnz	r3, 8005bac <__swbuf_r+0x32>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f000 f82b 	bl	8005bf8 <__swsetup_r>
 8005ba2:	b118      	cbz	r0, 8005bac <__swbuf_r+0x32>
 8005ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8005ba8:	4638      	mov	r0, r7
 8005baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	6922      	ldr	r2, [r4, #16]
 8005bb0:	1a98      	subs	r0, r3, r2
 8005bb2:	6963      	ldr	r3, [r4, #20]
 8005bb4:	b2f6      	uxtb	r6, r6
 8005bb6:	4283      	cmp	r3, r0
 8005bb8:	4637      	mov	r7, r6
 8005bba:	dc05      	bgt.n	8005bc8 <__swbuf_r+0x4e>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f001 fd86 	bl	80076d0 <_fflush_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d1ed      	bne.n	8005ba4 <__swbuf_r+0x2a>
 8005bc8:	68a3      	ldr	r3, [r4, #8]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	60a3      	str	r3, [r4, #8]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	701e      	strb	r6, [r3, #0]
 8005bd6:	6962      	ldr	r2, [r4, #20]
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d004      	beq.n	8005be8 <__swbuf_r+0x6e>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	07db      	lsls	r3, r3, #31
 8005be2:	d5e1      	bpl.n	8005ba8 <__swbuf_r+0x2e>
 8005be4:	2e0a      	cmp	r6, #10
 8005be6:	d1df      	bne.n	8005ba8 <__swbuf_r+0x2e>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f001 fd70 	bl	80076d0 <_fflush_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d0d9      	beq.n	8005ba8 <__swbuf_r+0x2e>
 8005bf4:	e7d6      	b.n	8005ba4 <__swbuf_r+0x2a>
	...

08005bf8 <__swsetup_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4b29      	ldr	r3, [pc, #164]	@ (8005ca0 <__swsetup_r+0xa8>)
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	460c      	mov	r4, r1
 8005c02:	b118      	cbz	r0, 8005c0c <__swsetup_r+0x14>
 8005c04:	6a03      	ldr	r3, [r0, #32]
 8005c06:	b90b      	cbnz	r3, 8005c0c <__swsetup_r+0x14>
 8005c08:	f7ff fece 	bl	80059a8 <__sinit>
 8005c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c10:	0719      	lsls	r1, r3, #28
 8005c12:	d422      	bmi.n	8005c5a <__swsetup_r+0x62>
 8005c14:	06da      	lsls	r2, r3, #27
 8005c16:	d407      	bmi.n	8005c28 <__swsetup_r+0x30>
 8005c18:	2209      	movs	r2, #9
 8005c1a:	602a      	str	r2, [r5, #0]
 8005c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	e033      	b.n	8005c90 <__swsetup_r+0x98>
 8005c28:	0758      	lsls	r0, r3, #29
 8005c2a:	d512      	bpl.n	8005c52 <__swsetup_r+0x5a>
 8005c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c2e:	b141      	cbz	r1, 8005c42 <__swsetup_r+0x4a>
 8005c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c34:	4299      	cmp	r1, r3
 8005c36:	d002      	beq.n	8005c3e <__swsetup_r+0x46>
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 ff01 	bl	8006a40 <_free_r>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c48:	81a3      	strh	r3, [r4, #12]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	6063      	str	r3, [r4, #4]
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	89a3      	ldrh	r3, [r4, #12]
 8005c54:	f043 0308 	orr.w	r3, r3, #8
 8005c58:	81a3      	strh	r3, [r4, #12]
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	b94b      	cbnz	r3, 8005c72 <__swsetup_r+0x7a>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c68:	d003      	beq.n	8005c72 <__swsetup_r+0x7a>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f001 fd7d 	bl	800776c <__smakebuf_r>
 8005c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c76:	f013 0201 	ands.w	r2, r3, #1
 8005c7a:	d00a      	beq.n	8005c92 <__swsetup_r+0x9a>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	60a2      	str	r2, [r4, #8]
 8005c80:	6962      	ldr	r2, [r4, #20]
 8005c82:	4252      	negs	r2, r2
 8005c84:	61a2      	str	r2, [r4, #24]
 8005c86:	6922      	ldr	r2, [r4, #16]
 8005c88:	b942      	cbnz	r2, 8005c9c <__swsetup_r+0xa4>
 8005c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c8e:	d1c5      	bne.n	8005c1c <__swsetup_r+0x24>
 8005c90:	bd38      	pop	{r3, r4, r5, pc}
 8005c92:	0799      	lsls	r1, r3, #30
 8005c94:	bf58      	it	pl
 8005c96:	6962      	ldrpl	r2, [r4, #20]
 8005c98:	60a2      	str	r2, [r4, #8]
 8005c9a:	e7f4      	b.n	8005c86 <__swsetup_r+0x8e>
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	e7f7      	b.n	8005c90 <__swsetup_r+0x98>
 8005ca0:	20000020 	.word	0x20000020

08005ca4 <memset>:
 8005ca4:	4402      	add	r2, r0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d100      	bne.n	8005cae <memset+0xa>
 8005cac:	4770      	bx	lr
 8005cae:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb2:	e7f9      	b.n	8005ca8 <memset+0x4>

08005cb4 <_localeconv_r>:
 8005cb4:	4800      	ldr	r0, [pc, #0]	@ (8005cb8 <_localeconv_r+0x4>)
 8005cb6:	4770      	bx	lr
 8005cb8:	20000160 	.word	0x20000160

08005cbc <_close_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_close_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fe ffc6 	bl	8004c58 <_close>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_close_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_close_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000490 	.word	0x20000490

08005cdc <_lseek_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d07      	ldr	r5, [pc, #28]	@ (8005cfc <_lseek_r+0x20>)
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7fe ff75 	bl	8004bda <_lseek>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_lseek_r+0x1e>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_lseek_r+0x1e>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000490 	.word	0x20000490

08005d00 <_read_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	@ (8005d20 <_read_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fe ff0d 	bl	8004b2e <_read>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_read_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_read_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000490 	.word	0x20000490

08005d24 <_write_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	@ (8005d44 <_write_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fe ff63 	bl	8004bfe <_write>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_write_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_write_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000490 	.word	0x20000490

08005d48 <__errno>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	@ (8005d50 <__errno+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000020 	.word	0x20000020

08005d54 <__libc_init_array>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d0d      	ldr	r5, [pc, #52]	@ (8005d8c <__libc_init_array+0x38>)
 8005d58:	4c0d      	ldr	r4, [pc, #52]	@ (8005d90 <__libc_init_array+0x3c>)
 8005d5a:	1b64      	subs	r4, r4, r5
 8005d5c:	10a4      	asrs	r4, r4, #2
 8005d5e:	2600      	movs	r6, #0
 8005d60:	42a6      	cmp	r6, r4
 8005d62:	d109      	bne.n	8005d78 <__libc_init_array+0x24>
 8005d64:	4d0b      	ldr	r5, [pc, #44]	@ (8005d94 <__libc_init_array+0x40>)
 8005d66:	4c0c      	ldr	r4, [pc, #48]	@ (8005d98 <__libc_init_array+0x44>)
 8005d68:	f001 fe36 	bl	80079d8 <_init>
 8005d6c:	1b64      	subs	r4, r4, r5
 8005d6e:	10a4      	asrs	r4, r4, #2
 8005d70:	2600      	movs	r6, #0
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	d105      	bne.n	8005d82 <__libc_init_array+0x2e>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7c:	4798      	blx	r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7ee      	b.n	8005d60 <__libc_init_array+0xc>
 8005d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d86:	4798      	blx	r3
 8005d88:	3601      	adds	r6, #1
 8005d8a:	e7f2      	b.n	8005d72 <__libc_init_array+0x1e>
 8005d8c:	08007e28 	.word	0x08007e28
 8005d90:	08007e28 	.word	0x08007e28
 8005d94:	08007e28 	.word	0x08007e28
 8005d98:	08007e2c 	.word	0x08007e2c

08005d9c <__retarget_lock_init_recursive>:
 8005d9c:	4770      	bx	lr

08005d9e <__retarget_lock_acquire_recursive>:
 8005d9e:	4770      	bx	lr

08005da0 <__retarget_lock_release_recursive>:
 8005da0:	4770      	bx	lr

08005da2 <quorem>:
 8005da2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da6:	6903      	ldr	r3, [r0, #16]
 8005da8:	690c      	ldr	r4, [r1, #16]
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	4607      	mov	r7, r0
 8005dae:	db7e      	blt.n	8005eae <quorem+0x10c>
 8005db0:	3c01      	subs	r4, #1
 8005db2:	f101 0814 	add.w	r8, r1, #20
 8005db6:	00a3      	lsls	r3, r4, #2
 8005db8:	f100 0514 	add.w	r5, r0, #20
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dd8:	d32e      	bcc.n	8005e38 <quorem+0x96>
 8005dda:	f04f 0a00 	mov.w	sl, #0
 8005dde:	46c4      	mov	ip, r8
 8005de0:	46ae      	mov	lr, r5
 8005de2:	46d3      	mov	fp, sl
 8005de4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005de8:	b298      	uxth	r0, r3
 8005dea:	fb06 a000 	mla	r0, r6, r0, sl
 8005dee:	0c02      	lsrs	r2, r0, #16
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	fb06 2303 	mla	r3, r6, r3, r2
 8005df6:	f8de 2000 	ldr.w	r2, [lr]
 8005dfa:	b280      	uxth	r0, r0
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	1a12      	subs	r2, r2, r0
 8005e00:	445a      	add	r2, fp
 8005e02:	f8de 0000 	ldr.w	r0, [lr]
 8005e06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e14:	b292      	uxth	r2, r2
 8005e16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e1a:	45e1      	cmp	r9, ip
 8005e1c:	f84e 2b04 	str.w	r2, [lr], #4
 8005e20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e24:	d2de      	bcs.n	8005de4 <quorem+0x42>
 8005e26:	9b00      	ldr	r3, [sp, #0]
 8005e28:	58eb      	ldr	r3, [r5, r3]
 8005e2a:	b92b      	cbnz	r3, 8005e38 <quorem+0x96>
 8005e2c:	9b01      	ldr	r3, [sp, #4]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	429d      	cmp	r5, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	d32f      	bcc.n	8005e96 <quorem+0xf4>
 8005e36:	613c      	str	r4, [r7, #16]
 8005e38:	4638      	mov	r0, r7
 8005e3a:	f001 f97b 	bl	8007134 <__mcmp>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	db25      	blt.n	8005e8e <quorem+0xec>
 8005e42:	4629      	mov	r1, r5
 8005e44:	2000      	movs	r0, #0
 8005e46:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e4a:	f8d1 c000 	ldr.w	ip, [r1]
 8005e4e:	fa1f fe82 	uxth.w	lr, r2
 8005e52:	fa1f f38c 	uxth.w	r3, ip
 8005e56:	eba3 030e 	sub.w	r3, r3, lr
 8005e5a:	4403      	add	r3, r0
 8005e5c:	0c12      	lsrs	r2, r2, #16
 8005e5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6c:	45c1      	cmp	r9, r8
 8005e6e:	f841 3b04 	str.w	r3, [r1], #4
 8005e72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e76:	d2e6      	bcs.n	8005e46 <quorem+0xa4>
 8005e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e80:	b922      	cbnz	r2, 8005e8c <quorem+0xea>
 8005e82:	3b04      	subs	r3, #4
 8005e84:	429d      	cmp	r5, r3
 8005e86:	461a      	mov	r2, r3
 8005e88:	d30b      	bcc.n	8005ea2 <quorem+0x100>
 8005e8a:	613c      	str	r4, [r7, #16]
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	4630      	mov	r0, r6
 8005e90:	b003      	add	sp, #12
 8005e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	2a00      	cmp	r2, #0
 8005e9c:	d1cb      	bne.n	8005e36 <quorem+0x94>
 8005e9e:	3c01      	subs	r4, #1
 8005ea0:	e7c6      	b.n	8005e30 <quorem+0x8e>
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	3b04      	subs	r3, #4
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	d1ef      	bne.n	8005e8a <quorem+0xe8>
 8005eaa:	3c01      	subs	r4, #1
 8005eac:	e7ea      	b.n	8005e84 <quorem+0xe2>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e7ee      	b.n	8005e90 <quorem+0xee>
 8005eb2:	0000      	movs	r0, r0
 8005eb4:	0000      	movs	r0, r0
	...

08005eb8 <_dtoa_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	69c7      	ldr	r7, [r0, #28]
 8005ebe:	b099      	sub	sp, #100	@ 0x64
 8005ec0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ec4:	ec55 4b10 	vmov	r4, r5, d0
 8005ec8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005eca:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ecc:	4683      	mov	fp, r0
 8005ece:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ed0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ed2:	b97f      	cbnz	r7, 8005ef4 <_dtoa_r+0x3c>
 8005ed4:	2010      	movs	r0, #16
 8005ed6:	f000 fdfd 	bl	8006ad4 <malloc>
 8005eda:	4602      	mov	r2, r0
 8005edc:	f8cb 001c 	str.w	r0, [fp, #28]
 8005ee0:	b920      	cbnz	r0, 8005eec <_dtoa_r+0x34>
 8005ee2:	4ba7      	ldr	r3, [pc, #668]	@ (8006180 <_dtoa_r+0x2c8>)
 8005ee4:	21ef      	movs	r1, #239	@ 0xef
 8005ee6:	48a7      	ldr	r0, [pc, #668]	@ (8006184 <_dtoa_r+0x2cc>)
 8005ee8:	f001 fcbc 	bl	8007864 <__assert_func>
 8005eec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ef0:	6007      	str	r7, [r0, #0]
 8005ef2:	60c7      	str	r7, [r0, #12]
 8005ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ef8:	6819      	ldr	r1, [r3, #0]
 8005efa:	b159      	cbz	r1, 8005f14 <_dtoa_r+0x5c>
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	604a      	str	r2, [r1, #4]
 8005f00:	2301      	movs	r3, #1
 8005f02:	4093      	lsls	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
 8005f06:	4658      	mov	r0, fp
 8005f08:	f000 feda 	bl	8006cc0 <_Bfree>
 8005f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	1e2b      	subs	r3, r5, #0
 8005f16:	bfb9      	ittee	lt
 8005f18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f1c:	9303      	strlt	r3, [sp, #12]
 8005f1e:	2300      	movge	r3, #0
 8005f20:	6033      	strge	r3, [r6, #0]
 8005f22:	9f03      	ldr	r7, [sp, #12]
 8005f24:	4b98      	ldr	r3, [pc, #608]	@ (8006188 <_dtoa_r+0x2d0>)
 8005f26:	bfbc      	itt	lt
 8005f28:	2201      	movlt	r2, #1
 8005f2a:	6032      	strlt	r2, [r6, #0]
 8005f2c:	43bb      	bics	r3, r7
 8005f2e:	d112      	bne.n	8005f56 <_dtoa_r+0x9e>
 8005f30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f3c:	4323      	orrs	r3, r4
 8005f3e:	f000 854d 	beq.w	80069dc <_dtoa_r+0xb24>
 8005f42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800619c <_dtoa_r+0x2e4>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 854f 	beq.w	80069ec <_dtoa_r+0xb34>
 8005f4e:	f10a 0303 	add.w	r3, sl, #3
 8005f52:	f000 bd49 	b.w	80069e8 <_dtoa_r+0xb30>
 8005f56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	ec51 0b17 	vmov	r0, r1, d7
 8005f60:	2300      	movs	r3, #0
 8005f62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f66:	f7fa fdb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	b158      	cbz	r0, 8005f86 <_dtoa_r+0xce>
 8005f6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f70:	2301      	movs	r3, #1
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f76:	b113      	cbz	r3, 8005f7e <_dtoa_r+0xc6>
 8005f78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f7a:	4b84      	ldr	r3, [pc, #528]	@ (800618c <_dtoa_r+0x2d4>)
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80061a0 <_dtoa_r+0x2e8>
 8005f82:	f000 bd33 	b.w	80069ec <_dtoa_r+0xb34>
 8005f86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f8a:	aa16      	add	r2, sp, #88	@ 0x58
 8005f8c:	a917      	add	r1, sp, #92	@ 0x5c
 8005f8e:	4658      	mov	r0, fp
 8005f90:	f001 f980 	bl	8007294 <__d2b>
 8005f94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f98:	4681      	mov	r9, r0
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	d077      	beq.n	800608e <_dtoa_r+0x1d6>
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fb8:	4619      	mov	r1, r3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4b74      	ldr	r3, [pc, #464]	@ (8006190 <_dtoa_r+0x2d8>)
 8005fbe:	f7fa f96b 	bl	8000298 <__aeabi_dsub>
 8005fc2:	a369      	add	r3, pc, #420	@ (adr r3, 8006168 <_dtoa_r+0x2b0>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fb1e 	bl	8000608 <__aeabi_dmul>
 8005fcc:	a368      	add	r3, pc, #416	@ (adr r3, 8006170 <_dtoa_r+0x2b8>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f963 	bl	800029c <__adddf3>
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4630      	mov	r0, r6
 8005fda:	460d      	mov	r5, r1
 8005fdc:	f7fa faaa 	bl	8000534 <__aeabi_i2d>
 8005fe0:	a365      	add	r3, pc, #404	@ (adr r3, 8006178 <_dtoa_r+0x2c0>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fa fb0f 	bl	8000608 <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa f953 	bl	800029c <__adddf3>
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	f7fa fdb5 	bl	8000b68 <__aeabi_d2iz>
 8005ffe:	2200      	movs	r2, #0
 8006000:	4607      	mov	r7, r0
 8006002:	2300      	movs	r3, #0
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa fd70 	bl	8000aec <__aeabi_dcmplt>
 800600c:	b140      	cbz	r0, 8006020 <_dtoa_r+0x168>
 800600e:	4638      	mov	r0, r7
 8006010:	f7fa fa90 	bl	8000534 <__aeabi_i2d>
 8006014:	4622      	mov	r2, r4
 8006016:	462b      	mov	r3, r5
 8006018:	f7fa fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800601c:	b900      	cbnz	r0, 8006020 <_dtoa_r+0x168>
 800601e:	3f01      	subs	r7, #1
 8006020:	2f16      	cmp	r7, #22
 8006022:	d851      	bhi.n	80060c8 <_dtoa_r+0x210>
 8006024:	4b5b      	ldr	r3, [pc, #364]	@ (8006194 <_dtoa_r+0x2dc>)
 8006026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006032:	f7fa fd5b 	bl	8000aec <__aeabi_dcmplt>
 8006036:	2800      	cmp	r0, #0
 8006038:	d048      	beq.n	80060cc <_dtoa_r+0x214>
 800603a:	3f01      	subs	r7, #1
 800603c:	2300      	movs	r3, #0
 800603e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006040:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006042:	1b9b      	subs	r3, r3, r6
 8006044:	1e5a      	subs	r2, r3, #1
 8006046:	bf44      	itt	mi
 8006048:	f1c3 0801 	rsbmi	r8, r3, #1
 800604c:	2300      	movmi	r3, #0
 800604e:	9208      	str	r2, [sp, #32]
 8006050:	bf54      	ite	pl
 8006052:	f04f 0800 	movpl.w	r8, #0
 8006056:	9308      	strmi	r3, [sp, #32]
 8006058:	2f00      	cmp	r7, #0
 800605a:	db39      	blt.n	80060d0 <_dtoa_r+0x218>
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006060:	443b      	add	r3, r7
 8006062:	9308      	str	r3, [sp, #32]
 8006064:	2300      	movs	r3, #0
 8006066:	930a      	str	r3, [sp, #40]	@ 0x28
 8006068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606a:	2b09      	cmp	r3, #9
 800606c:	d864      	bhi.n	8006138 <_dtoa_r+0x280>
 800606e:	2b05      	cmp	r3, #5
 8006070:	bfc4      	itt	gt
 8006072:	3b04      	subgt	r3, #4
 8006074:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	f1a3 0302 	sub.w	r3, r3, #2
 800607c:	bfcc      	ite	gt
 800607e:	2400      	movgt	r4, #0
 8006080:	2401      	movle	r4, #1
 8006082:	2b03      	cmp	r3, #3
 8006084:	d863      	bhi.n	800614e <_dtoa_r+0x296>
 8006086:	e8df f003 	tbb	[pc, r3]
 800608a:	372a      	.short	0x372a
 800608c:	5535      	.short	0x5535
 800608e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006092:	441e      	add	r6, r3
 8006094:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006098:	2b20      	cmp	r3, #32
 800609a:	bfc1      	itttt	gt
 800609c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060a0:	409f      	lslgt	r7, r3
 80060a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060aa:	bfd6      	itet	le
 80060ac:	f1c3 0320 	rsble	r3, r3, #32
 80060b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80060b4:	fa04 f003 	lslle.w	r0, r4, r3
 80060b8:	f7fa fa2c 	bl	8000514 <__aeabi_ui2d>
 80060bc:	2201      	movs	r2, #1
 80060be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060c2:	3e01      	subs	r6, #1
 80060c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80060c6:	e777      	b.n	8005fb8 <_dtoa_r+0x100>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e7b8      	b.n	800603e <_dtoa_r+0x186>
 80060cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80060ce:	e7b7      	b.n	8006040 <_dtoa_r+0x188>
 80060d0:	427b      	negs	r3, r7
 80060d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d4:	2300      	movs	r3, #0
 80060d6:	eba8 0807 	sub.w	r8, r8, r7
 80060da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80060dc:	e7c4      	b.n	8006068 <_dtoa_r+0x1b0>
 80060de:	2300      	movs	r3, #0
 80060e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dc35      	bgt.n	8006154 <_dtoa_r+0x29c>
 80060e8:	2301      	movs	r3, #1
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	461a      	mov	r2, r3
 80060f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80060f2:	e00b      	b.n	800610c <_dtoa_r+0x254>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e7f3      	b.n	80060e0 <_dtoa_r+0x228>
 80060f8:	2300      	movs	r3, #0
 80060fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	9307      	str	r3, [sp, #28]
 8006108:	bfb8      	it	lt
 800610a:	2301      	movlt	r3, #1
 800610c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006110:	2100      	movs	r1, #0
 8006112:	2204      	movs	r2, #4
 8006114:	f102 0514 	add.w	r5, r2, #20
 8006118:	429d      	cmp	r5, r3
 800611a:	d91f      	bls.n	800615c <_dtoa_r+0x2a4>
 800611c:	6041      	str	r1, [r0, #4]
 800611e:	4658      	mov	r0, fp
 8006120:	f000 fd8e 	bl	8006c40 <_Balloc>
 8006124:	4682      	mov	sl, r0
 8006126:	2800      	cmp	r0, #0
 8006128:	d13c      	bne.n	80061a4 <_dtoa_r+0x2ec>
 800612a:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <_dtoa_r+0x2e0>)
 800612c:	4602      	mov	r2, r0
 800612e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006132:	e6d8      	b.n	8005ee6 <_dtoa_r+0x2e>
 8006134:	2301      	movs	r3, #1
 8006136:	e7e0      	b.n	80060fa <_dtoa_r+0x242>
 8006138:	2401      	movs	r4, #1
 800613a:	2300      	movs	r3, #0
 800613c:	9309      	str	r3, [sp, #36]	@ 0x24
 800613e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006140:	f04f 33ff 	mov.w	r3, #4294967295
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	2200      	movs	r2, #0
 800614a:	2312      	movs	r3, #18
 800614c:	e7d0      	b.n	80060f0 <_dtoa_r+0x238>
 800614e:	2301      	movs	r3, #1
 8006150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006152:	e7f5      	b.n	8006140 <_dtoa_r+0x288>
 8006154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	e7d7      	b.n	800610c <_dtoa_r+0x254>
 800615c:	3101      	adds	r1, #1
 800615e:	0052      	lsls	r2, r2, #1
 8006160:	e7d8      	b.n	8006114 <_dtoa_r+0x25c>
 8006162:	bf00      	nop
 8006164:	f3af 8000 	nop.w
 8006168:	636f4361 	.word	0x636f4361
 800616c:	3fd287a7 	.word	0x3fd287a7
 8006170:	8b60c8b3 	.word	0x8b60c8b3
 8006174:	3fc68a28 	.word	0x3fc68a28
 8006178:	509f79fb 	.word	0x509f79fb
 800617c:	3fd34413 	.word	0x3fd34413
 8006180:	08007aef 	.word	0x08007aef
 8006184:	08007b06 	.word	0x08007b06
 8006188:	7ff00000 	.word	0x7ff00000
 800618c:	08007abf 	.word	0x08007abf
 8006190:	3ff80000 	.word	0x3ff80000
 8006194:	08007c00 	.word	0x08007c00
 8006198:	08007b5e 	.word	0x08007b5e
 800619c:	08007aeb 	.word	0x08007aeb
 80061a0:	08007abe 	.word	0x08007abe
 80061a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061a8:	6018      	str	r0, [r3, #0]
 80061aa:	9b07      	ldr	r3, [sp, #28]
 80061ac:	2b0e      	cmp	r3, #14
 80061ae:	f200 80a4 	bhi.w	80062fa <_dtoa_r+0x442>
 80061b2:	2c00      	cmp	r4, #0
 80061b4:	f000 80a1 	beq.w	80062fa <_dtoa_r+0x442>
 80061b8:	2f00      	cmp	r7, #0
 80061ba:	dd33      	ble.n	8006224 <_dtoa_r+0x36c>
 80061bc:	4bad      	ldr	r3, [pc, #692]	@ (8006474 <_dtoa_r+0x5bc>)
 80061be:	f007 020f 	and.w	r2, r7, #15
 80061c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c6:	ed93 7b00 	vldr	d7, [r3]
 80061ca:	05f8      	lsls	r0, r7, #23
 80061cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80061d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061d4:	d516      	bpl.n	8006204 <_dtoa_r+0x34c>
 80061d6:	4ba8      	ldr	r3, [pc, #672]	@ (8006478 <_dtoa_r+0x5c0>)
 80061d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061e0:	f7fa fb3c 	bl	800085c <__aeabi_ddiv>
 80061e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e8:	f004 040f 	and.w	r4, r4, #15
 80061ec:	2603      	movs	r6, #3
 80061ee:	4da2      	ldr	r5, [pc, #648]	@ (8006478 <_dtoa_r+0x5c0>)
 80061f0:	b954      	cbnz	r4, 8006208 <_dtoa_r+0x350>
 80061f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fa:	f7fa fb2f 	bl	800085c <__aeabi_ddiv>
 80061fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006202:	e028      	b.n	8006256 <_dtoa_r+0x39e>
 8006204:	2602      	movs	r6, #2
 8006206:	e7f2      	b.n	80061ee <_dtoa_r+0x336>
 8006208:	07e1      	lsls	r1, r4, #31
 800620a:	d508      	bpl.n	800621e <_dtoa_r+0x366>
 800620c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006210:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006214:	f7fa f9f8 	bl	8000608 <__aeabi_dmul>
 8006218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800621c:	3601      	adds	r6, #1
 800621e:	1064      	asrs	r4, r4, #1
 8006220:	3508      	adds	r5, #8
 8006222:	e7e5      	b.n	80061f0 <_dtoa_r+0x338>
 8006224:	f000 80d2 	beq.w	80063cc <_dtoa_r+0x514>
 8006228:	427c      	negs	r4, r7
 800622a:	4b92      	ldr	r3, [pc, #584]	@ (8006474 <_dtoa_r+0x5bc>)
 800622c:	4d92      	ldr	r5, [pc, #584]	@ (8006478 <_dtoa_r+0x5c0>)
 800622e:	f004 020f 	and.w	r2, r4, #15
 8006232:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800623e:	f7fa f9e3 	bl	8000608 <__aeabi_dmul>
 8006242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006246:	1124      	asrs	r4, r4, #4
 8006248:	2300      	movs	r3, #0
 800624a:	2602      	movs	r6, #2
 800624c:	2c00      	cmp	r4, #0
 800624e:	f040 80b2 	bne.w	80063b6 <_dtoa_r+0x4fe>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1d3      	bne.n	80061fe <_dtoa_r+0x346>
 8006256:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006258:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80b7 	beq.w	80063d0 <_dtoa_r+0x518>
 8006262:	4b86      	ldr	r3, [pc, #536]	@ (800647c <_dtoa_r+0x5c4>)
 8006264:	2200      	movs	r2, #0
 8006266:	4620      	mov	r0, r4
 8006268:	4629      	mov	r1, r5
 800626a:	f7fa fc3f 	bl	8000aec <__aeabi_dcmplt>
 800626e:	2800      	cmp	r0, #0
 8006270:	f000 80ae 	beq.w	80063d0 <_dtoa_r+0x518>
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 80aa 	beq.w	80063d0 <_dtoa_r+0x518>
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd37      	ble.n	80062f2 <_dtoa_r+0x43a>
 8006282:	1e7b      	subs	r3, r7, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	4620      	mov	r0, r4
 8006288:	4b7d      	ldr	r3, [pc, #500]	@ (8006480 <_dtoa_r+0x5c8>)
 800628a:	2200      	movs	r2, #0
 800628c:	4629      	mov	r1, r5
 800628e:	f7fa f9bb 	bl	8000608 <__aeabi_dmul>
 8006292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006296:	9c00      	ldr	r4, [sp, #0]
 8006298:	3601      	adds	r6, #1
 800629a:	4630      	mov	r0, r6
 800629c:	f7fa f94a 	bl	8000534 <__aeabi_i2d>
 80062a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a4:	f7fa f9b0 	bl	8000608 <__aeabi_dmul>
 80062a8:	4b76      	ldr	r3, [pc, #472]	@ (8006484 <_dtoa_r+0x5cc>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	f7f9 fff6 	bl	800029c <__adddf3>
 80062b0:	4605      	mov	r5, r0
 80062b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062b6:	2c00      	cmp	r4, #0
 80062b8:	f040 808d 	bne.w	80063d6 <_dtoa_r+0x51e>
 80062bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c0:	4b71      	ldr	r3, [pc, #452]	@ (8006488 <_dtoa_r+0x5d0>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	f7f9 ffe8 	bl	8000298 <__aeabi_dsub>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062d0:	462a      	mov	r2, r5
 80062d2:	4633      	mov	r3, r6
 80062d4:	f7fa fc28 	bl	8000b28 <__aeabi_dcmpgt>
 80062d8:	2800      	cmp	r0, #0
 80062da:	f040 828b 	bne.w	80067f4 <_dtoa_r+0x93c>
 80062de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062e2:	462a      	mov	r2, r5
 80062e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062e8:	f7fa fc00 	bl	8000aec <__aeabi_dcmplt>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f040 8128 	bne.w	8006542 <_dtoa_r+0x68a>
 80062f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f2c0 815a 	blt.w	80065b6 <_dtoa_r+0x6fe>
 8006302:	2f0e      	cmp	r7, #14
 8006304:	f300 8157 	bgt.w	80065b6 <_dtoa_r+0x6fe>
 8006308:	4b5a      	ldr	r3, [pc, #360]	@ (8006474 <_dtoa_r+0x5bc>)
 800630a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800630e:	ed93 7b00 	vldr	d7, [r3]
 8006312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	ed8d 7b00 	vstr	d7, [sp]
 800631a:	da03      	bge.n	8006324 <_dtoa_r+0x46c>
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f340 8101 	ble.w	8006526 <_dtoa_r+0x66e>
 8006324:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006328:	4656      	mov	r6, sl
 800632a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632e:	4620      	mov	r0, r4
 8006330:	4629      	mov	r1, r5
 8006332:	f7fa fa93 	bl	800085c <__aeabi_ddiv>
 8006336:	f7fa fc17 	bl	8000b68 <__aeabi_d2iz>
 800633a:	4680      	mov	r8, r0
 800633c:	f7fa f8fa 	bl	8000534 <__aeabi_i2d>
 8006340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006344:	f7fa f960 	bl	8000608 <__aeabi_dmul>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4620      	mov	r0, r4
 800634e:	4629      	mov	r1, r5
 8006350:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006354:	f7f9 ffa0 	bl	8000298 <__aeabi_dsub>
 8006358:	f806 4b01 	strb.w	r4, [r6], #1
 800635c:	9d07      	ldr	r5, [sp, #28]
 800635e:	eba6 040a 	sub.w	r4, r6, sl
 8006362:	42a5      	cmp	r5, r4
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	f040 8117 	bne.w	800659a <_dtoa_r+0x6e2>
 800636c:	f7f9 ff96 	bl	800029c <__adddf3>
 8006370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	f7fa fbd6 	bl	8000b28 <__aeabi_dcmpgt>
 800637c:	2800      	cmp	r0, #0
 800637e:	f040 80f9 	bne.w	8006574 <_dtoa_r+0x6bc>
 8006382:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	f7fa fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800638e:	b118      	cbz	r0, 8006398 <_dtoa_r+0x4e0>
 8006390:	f018 0f01 	tst.w	r8, #1
 8006394:	f040 80ee 	bne.w	8006574 <_dtoa_r+0x6bc>
 8006398:	4649      	mov	r1, r9
 800639a:	4658      	mov	r0, fp
 800639c:	f000 fc90 	bl	8006cc0 <_Bfree>
 80063a0:	2300      	movs	r3, #0
 80063a2:	7033      	strb	r3, [r6, #0]
 80063a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063a6:	3701      	adds	r7, #1
 80063a8:	601f      	str	r7, [r3, #0]
 80063aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 831d 	beq.w	80069ec <_dtoa_r+0xb34>
 80063b2:	601e      	str	r6, [r3, #0]
 80063b4:	e31a      	b.n	80069ec <_dtoa_r+0xb34>
 80063b6:	07e2      	lsls	r2, r4, #31
 80063b8:	d505      	bpl.n	80063c6 <_dtoa_r+0x50e>
 80063ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063be:	f7fa f923 	bl	8000608 <__aeabi_dmul>
 80063c2:	3601      	adds	r6, #1
 80063c4:	2301      	movs	r3, #1
 80063c6:	1064      	asrs	r4, r4, #1
 80063c8:	3508      	adds	r5, #8
 80063ca:	e73f      	b.n	800624c <_dtoa_r+0x394>
 80063cc:	2602      	movs	r6, #2
 80063ce:	e742      	b.n	8006256 <_dtoa_r+0x39e>
 80063d0:	9c07      	ldr	r4, [sp, #28]
 80063d2:	9704      	str	r7, [sp, #16]
 80063d4:	e761      	b.n	800629a <_dtoa_r+0x3e2>
 80063d6:	4b27      	ldr	r3, [pc, #156]	@ (8006474 <_dtoa_r+0x5bc>)
 80063d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063e2:	4454      	add	r4, sl
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d053      	beq.n	8006490 <_dtoa_r+0x5d8>
 80063e8:	4928      	ldr	r1, [pc, #160]	@ (800648c <_dtoa_r+0x5d4>)
 80063ea:	2000      	movs	r0, #0
 80063ec:	f7fa fa36 	bl	800085c <__aeabi_ddiv>
 80063f0:	4633      	mov	r3, r6
 80063f2:	462a      	mov	r2, r5
 80063f4:	f7f9 ff50 	bl	8000298 <__aeabi_dsub>
 80063f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063fc:	4656      	mov	r6, sl
 80063fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006402:	f7fa fbb1 	bl	8000b68 <__aeabi_d2iz>
 8006406:	4605      	mov	r5, r0
 8006408:	f7fa f894 	bl	8000534 <__aeabi_i2d>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006414:	f7f9 ff40 	bl	8000298 <__aeabi_dsub>
 8006418:	3530      	adds	r5, #48	@ 0x30
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006422:	f806 5b01 	strb.w	r5, [r6], #1
 8006426:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800642a:	f7fa fb5f 	bl	8000aec <__aeabi_dcmplt>
 800642e:	2800      	cmp	r0, #0
 8006430:	d171      	bne.n	8006516 <_dtoa_r+0x65e>
 8006432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006436:	4911      	ldr	r1, [pc, #68]	@ (800647c <_dtoa_r+0x5c4>)
 8006438:	2000      	movs	r0, #0
 800643a:	f7f9 ff2d 	bl	8000298 <__aeabi_dsub>
 800643e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006442:	f7fa fb53 	bl	8000aec <__aeabi_dcmplt>
 8006446:	2800      	cmp	r0, #0
 8006448:	f040 8095 	bne.w	8006576 <_dtoa_r+0x6be>
 800644c:	42a6      	cmp	r6, r4
 800644e:	f43f af50 	beq.w	80062f2 <_dtoa_r+0x43a>
 8006452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006456:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <_dtoa_r+0x5c8>)
 8006458:	2200      	movs	r2, #0
 800645a:	f7fa f8d5 	bl	8000608 <__aeabi_dmul>
 800645e:	4b08      	ldr	r3, [pc, #32]	@ (8006480 <_dtoa_r+0x5c8>)
 8006460:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006464:	2200      	movs	r2, #0
 8006466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646a:	f7fa f8cd 	bl	8000608 <__aeabi_dmul>
 800646e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006472:	e7c4      	b.n	80063fe <_dtoa_r+0x546>
 8006474:	08007c00 	.word	0x08007c00
 8006478:	08007bd8 	.word	0x08007bd8
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	40240000 	.word	0x40240000
 8006484:	401c0000 	.word	0x401c0000
 8006488:	40140000 	.word	0x40140000
 800648c:	3fe00000 	.word	0x3fe00000
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	f7fa f8b8 	bl	8000608 <__aeabi_dmul>
 8006498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800649c:	9415      	str	r4, [sp, #84]	@ 0x54
 800649e:	4656      	mov	r6, sl
 80064a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a4:	f7fa fb60 	bl	8000b68 <__aeabi_d2iz>
 80064a8:	4605      	mov	r5, r0
 80064aa:	f7fa f843 	bl	8000534 <__aeabi_i2d>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b6:	f7f9 feef 	bl	8000298 <__aeabi_dsub>
 80064ba:	3530      	adds	r5, #48	@ 0x30
 80064bc:	f806 5b01 	strb.w	r5, [r6], #1
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	42a6      	cmp	r6, r4
 80064c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	d124      	bne.n	800651a <_dtoa_r+0x662>
 80064d0:	4bac      	ldr	r3, [pc, #688]	@ (8006784 <_dtoa_r+0x8cc>)
 80064d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064d6:	f7f9 fee1 	bl	800029c <__adddf3>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7fa fb21 	bl	8000b28 <__aeabi_dcmpgt>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d145      	bne.n	8006576 <_dtoa_r+0x6be>
 80064ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064ee:	49a5      	ldr	r1, [pc, #660]	@ (8006784 <_dtoa_r+0x8cc>)
 80064f0:	2000      	movs	r0, #0
 80064f2:	f7f9 fed1 	bl	8000298 <__aeabi_dsub>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fe:	f7fa faf5 	bl	8000aec <__aeabi_dcmplt>
 8006502:	2800      	cmp	r0, #0
 8006504:	f43f aef5 	beq.w	80062f2 <_dtoa_r+0x43a>
 8006508:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800650a:	1e73      	subs	r3, r6, #1
 800650c:	9315      	str	r3, [sp, #84]	@ 0x54
 800650e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006512:	2b30      	cmp	r3, #48	@ 0x30
 8006514:	d0f8      	beq.n	8006508 <_dtoa_r+0x650>
 8006516:	9f04      	ldr	r7, [sp, #16]
 8006518:	e73e      	b.n	8006398 <_dtoa_r+0x4e0>
 800651a:	4b9b      	ldr	r3, [pc, #620]	@ (8006788 <_dtoa_r+0x8d0>)
 800651c:	f7fa f874 	bl	8000608 <__aeabi_dmul>
 8006520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006524:	e7bc      	b.n	80064a0 <_dtoa_r+0x5e8>
 8006526:	d10c      	bne.n	8006542 <_dtoa_r+0x68a>
 8006528:	4b98      	ldr	r3, [pc, #608]	@ (800678c <_dtoa_r+0x8d4>)
 800652a:	2200      	movs	r2, #0
 800652c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006530:	f7fa f86a 	bl	8000608 <__aeabi_dmul>
 8006534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006538:	f7fa faec 	bl	8000b14 <__aeabi_dcmpge>
 800653c:	2800      	cmp	r0, #0
 800653e:	f000 8157 	beq.w	80067f0 <_dtoa_r+0x938>
 8006542:	2400      	movs	r4, #0
 8006544:	4625      	mov	r5, r4
 8006546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006548:	43db      	mvns	r3, r3
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	4656      	mov	r6, sl
 800654e:	2700      	movs	r7, #0
 8006550:	4621      	mov	r1, r4
 8006552:	4658      	mov	r0, fp
 8006554:	f000 fbb4 	bl	8006cc0 <_Bfree>
 8006558:	2d00      	cmp	r5, #0
 800655a:	d0dc      	beq.n	8006516 <_dtoa_r+0x65e>
 800655c:	b12f      	cbz	r7, 800656a <_dtoa_r+0x6b2>
 800655e:	42af      	cmp	r7, r5
 8006560:	d003      	beq.n	800656a <_dtoa_r+0x6b2>
 8006562:	4639      	mov	r1, r7
 8006564:	4658      	mov	r0, fp
 8006566:	f000 fbab 	bl	8006cc0 <_Bfree>
 800656a:	4629      	mov	r1, r5
 800656c:	4658      	mov	r0, fp
 800656e:	f000 fba7 	bl	8006cc0 <_Bfree>
 8006572:	e7d0      	b.n	8006516 <_dtoa_r+0x65e>
 8006574:	9704      	str	r7, [sp, #16]
 8006576:	4633      	mov	r3, r6
 8006578:	461e      	mov	r6, r3
 800657a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800657e:	2a39      	cmp	r2, #57	@ 0x39
 8006580:	d107      	bne.n	8006592 <_dtoa_r+0x6da>
 8006582:	459a      	cmp	sl, r3
 8006584:	d1f8      	bne.n	8006578 <_dtoa_r+0x6c0>
 8006586:	9a04      	ldr	r2, [sp, #16]
 8006588:	3201      	adds	r2, #1
 800658a:	9204      	str	r2, [sp, #16]
 800658c:	2230      	movs	r2, #48	@ 0x30
 800658e:	f88a 2000 	strb.w	r2, [sl]
 8006592:	781a      	ldrb	r2, [r3, #0]
 8006594:	3201      	adds	r2, #1
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e7bd      	b.n	8006516 <_dtoa_r+0x65e>
 800659a:	4b7b      	ldr	r3, [pc, #492]	@ (8006788 <_dtoa_r+0x8d0>)
 800659c:	2200      	movs	r2, #0
 800659e:	f7fa f833 	bl	8000608 <__aeabi_dmul>
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	460d      	mov	r5, r1
 80065aa:	f7fa fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f43f aebb 	beq.w	800632a <_dtoa_r+0x472>
 80065b4:	e6f0      	b.n	8006398 <_dtoa_r+0x4e0>
 80065b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	f000 80db 	beq.w	8006774 <_dtoa_r+0x8bc>
 80065be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065c0:	2a01      	cmp	r2, #1
 80065c2:	f300 80bf 	bgt.w	8006744 <_dtoa_r+0x88c>
 80065c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80065c8:	2a00      	cmp	r2, #0
 80065ca:	f000 80b7 	beq.w	800673c <_dtoa_r+0x884>
 80065ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065d4:	4646      	mov	r6, r8
 80065d6:	9a08      	ldr	r2, [sp, #32]
 80065d8:	2101      	movs	r1, #1
 80065da:	441a      	add	r2, r3
 80065dc:	4658      	mov	r0, fp
 80065de:	4498      	add	r8, r3
 80065e0:	9208      	str	r2, [sp, #32]
 80065e2:	f000 fc21 	bl	8006e28 <__i2b>
 80065e6:	4605      	mov	r5, r0
 80065e8:	b15e      	cbz	r6, 8006602 <_dtoa_r+0x74a>
 80065ea:	9b08      	ldr	r3, [sp, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd08      	ble.n	8006602 <_dtoa_r+0x74a>
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	9a08      	ldr	r2, [sp, #32]
 80065f4:	bfa8      	it	ge
 80065f6:	4633      	movge	r3, r6
 80065f8:	eba8 0803 	sub.w	r8, r8, r3
 80065fc:	1af6      	subs	r6, r6, r3
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006604:	b1f3      	cbz	r3, 8006644 <_dtoa_r+0x78c>
 8006606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80b7 	beq.w	800677c <_dtoa_r+0x8c4>
 800660e:	b18c      	cbz	r4, 8006634 <_dtoa_r+0x77c>
 8006610:	4629      	mov	r1, r5
 8006612:	4622      	mov	r2, r4
 8006614:	4658      	mov	r0, fp
 8006616:	f000 fcc7 	bl	8006fa8 <__pow5mult>
 800661a:	464a      	mov	r2, r9
 800661c:	4601      	mov	r1, r0
 800661e:	4605      	mov	r5, r0
 8006620:	4658      	mov	r0, fp
 8006622:	f000 fc17 	bl	8006e54 <__multiply>
 8006626:	4649      	mov	r1, r9
 8006628:	9004      	str	r0, [sp, #16]
 800662a:	4658      	mov	r0, fp
 800662c:	f000 fb48 	bl	8006cc0 <_Bfree>
 8006630:	9b04      	ldr	r3, [sp, #16]
 8006632:	4699      	mov	r9, r3
 8006634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006636:	1b1a      	subs	r2, r3, r4
 8006638:	d004      	beq.n	8006644 <_dtoa_r+0x78c>
 800663a:	4649      	mov	r1, r9
 800663c:	4658      	mov	r0, fp
 800663e:	f000 fcb3 	bl	8006fa8 <__pow5mult>
 8006642:	4681      	mov	r9, r0
 8006644:	2101      	movs	r1, #1
 8006646:	4658      	mov	r0, fp
 8006648:	f000 fbee 	bl	8006e28 <__i2b>
 800664c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800664e:	4604      	mov	r4, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 81cf 	beq.w	80069f4 <_dtoa_r+0xb3c>
 8006656:	461a      	mov	r2, r3
 8006658:	4601      	mov	r1, r0
 800665a:	4658      	mov	r0, fp
 800665c:	f000 fca4 	bl	8006fa8 <__pow5mult>
 8006660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006662:	2b01      	cmp	r3, #1
 8006664:	4604      	mov	r4, r0
 8006666:	f300 8095 	bgt.w	8006794 <_dtoa_r+0x8dc>
 800666a:	9b02      	ldr	r3, [sp, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 8087 	bne.w	8006780 <_dtoa_r+0x8c8>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006678:	2b00      	cmp	r3, #0
 800667a:	f040 8089 	bne.w	8006790 <_dtoa_r+0x8d8>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006684:	0d1b      	lsrs	r3, r3, #20
 8006686:	051b      	lsls	r3, r3, #20
 8006688:	b12b      	cbz	r3, 8006696 <_dtoa_r+0x7de>
 800668a:	9b08      	ldr	r3, [sp, #32]
 800668c:	3301      	adds	r3, #1
 800668e:	9308      	str	r3, [sp, #32]
 8006690:	f108 0801 	add.w	r8, r8, #1
 8006694:	2301      	movs	r3, #1
 8006696:	930a      	str	r3, [sp, #40]	@ 0x28
 8006698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 81b0 	beq.w	8006a00 <_dtoa_r+0xb48>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066a6:	6918      	ldr	r0, [r3, #16]
 80066a8:	f000 fb72 	bl	8006d90 <__hi0bits>
 80066ac:	f1c0 0020 	rsb	r0, r0, #32
 80066b0:	9b08      	ldr	r3, [sp, #32]
 80066b2:	4418      	add	r0, r3
 80066b4:	f010 001f 	ands.w	r0, r0, #31
 80066b8:	d077      	beq.n	80067aa <_dtoa_r+0x8f2>
 80066ba:	f1c0 0320 	rsb	r3, r0, #32
 80066be:	2b04      	cmp	r3, #4
 80066c0:	dd6b      	ble.n	800679a <_dtoa_r+0x8e2>
 80066c2:	9b08      	ldr	r3, [sp, #32]
 80066c4:	f1c0 001c 	rsb	r0, r0, #28
 80066c8:	4403      	add	r3, r0
 80066ca:	4480      	add	r8, r0
 80066cc:	4406      	add	r6, r0
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	f1b8 0f00 	cmp.w	r8, #0
 80066d4:	dd05      	ble.n	80066e2 <_dtoa_r+0x82a>
 80066d6:	4649      	mov	r1, r9
 80066d8:	4642      	mov	r2, r8
 80066da:	4658      	mov	r0, fp
 80066dc:	f000 fcbe 	bl	800705c <__lshift>
 80066e0:	4681      	mov	r9, r0
 80066e2:	9b08      	ldr	r3, [sp, #32]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd05      	ble.n	80066f4 <_dtoa_r+0x83c>
 80066e8:	4621      	mov	r1, r4
 80066ea:	461a      	mov	r2, r3
 80066ec:	4658      	mov	r0, fp
 80066ee:	f000 fcb5 	bl	800705c <__lshift>
 80066f2:	4604      	mov	r4, r0
 80066f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d059      	beq.n	80067ae <_dtoa_r+0x8f6>
 80066fa:	4621      	mov	r1, r4
 80066fc:	4648      	mov	r0, r9
 80066fe:	f000 fd19 	bl	8007134 <__mcmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	da53      	bge.n	80067ae <_dtoa_r+0x8f6>
 8006706:	1e7b      	subs	r3, r7, #1
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	4649      	mov	r1, r9
 800670c:	2300      	movs	r3, #0
 800670e:	220a      	movs	r2, #10
 8006710:	4658      	mov	r0, fp
 8006712:	f000 faf7 	bl	8006d04 <__multadd>
 8006716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006718:	4681      	mov	r9, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8172 	beq.w	8006a04 <_dtoa_r+0xb4c>
 8006720:	2300      	movs	r3, #0
 8006722:	4629      	mov	r1, r5
 8006724:	220a      	movs	r2, #10
 8006726:	4658      	mov	r0, fp
 8006728:	f000 faec 	bl	8006d04 <__multadd>
 800672c:	9b00      	ldr	r3, [sp, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	4605      	mov	r5, r0
 8006732:	dc67      	bgt.n	8006804 <_dtoa_r+0x94c>
 8006734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006736:	2b02      	cmp	r3, #2
 8006738:	dc41      	bgt.n	80067be <_dtoa_r+0x906>
 800673a:	e063      	b.n	8006804 <_dtoa_r+0x94c>
 800673c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800673e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006742:	e746      	b.n	80065d2 <_dtoa_r+0x71a>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	1e5c      	subs	r4, r3, #1
 8006748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800674a:	42a3      	cmp	r3, r4
 800674c:	bfbf      	itttt	lt
 800674e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006750:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006752:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006754:	1ae3      	sublt	r3, r4, r3
 8006756:	bfb4      	ite	lt
 8006758:	18d2      	addlt	r2, r2, r3
 800675a:	1b1c      	subge	r4, r3, r4
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	bfbc      	itt	lt
 8006760:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006762:	2400      	movlt	r4, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfb5      	itete	lt
 8006768:	eba8 0603 	sublt.w	r6, r8, r3
 800676c:	9b07      	ldrge	r3, [sp, #28]
 800676e:	2300      	movlt	r3, #0
 8006770:	4646      	movge	r6, r8
 8006772:	e730      	b.n	80065d6 <_dtoa_r+0x71e>
 8006774:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006776:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006778:	4646      	mov	r6, r8
 800677a:	e735      	b.n	80065e8 <_dtoa_r+0x730>
 800677c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800677e:	e75c      	b.n	800663a <_dtoa_r+0x782>
 8006780:	2300      	movs	r3, #0
 8006782:	e788      	b.n	8006696 <_dtoa_r+0x7de>
 8006784:	3fe00000 	.word	0x3fe00000
 8006788:	40240000 	.word	0x40240000
 800678c:	40140000 	.word	0x40140000
 8006790:	9b02      	ldr	r3, [sp, #8]
 8006792:	e780      	b.n	8006696 <_dtoa_r+0x7de>
 8006794:	2300      	movs	r3, #0
 8006796:	930a      	str	r3, [sp, #40]	@ 0x28
 8006798:	e782      	b.n	80066a0 <_dtoa_r+0x7e8>
 800679a:	d099      	beq.n	80066d0 <_dtoa_r+0x818>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	331c      	adds	r3, #28
 80067a0:	441a      	add	r2, r3
 80067a2:	4498      	add	r8, r3
 80067a4:	441e      	add	r6, r3
 80067a6:	9208      	str	r2, [sp, #32]
 80067a8:	e792      	b.n	80066d0 <_dtoa_r+0x818>
 80067aa:	4603      	mov	r3, r0
 80067ac:	e7f6      	b.n	800679c <_dtoa_r+0x8e4>
 80067ae:	9b07      	ldr	r3, [sp, #28]
 80067b0:	9704      	str	r7, [sp, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc20      	bgt.n	80067f8 <_dtoa_r+0x940>
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	dd1e      	ble.n	80067fc <_dtoa_r+0x944>
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f47f aec0 	bne.w	8006546 <_dtoa_r+0x68e>
 80067c6:	4621      	mov	r1, r4
 80067c8:	2205      	movs	r2, #5
 80067ca:	4658      	mov	r0, fp
 80067cc:	f000 fa9a 	bl	8006d04 <__multadd>
 80067d0:	4601      	mov	r1, r0
 80067d2:	4604      	mov	r4, r0
 80067d4:	4648      	mov	r0, r9
 80067d6:	f000 fcad 	bl	8007134 <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	f77f aeb3 	ble.w	8006546 <_dtoa_r+0x68e>
 80067e0:	4656      	mov	r6, sl
 80067e2:	2331      	movs	r3, #49	@ 0x31
 80067e4:	f806 3b01 	strb.w	r3, [r6], #1
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	3301      	adds	r3, #1
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	e6ae      	b.n	800654e <_dtoa_r+0x696>
 80067f0:	9c07      	ldr	r4, [sp, #28]
 80067f2:	9704      	str	r7, [sp, #16]
 80067f4:	4625      	mov	r5, r4
 80067f6:	e7f3      	b.n	80067e0 <_dtoa_r+0x928>
 80067f8:	9b07      	ldr	r3, [sp, #28]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 8104 	beq.w	8006a0c <_dtoa_r+0xb54>
 8006804:	2e00      	cmp	r6, #0
 8006806:	dd05      	ble.n	8006814 <_dtoa_r+0x95c>
 8006808:	4629      	mov	r1, r5
 800680a:	4632      	mov	r2, r6
 800680c:	4658      	mov	r0, fp
 800680e:	f000 fc25 	bl	800705c <__lshift>
 8006812:	4605      	mov	r5, r0
 8006814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d05a      	beq.n	80068d0 <_dtoa_r+0xa18>
 800681a:	6869      	ldr	r1, [r5, #4]
 800681c:	4658      	mov	r0, fp
 800681e:	f000 fa0f 	bl	8006c40 <_Balloc>
 8006822:	4606      	mov	r6, r0
 8006824:	b928      	cbnz	r0, 8006832 <_dtoa_r+0x97a>
 8006826:	4b84      	ldr	r3, [pc, #528]	@ (8006a38 <_dtoa_r+0xb80>)
 8006828:	4602      	mov	r2, r0
 800682a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800682e:	f7ff bb5a 	b.w	8005ee6 <_dtoa_r+0x2e>
 8006832:	692a      	ldr	r2, [r5, #16]
 8006834:	3202      	adds	r2, #2
 8006836:	0092      	lsls	r2, r2, #2
 8006838:	f105 010c 	add.w	r1, r5, #12
 800683c:	300c      	adds	r0, #12
 800683e:	f001 f803 	bl	8007848 <memcpy>
 8006842:	2201      	movs	r2, #1
 8006844:	4631      	mov	r1, r6
 8006846:	4658      	mov	r0, fp
 8006848:	f000 fc08 	bl	800705c <__lshift>
 800684c:	f10a 0301 	add.w	r3, sl, #1
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	9b00      	ldr	r3, [sp, #0]
 8006854:	4453      	add	r3, sl
 8006856:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	462f      	mov	r7, r5
 8006860:	930a      	str	r3, [sp, #40]	@ 0x28
 8006862:	4605      	mov	r5, r0
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	4621      	mov	r1, r4
 8006868:	3b01      	subs	r3, #1
 800686a:	4648      	mov	r0, r9
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	f7ff fa98 	bl	8005da2 <quorem>
 8006872:	4639      	mov	r1, r7
 8006874:	9002      	str	r0, [sp, #8]
 8006876:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800687a:	4648      	mov	r0, r9
 800687c:	f000 fc5a 	bl	8007134 <__mcmp>
 8006880:	462a      	mov	r2, r5
 8006882:	9008      	str	r0, [sp, #32]
 8006884:	4621      	mov	r1, r4
 8006886:	4658      	mov	r0, fp
 8006888:	f000 fc70 	bl	800716c <__mdiff>
 800688c:	68c2      	ldr	r2, [r0, #12]
 800688e:	4606      	mov	r6, r0
 8006890:	bb02      	cbnz	r2, 80068d4 <_dtoa_r+0xa1c>
 8006892:	4601      	mov	r1, r0
 8006894:	4648      	mov	r0, r9
 8006896:	f000 fc4d 	bl	8007134 <__mcmp>
 800689a:	4602      	mov	r2, r0
 800689c:	4631      	mov	r1, r6
 800689e:	4658      	mov	r0, fp
 80068a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80068a2:	f000 fa0d 	bl	8006cc0 <_Bfree>
 80068a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068aa:	9e07      	ldr	r6, [sp, #28]
 80068ac:	ea43 0102 	orr.w	r1, r3, r2
 80068b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068b2:	4319      	orrs	r1, r3
 80068b4:	d110      	bne.n	80068d8 <_dtoa_r+0xa20>
 80068b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068ba:	d029      	beq.n	8006910 <_dtoa_r+0xa58>
 80068bc:	9b08      	ldr	r3, [sp, #32]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dd02      	ble.n	80068c8 <_dtoa_r+0xa10>
 80068c2:	9b02      	ldr	r3, [sp, #8]
 80068c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	f883 8000 	strb.w	r8, [r3]
 80068ce:	e63f      	b.n	8006550 <_dtoa_r+0x698>
 80068d0:	4628      	mov	r0, r5
 80068d2:	e7bb      	b.n	800684c <_dtoa_r+0x994>
 80068d4:	2201      	movs	r2, #1
 80068d6:	e7e1      	b.n	800689c <_dtoa_r+0x9e4>
 80068d8:	9b08      	ldr	r3, [sp, #32]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	db04      	blt.n	80068e8 <_dtoa_r+0xa30>
 80068de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068e0:	430b      	orrs	r3, r1
 80068e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068e4:	430b      	orrs	r3, r1
 80068e6:	d120      	bne.n	800692a <_dtoa_r+0xa72>
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	dded      	ble.n	80068c8 <_dtoa_r+0xa10>
 80068ec:	4649      	mov	r1, r9
 80068ee:	2201      	movs	r2, #1
 80068f0:	4658      	mov	r0, fp
 80068f2:	f000 fbb3 	bl	800705c <__lshift>
 80068f6:	4621      	mov	r1, r4
 80068f8:	4681      	mov	r9, r0
 80068fa:	f000 fc1b 	bl	8007134 <__mcmp>
 80068fe:	2800      	cmp	r0, #0
 8006900:	dc03      	bgt.n	800690a <_dtoa_r+0xa52>
 8006902:	d1e1      	bne.n	80068c8 <_dtoa_r+0xa10>
 8006904:	f018 0f01 	tst.w	r8, #1
 8006908:	d0de      	beq.n	80068c8 <_dtoa_r+0xa10>
 800690a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800690e:	d1d8      	bne.n	80068c2 <_dtoa_r+0xa0a>
 8006910:	9a00      	ldr	r2, [sp, #0]
 8006912:	2339      	movs	r3, #57	@ 0x39
 8006914:	7013      	strb	r3, [r2, #0]
 8006916:	4633      	mov	r3, r6
 8006918:	461e      	mov	r6, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006920:	2a39      	cmp	r2, #57	@ 0x39
 8006922:	d052      	beq.n	80069ca <_dtoa_r+0xb12>
 8006924:	3201      	adds	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e612      	b.n	8006550 <_dtoa_r+0x698>
 800692a:	2a00      	cmp	r2, #0
 800692c:	dd07      	ble.n	800693e <_dtoa_r+0xa86>
 800692e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006932:	d0ed      	beq.n	8006910 <_dtoa_r+0xa58>
 8006934:	9a00      	ldr	r2, [sp, #0]
 8006936:	f108 0301 	add.w	r3, r8, #1
 800693a:	7013      	strb	r3, [r2, #0]
 800693c:	e608      	b.n	8006550 <_dtoa_r+0x698>
 800693e:	9b07      	ldr	r3, [sp, #28]
 8006940:	9a07      	ldr	r2, [sp, #28]
 8006942:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006948:	4293      	cmp	r3, r2
 800694a:	d028      	beq.n	800699e <_dtoa_r+0xae6>
 800694c:	4649      	mov	r1, r9
 800694e:	2300      	movs	r3, #0
 8006950:	220a      	movs	r2, #10
 8006952:	4658      	mov	r0, fp
 8006954:	f000 f9d6 	bl	8006d04 <__multadd>
 8006958:	42af      	cmp	r7, r5
 800695a:	4681      	mov	r9, r0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	f04f 020a 	mov.w	r2, #10
 8006964:	4639      	mov	r1, r7
 8006966:	4658      	mov	r0, fp
 8006968:	d107      	bne.n	800697a <_dtoa_r+0xac2>
 800696a:	f000 f9cb 	bl	8006d04 <__multadd>
 800696e:	4607      	mov	r7, r0
 8006970:	4605      	mov	r5, r0
 8006972:	9b07      	ldr	r3, [sp, #28]
 8006974:	3301      	adds	r3, #1
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	e774      	b.n	8006864 <_dtoa_r+0x9ac>
 800697a:	f000 f9c3 	bl	8006d04 <__multadd>
 800697e:	4629      	mov	r1, r5
 8006980:	4607      	mov	r7, r0
 8006982:	2300      	movs	r3, #0
 8006984:	220a      	movs	r2, #10
 8006986:	4658      	mov	r0, fp
 8006988:	f000 f9bc 	bl	8006d04 <__multadd>
 800698c:	4605      	mov	r5, r0
 800698e:	e7f0      	b.n	8006972 <_dtoa_r+0xaba>
 8006990:	9b00      	ldr	r3, [sp, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	bfcc      	ite	gt
 8006996:	461e      	movgt	r6, r3
 8006998:	2601      	movle	r6, #1
 800699a:	4456      	add	r6, sl
 800699c:	2700      	movs	r7, #0
 800699e:	4649      	mov	r1, r9
 80069a0:	2201      	movs	r2, #1
 80069a2:	4658      	mov	r0, fp
 80069a4:	f000 fb5a 	bl	800705c <__lshift>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4681      	mov	r9, r0
 80069ac:	f000 fbc2 	bl	8007134 <__mcmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	dcb0      	bgt.n	8006916 <_dtoa_r+0xa5e>
 80069b4:	d102      	bne.n	80069bc <_dtoa_r+0xb04>
 80069b6:	f018 0f01 	tst.w	r8, #1
 80069ba:	d1ac      	bne.n	8006916 <_dtoa_r+0xa5e>
 80069bc:	4633      	mov	r3, r6
 80069be:	461e      	mov	r6, r3
 80069c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069c4:	2a30      	cmp	r2, #48	@ 0x30
 80069c6:	d0fa      	beq.n	80069be <_dtoa_r+0xb06>
 80069c8:	e5c2      	b.n	8006550 <_dtoa_r+0x698>
 80069ca:	459a      	cmp	sl, r3
 80069cc:	d1a4      	bne.n	8006918 <_dtoa_r+0xa60>
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	2331      	movs	r3, #49	@ 0x31
 80069d6:	f88a 3000 	strb.w	r3, [sl]
 80069da:	e5b9      	b.n	8006550 <_dtoa_r+0x698>
 80069dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006a3c <_dtoa_r+0xb84>
 80069e2:	b11b      	cbz	r3, 80069ec <_dtoa_r+0xb34>
 80069e4:	f10a 0308 	add.w	r3, sl, #8
 80069e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	4650      	mov	r0, sl
 80069ee:	b019      	add	sp, #100	@ 0x64
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f77f ae37 	ble.w	800666a <_dtoa_r+0x7b2>
 80069fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a00:	2001      	movs	r0, #1
 8006a02:	e655      	b.n	80066b0 <_dtoa_r+0x7f8>
 8006a04:	9b00      	ldr	r3, [sp, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f77f aed6 	ble.w	80067b8 <_dtoa_r+0x900>
 8006a0c:	4656      	mov	r6, sl
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4648      	mov	r0, r9
 8006a12:	f7ff f9c6 	bl	8005da2 <quorem>
 8006a16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a1a:	f806 8b01 	strb.w	r8, [r6], #1
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	eba6 020a 	sub.w	r2, r6, sl
 8006a24:	4293      	cmp	r3, r2
 8006a26:	ddb3      	ble.n	8006990 <_dtoa_r+0xad8>
 8006a28:	4649      	mov	r1, r9
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	220a      	movs	r2, #10
 8006a2e:	4658      	mov	r0, fp
 8006a30:	f000 f968 	bl	8006d04 <__multadd>
 8006a34:	4681      	mov	r9, r0
 8006a36:	e7ea      	b.n	8006a0e <_dtoa_r+0xb56>
 8006a38:	08007b5e 	.word	0x08007b5e
 8006a3c:	08007ae2 	.word	0x08007ae2

08006a40 <_free_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4605      	mov	r5, r0
 8006a44:	2900      	cmp	r1, #0
 8006a46:	d041      	beq.n	8006acc <_free_r+0x8c>
 8006a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a4c:	1f0c      	subs	r4, r1, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfb8      	it	lt
 8006a52:	18e4      	addlt	r4, r4, r3
 8006a54:	f000 f8e8 	bl	8006c28 <__malloc_lock>
 8006a58:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad0 <_free_r+0x90>)
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	b933      	cbnz	r3, 8006a6c <_free_r+0x2c>
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	6014      	str	r4, [r2, #0]
 8006a62:	4628      	mov	r0, r5
 8006a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a68:	f000 b8e4 	b.w	8006c34 <__malloc_unlock>
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	d908      	bls.n	8006a82 <_free_r+0x42>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	1821      	adds	r1, r4, r0
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf01      	itttt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	1809      	addeq	r1, r1, r0
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	e7ed      	b.n	8006a5e <_free_r+0x1e>
 8006a82:	461a      	mov	r2, r3
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b10b      	cbz	r3, 8006a8c <_free_r+0x4c>
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d9fa      	bls.n	8006a82 <_free_r+0x42>
 8006a8c:	6811      	ldr	r1, [r2, #0]
 8006a8e:	1850      	adds	r0, r2, r1
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d10b      	bne.n	8006aac <_free_r+0x6c>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	4401      	add	r1, r0
 8006a98:	1850      	adds	r0, r2, r1
 8006a9a:	4283      	cmp	r3, r0
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	d1e0      	bne.n	8006a62 <_free_r+0x22>
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	6053      	str	r3, [r2, #4]
 8006aa6:	4408      	add	r0, r1
 8006aa8:	6010      	str	r0, [r2, #0]
 8006aaa:	e7da      	b.n	8006a62 <_free_r+0x22>
 8006aac:	d902      	bls.n	8006ab4 <_free_r+0x74>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	e7d6      	b.n	8006a62 <_free_r+0x22>
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	1821      	adds	r1, r4, r0
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	bf04      	itt	eq
 8006abc:	6819      	ldreq	r1, [r3, #0]
 8006abe:	685b      	ldreq	r3, [r3, #4]
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	bf04      	itt	eq
 8006ac4:	1809      	addeq	r1, r1, r0
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	6054      	str	r4, [r2, #4]
 8006aca:	e7ca      	b.n	8006a62 <_free_r+0x22>
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	2000049c 	.word	0x2000049c

08006ad4 <malloc>:
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <malloc+0xc>)
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f000 b825 	b.w	8006b28 <_malloc_r>
 8006ade:	bf00      	nop
 8006ae0:	20000020 	.word	0x20000020

08006ae4 <sbrk_aligned>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8006b24 <sbrk_aligned+0x40>)
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6831      	ldr	r1, [r6, #0]
 8006aec:	4605      	mov	r5, r0
 8006aee:	b911      	cbnz	r1, 8006af6 <sbrk_aligned+0x12>
 8006af0:	f000 fe9a 	bl	8007828 <_sbrk_r>
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 fe95 	bl	8007828 <_sbrk_r>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d103      	bne.n	8006b0a <sbrk_aligned+0x26>
 8006b02:	f04f 34ff 	mov.w	r4, #4294967295
 8006b06:	4620      	mov	r0, r4
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	1cc4      	adds	r4, r0, #3
 8006b0c:	f024 0403 	bic.w	r4, r4, #3
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d0f8      	beq.n	8006b06 <sbrk_aligned+0x22>
 8006b14:	1a21      	subs	r1, r4, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fe86 	bl	8007828 <_sbrk_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1f2      	bne.n	8006b06 <sbrk_aligned+0x22>
 8006b20:	e7ef      	b.n	8006b02 <sbrk_aligned+0x1e>
 8006b22:	bf00      	nop
 8006b24:	20000498 	.word	0x20000498

08006b28 <_malloc_r>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	1ccd      	adds	r5, r1, #3
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	db01      	blt.n	8006b44 <_malloc_r+0x1c>
 8006b40:	42a9      	cmp	r1, r5
 8006b42:	d904      	bls.n	8006b4e <_malloc_r+0x26>
 8006b44:	230c      	movs	r3, #12
 8006b46:	6033      	str	r3, [r6, #0]
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c24 <_malloc_r+0xfc>
 8006b52:	f000 f869 	bl	8006c28 <__malloc_lock>
 8006b56:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5a:	461c      	mov	r4, r3
 8006b5c:	bb44      	cbnz	r4, 8006bb0 <_malloc_r+0x88>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ffbf 	bl	8006ae4 <sbrk_aligned>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	4604      	mov	r4, r0
 8006b6a:	d158      	bne.n	8006c1e <_malloc_r+0xf6>
 8006b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b70:	4627      	mov	r7, r4
 8006b72:	2f00      	cmp	r7, #0
 8006b74:	d143      	bne.n	8006bfe <_malloc_r+0xd6>
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d04b      	beq.n	8006c12 <_malloc_r+0xea>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	eb04 0903 	add.w	r9, r4, r3
 8006b84:	f000 fe50 	bl	8007828 <_sbrk_r>
 8006b88:	4581      	cmp	r9, r0
 8006b8a:	d142      	bne.n	8006c12 <_malloc_r+0xea>
 8006b8c:	6821      	ldr	r1, [r4, #0]
 8006b8e:	1a6d      	subs	r5, r5, r1
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffa6 	bl	8006ae4 <sbrk_aligned>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d03a      	beq.n	8006c12 <_malloc_r+0xea>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	442b      	add	r3, r5
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	bb62      	cbnz	r2, 8006c04 <_malloc_r+0xdc>
 8006baa:	f8c8 7000 	str.w	r7, [r8]
 8006bae:	e00f      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	1b52      	subs	r2, r2, r5
 8006bb4:	d420      	bmi.n	8006bf8 <_malloc_r+0xd0>
 8006bb6:	2a0b      	cmp	r2, #11
 8006bb8:	d917      	bls.n	8006bea <_malloc_r+0xc2>
 8006bba:	1961      	adds	r1, r4, r5
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	6025      	str	r5, [r4, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	6059      	strne	r1, [r3, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	bf08      	it	eq
 8006bc8:	f8c8 1000 	streq.w	r1, [r8]
 8006bcc:	5162      	str	r2, [r4, r5]
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f82f 	bl	8006c34 <__malloc_unlock>
 8006bd6:	f104 000b 	add.w	r0, r4, #11
 8006bda:	1d23      	adds	r3, r4, #4
 8006bdc:	f020 0007 	bic.w	r0, r0, #7
 8006be0:	1ac2      	subs	r2, r0, r3
 8006be2:	bf1c      	itt	ne
 8006be4:	1a1b      	subne	r3, r3, r0
 8006be6:	50a3      	strne	r3, [r4, r2]
 8006be8:	e7af      	b.n	8006b4a <_malloc_r+0x22>
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	bf0c      	ite	eq
 8006bf0:	f8c8 2000 	streq.w	r2, [r8]
 8006bf4:	605a      	strne	r2, [r3, #4]
 8006bf6:	e7eb      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	6864      	ldr	r4, [r4, #4]
 8006bfc:	e7ae      	b.n	8006b5c <_malloc_r+0x34>
 8006bfe:	463c      	mov	r4, r7
 8006c00:	687f      	ldr	r7, [r7, #4]
 8006c02:	e7b6      	b.n	8006b72 <_malloc_r+0x4a>
 8006c04:	461a      	mov	r2, r3
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d1fb      	bne.n	8006c04 <_malloc_r+0xdc>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6053      	str	r3, [r2, #4]
 8006c10:	e7de      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f80c 	bl	8006c34 <__malloc_unlock>
 8006c1c:	e794      	b.n	8006b48 <_malloc_r+0x20>
 8006c1e:	6005      	str	r5, [r0, #0]
 8006c20:	e7d6      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c22:	bf00      	nop
 8006c24:	2000049c 	.word	0x2000049c

08006c28 <__malloc_lock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__malloc_lock+0x8>)
 8006c2a:	f7ff b8b8 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000494 	.word	0x20000494

08006c34 <__malloc_unlock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	@ (8006c3c <__malloc_unlock+0x8>)
 8006c36:	f7ff b8b3 	b.w	8005da0 <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000494 	.word	0x20000494

08006c40 <_Balloc>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	69c6      	ldr	r6, [r0, #28]
 8006c44:	4604      	mov	r4, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	b976      	cbnz	r6, 8006c68 <_Balloc+0x28>
 8006c4a:	2010      	movs	r0, #16
 8006c4c:	f7ff ff42 	bl	8006ad4 <malloc>
 8006c50:	4602      	mov	r2, r0
 8006c52:	61e0      	str	r0, [r4, #28]
 8006c54:	b920      	cbnz	r0, 8006c60 <_Balloc+0x20>
 8006c56:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <_Balloc+0x78>)
 8006c58:	4818      	ldr	r0, [pc, #96]	@ (8006cbc <_Balloc+0x7c>)
 8006c5a:	216b      	movs	r1, #107	@ 0x6b
 8006c5c:	f000 fe02 	bl	8007864 <__assert_func>
 8006c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c64:	6006      	str	r6, [r0, #0]
 8006c66:	60c6      	str	r6, [r0, #12]
 8006c68:	69e6      	ldr	r6, [r4, #28]
 8006c6a:	68f3      	ldr	r3, [r6, #12]
 8006c6c:	b183      	cbz	r3, 8006c90 <_Balloc+0x50>
 8006c6e:	69e3      	ldr	r3, [r4, #28]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c76:	b9b8      	cbnz	r0, 8006ca8 <_Balloc+0x68>
 8006c78:	2101      	movs	r1, #1
 8006c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8006c7e:	1d72      	adds	r2, r6, #5
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fe0c 	bl	80078a0 <_calloc_r>
 8006c88:	b160      	cbz	r0, 8006ca4 <_Balloc+0x64>
 8006c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c8e:	e00e      	b.n	8006cae <_Balloc+0x6e>
 8006c90:	2221      	movs	r2, #33	@ 0x21
 8006c92:	2104      	movs	r1, #4
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fe03 	bl	80078a0 <_calloc_r>
 8006c9a:	69e3      	ldr	r3, [r4, #28]
 8006c9c:	60f0      	str	r0, [r6, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e4      	bne.n	8006c6e <_Balloc+0x2e>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	6802      	ldr	r2, [r0, #0]
 8006caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cb4:	e7f7      	b.n	8006ca6 <_Balloc+0x66>
 8006cb6:	bf00      	nop
 8006cb8:	08007aef 	.word	0x08007aef
 8006cbc:	08007b6f 	.word	0x08007b6f

08006cc0 <_Bfree>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	69c6      	ldr	r6, [r0, #28]
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	b976      	cbnz	r6, 8006ce8 <_Bfree+0x28>
 8006cca:	2010      	movs	r0, #16
 8006ccc:	f7ff ff02 	bl	8006ad4 <malloc>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	61e8      	str	r0, [r5, #28]
 8006cd4:	b920      	cbnz	r0, 8006ce0 <_Bfree+0x20>
 8006cd6:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <_Bfree+0x3c>)
 8006cd8:	4809      	ldr	r0, [pc, #36]	@ (8006d00 <_Bfree+0x40>)
 8006cda:	218f      	movs	r1, #143	@ 0x8f
 8006cdc:	f000 fdc2 	bl	8007864 <__assert_func>
 8006ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce4:	6006      	str	r6, [r0, #0]
 8006ce6:	60c6      	str	r6, [r0, #12]
 8006ce8:	b13c      	cbz	r4, 8006cfa <_Bfree+0x3a>
 8006cea:	69eb      	ldr	r3, [r5, #28]
 8006cec:	6862      	ldr	r2, [r4, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cf4:	6021      	str	r1, [r4, #0]
 8006cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	08007aef 	.word	0x08007aef
 8006d00:	08007b6f 	.word	0x08007b6f

08006d04 <__multadd>:
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	690d      	ldr	r5, [r1, #16]
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	461e      	mov	r6, r3
 8006d10:	f101 0c14 	add.w	ip, r1, #20
 8006d14:	2000      	movs	r0, #0
 8006d16:	f8dc 3000 	ldr.w	r3, [ip]
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8006d20:	0c1e      	lsrs	r6, r3, #16
 8006d22:	0c0b      	lsrs	r3, r1, #16
 8006d24:	fb02 3306 	mla	r3, r2, r6, r3
 8006d28:	b289      	uxth	r1, r1
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d30:	4285      	cmp	r5, r0
 8006d32:	f84c 1b04 	str.w	r1, [ip], #4
 8006d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d3a:	dcec      	bgt.n	8006d16 <__multadd+0x12>
 8006d3c:	b30e      	cbz	r6, 8006d82 <__multadd+0x7e>
 8006d3e:	68a3      	ldr	r3, [r4, #8]
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	dc19      	bgt.n	8006d78 <__multadd+0x74>
 8006d44:	6861      	ldr	r1, [r4, #4]
 8006d46:	4638      	mov	r0, r7
 8006d48:	3101      	adds	r1, #1
 8006d4a:	f7ff ff79 	bl	8006c40 <_Balloc>
 8006d4e:	4680      	mov	r8, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <__multadd+0x5a>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <__multadd+0x84>)
 8006d56:	480d      	ldr	r0, [pc, #52]	@ (8006d8c <__multadd+0x88>)
 8006d58:	21ba      	movs	r1, #186	@ 0xba
 8006d5a:	f000 fd83 	bl	8007864 <__assert_func>
 8006d5e:	6922      	ldr	r2, [r4, #16]
 8006d60:	3202      	adds	r2, #2
 8006d62:	f104 010c 	add.w	r1, r4, #12
 8006d66:	0092      	lsls	r2, r2, #2
 8006d68:	300c      	adds	r0, #12
 8006d6a:	f000 fd6d 	bl	8007848 <memcpy>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7ff ffa5 	bl	8006cc0 <_Bfree>
 8006d76:	4644      	mov	r4, r8
 8006d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	615e      	str	r6, [r3, #20]
 8006d80:	6125      	str	r5, [r4, #16]
 8006d82:	4620      	mov	r0, r4
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	08007b5e 	.word	0x08007b5e
 8006d8c:	08007b6f 	.word	0x08007b6f

08006d90 <__hi0bits>:
 8006d90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d94:	4603      	mov	r3, r0
 8006d96:	bf36      	itet	cc
 8006d98:	0403      	lslcc	r3, r0, #16
 8006d9a:	2000      	movcs	r0, #0
 8006d9c:	2010      	movcc	r0, #16
 8006d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006da2:	bf3c      	itt	cc
 8006da4:	021b      	lslcc	r3, r3, #8
 8006da6:	3008      	addcc	r0, #8
 8006da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dac:	bf3c      	itt	cc
 8006dae:	011b      	lslcc	r3, r3, #4
 8006db0:	3004      	addcc	r0, #4
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db6:	bf3c      	itt	cc
 8006db8:	009b      	lslcc	r3, r3, #2
 8006dba:	3002      	addcc	r0, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	db05      	blt.n	8006dcc <__hi0bits+0x3c>
 8006dc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dc4:	f100 0001 	add.w	r0, r0, #1
 8006dc8:	bf08      	it	eq
 8006dca:	2020      	moveq	r0, #32
 8006dcc:	4770      	bx	lr

08006dce <__lo0bits>:
 8006dce:	6803      	ldr	r3, [r0, #0]
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	f013 0007 	ands.w	r0, r3, #7
 8006dd6:	d00b      	beq.n	8006df0 <__lo0bits+0x22>
 8006dd8:	07d9      	lsls	r1, r3, #31
 8006dda:	d421      	bmi.n	8006e20 <__lo0bits+0x52>
 8006ddc:	0798      	lsls	r0, r3, #30
 8006dde:	bf49      	itett	mi
 8006de0:	085b      	lsrmi	r3, r3, #1
 8006de2:	089b      	lsrpl	r3, r3, #2
 8006de4:	2001      	movmi	r0, #1
 8006de6:	6013      	strmi	r3, [r2, #0]
 8006de8:	bf5c      	itt	pl
 8006dea:	6013      	strpl	r3, [r2, #0]
 8006dec:	2002      	movpl	r0, #2
 8006dee:	4770      	bx	lr
 8006df0:	b299      	uxth	r1, r3
 8006df2:	b909      	cbnz	r1, 8006df8 <__lo0bits+0x2a>
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	2010      	movs	r0, #16
 8006df8:	b2d9      	uxtb	r1, r3
 8006dfa:	b909      	cbnz	r1, 8006e00 <__lo0bits+0x32>
 8006dfc:	3008      	adds	r0, #8
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	0719      	lsls	r1, r3, #28
 8006e02:	bf04      	itt	eq
 8006e04:	091b      	lsreq	r3, r3, #4
 8006e06:	3004      	addeq	r0, #4
 8006e08:	0799      	lsls	r1, r3, #30
 8006e0a:	bf04      	itt	eq
 8006e0c:	089b      	lsreq	r3, r3, #2
 8006e0e:	3002      	addeq	r0, #2
 8006e10:	07d9      	lsls	r1, r3, #31
 8006e12:	d403      	bmi.n	8006e1c <__lo0bits+0x4e>
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	f100 0001 	add.w	r0, r0, #1
 8006e1a:	d003      	beq.n	8006e24 <__lo0bits+0x56>
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	4770      	bx	lr
 8006e20:	2000      	movs	r0, #0
 8006e22:	4770      	bx	lr
 8006e24:	2020      	movs	r0, #32
 8006e26:	4770      	bx	lr

08006e28 <__i2b>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	f7ff ff07 	bl	8006c40 <_Balloc>
 8006e32:	4602      	mov	r2, r0
 8006e34:	b928      	cbnz	r0, 8006e42 <__i2b+0x1a>
 8006e36:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <__i2b+0x24>)
 8006e38:	4805      	ldr	r0, [pc, #20]	@ (8006e50 <__i2b+0x28>)
 8006e3a:	f240 1145 	movw	r1, #325	@ 0x145
 8006e3e:	f000 fd11 	bl	8007864 <__assert_func>
 8006e42:	2301      	movs	r3, #1
 8006e44:	6144      	str	r4, [r0, #20]
 8006e46:	6103      	str	r3, [r0, #16]
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08007b5e 	.word	0x08007b5e
 8006e50:	08007b6f 	.word	0x08007b6f

08006e54 <__multiply>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4614      	mov	r4, r2
 8006e5a:	690a      	ldr	r2, [r1, #16]
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	bfa8      	it	ge
 8006e62:	4623      	movge	r3, r4
 8006e64:	460f      	mov	r7, r1
 8006e66:	bfa4      	itt	ge
 8006e68:	460c      	movge	r4, r1
 8006e6a:	461f      	movge	r7, r3
 8006e6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006e70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006e74:	68a3      	ldr	r3, [r4, #8]
 8006e76:	6861      	ldr	r1, [r4, #4]
 8006e78:	eb0a 0609 	add.w	r6, sl, r9
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	b085      	sub	sp, #20
 8006e80:	bfb8      	it	lt
 8006e82:	3101      	addlt	r1, #1
 8006e84:	f7ff fedc 	bl	8006c40 <_Balloc>
 8006e88:	b930      	cbnz	r0, 8006e98 <__multiply+0x44>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b44      	ldr	r3, [pc, #272]	@ (8006fa0 <__multiply+0x14c>)
 8006e8e:	4845      	ldr	r0, [pc, #276]	@ (8006fa4 <__multiply+0x150>)
 8006e90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e94:	f000 fce6 	bl	8007864 <__assert_func>
 8006e98:	f100 0514 	add.w	r5, r0, #20
 8006e9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	d321      	bcc.n	8006eec <__multiply+0x98>
 8006ea8:	f107 0114 	add.w	r1, r7, #20
 8006eac:	f104 0214 	add.w	r2, r4, #20
 8006eb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006eb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006eb8:	9302      	str	r3, [sp, #8]
 8006eba:	1b13      	subs	r3, r2, r4
 8006ebc:	3b15      	subs	r3, #21
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	f104 0715 	add.w	r7, r4, #21
 8006ec8:	42ba      	cmp	r2, r7
 8006eca:	bf38      	it	cc
 8006ecc:	2304      	movcc	r3, #4
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	9b02      	ldr	r3, [sp, #8]
 8006ed2:	9103      	str	r1, [sp, #12]
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	d80c      	bhi.n	8006ef2 <__multiply+0x9e>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	dd03      	ble.n	8006ee4 <__multiply+0x90>
 8006edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d05b      	beq.n	8006f9c <__multiply+0x148>
 8006ee4:	6106      	str	r6, [r0, #16]
 8006ee6:	b005      	add	sp, #20
 8006ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eec:	f843 2b04 	str.w	r2, [r3], #4
 8006ef0:	e7d8      	b.n	8006ea4 <__multiply+0x50>
 8006ef2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ef6:	f1ba 0f00 	cmp.w	sl, #0
 8006efa:	d024      	beq.n	8006f46 <__multiply+0xf2>
 8006efc:	f104 0e14 	add.w	lr, r4, #20
 8006f00:	46a9      	mov	r9, r5
 8006f02:	f04f 0c00 	mov.w	ip, #0
 8006f06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f0a:	f8d9 3000 	ldr.w	r3, [r9]
 8006f0e:	fa1f fb87 	uxth.w	fp, r7
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f1c:	f8d9 7000 	ldr.w	r7, [r9]
 8006f20:	4463      	add	r3, ip
 8006f22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f26:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f34:	4572      	cmp	r2, lr
 8006f36:	f849 3b04 	str.w	r3, [r9], #4
 8006f3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f3e:	d8e2      	bhi.n	8006f06 <__multiply+0xb2>
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	f845 c003 	str.w	ip, [r5, r3]
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f4c:	3104      	adds	r1, #4
 8006f4e:	f1b9 0f00 	cmp.w	r9, #0
 8006f52:	d021      	beq.n	8006f98 <__multiply+0x144>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	f104 0c14 	add.w	ip, r4, #20
 8006f5a:	46ae      	mov	lr, r5
 8006f5c:	f04f 0a00 	mov.w	sl, #0
 8006f60:	f8bc b000 	ldrh.w	fp, [ip]
 8006f64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006f68:	fb09 770b 	mla	r7, r9, fp, r7
 8006f6c:	4457      	add	r7, sl
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f74:	f84e 3b04 	str.w	r3, [lr], #4
 8006f78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f80:	f8be 3000 	ldrh.w	r3, [lr]
 8006f84:	fb09 330a 	mla	r3, r9, sl, r3
 8006f88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f8c:	4562      	cmp	r2, ip
 8006f8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f92:	d8e5      	bhi.n	8006f60 <__multiply+0x10c>
 8006f94:	9f01      	ldr	r7, [sp, #4]
 8006f96:	51eb      	str	r3, [r5, r7]
 8006f98:	3504      	adds	r5, #4
 8006f9a:	e799      	b.n	8006ed0 <__multiply+0x7c>
 8006f9c:	3e01      	subs	r6, #1
 8006f9e:	e79b      	b.n	8006ed8 <__multiply+0x84>
 8006fa0:	08007b5e 	.word	0x08007b5e
 8006fa4:	08007b6f 	.word	0x08007b6f

08006fa8 <__pow5mult>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4615      	mov	r5, r2
 8006fae:	f012 0203 	ands.w	r2, r2, #3
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	d007      	beq.n	8006fc8 <__pow5mult+0x20>
 8006fb8:	4c25      	ldr	r4, [pc, #148]	@ (8007050 <__pow5mult+0xa8>)
 8006fba:	3a01      	subs	r2, #1
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fc2:	f7ff fe9f 	bl	8006d04 <__multadd>
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	10ad      	asrs	r5, r5, #2
 8006fca:	d03d      	beq.n	8007048 <__pow5mult+0xa0>
 8006fcc:	69fc      	ldr	r4, [r7, #28]
 8006fce:	b97c      	cbnz	r4, 8006ff0 <__pow5mult+0x48>
 8006fd0:	2010      	movs	r0, #16
 8006fd2:	f7ff fd7f 	bl	8006ad4 <malloc>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	61f8      	str	r0, [r7, #28]
 8006fda:	b928      	cbnz	r0, 8006fe8 <__pow5mult+0x40>
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007054 <__pow5mult+0xac>)
 8006fde:	481e      	ldr	r0, [pc, #120]	@ (8007058 <__pow5mult+0xb0>)
 8006fe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fe4:	f000 fc3e 	bl	8007864 <__assert_func>
 8006fe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fec:	6004      	str	r4, [r0, #0]
 8006fee:	60c4      	str	r4, [r0, #12]
 8006ff0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ff8:	b94c      	cbnz	r4, 800700e <__pow5mult+0x66>
 8006ffa:	f240 2171 	movw	r1, #625	@ 0x271
 8006ffe:	4638      	mov	r0, r7
 8007000:	f7ff ff12 	bl	8006e28 <__i2b>
 8007004:	2300      	movs	r3, #0
 8007006:	f8c8 0008 	str.w	r0, [r8, #8]
 800700a:	4604      	mov	r4, r0
 800700c:	6003      	str	r3, [r0, #0]
 800700e:	f04f 0900 	mov.w	r9, #0
 8007012:	07eb      	lsls	r3, r5, #31
 8007014:	d50a      	bpl.n	800702c <__pow5mult+0x84>
 8007016:	4631      	mov	r1, r6
 8007018:	4622      	mov	r2, r4
 800701a:	4638      	mov	r0, r7
 800701c:	f7ff ff1a 	bl	8006e54 <__multiply>
 8007020:	4631      	mov	r1, r6
 8007022:	4680      	mov	r8, r0
 8007024:	4638      	mov	r0, r7
 8007026:	f7ff fe4b 	bl	8006cc0 <_Bfree>
 800702a:	4646      	mov	r6, r8
 800702c:	106d      	asrs	r5, r5, #1
 800702e:	d00b      	beq.n	8007048 <__pow5mult+0xa0>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	b938      	cbnz	r0, 8007044 <__pow5mult+0x9c>
 8007034:	4622      	mov	r2, r4
 8007036:	4621      	mov	r1, r4
 8007038:	4638      	mov	r0, r7
 800703a:	f7ff ff0b 	bl	8006e54 <__multiply>
 800703e:	6020      	str	r0, [r4, #0]
 8007040:	f8c0 9000 	str.w	r9, [r0]
 8007044:	4604      	mov	r4, r0
 8007046:	e7e4      	b.n	8007012 <__pow5mult+0x6a>
 8007048:	4630      	mov	r0, r6
 800704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704e:	bf00      	nop
 8007050:	08007bc8 	.word	0x08007bc8
 8007054:	08007aef 	.word	0x08007aef
 8007058:	08007b6f 	.word	0x08007b6f

0800705c <__lshift>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	460c      	mov	r4, r1
 8007062:	6849      	ldr	r1, [r1, #4]
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	4607      	mov	r7, r0
 800706e:	4691      	mov	r9, r2
 8007070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007074:	f108 0601 	add.w	r6, r8, #1
 8007078:	42b3      	cmp	r3, r6
 800707a:	db0b      	blt.n	8007094 <__lshift+0x38>
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff fddf 	bl	8006c40 <_Balloc>
 8007082:	4605      	mov	r5, r0
 8007084:	b948      	cbnz	r0, 800709a <__lshift+0x3e>
 8007086:	4602      	mov	r2, r0
 8007088:	4b28      	ldr	r3, [pc, #160]	@ (800712c <__lshift+0xd0>)
 800708a:	4829      	ldr	r0, [pc, #164]	@ (8007130 <__lshift+0xd4>)
 800708c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007090:	f000 fbe8 	bl	8007864 <__assert_func>
 8007094:	3101      	adds	r1, #1
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	e7ee      	b.n	8007078 <__lshift+0x1c>
 800709a:	2300      	movs	r3, #0
 800709c:	f100 0114 	add.w	r1, r0, #20
 80070a0:	f100 0210 	add.w	r2, r0, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	4553      	cmp	r3, sl
 80070a8:	db33      	blt.n	8007112 <__lshift+0xb6>
 80070aa:	6920      	ldr	r0, [r4, #16]
 80070ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b0:	f104 0314 	add.w	r3, r4, #20
 80070b4:	f019 091f 	ands.w	r9, r9, #31
 80070b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070c0:	d02b      	beq.n	800711a <__lshift+0xbe>
 80070c2:	f1c9 0e20 	rsb	lr, r9, #32
 80070c6:	468a      	mov	sl, r1
 80070c8:	2200      	movs	r2, #0
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	fa00 f009 	lsl.w	r0, r0, r9
 80070d0:	4310      	orrs	r0, r2
 80070d2:	f84a 0b04 	str.w	r0, [sl], #4
 80070d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070da:	459c      	cmp	ip, r3
 80070dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80070e0:	d8f3      	bhi.n	80070ca <__lshift+0x6e>
 80070e2:	ebac 0304 	sub.w	r3, ip, r4
 80070e6:	3b15      	subs	r3, #21
 80070e8:	f023 0303 	bic.w	r3, r3, #3
 80070ec:	3304      	adds	r3, #4
 80070ee:	f104 0015 	add.w	r0, r4, #21
 80070f2:	4584      	cmp	ip, r0
 80070f4:	bf38      	it	cc
 80070f6:	2304      	movcc	r3, #4
 80070f8:	50ca      	str	r2, [r1, r3]
 80070fa:	b10a      	cbz	r2, 8007100 <__lshift+0xa4>
 80070fc:	f108 0602 	add.w	r6, r8, #2
 8007100:	3e01      	subs	r6, #1
 8007102:	4638      	mov	r0, r7
 8007104:	612e      	str	r6, [r5, #16]
 8007106:	4621      	mov	r1, r4
 8007108:	f7ff fdda 	bl	8006cc0 <_Bfree>
 800710c:	4628      	mov	r0, r5
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	f842 0f04 	str.w	r0, [r2, #4]!
 8007116:	3301      	adds	r3, #1
 8007118:	e7c5      	b.n	80070a6 <__lshift+0x4a>
 800711a:	3904      	subs	r1, #4
 800711c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007120:	f841 2f04 	str.w	r2, [r1, #4]!
 8007124:	459c      	cmp	ip, r3
 8007126:	d8f9      	bhi.n	800711c <__lshift+0xc0>
 8007128:	e7ea      	b.n	8007100 <__lshift+0xa4>
 800712a:	bf00      	nop
 800712c:	08007b5e 	.word	0x08007b5e
 8007130:	08007b6f 	.word	0x08007b6f

08007134 <__mcmp>:
 8007134:	690a      	ldr	r2, [r1, #16]
 8007136:	4603      	mov	r3, r0
 8007138:	6900      	ldr	r0, [r0, #16]
 800713a:	1a80      	subs	r0, r0, r2
 800713c:	b530      	push	{r4, r5, lr}
 800713e:	d10e      	bne.n	800715e <__mcmp+0x2a>
 8007140:	3314      	adds	r3, #20
 8007142:	3114      	adds	r1, #20
 8007144:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007148:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800714c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007150:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007154:	4295      	cmp	r5, r2
 8007156:	d003      	beq.n	8007160 <__mcmp+0x2c>
 8007158:	d205      	bcs.n	8007166 <__mcmp+0x32>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	bd30      	pop	{r4, r5, pc}
 8007160:	42a3      	cmp	r3, r4
 8007162:	d3f3      	bcc.n	800714c <__mcmp+0x18>
 8007164:	e7fb      	b.n	800715e <__mcmp+0x2a>
 8007166:	2001      	movs	r0, #1
 8007168:	e7f9      	b.n	800715e <__mcmp+0x2a>
	...

0800716c <__mdiff>:
 800716c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	4689      	mov	r9, r1
 8007172:	4606      	mov	r6, r0
 8007174:	4611      	mov	r1, r2
 8007176:	4648      	mov	r0, r9
 8007178:	4614      	mov	r4, r2
 800717a:	f7ff ffdb 	bl	8007134 <__mcmp>
 800717e:	1e05      	subs	r5, r0, #0
 8007180:	d112      	bne.n	80071a8 <__mdiff+0x3c>
 8007182:	4629      	mov	r1, r5
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff fd5b 	bl	8006c40 <_Balloc>
 800718a:	4602      	mov	r2, r0
 800718c:	b928      	cbnz	r0, 800719a <__mdiff+0x2e>
 800718e:	4b3f      	ldr	r3, [pc, #252]	@ (800728c <__mdiff+0x120>)
 8007190:	f240 2137 	movw	r1, #567	@ 0x237
 8007194:	483e      	ldr	r0, [pc, #248]	@ (8007290 <__mdiff+0x124>)
 8007196:	f000 fb65 	bl	8007864 <__assert_func>
 800719a:	2301      	movs	r3, #1
 800719c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071a0:	4610      	mov	r0, r2
 80071a2:	b003      	add	sp, #12
 80071a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a8:	bfbc      	itt	lt
 80071aa:	464b      	movlt	r3, r9
 80071ac:	46a1      	movlt	r9, r4
 80071ae:	4630      	mov	r0, r6
 80071b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071b4:	bfba      	itte	lt
 80071b6:	461c      	movlt	r4, r3
 80071b8:	2501      	movlt	r5, #1
 80071ba:	2500      	movge	r5, #0
 80071bc:	f7ff fd40 	bl	8006c40 <_Balloc>
 80071c0:	4602      	mov	r2, r0
 80071c2:	b918      	cbnz	r0, 80071cc <__mdiff+0x60>
 80071c4:	4b31      	ldr	r3, [pc, #196]	@ (800728c <__mdiff+0x120>)
 80071c6:	f240 2145 	movw	r1, #581	@ 0x245
 80071ca:	e7e3      	b.n	8007194 <__mdiff+0x28>
 80071cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071d0:	6926      	ldr	r6, [r4, #16]
 80071d2:	60c5      	str	r5, [r0, #12]
 80071d4:	f109 0310 	add.w	r3, r9, #16
 80071d8:	f109 0514 	add.w	r5, r9, #20
 80071dc:	f104 0e14 	add.w	lr, r4, #20
 80071e0:	f100 0b14 	add.w	fp, r0, #20
 80071e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	46d9      	mov	r9, fp
 80071f0:	f04f 0c00 	mov.w	ip, #0
 80071f4:	9b01      	ldr	r3, [sp, #4]
 80071f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	fa1f f38a 	uxth.w	r3, sl
 8007204:	4619      	mov	r1, r3
 8007206:	b283      	uxth	r3, r0
 8007208:	1acb      	subs	r3, r1, r3
 800720a:	0c00      	lsrs	r0, r0, #16
 800720c:	4463      	add	r3, ip
 800720e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007212:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007216:	b29b      	uxth	r3, r3
 8007218:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800721c:	4576      	cmp	r6, lr
 800721e:	f849 3b04 	str.w	r3, [r9], #4
 8007222:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007226:	d8e5      	bhi.n	80071f4 <__mdiff+0x88>
 8007228:	1b33      	subs	r3, r6, r4
 800722a:	3b15      	subs	r3, #21
 800722c:	f023 0303 	bic.w	r3, r3, #3
 8007230:	3415      	adds	r4, #21
 8007232:	3304      	adds	r3, #4
 8007234:	42a6      	cmp	r6, r4
 8007236:	bf38      	it	cc
 8007238:	2304      	movcc	r3, #4
 800723a:	441d      	add	r5, r3
 800723c:	445b      	add	r3, fp
 800723e:	461e      	mov	r6, r3
 8007240:	462c      	mov	r4, r5
 8007242:	4544      	cmp	r4, r8
 8007244:	d30e      	bcc.n	8007264 <__mdiff+0xf8>
 8007246:	f108 0103 	add.w	r1, r8, #3
 800724a:	1b49      	subs	r1, r1, r5
 800724c:	f021 0103 	bic.w	r1, r1, #3
 8007250:	3d03      	subs	r5, #3
 8007252:	45a8      	cmp	r8, r5
 8007254:	bf38      	it	cc
 8007256:	2100      	movcc	r1, #0
 8007258:	440b      	add	r3, r1
 800725a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800725e:	b191      	cbz	r1, 8007286 <__mdiff+0x11a>
 8007260:	6117      	str	r7, [r2, #16]
 8007262:	e79d      	b.n	80071a0 <__mdiff+0x34>
 8007264:	f854 1b04 	ldr.w	r1, [r4], #4
 8007268:	46e6      	mov	lr, ip
 800726a:	0c08      	lsrs	r0, r1, #16
 800726c:	fa1c fc81 	uxtah	ip, ip, r1
 8007270:	4471      	add	r1, lr
 8007272:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007276:	b289      	uxth	r1, r1
 8007278:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800727c:	f846 1b04 	str.w	r1, [r6], #4
 8007280:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007284:	e7dd      	b.n	8007242 <__mdiff+0xd6>
 8007286:	3f01      	subs	r7, #1
 8007288:	e7e7      	b.n	800725a <__mdiff+0xee>
 800728a:	bf00      	nop
 800728c:	08007b5e 	.word	0x08007b5e
 8007290:	08007b6f 	.word	0x08007b6f

08007294 <__d2b>:
 8007294:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007298:	460f      	mov	r7, r1
 800729a:	2101      	movs	r1, #1
 800729c:	ec59 8b10 	vmov	r8, r9, d0
 80072a0:	4616      	mov	r6, r2
 80072a2:	f7ff fccd 	bl	8006c40 <_Balloc>
 80072a6:	4604      	mov	r4, r0
 80072a8:	b930      	cbnz	r0, 80072b8 <__d2b+0x24>
 80072aa:	4602      	mov	r2, r0
 80072ac:	4b23      	ldr	r3, [pc, #140]	@ (800733c <__d2b+0xa8>)
 80072ae:	4824      	ldr	r0, [pc, #144]	@ (8007340 <__d2b+0xac>)
 80072b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80072b4:	f000 fad6 	bl	8007864 <__assert_func>
 80072b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c0:	b10d      	cbz	r5, 80072c6 <__d2b+0x32>
 80072c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	f1b8 0300 	subs.w	r3, r8, #0
 80072cc:	d023      	beq.n	8007316 <__d2b+0x82>
 80072ce:	4668      	mov	r0, sp
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	f7ff fd7c 	bl	8006dce <__lo0bits>
 80072d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072da:	b1d0      	cbz	r0, 8007312 <__d2b+0x7e>
 80072dc:	f1c0 0320 	rsb	r3, r0, #32
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	430b      	orrs	r3, r1
 80072e6:	40c2      	lsrs	r2, r0
 80072e8:	6163      	str	r3, [r4, #20]
 80072ea:	9201      	str	r2, [sp, #4]
 80072ec:	9b01      	ldr	r3, [sp, #4]
 80072ee:	61a3      	str	r3, [r4, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	bf0c      	ite	eq
 80072f4:	2201      	moveq	r2, #1
 80072f6:	2202      	movne	r2, #2
 80072f8:	6122      	str	r2, [r4, #16]
 80072fa:	b1a5      	cbz	r5, 8007326 <__d2b+0x92>
 80072fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007300:	4405      	add	r5, r0
 8007302:	603d      	str	r5, [r7, #0]
 8007304:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007308:	6030      	str	r0, [r6, #0]
 800730a:	4620      	mov	r0, r4
 800730c:	b003      	add	sp, #12
 800730e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007312:	6161      	str	r1, [r4, #20]
 8007314:	e7ea      	b.n	80072ec <__d2b+0x58>
 8007316:	a801      	add	r0, sp, #4
 8007318:	f7ff fd59 	bl	8006dce <__lo0bits>
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	6163      	str	r3, [r4, #20]
 8007320:	3020      	adds	r0, #32
 8007322:	2201      	movs	r2, #1
 8007324:	e7e8      	b.n	80072f8 <__d2b+0x64>
 8007326:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800732a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800732e:	6038      	str	r0, [r7, #0]
 8007330:	6918      	ldr	r0, [r3, #16]
 8007332:	f7ff fd2d 	bl	8006d90 <__hi0bits>
 8007336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800733a:	e7e5      	b.n	8007308 <__d2b+0x74>
 800733c:	08007b5e 	.word	0x08007b5e
 8007340:	08007b6f 	.word	0x08007b6f

08007344 <__sfputc_r>:
 8007344:	6893      	ldr	r3, [r2, #8]
 8007346:	3b01      	subs	r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	b410      	push	{r4}
 800734c:	6093      	str	r3, [r2, #8]
 800734e:	da08      	bge.n	8007362 <__sfputc_r+0x1e>
 8007350:	6994      	ldr	r4, [r2, #24]
 8007352:	42a3      	cmp	r3, r4
 8007354:	db01      	blt.n	800735a <__sfputc_r+0x16>
 8007356:	290a      	cmp	r1, #10
 8007358:	d103      	bne.n	8007362 <__sfputc_r+0x1e>
 800735a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735e:	f7fe bc0c 	b.w	8005b7a <__swbuf_r>
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	1c58      	adds	r0, r3, #1
 8007366:	6010      	str	r0, [r2, #0]
 8007368:	7019      	strb	r1, [r3, #0]
 800736a:	4608      	mov	r0, r1
 800736c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007370:	4770      	bx	lr

08007372 <__sfputs_r>:
 8007372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007374:	4606      	mov	r6, r0
 8007376:	460f      	mov	r7, r1
 8007378:	4614      	mov	r4, r2
 800737a:	18d5      	adds	r5, r2, r3
 800737c:	42ac      	cmp	r4, r5
 800737e:	d101      	bne.n	8007384 <__sfputs_r+0x12>
 8007380:	2000      	movs	r0, #0
 8007382:	e007      	b.n	8007394 <__sfputs_r+0x22>
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	463a      	mov	r2, r7
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ffda 	bl	8007344 <__sfputc_r>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d1f3      	bne.n	800737c <__sfputs_r+0xa>
 8007394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007398 <_vfiprintf_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	460d      	mov	r5, r1
 800739e:	b09d      	sub	sp, #116	@ 0x74
 80073a0:	4614      	mov	r4, r2
 80073a2:	4698      	mov	r8, r3
 80073a4:	4606      	mov	r6, r0
 80073a6:	b118      	cbz	r0, 80073b0 <_vfiprintf_r+0x18>
 80073a8:	6a03      	ldr	r3, [r0, #32]
 80073aa:	b90b      	cbnz	r3, 80073b0 <_vfiprintf_r+0x18>
 80073ac:	f7fe fafc 	bl	80059a8 <__sinit>
 80073b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b2:	07d9      	lsls	r1, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_vfiprintf_r+0x2a>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	059a      	lsls	r2, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_vfiprintf_r+0x2a>
 80073bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073be:	f7fe fcee 	bl	8005d9e <__retarget_lock_acquire_recursive>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	071b      	lsls	r3, r3, #28
 80073c6:	d501      	bpl.n	80073cc <_vfiprintf_r+0x34>
 80073c8:	692b      	ldr	r3, [r5, #16]
 80073ca:	b99b      	cbnz	r3, 80073f4 <_vfiprintf_r+0x5c>
 80073cc:	4629      	mov	r1, r5
 80073ce:	4630      	mov	r0, r6
 80073d0:	f7fe fc12 	bl	8005bf8 <__swsetup_r>
 80073d4:	b170      	cbz	r0, 80073f4 <_vfiprintf_r+0x5c>
 80073d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073d8:	07dc      	lsls	r4, r3, #31
 80073da:	d504      	bpl.n	80073e6 <_vfiprintf_r+0x4e>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	b01d      	add	sp, #116	@ 0x74
 80073e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	0598      	lsls	r0, r3, #22
 80073ea:	d4f7      	bmi.n	80073dc <_vfiprintf_r+0x44>
 80073ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073ee:	f7fe fcd7 	bl	8005da0 <__retarget_lock_release_recursive>
 80073f2:	e7f3      	b.n	80073dc <_vfiprintf_r+0x44>
 80073f4:	2300      	movs	r3, #0
 80073f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073f8:	2320      	movs	r3, #32
 80073fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007402:	2330      	movs	r3, #48	@ 0x30
 8007404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075b4 <_vfiprintf_r+0x21c>
 8007408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800740c:	f04f 0901 	mov.w	r9, #1
 8007410:	4623      	mov	r3, r4
 8007412:	469a      	mov	sl, r3
 8007414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007418:	b10a      	cbz	r2, 800741e <_vfiprintf_r+0x86>
 800741a:	2a25      	cmp	r2, #37	@ 0x25
 800741c:	d1f9      	bne.n	8007412 <_vfiprintf_r+0x7a>
 800741e:	ebba 0b04 	subs.w	fp, sl, r4
 8007422:	d00b      	beq.n	800743c <_vfiprintf_r+0xa4>
 8007424:	465b      	mov	r3, fp
 8007426:	4622      	mov	r2, r4
 8007428:	4629      	mov	r1, r5
 800742a:	4630      	mov	r0, r6
 800742c:	f7ff ffa1 	bl	8007372 <__sfputs_r>
 8007430:	3001      	adds	r0, #1
 8007432:	f000 80a7 	beq.w	8007584 <_vfiprintf_r+0x1ec>
 8007436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007438:	445a      	add	r2, fp
 800743a:	9209      	str	r2, [sp, #36]	@ 0x24
 800743c:	f89a 3000 	ldrb.w	r3, [sl]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 809f 	beq.w	8007584 <_vfiprintf_r+0x1ec>
 8007446:	2300      	movs	r3, #0
 8007448:	f04f 32ff 	mov.w	r2, #4294967295
 800744c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007450:	f10a 0a01 	add.w	sl, sl, #1
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800745c:	931a      	str	r3, [sp, #104]	@ 0x68
 800745e:	4654      	mov	r4, sl
 8007460:	2205      	movs	r2, #5
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	4853      	ldr	r0, [pc, #332]	@ (80075b4 <_vfiprintf_r+0x21c>)
 8007468:	f7f8 feba 	bl	80001e0 <memchr>
 800746c:	9a04      	ldr	r2, [sp, #16]
 800746e:	b9d8      	cbnz	r0, 80074a8 <_vfiprintf_r+0x110>
 8007470:	06d1      	lsls	r1, r2, #27
 8007472:	bf44      	itt	mi
 8007474:	2320      	movmi	r3, #32
 8007476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800747a:	0713      	lsls	r3, r2, #28
 800747c:	bf44      	itt	mi
 800747e:	232b      	movmi	r3, #43	@ 0x2b
 8007480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007484:	f89a 3000 	ldrb.w	r3, [sl]
 8007488:	2b2a      	cmp	r3, #42	@ 0x2a
 800748a:	d015      	beq.n	80074b8 <_vfiprintf_r+0x120>
 800748c:	9a07      	ldr	r2, [sp, #28]
 800748e:	4654      	mov	r4, sl
 8007490:	2000      	movs	r0, #0
 8007492:	f04f 0c0a 	mov.w	ip, #10
 8007496:	4621      	mov	r1, r4
 8007498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800749c:	3b30      	subs	r3, #48	@ 0x30
 800749e:	2b09      	cmp	r3, #9
 80074a0:	d94b      	bls.n	800753a <_vfiprintf_r+0x1a2>
 80074a2:	b1b0      	cbz	r0, 80074d2 <_vfiprintf_r+0x13a>
 80074a4:	9207      	str	r2, [sp, #28]
 80074a6:	e014      	b.n	80074d2 <_vfiprintf_r+0x13a>
 80074a8:	eba0 0308 	sub.w	r3, r0, r8
 80074ac:	fa09 f303 	lsl.w	r3, r9, r3
 80074b0:	4313      	orrs	r3, r2
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	46a2      	mov	sl, r4
 80074b6:	e7d2      	b.n	800745e <_vfiprintf_r+0xc6>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	1d19      	adds	r1, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	9103      	str	r1, [sp, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	bfbb      	ittet	lt
 80074c4:	425b      	neglt	r3, r3
 80074c6:	f042 0202 	orrlt.w	r2, r2, #2
 80074ca:	9307      	strge	r3, [sp, #28]
 80074cc:	9307      	strlt	r3, [sp, #28]
 80074ce:	bfb8      	it	lt
 80074d0:	9204      	strlt	r2, [sp, #16]
 80074d2:	7823      	ldrb	r3, [r4, #0]
 80074d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80074d6:	d10a      	bne.n	80074ee <_vfiprintf_r+0x156>
 80074d8:	7863      	ldrb	r3, [r4, #1]
 80074da:	2b2a      	cmp	r3, #42	@ 0x2a
 80074dc:	d132      	bne.n	8007544 <_vfiprintf_r+0x1ac>
 80074de:	9b03      	ldr	r3, [sp, #12]
 80074e0:	1d1a      	adds	r2, r3, #4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	9203      	str	r2, [sp, #12]
 80074e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074ea:	3402      	adds	r4, #2
 80074ec:	9305      	str	r3, [sp, #20]
 80074ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075c4 <_vfiprintf_r+0x22c>
 80074f2:	7821      	ldrb	r1, [r4, #0]
 80074f4:	2203      	movs	r2, #3
 80074f6:	4650      	mov	r0, sl
 80074f8:	f7f8 fe72 	bl	80001e0 <memchr>
 80074fc:	b138      	cbz	r0, 800750e <_vfiprintf_r+0x176>
 80074fe:	9b04      	ldr	r3, [sp, #16]
 8007500:	eba0 000a 	sub.w	r0, r0, sl
 8007504:	2240      	movs	r2, #64	@ 0x40
 8007506:	4082      	lsls	r2, r0
 8007508:	4313      	orrs	r3, r2
 800750a:	3401      	adds	r4, #1
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007512:	4829      	ldr	r0, [pc, #164]	@ (80075b8 <_vfiprintf_r+0x220>)
 8007514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007518:	2206      	movs	r2, #6
 800751a:	f7f8 fe61 	bl	80001e0 <memchr>
 800751e:	2800      	cmp	r0, #0
 8007520:	d03f      	beq.n	80075a2 <_vfiprintf_r+0x20a>
 8007522:	4b26      	ldr	r3, [pc, #152]	@ (80075bc <_vfiprintf_r+0x224>)
 8007524:	bb1b      	cbnz	r3, 800756e <_vfiprintf_r+0x1d6>
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	3307      	adds	r3, #7
 800752a:	f023 0307 	bic.w	r3, r3, #7
 800752e:	3308      	adds	r3, #8
 8007530:	9303      	str	r3, [sp, #12]
 8007532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007534:	443b      	add	r3, r7
 8007536:	9309      	str	r3, [sp, #36]	@ 0x24
 8007538:	e76a      	b.n	8007410 <_vfiprintf_r+0x78>
 800753a:	fb0c 3202 	mla	r2, ip, r2, r3
 800753e:	460c      	mov	r4, r1
 8007540:	2001      	movs	r0, #1
 8007542:	e7a8      	b.n	8007496 <_vfiprintf_r+0xfe>
 8007544:	2300      	movs	r3, #0
 8007546:	3401      	adds	r4, #1
 8007548:	9305      	str	r3, [sp, #20]
 800754a:	4619      	mov	r1, r3
 800754c:	f04f 0c0a 	mov.w	ip, #10
 8007550:	4620      	mov	r0, r4
 8007552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007556:	3a30      	subs	r2, #48	@ 0x30
 8007558:	2a09      	cmp	r2, #9
 800755a:	d903      	bls.n	8007564 <_vfiprintf_r+0x1cc>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0c6      	beq.n	80074ee <_vfiprintf_r+0x156>
 8007560:	9105      	str	r1, [sp, #20]
 8007562:	e7c4      	b.n	80074ee <_vfiprintf_r+0x156>
 8007564:	fb0c 2101 	mla	r1, ip, r1, r2
 8007568:	4604      	mov	r4, r0
 800756a:	2301      	movs	r3, #1
 800756c:	e7f0      	b.n	8007550 <_vfiprintf_r+0x1b8>
 800756e:	ab03      	add	r3, sp, #12
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	462a      	mov	r2, r5
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <_vfiprintf_r+0x228>)
 8007576:	a904      	add	r1, sp, #16
 8007578:	4630      	mov	r0, r6
 800757a:	f7fd fdd1 	bl	8005120 <_printf_float>
 800757e:	4607      	mov	r7, r0
 8007580:	1c78      	adds	r0, r7, #1
 8007582:	d1d6      	bne.n	8007532 <_vfiprintf_r+0x19a>
 8007584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x1fe>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x1fe>
 8007590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007592:	f7fe fc05 	bl	8005da0 <__retarget_lock_release_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	f53f af1f 	bmi.w	80073dc <_vfiprintf_r+0x44>
 800759e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075a0:	e71e      	b.n	80073e0 <_vfiprintf_r+0x48>
 80075a2:	ab03      	add	r3, sp, #12
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <_vfiprintf_r+0x228>)
 80075aa:	a904      	add	r1, sp, #16
 80075ac:	4630      	mov	r0, r6
 80075ae:	f7fe f84f 	bl	8005650 <_printf_i>
 80075b2:	e7e4      	b.n	800757e <_vfiprintf_r+0x1e6>
 80075b4:	08007cc8 	.word	0x08007cc8
 80075b8:	08007cd2 	.word	0x08007cd2
 80075bc:	08005121 	.word	0x08005121
 80075c0:	08007373 	.word	0x08007373
 80075c4:	08007cce 	.word	0x08007cce

080075c8 <__sflush_r>:
 80075c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	0716      	lsls	r6, r2, #28
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	d454      	bmi.n	8007682 <__sflush_r+0xba>
 80075d8:	684b      	ldr	r3, [r1, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc02      	bgt.n	80075e4 <__sflush_r+0x1c>
 80075de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd48      	ble.n	8007676 <__sflush_r+0xae>
 80075e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	d045      	beq.n	8007676 <__sflush_r+0xae>
 80075ea:	2300      	movs	r3, #0
 80075ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075f0:	682f      	ldr	r7, [r5, #0]
 80075f2:	6a21      	ldr	r1, [r4, #32]
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	d030      	beq.n	800765a <__sflush_r+0x92>
 80075f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	0759      	lsls	r1, r3, #29
 80075fe:	d505      	bpl.n	800760c <__sflush_r+0x44>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007606:	b10b      	cbz	r3, 800760c <__sflush_r+0x44>
 8007608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007610:	6a21      	ldr	r1, [r4, #32]
 8007612:	4628      	mov	r0, r5
 8007614:	47b0      	blx	r6
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	d106      	bne.n	800762a <__sflush_r+0x62>
 800761c:	6829      	ldr	r1, [r5, #0]
 800761e:	291d      	cmp	r1, #29
 8007620:	d82b      	bhi.n	800767a <__sflush_r+0xb2>
 8007622:	4a2a      	ldr	r2, [pc, #168]	@ (80076cc <__sflush_r+0x104>)
 8007624:	410a      	asrs	r2, r1
 8007626:	07d6      	lsls	r6, r2, #31
 8007628:	d427      	bmi.n	800767a <__sflush_r+0xb2>
 800762a:	2200      	movs	r2, #0
 800762c:	6062      	str	r2, [r4, #4]
 800762e:	04d9      	lsls	r1, r3, #19
 8007630:	6922      	ldr	r2, [r4, #16]
 8007632:	6022      	str	r2, [r4, #0]
 8007634:	d504      	bpl.n	8007640 <__sflush_r+0x78>
 8007636:	1c42      	adds	r2, r0, #1
 8007638:	d101      	bne.n	800763e <__sflush_r+0x76>
 800763a:	682b      	ldr	r3, [r5, #0]
 800763c:	b903      	cbnz	r3, 8007640 <__sflush_r+0x78>
 800763e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007642:	602f      	str	r7, [r5, #0]
 8007644:	b1b9      	cbz	r1, 8007676 <__sflush_r+0xae>
 8007646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800764a:	4299      	cmp	r1, r3
 800764c:	d002      	beq.n	8007654 <__sflush_r+0x8c>
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff f9f6 	bl	8006a40 <_free_r>
 8007654:	2300      	movs	r3, #0
 8007656:	6363      	str	r3, [r4, #52]	@ 0x34
 8007658:	e00d      	b.n	8007676 <__sflush_r+0xae>
 800765a:	2301      	movs	r3, #1
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	4602      	mov	r2, r0
 8007662:	1c50      	adds	r0, r2, #1
 8007664:	d1c9      	bne.n	80075fa <__sflush_r+0x32>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0c6      	beq.n	80075fa <__sflush_r+0x32>
 800766c:	2b1d      	cmp	r3, #29
 800766e:	d001      	beq.n	8007674 <__sflush_r+0xac>
 8007670:	2b16      	cmp	r3, #22
 8007672:	d11e      	bne.n	80076b2 <__sflush_r+0xea>
 8007674:	602f      	str	r7, [r5, #0]
 8007676:	2000      	movs	r0, #0
 8007678:	e022      	b.n	80076c0 <__sflush_r+0xf8>
 800767a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800767e:	b21b      	sxth	r3, r3
 8007680:	e01b      	b.n	80076ba <__sflush_r+0xf2>
 8007682:	690f      	ldr	r7, [r1, #16]
 8007684:	2f00      	cmp	r7, #0
 8007686:	d0f6      	beq.n	8007676 <__sflush_r+0xae>
 8007688:	0793      	lsls	r3, r2, #30
 800768a:	680e      	ldr	r6, [r1, #0]
 800768c:	bf08      	it	eq
 800768e:	694b      	ldreq	r3, [r1, #20]
 8007690:	600f      	str	r7, [r1, #0]
 8007692:	bf18      	it	ne
 8007694:	2300      	movne	r3, #0
 8007696:	eba6 0807 	sub.w	r8, r6, r7
 800769a:	608b      	str	r3, [r1, #8]
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	dde9      	ble.n	8007676 <__sflush_r+0xae>
 80076a2:	6a21      	ldr	r1, [r4, #32]
 80076a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076a6:	4643      	mov	r3, r8
 80076a8:	463a      	mov	r2, r7
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b0      	blx	r6
 80076ae:	2800      	cmp	r0, #0
 80076b0:	dc08      	bgt.n	80076c4 <__sflush_r+0xfc>
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ba:	81a3      	strh	r3, [r4, #12]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c4:	4407      	add	r7, r0
 80076c6:	eba8 0800 	sub.w	r8, r8, r0
 80076ca:	e7e7      	b.n	800769c <__sflush_r+0xd4>
 80076cc:	dfbffffe 	.word	0xdfbffffe

080076d0 <_fflush_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	690b      	ldr	r3, [r1, #16]
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b913      	cbnz	r3, 80076e0 <_fflush_r+0x10>
 80076da:	2500      	movs	r5, #0
 80076dc:	4628      	mov	r0, r5
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	b118      	cbz	r0, 80076ea <_fflush_r+0x1a>
 80076e2:	6a03      	ldr	r3, [r0, #32]
 80076e4:	b90b      	cbnz	r3, 80076ea <_fflush_r+0x1a>
 80076e6:	f7fe f95f 	bl	80059a8 <__sinit>
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f3      	beq.n	80076da <_fflush_r+0xa>
 80076f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076f4:	07d0      	lsls	r0, r2, #31
 80076f6:	d404      	bmi.n	8007702 <_fflush_r+0x32>
 80076f8:	0599      	lsls	r1, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_fflush_r+0x32>
 80076fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fe:	f7fe fb4e 	bl	8005d9e <__retarget_lock_acquire_recursive>
 8007702:	4628      	mov	r0, r5
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff ff5f 	bl	80075c8 <__sflush_r>
 800770a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800770c:	07da      	lsls	r2, r3, #31
 800770e:	4605      	mov	r5, r0
 8007710:	d4e4      	bmi.n	80076dc <_fflush_r+0xc>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d4e1      	bmi.n	80076dc <_fflush_r+0xc>
 8007718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800771a:	f7fe fb41 	bl	8005da0 <__retarget_lock_release_recursive>
 800771e:	e7dd      	b.n	80076dc <_fflush_r+0xc>

08007720 <__swhatbuf_r>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	2900      	cmp	r1, #0
 800772a:	b096      	sub	sp, #88	@ 0x58
 800772c:	4615      	mov	r5, r2
 800772e:	461e      	mov	r6, r3
 8007730:	da0d      	bge.n	800774e <__swhatbuf_r+0x2e>
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	bf14      	ite	ne
 800773e:	2340      	movne	r3, #64	@ 0x40
 8007740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007744:	2000      	movs	r0, #0
 8007746:	6031      	str	r1, [r6, #0]
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	b016      	add	sp, #88	@ 0x58
 800774c:	bd70      	pop	{r4, r5, r6, pc}
 800774e:	466a      	mov	r2, sp
 8007750:	f000 f848 	bl	80077e4 <_fstat_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	dbec      	blt.n	8007732 <__swhatbuf_r+0x12>
 8007758:	9901      	ldr	r1, [sp, #4]
 800775a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800775e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007762:	4259      	negs	r1, r3
 8007764:	4159      	adcs	r1, r3
 8007766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800776a:	e7eb      	b.n	8007744 <__swhatbuf_r+0x24>

0800776c <__smakebuf_r>:
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007770:	079d      	lsls	r5, r3, #30
 8007772:	4606      	mov	r6, r0
 8007774:	460c      	mov	r4, r1
 8007776:	d507      	bpl.n	8007788 <__smakebuf_r+0x1c>
 8007778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	2301      	movs	r3, #1
 8007782:	6163      	str	r3, [r4, #20]
 8007784:	b003      	add	sp, #12
 8007786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007788:	ab01      	add	r3, sp, #4
 800778a:	466a      	mov	r2, sp
 800778c:	f7ff ffc8 	bl	8007720 <__swhatbuf_r>
 8007790:	9f00      	ldr	r7, [sp, #0]
 8007792:	4605      	mov	r5, r0
 8007794:	4639      	mov	r1, r7
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff f9c6 	bl	8006b28 <_malloc_r>
 800779c:	b948      	cbnz	r0, 80077b2 <__smakebuf_r+0x46>
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	059a      	lsls	r2, r3, #22
 80077a4:	d4ee      	bmi.n	8007784 <__smakebuf_r+0x18>
 80077a6:	f023 0303 	bic.w	r3, r3, #3
 80077aa:	f043 0302 	orr.w	r3, r3, #2
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	e7e2      	b.n	8007778 <__smakebuf_r+0xc>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	6020      	str	r0, [r4, #0]
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077c2:	b15b      	cbz	r3, 80077dc <__smakebuf_r+0x70>
 80077c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f81d 	bl	8007808 <_isatty_r>
 80077ce:	b128      	cbz	r0, 80077dc <__smakebuf_r+0x70>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f023 0303 	bic.w	r3, r3, #3
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	431d      	orrs	r5, r3
 80077e0:	81a5      	strh	r5, [r4, #12]
 80077e2:	e7cf      	b.n	8007784 <__smakebuf_r+0x18>

080077e4 <_fstat_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	@ (8007804 <_fstat_r+0x20>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	f7fd fa76 	bl	8004ce2 <_fstat>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d102      	bne.n	8007800 <_fstat_r+0x1c>
 80077fa:	682b      	ldr	r3, [r5, #0]
 80077fc:	b103      	cbz	r3, 8007800 <_fstat_r+0x1c>
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	bd38      	pop	{r3, r4, r5, pc}
 8007802:	bf00      	nop
 8007804:	20000490 	.word	0x20000490

08007808 <_isatty_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d06      	ldr	r5, [pc, #24]	@ (8007824 <_isatty_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7fd fbc8 	bl	8004fa8 <_isatty>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_isatty_r+0x1a>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_isatty_r+0x1a>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000490 	.word	0x20000490

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	@ (8007844 <_sbrk_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7fa f8fc 	bl	8001a30 <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20000490 	.word	0x20000490

08007848 <memcpy>:
 8007848:	440a      	add	r2, r1
 800784a:	4291      	cmp	r1, r2
 800784c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007850:	d100      	bne.n	8007854 <memcpy+0xc>
 8007852:	4770      	bx	lr
 8007854:	b510      	push	{r4, lr}
 8007856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800785a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800785e:	4291      	cmp	r1, r2
 8007860:	d1f9      	bne.n	8007856 <memcpy+0xe>
 8007862:	bd10      	pop	{r4, pc}

08007864 <__assert_func>:
 8007864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007866:	4614      	mov	r4, r2
 8007868:	461a      	mov	r2, r3
 800786a:	4b09      	ldr	r3, [pc, #36]	@ (8007890 <__assert_func+0x2c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4605      	mov	r5, r0
 8007870:	68d8      	ldr	r0, [r3, #12]
 8007872:	b954      	cbnz	r4, 800788a <__assert_func+0x26>
 8007874:	4b07      	ldr	r3, [pc, #28]	@ (8007894 <__assert_func+0x30>)
 8007876:	461c      	mov	r4, r3
 8007878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800787c:	9100      	str	r1, [sp, #0]
 800787e:	462b      	mov	r3, r5
 8007880:	4905      	ldr	r1, [pc, #20]	@ (8007898 <__assert_func+0x34>)
 8007882:	f000 f841 	bl	8007908 <fiprintf>
 8007886:	f000 f851 	bl	800792c <abort>
 800788a:	4b04      	ldr	r3, [pc, #16]	@ (800789c <__assert_func+0x38>)
 800788c:	e7f4      	b.n	8007878 <__assert_func+0x14>
 800788e:	bf00      	nop
 8007890:	20000020 	.word	0x20000020
 8007894:	08007d1e 	.word	0x08007d1e
 8007898:	08007cf0 	.word	0x08007cf0
 800789c:	08007ce3 	.word	0x08007ce3

080078a0 <_calloc_r>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	fba1 5402 	umull	r5, r4, r1, r2
 80078a6:	b93c      	cbnz	r4, 80078b8 <_calloc_r+0x18>
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7ff f93d 	bl	8006b28 <_malloc_r>
 80078ae:	4606      	mov	r6, r0
 80078b0:	b928      	cbnz	r0, 80078be <_calloc_r+0x1e>
 80078b2:	2600      	movs	r6, #0
 80078b4:	4630      	mov	r0, r6
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	220c      	movs	r2, #12
 80078ba:	6002      	str	r2, [r0, #0]
 80078bc:	e7f9      	b.n	80078b2 <_calloc_r+0x12>
 80078be:	462a      	mov	r2, r5
 80078c0:	4621      	mov	r1, r4
 80078c2:	f7fe f9ef 	bl	8005ca4 <memset>
 80078c6:	e7f5      	b.n	80078b4 <_calloc_r+0x14>

080078c8 <__ascii_mbtowc>:
 80078c8:	b082      	sub	sp, #8
 80078ca:	b901      	cbnz	r1, 80078ce <__ascii_mbtowc+0x6>
 80078cc:	a901      	add	r1, sp, #4
 80078ce:	b142      	cbz	r2, 80078e2 <__ascii_mbtowc+0x1a>
 80078d0:	b14b      	cbz	r3, 80078e6 <__ascii_mbtowc+0x1e>
 80078d2:	7813      	ldrb	r3, [r2, #0]
 80078d4:	600b      	str	r3, [r1, #0]
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	1e10      	subs	r0, r2, #0
 80078da:	bf18      	it	ne
 80078dc:	2001      	movne	r0, #1
 80078de:	b002      	add	sp, #8
 80078e0:	4770      	bx	lr
 80078e2:	4610      	mov	r0, r2
 80078e4:	e7fb      	b.n	80078de <__ascii_mbtowc+0x16>
 80078e6:	f06f 0001 	mvn.w	r0, #1
 80078ea:	e7f8      	b.n	80078de <__ascii_mbtowc+0x16>

080078ec <__ascii_wctomb>:
 80078ec:	4603      	mov	r3, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	b141      	cbz	r1, 8007904 <__ascii_wctomb+0x18>
 80078f2:	2aff      	cmp	r2, #255	@ 0xff
 80078f4:	d904      	bls.n	8007900 <__ascii_wctomb+0x14>
 80078f6:	228a      	movs	r2, #138	@ 0x8a
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	f04f 30ff 	mov.w	r0, #4294967295
 80078fe:	4770      	bx	lr
 8007900:	700a      	strb	r2, [r1, #0]
 8007902:	2001      	movs	r0, #1
 8007904:	4770      	bx	lr
	...

08007908 <fiprintf>:
 8007908:	b40e      	push	{r1, r2, r3}
 800790a:	b503      	push	{r0, r1, lr}
 800790c:	4601      	mov	r1, r0
 800790e:	ab03      	add	r3, sp, #12
 8007910:	4805      	ldr	r0, [pc, #20]	@ (8007928 <fiprintf+0x20>)
 8007912:	f853 2b04 	ldr.w	r2, [r3], #4
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	f7ff fd3d 	bl	8007398 <_vfiprintf_r>
 800791e:	b002      	add	sp, #8
 8007920:	f85d eb04 	ldr.w	lr, [sp], #4
 8007924:	b003      	add	sp, #12
 8007926:	4770      	bx	lr
 8007928:	20000020 	.word	0x20000020

0800792c <abort>:
 800792c:	b508      	push	{r3, lr}
 800792e:	2006      	movs	r0, #6
 8007930:	f000 f82c 	bl	800798c <raise>
 8007934:	2001      	movs	r0, #1
 8007936:	f000 f84d 	bl	80079d4 <_exit>

0800793a <_raise_r>:
 800793a:	291f      	cmp	r1, #31
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4605      	mov	r5, r0
 8007940:	460c      	mov	r4, r1
 8007942:	d904      	bls.n	800794e <_raise_r+0x14>
 8007944:	2316      	movs	r3, #22
 8007946:	6003      	str	r3, [r0, #0]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	bd38      	pop	{r3, r4, r5, pc}
 800794e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007950:	b112      	cbz	r2, 8007958 <_raise_r+0x1e>
 8007952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007956:	b94b      	cbnz	r3, 800796c <_raise_r+0x32>
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f831 	bl	80079c0 <_getpid_r>
 800795e:	4622      	mov	r2, r4
 8007960:	4601      	mov	r1, r0
 8007962:	4628      	mov	r0, r5
 8007964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007968:	f000 b818 	b.w	800799c <_kill_r>
 800796c:	2b01      	cmp	r3, #1
 800796e:	d00a      	beq.n	8007986 <_raise_r+0x4c>
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	d103      	bne.n	800797c <_raise_r+0x42>
 8007974:	2316      	movs	r3, #22
 8007976:	6003      	str	r3, [r0, #0]
 8007978:	2001      	movs	r0, #1
 800797a:	e7e7      	b.n	800794c <_raise_r+0x12>
 800797c:	2100      	movs	r1, #0
 800797e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007982:	4620      	mov	r0, r4
 8007984:	4798      	blx	r3
 8007986:	2000      	movs	r0, #0
 8007988:	e7e0      	b.n	800794c <_raise_r+0x12>
	...

0800798c <raise>:
 800798c:	4b02      	ldr	r3, [pc, #8]	@ (8007998 <raise+0xc>)
 800798e:	4601      	mov	r1, r0
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	f7ff bfd2 	b.w	800793a <_raise_r>
 8007996:	bf00      	nop
 8007998:	20000020 	.word	0x20000020

0800799c <_kill_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d07      	ldr	r5, [pc, #28]	@ (80079bc <_kill_r+0x20>)
 80079a0:	2300      	movs	r3, #0
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	4611      	mov	r1, r2
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	f000 f80b 	bl	80079c4 <_kill>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	d102      	bne.n	80079b8 <_kill_r+0x1c>
 80079b2:	682b      	ldr	r3, [r5, #0]
 80079b4:	b103      	cbz	r3, 80079b8 <_kill_r+0x1c>
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	bd38      	pop	{r3, r4, r5, pc}
 80079ba:	bf00      	nop
 80079bc:	20000490 	.word	0x20000490

080079c0 <_getpid_r>:
 80079c0:	f7fd b96c 	b.w	8004c9c <_getpid>

080079c4 <_kill>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	@ (80079d0 <_kill+0xc>)
 80079c6:	2258      	movs	r2, #88	@ 0x58
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295
 80079ce:	4770      	bx	lr
 80079d0:	20000490 	.word	0x20000490

080079d4 <_exit>:
 80079d4:	e7fe      	b.n	80079d4 <_exit>
	...

080079d8 <_init>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr

080079e4 <_fini>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr
